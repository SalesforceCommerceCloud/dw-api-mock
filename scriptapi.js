/**
 * @namespace
 */
var dw = {};

/**
 * @namespace
 */
dw.ocapi = {};

/**
 * @namespace
 */
dw.ocapi.data = {};

/**
 * @namespace
 */
dw.ocapi.shop = {};

/**
 * @namespace
 */
dw.campaign = {};
/**
 * Superclass of all specific discount classes.
 * @class
 * @extends Object
 * @abstract
 */
dw.campaign.Discount = function() {};
dw.campaign.Discount.prototype = new Object();
/**
 * @namespace
 */
dw.catalog = {};


/**
 * Common search model base class.
 * @class
 * @extends Object
 * @abstract
 */
dw.catalog.SearchModel = function() {};
dw.catalog.SearchModel.prototype = new Object();


/**
 * Common search refinements base class.
 * @class
 * @extends Object
 * @abstract
 */
dw.catalog.SearchRefinements = function() {};
dw.catalog.SearchRefinements.prototype = new Object();

/**
 * Represents the value of a product or content search refinement.
 * @class
 * @extends Object
 * @abstract
 */
dw.catalog.SearchRefinementValue = function() {};
dw.catalog.SearchRefinementValue.prototype = new Object();

/**
 * @namespace
 */
dw.content = {};

/**
 * @namespace
 */
dw.crypto = {};

/**
 * @namespace
 */
dw.customer = {};


/**
 * @namespace
 */
dw.io = {};

/**
 * Creates a reader from a string.
 * @class
 * @extends Object
 * @param {String} source - the source string.
 */
dw.io.Reader = function(source) {};
dw.io.Reader.prototype = new Object();

/**
 * Create a reader from a stream using the specified character encoding.
 * @class
 * @extends Object
 * @param {dw.io.InputStream} stream - the input stream to use.
 * @param {String} encoding - the encoding to use.
 */
dw.io.Reader = function(stream, encoding) {};
dw.io.Reader.prototype = new Object();

/**
 * Create a writer from a stream using UTF-8 character encoding.
 * @class
 * @extends Object
 * @param {dw.io.OutputStream} stream - the output stream to use when creating the writer.
 */
dw.io.Writer = function(stream) {};
dw.io.Writer.prototype = new Object();

/**
 * Create a writer from a stream using the specified character encoding.
 * @class
 * @extends Object
 * @param {dw.io.OutputStream} stream - the output stream to use when creating the writer.
 * @param {String} encoding - the encoding to use when creating the writer.
 */
dw.io.Writer = function(stream, encoding) {};
dw.io.Writer.prototype = new Object();


/**
 * Constructs the XMLStreamWriter for a writer.
 * @class
 * @extends Object
 * @param {dw.io.Writer} writer - the writer for which the XMLStreamWriter is constructed.
 */
dw.io.XMLStreamWriter = function(writer) {};
dw.io.XMLStreamWriter.prototype = new Object();

/**
 * @namespace
 */
dw.net = {};

/**
 * @namespace
 */
dw.object = {};
/**
 * Common base class for all objects in the Demandware system that have an
 identity and can be stored and retrieved.  Each entity is identified by
 a unique universal identifier (a UUID).
 * @class
 * @extends Object
 */

dw.object.PersistentObject = function() {};
dw.object.PersistentObject.prototype = new Object();


/**
 * Base class for all persistent business objects in the Demandware system that
 are customizable through the metadata system. All objects in the Demandware
 system that have custom attributes derive from ExtensibleObject including
 both system-defined and custom objects. The describe() method provides access
 to the related object-type metadata. The method getCustom() is the central
 point to retrieve and store the objects attribute values themselves.
 * @class
 * @extends dw.object.PersistentObject
 */
dw.object.ExtensibleObject = function() {};
dw.object.ExtensibleObject.prototype = new dw.object.PersistentObject();


/**
 * @namespace
 */
dw.order = {};

/**
 * A container for line items, such as ProductLineItems, CouponLineItems,
 GiftCertificateLineItems. This container also provides access to shipments,
 shipping adjustments (promotions), and payment instruments (credit cards).
 <p/>
 LineItemCtnr also contains a set of methods for creating line items and
 adjustments, and for accessing various price values.
 There are three types of price-related methods:
 <p/>
 <ul>
 <li><u>Net-based</u> methods represent the amount of a category <b>before tax has been
 calculated</b>. For example, the getMerchandizeTotalNetPrice() returns the price
 of all merchandise in the container whereas getShippingTotalNetPrice() returns
 the price of all shipments in the container.</li>
 <li><u>Tax-based</u> methods return the amount of tax on a category. For example, the
 getMerchandizeTotalTax() returns the total tax for all merchandise and the
 getShippingTotalTax() returns the tax applied to all shipments.</li>
 <li><u>Gross-based</u> methods represent the amount of a category <b>after tax has been
 calculated</b>. For example, the getMerchandizeTotalGrossPrice() returns the price
 of all merchandise in the container, including tax on the merchandise,
 whereas getShippingTotalGrossPrice() returns
 the price of all shipments in the container, including tax on the shipments in
 the container.</li>
 </ul>
 There are also a set of methods that provide access to 'adjusted' values. The
 adjusted-based methods return values where promotions have been applied. For
 example, the getAdjustedMerchandizeTotalNetPrice() method returns the net price
 of all merchandise after product-level and order-level promotions have been
 applied. Whereas the getAdjustedMerchandizeTotalGrossPrice() method returns
 the price of all merchandise after product-level and order-level promotions
 have been applied and includes the amount of merchandise-related tax.
 <p/>
 Finally, there are a set of methods that return the aggregate values
 representing the line items in the container. These are the total-based
 methods getTotalNetPrice(), getTotalTax() and getTotalGrossPrice(). These
 methods return the totals of all items in the container and include any
 order-level promotions.<p/>

 Note that all merchandise-related methods do not include 'gift certificates'
 values in the values they return. Gift certificates are not considered merchandise
 as they do not represent a product.<p/>
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.LineItemCtnr = function() {};
dw.order.LineItemCtnr.prototype = new dw.object.ExtensibleObject();

/**
 * Common line item base class.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.LineItem = function() {};
dw.order.LineItem.prototype = new dw.object.ExtensibleObject();

/**
 * Defines a API base class for classes containing
 encrypted attributes like credit cards.
 <p/>
 <b>Note:</b> this method handles sensitive financial and card holder data.
 Pay special attention to PCI DSS v3. requirements 1, 3, 7, and 9.
 * @class
 * @extends dw.object.ExtensibleObject
 * @abstract
 */
dw.customer.EncryptedObject = function() {};
dw.customer.EncryptedObject.prototype = new dw.object.ExtensibleObject();

/**
 * Represents the active data for an object in the Demandware framework.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.object.ActiveData = function() {};
dw.object.ActiveData.prototype = new dw.object.ExtensibleObject();

/**
 * Common search refinement definition base class.
 * @class
 * @extends dw.object.ExtensibleObject
 * @abstract
 */
dw.catalog.SearchRefinementDefinition = function() {};
dw.catalog.SearchRefinementDefinition.prototype = new dw.object.ExtensibleObject();

/**
 * @namespace
 */
dw.ocapi.data.content = {};

/**
 * @namespace
 */
dw.ocapi.data.customer = {};

/**
 * @namespace
 */
dw.ocapi.data.object = {};

/**
 * @namespace
 */
dw.ocapi.shop.account = {};

/**
 * @namespace
 */
dw.ocapi.shop.basket = {};

/**
 * @namespace
 */
dw.ocapi.shop.order = {};

/**
 * @namespace
 */
dw.oms = {};

/**
 * Base class for payment instrument either stored in the customers profile
 or related to an order. A payment instrument can be credit card
 or bank transfer. The object defines standard methods for credit card
 payment, and can be extended by attributes appropriate for other
 payment methods.
 <p/>
 <b>Note:</b> this class handles sensitive financial and card holder data.
 Pay special attention to PCI DSS v3. requirements 1, 3, 7, and 9.
 * @class
 * @extends dw.customer.EncryptedObject
 * @abstract
 */
dw.order.PaymentInstrument = function() {};
dw.order.PaymentInstrument.prototype = new dw.customer.EncryptedObject();

/**
 * @namespace
 */
dw.order.hooks = {};

/**
 * @namespace
 */
dw.rpc = {};

/**
 * @namespace
 */
dw.suggest = {};


/**
 * This is the base class for suggestions containers.
 For each type of items, a sub class provides methods to
 access the actual items.
 <p/>
 See the sub classes for more specific information.
 * @class
 * @extends Object
 * @abstract
 */
dw.suggest.Suggestions = function() {};
dw.suggest.Suggestions.prototype = new Object();

/**
 * @namespace
 */
dw.svc = {};

/**
 * Base class of Services.
 <p>
 A service represents a call-specific configuration. Configurations are inherited from a shared
 <a href="class_dw_svc_ServiceDefinition.html">ServiceDefinition</a>, and can be overridden for specific calls on the service.
 * @class
 * @extends Object
 * @abstract
 */
dw.svc.Service = function() {};
dw.svc.Service.prototype = new Object();

/**
 * Base class of Service Definitions.
 <p>
 A service definition represents configuration that is shared across all <a href="class_dw_svc_Service.html">Service</a> instances.
 * @class
 * @extends Object
 * @abstract
 */
dw.svc.ServiceDefinition = function() {};
dw.svc.ServiceDefinition.prototype = new Object();


/**
 * Represents an HTTP Service.
 * @class
 * @extends dw.svc.Service
 */
dw.svc.HTTPService = function() {};
dw.svc.HTTPService.prototype = new dw.svc.Service();

/**
 * Represents an HTTP Service Definition.
 * @class
 * @extends dw.svc.ServiceDefinition
 */
dw.svc.HTTPServiceDefinition = function() {};
dw.svc.HTTPServiceDefinition.prototype = new dw.svc.ServiceDefinition();

/**
 * @namespace
 */
dw.system = {};

/**
 * @namespace
 */
dw.util = {};

/**
 * Represents a collection of objects.
 * @class
 * @extends Object
 */
dw.util.Collection = function() {};
dw.util.Collection.prototype = new Object();

/**
 * An ordered collection of objects. The user of a List has precise control over
 where in the list each element is inserted. The user can access elements by
 their integer index (position in the list), and search for elements in the
 list. Lists are zero based similar to arrays. Unlike sets, lists allow
 duplicate elements.
 * @class
 * @extends dw.util.Collection
 */
dw.util.List = function() {};
dw.util.List.prototype = new dw.util.Collection();

/**
 * Represents a Map of objects.
 * @class
 * @extends Object
 */
dw.util.Map = function() {};
dw.util.Map.prototype = new Object();


/**
 * Represents a set of objects.
 * @class
 * @extends dw.util.Collection
 */
dw.util.Set = function() {};
dw.util.Set.prototype = new dw.util.Collection();


/**
 * @namespace
 */
dw.value = {};

/**
 * @namespace
 */
dw.web = {};


/**
 * Represents a form element.
 * @class
 * @extends Object
 */
dw.web.FormElement = function() {};
dw.web.FormElement.prototype = new Object();

/**
 * The class is the central class within the whole form handling. It is
 the container element for fields and other form elements. A form group
 can contain other forms, also called sub-forms.

 Access to the elements of a form is provided via an index based access or
 via an associative array access. For example, the field "firstname" can be accessed
 with the expression "myform.firstname".
 * @class
 * @extends dw.web.FormElement
 */
dw.web.FormGroup = function() {};
dw.web.FormGroup.prototype = new dw.web.FormElement();

/**
 * @namespace
 */
dw.ws = {};



/**
 * Object representing an AB-test in the Demandware system.
 <p/>
 AB-tests provide the merchant the ability to compare one set of storefront
 "experiences" - promotions, sorting rules, and slot configurations in
 particular - against another set. The merchant configures different AB-test
 segments which define the sets of experiences that the merchant wishes to
 test. AB-tests run for a configured period of time, and customers are
 randomly assigned by the platform to the test segments according to
 allocation percentages defined by the merchant.
 * @class
 * @extends dw.object.PersistentObject
 */
dw.campaign.ABTest = function() {};
dw.campaign.ABTest.prototype = new dw.object.PersistentObject();

/**
 * Get the test ID for this AB-test.
 * @memberOf dw.campaign.ABTest
 * @return {String} the test ID for this AB-test.
 */
dw.campaign.ABTest.prototype.getID = function() {};

/**
 *
 * @class
 * @extends Object
 */
dw.campaign.ABTestMgr = function() {};
dw.campaign.ABTestMgr.prototype = new Object();

/**
 * Return the AB-test segments to which the current customer is assigned.
 AB-test segments deleted in the meantime will not be returned.
 * @memberOf dw.campaign.ABTestMgr
 * @return {dw.util.Collection} unordered collection of ABTestSegment instances representing the          AB-test segments to which the current customer is assigned.
 * @static
 */
dw.campaign.ABTestMgr.getAssignedTestSegments = function() {};

/**
 * Test whether the current customer is a member of the specified AB-test
 segment. This method can be used to customize the storefront experience
 in ways that are not supported using Business Manager configuration
 alone.
 * @memberOf dw.campaign.ABTestMgr
 * @param {String} testID - The ID of the AB-test, must not be null.
 * @param {String} segmentID - The ID of the segment within the AB-test, must not be             null.
 * @return {Boolean} true if the current customer is a member of the specified AB-test          segment, false otherwise.
 * @static
 */
dw.campaign.ABTestMgr.isParticipant = function(testID, segmentID) {};

/**
 * Object representing an AB-test segment in the Demandware system.
 <p/>
 Each AB-test defines 1 or more segments to which customers are randomly
 assigned by the platform when they qualify for the AB-test. Customers are
 assigned to segments according to allocation percentages controlled by the
 merchant. Each AB-test segment defines a set of "experiences" that the
 merchant is testing and which which apply only to the customers in that
 segment.  There is always one "control" segment which contains only the
 default set of experiences for that site.
 * @class
 * @extends dw.object.PersistentObject
 */
dw.campaign.ABTestSegment = function() {};
dw.campaign.ABTestSegment.prototype = new dw.object.PersistentObject();

/**
 * Get the AB-test to which this segment belongs.
 * @memberOf dw.campaign.ABTestSegment
 * @return {dw.campaign.ABTest} the AB-test to which this segment belongs.
 */
dw.campaign.ABTestSegment.prototype.getABTest = function() {};

/**
 * Get the ID of the AB-test segment.
 * @memberOf dw.campaign.ABTestSegment
 * @return {String} the ID of the AB-test segment.
 */
dw.campaign.ABTestSegment.prototype.getID = function() {};

/**
 * Returns true if this is the "control segment" for the AB-test, meaning
 the segment that has no experiences associated with it.
 * @memberOf dw.campaign.ABTestSegment
 * @return {Boolean} true if this segment is the "control segment" for the AB-test, or          false otherwise.
 */
dw.campaign.ABTestSegment.prototype.isControlSegment = function() {};

/**
 * Create an amount-discount on the fly. Can be used to create a custom price adjustment.
 * @class
 * @extends dw.campaign.Discount
 * @param {Number} amount - amount off, e.g. 15.00 for a "15$ off" discount
 */
dw.campaign.AmountDiscount = function(amount) {};
dw.campaign.AmountDiscount.prototype = new dw.campaign.Discount();

/**
 * Returns the discount amount, for example 10.00 for a "$10 off" discount.
 * @memberOf dw.campaign.AmountDiscount
 * @return {Number} Discount amount
 */
dw.campaign.AmountDiscount.prototype.getAmount = function() {};

/**
 * Transient class representing a discount that a <a href="class_dw_order_LineItemCtnr.html">LineItemCtnr</a>
 "almost" qualifies for based on the amount of merchandise in it. Storefronts
 can display information about approaching discounts to customers in order to
 entice them to buy more merchandise.
 <p/>
 Approaching discounts are calculated on the basis of a
 <a href="class_dw_campaign_DiscountPlan.html">DiscountPlan</a> instead of a LineItemCtnr itself. When one
 of <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getDiscounts_LineItemCtnr_DetailAnchor">PromotionMgr.getDiscounts(LineItemCtnr)</a> or
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getDiscounts_LineItemCtnr_PromotionPlan_DetailAnchor">PromotionMgr.getDiscounts(LineItemCtnr, PromotionPlan)</a> is
 called, the promotions engine calculates the discounts the LineItemCtnr
 receives based on the promotions in context, and also tries to determine the
 discounts the LineItemCtnr would receive if additional merchandise were
 added. DiscountPlan provides different methods to retrieve this approaching
 discount info. Merchants can use these fine-grained methods to display
 information about approaching order discounts on the cart page, and
 approaching shipping discounts on the shipping method page during checkout,
 for example.
 <p/>
 The merchant may include or exclude individual promotions from being included
 in this list, and define distance thresholds when configuring their
 promotions.
 * @class
 * @extends Object
 */
dw.campaign.ApproachingDiscount = function() {};
dw.campaign.ApproachingDiscount.prototype = new Object();

/**
 * The amount of merchandise required in the cart in order to receive the
 discount. For an order promotion "Get 15% off orders of $100 or more",
 the condition threshold is $100.00.
 * @memberOf dw.campaign.ApproachingDiscount
 * @return {dw.value.Money} The amount of merchandise required in the cart in order to          receive the discount.
 */
dw.campaign.ApproachingDiscount.prototype.getConditionThreshold = function() {};

/**
 * The discount that the customer will receive if he adds more merchandise
 to the cart. For an order promotion "Get 15% off orders of $100 or more",
 the discount is a PercentageDiscount object.
 * @memberOf dw.campaign.ApproachingDiscount
 * @return {dw.campaign.Discount} The discount that the customer will receive if he adds more          merchandise to the cart.
 */
dw.campaign.ApproachingDiscount.prototype.getDiscount = function() {};

/**
 * Convenience method that returns
 <code>getConditionThreshold().subtract(getMerchandiseValue())</code>
 * @memberOf dw.campaign.ApproachingDiscount
 * @return {dw.value.Money} The amount of money needed to add to the order or shipment in          order to receive the discount.
 */
dw.campaign.ApproachingDiscount.prototype.getDistanceFromConditionThreshold = function() {};

/**
 * The amount of merchandise in the cart contributing towards the condition
 threshold. This will always be less than the condition threshold.
 * @memberOf dw.campaign.ApproachingDiscount
 * @return {dw.value.Money} The amount of merchandise in the cart contributing towards the          condition threshold.
 */
dw.campaign.ApproachingDiscount.prototype.getMerchandiseTotal = function() {};

/**
 * Represents a <i>choice of bonus products</i> discount in the discount plan,
 for example "Choose 3 DVDs from a list of 20 options with your purchase of
 any DVD player."
 * @class
 * @extends dw.campaign.Discount
 */
dw.campaign.BonusChoiceDiscount = function() {};
dw.campaign.BonusChoiceDiscount.prototype = new dw.campaign.Discount();

/**
 * Get the effective price for the passed bonus product. This is expected to
 be one of the products returned by <a href="class_dw_campaign_BonusChoiceDiscount.html#dw_campaign_BonusChoiceDiscount_getBonusProducts_DetailAnchor">getBonusProducts()</a> with one
 exception: If a master product is configured as a bonus product, this
 implies that a customer may choose from any of its variants. In this
 case, it is allowed to pass in a variant to this method and a price will
 be returned. If the passed product is not a valid bonus product, this
 method throws an exception.
 * @memberOf dw.campaign.BonusChoiceDiscount
 * @param {dw.catalog.Product} product - The bonus product to retrieve a price for, must not be             null.
 * @return {Number} The price of the passed bonus product as a Number.
 */
dw.campaign.BonusChoiceDiscount.prototype.getBonusProductPrice = function(product) {};

/**
 * Get the list of bonus products which the customer is allowed to choose
 from for this discount. This list is configured by a merchant entering a
 list of SKUs for the discount. Products which do not exist in the system,
 or are offline, or are not assigned to a category in the site catalog are
 filtered out. Unavailable (i.e. out-of-stock) products are NOT filtered
 out. This allows merchants to display out-of-stock bonus products with
 appropriate messaging.
 <p/>
 If a returned product is a master product, the customer is entitled to
 choose from any variant. If the product is an option product, the
 customer is entitled to choose any value for each option. Since the
 promotions engine does not touch the value of the product option line
 items, it is the responsibility of custom code to set option prices.
 * @memberOf dw.campaign.BonusChoiceDiscount
 * @return {dw.util.List} An ordered list of bonus products that the customer may choose          from for this discount.
 */
dw.campaign.BonusChoiceDiscount.prototype.getBonusProducts = function() {};

/**
 * Returns the maximum number of bonus items that a customer is entitled to
 select for this discount.
 * @memberOf dw.campaign.BonusChoiceDiscount
 * @return {Number} The maximum number of bonus items that this discount permits a          customer to select.
 */
dw.campaign.BonusChoiceDiscount.prototype.getMaxBonusItems = function() {};

/**
 * Represents a <i>bonus</i> discount in the discount plan, for example
 "Get a free DVD with your purchase of any DVD player."
 * @class
 * @extends dw.campaign.Discount
 */
dw.campaign.BonusDiscount = function() {};
dw.campaign.BonusDiscount.prototype = new dw.campaign.Discount();

/**
 * Returns the bonus products associated with this discount that are in
 stock, online and assigned to site catalog.
 * @memberOf dw.campaign.BonusDiscount
 * @return {dw.util.Collection} Collection of bonus products
 */
dw.campaign.BonusDiscount.prototype.getBonusProducts = function() {};

/**
 * A Campaign is a set of experiences (or site configurations) which may be
 deployed as a single unit for a given time frame.  The system currently
 supports 3 types of experience that may be assigned to a campaign:

 <ul>
 <li>Promotions</li>
 <li>Slot Configurations</li>
 <li>Sorting Rules</li>
 </ul>

 This list may be extended in the future.
 <p/>
 A campaign can have a start and end date or be open-ended.  It may also have
 "qualifiers" which determine which customers the campaign applies to.
 The currently supported qualifiers are:

 <ul>
 <li>Customer groups (where "Everyone" is a possible customer group)</li>
 <li>Source codes</li>
 <li>Coupons</li>
 </ul>
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.campaign.Campaign = function() {};
dw.campaign.Campaign.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the coupons assigned to the campaign.
 * @memberOf dw.campaign.Campaign
 * @return {dw.util.Collection} All coupons assigned to the campaign.
 */
dw.campaign.Campaign.prototype.getCoupons = function() {};

/**
 * Returns the customer groups assigned to the campaign.
 * @memberOf dw.campaign.Campaign
 * @return {dw.util.Collection} Customer groups assigned to campaign.
 */
dw.campaign.Campaign.prototype.getCustomerGroups = function() {};

/**
 * Returns the internal description of the campaign.
 * @memberOf dw.campaign.Campaign
 * @return {String} Internal description of campaign.
 */
dw.campaign.Campaign.prototype.getDescription = function() {};

/**
 * Returns the end date of the campaign. If no end date is defined for the
 campaign, null is returned. A campaign w/o end date will run forever.
 * @memberOf dw.campaign.Campaign
 * @return {Date} End date of campaign.
 */
dw.campaign.Campaign.prototype.getEndDate = function() {};

/**
 * Returns the unique campaign ID.
 * @memberOf dw.campaign.Campaign
 * @return {String} ID of the campaign.
 */
dw.campaign.Campaign.prototype.getID = function() {};

/**
 * Returns promotions defined in this campaign in no particular order.
 * @memberOf dw.campaign.Campaign
 * @return {dw.util.Collection} All promotions defined in campaign.
 */
dw.campaign.Campaign.prototype.getPromotions = function() {};

/**
 * Returns the source codes assigned to the campaign.
 * @memberOf dw.campaign.Campaign
 * @return {dw.util.Collection} All source code groups assigned to campaign.
 */
dw.campaign.Campaign.prototype.getSourceCodeGroups = function() {};

/**
 * Returns the start date of the campaign. If no start date is defined for the
 campaign, null is returned. A campaign w/o start date is immediately
 effective.
 * @memberOf dw.campaign.Campaign
 * @return {Date} Start date of campaign.
 */
dw.campaign.Campaign.prototype.getStartDate = function() {};

/**
 * Returns 'true' if the campaign is currently active, otherwise
 'false'. <br/>
 A campaign is active if it is enabled and scheduled for <i>now</i>.
 * @memberOf dw.campaign.Campaign
 * @return {Boolean} true of campaign is active, otherwise false.
 */
dw.campaign.Campaign.prototype.isActive = function() {};

/**
 * Returns true if campaign is enabled, otherwise false.
 * @memberOf dw.campaign.Campaign
 * @return {Boolean} true if campaign is enabled, otherwise false.
 */
dw.campaign.Campaign.prototype.isEnabled = function() {};

/**
 * CampaignMgr provides static methods for managing campaign-specific operations
 such as accessing promotions or updating promotion line items.
 * @class
 * @extends Object
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> instead.
 */
dw.campaign.CampaignMgr = function() {};
dw.campaign.CampaignMgr.prototype = new Object();

/**
 * This method has been deprecated and should not be used anymore.
 Instead, use <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> to apply promotions to
 line item containers.
 <p/>
 The method does nothing, since bonus promotions  are applied as product
 or order promotions using methods
 <a href="class_dw_campaign_CampaignMgr.html#dw_campaign_CampaignMgr_applyProductPromotions_LineItemCtnr_Collection_DetailAnchor">applyProductPromotions(LineItemCtnr, Collection)</a> and
 <a href="class_dw_campaign_CampaignMgr.html#dw_campaign_CampaignMgr_applyOrderPromotions_LineItemCtnr_Collection_DetailAnchor">applyOrderPromotions(LineItemCtnr, Collection)</a>.
 <p/>
 The method returns 'true' if any the line item container contains
 any bonus product line items, and otherwise false.
 * @memberOf dw.campaign.CampaignMgr
 * @param {dw.order.LineItemCtnr} lineItemCtnr - Basket or order
 * @param {dw.util.Collection} promotions - Parameter not used, can be null
 * @return {Boolean} True if line item container contains bonus product line items, else false
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> instead.
 * @static
 */
dw.campaign.CampaignMgr.applyBonusPromotions = function(lineItemCtnr, promotions) {};

/**
 * Applies the applicable order promotions in the specified collection to the
 specified line item container.
 <p/>
 This method has been deprecated and should not be used anymore.
 Instead, use <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> to apply promotions to
 line item containers.
 <p/>
 Note that the method does also apply any bonus discounts defined
 as order promotions (see also <a href="class_dw_campaign_CampaignMgr.html#dw_campaign_CampaignMgr_applyBonusPromotions_LineItemCtnr_Collection_DetailAnchor">applyBonusPromotions(LineItemCtnr, Collection)</a>).
 * @memberOf dw.campaign.CampaignMgr
 * @param {dw.order.LineItemCtnr} lineItemCtnr - basket or order
 * @param {dw.util.Collection} promotions - list of all promotions to be applied
 * @return {Boolean} true if changes were made to the line item container, false otherwise.
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a>
 * @static
 */
dw.campaign.CampaignMgr.applyOrderPromotions = function(lineItemCtnr, promotions) {};

/**
 * Applies all applicable product promotions in the specified collection to the
 specified line item container.
 <p/>
 This method has been deprecated and should not be used anymore.
 Instead, use <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> to apply promotions to
 line item containers.
 <p/>
 Note that the method does also apply any bonus discounts defined
 as product promotions (see also <a href="class_dw_campaign_CampaignMgr.html#dw_campaign_CampaignMgr_applyBonusPromotions_LineItemCtnr_Collection_DetailAnchor">applyBonusPromotions(LineItemCtnr, Collection)</a>).
 * @memberOf dw.campaign.CampaignMgr
 * @param {dw.order.LineItemCtnr} lineItemCtnr - basket or order
 * @param {dw.util.Collection} promotions - list of all promotions to be applied
 * @return {Boolean} true if changes were made to the line item container, false otherwise.
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a>
 * @static
 */
dw.campaign.CampaignMgr.applyProductPromotions = function(lineItemCtnr, promotions) {};

/**
 * Applies all applicable shipping promotions in the specified collection to
 the specified line item container.
 <p/>
 This method has been deprecated and should not be used anymore.
 Instead, use <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> to apply promotions to
 line item containers.
 * @memberOf dw.campaign.CampaignMgr
 * @param {dw.order.LineItemCtnr} lineItemCtnr - basket or order
 * @param {dw.util.Collection} promotions - list of all promotions to be applied
 * @return {Boolean} true if changes were made to the line item container, false otherwise.
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a>
 * @static
 */
dw.campaign.CampaignMgr.applyShippingPromotions = function(lineItemCtnr, promotions) {};

/**
 * Returns the enabled promotions of active campaigns applicable for the
 current customer and source code for which the specified product
 is a qualifiying product.
 <p/>
 As a replacement of this deprecated method, use
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">PromotionMgr.getActiveCustomerPromotions()</a> and
 <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>.
 Unlike <a href="class_dw_campaign_CampaignMgr.html#dw_campaign_CampaignMgr_getApplicableConditionalPromotions_Product_DetailAnchor">getApplicableConditionalPromotions(Product)</a>,
 <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>
 returns all promotions related to the specified product, regardless
 of whether the product is qualifying, discounted, or both, and
 also returns promotions where the product is a bonus product.
 * @memberOf dw.campaign.CampaignMgr
 * @param {dw.catalog.Product} product - Qualifying product
 * @return {dw.util.Collection} List of active promotions
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">PromotionMgr.getActiveCustomerPromotions()</a> and
                   <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>
 * @static
 */
dw.campaign.CampaignMgr.getApplicableConditionalPromotions = function(product) {};

/**
 * Returns the enabled promotions of active campaigns applicable for the
 current customer and source code.
 <p/>
 Note that this method does not return any coupon-based promotions.
 * @memberOf dw.campaign.CampaignMgr
 * @return {dw.util.Collection} List of active promotions
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">PromotionMgr.getActiveCustomerPromotions()</a> and
               <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getPromotions_DetailAnchor">PromotionPlan.getPromotions()</a>
 * @static
 */
dw.campaign.CampaignMgr.getApplicablePromotions = function() {};

/**
 * Returns the enabled promotions of active campaigns applicable for the
 current customer, source code and any coupon contained in the specified
 line item container.
 <p/>
 Note that although the method has been deprecated, no replacement
 method is provided.
 * @memberOf dw.campaign.CampaignMgr
 * @param {dw.order.LineItemCtnr} lineItemCtnr - the basket or order
 * @return {dw.util.Collection} list of all applicable promotion for the given basket or order
 * @deprecated There is no replacement for this method.
 * @static
 */
dw.campaign.CampaignMgr.getApplicablePromotions = function(lineItemCtnr) {};

/**
 * Returns the enabled promotions of active campaigns applicable for the
 current customer and source code for which the specified product is
 a discounted product.
 <p/>
 Note that this method does not return any coupon-based promotions.
 <p/>
 As a replacement of this deprecated method, use
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">PromotionMgr.getActiveCustomerPromotions()</a> and
 <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>.
 Unlike <a href="class_dw_campaign_CampaignMgr.html#dw_campaign_CampaignMgr_getApplicablePromotions_Product_DetailAnchor">getApplicablePromotions(Product)</a>,
 <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>
 returns all promotions related to the specified product, regardless
 of whether the product is qualifying, discounted, or both, and
 also returns promotions where the product is a bonus product.
 * @memberOf dw.campaign.CampaignMgr
 * @param {dw.catalog.Product} product - The product whose promotions are returned.
 * @return {dw.util.Collection} A list of promotions
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">PromotionMgr.getActiveCustomerPromotions()</a> and
                   <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>
 * @static
 */
dw.campaign.CampaignMgr.getApplicablePromotions = function(product) {};

/**
 * Returns the campaign identified by the specified ID.
 * @memberOf dw.campaign.CampaignMgr
 * @param {String} id - Campaign ID
 * @return {dw.campaign.Campaign} Campaign or null if not found
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getCampaign_String_DetailAnchor">PromotionMgr.getCampaign(String)</a>
 * @static
 */
dw.campaign.CampaignMgr.getCampaignByID = function(id) {};

/**
 * Returns the enabled promotions of active campaigns for which the
 specified product is a qualifiying product. <br/>
 Note that the method also returns coupon-based promotions.
 <p/>
 As a replacement of this deprecated method, use
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">PromotionMgr.getActiveCustomerPromotions()</a> and
 <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>.
 Unlike <a href="class_dw_campaign_CampaignMgr.html#dw_campaign_CampaignMgr_getConditionalPromotions_Product_DetailAnchor">getConditionalPromotions(Product)</a>,
 <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>
 returns all promotions related to the specified product, regardless
 of whether the product is qualifying, discounted, or both, and
 also returns promotions where the product is a bonus product.
 * @memberOf dw.campaign.CampaignMgr
 * @param {dw.catalog.Product} product - The product whose conditional promotions are returned.
 * @return {dw.util.Collection} A list of promotions
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActivePromotions_DetailAnchor">PromotionMgr.getActivePromotions()</a> and
                   <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>
 * @static
 */
dw.campaign.CampaignMgr.getConditionalPromotions = function(product) {};

/**
 * Returns the promotion associated with the specified coupon code.
 * @memberOf dw.campaign.CampaignMgr
 * @param {String} couponCode - The coupon code used to lookup the promotion
 * @return {dw.campaign.Promotion} The resolved promotion object or null if none was found
 * @deprecated Coupons are now related to multiple promotions. Method
                   returns the first promotion associated with the coupon
                   code in case of multiple assigned promotions.
 * @static
 */
dw.campaign.CampaignMgr.getPromotion = function(couponCode) {};

/**
 * Returns the promotion associated with the specified coupon code.
 * @memberOf dw.campaign.CampaignMgr
 * @param {String} couponCode - Coupon code
 * @return {dw.campaign.Promotion} The associated promotion or null
 * @deprecated Coupons are now related to multiple promotions. Method
                   returns the first promotion associated with the coupon
                   in case of multiple assigned promotions
 * @static
 */
dw.campaign.CampaignMgr.getPromotionByCouponCode = function(couponCode) {};

/**
 * Returns the promotion identified by the specified ID.
 * @memberOf dw.campaign.CampaignMgr
 * @param {String} id - Promotion ID
 * @return {dw.campaign.Promotion} Promotion or null if not found
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getPromotion_String_DetailAnchor">PromotionMgr.getPromotion(String)</a>
 * @static
 */
dw.campaign.CampaignMgr.getPromotionByID = function(id) {};

/**
 * Returns the enabled promotions of active campaigns for which the
 specified product is a discounted product. <br/>
 Note that method does only return promotions based on customer groups
 or source codes.
 <p/>
 As a replacement of this deprecated method, use
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">PromotionMgr.getActiveCustomerPromotions()</a> and
 <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>.
 Unlike <a href="class_dw_campaign_CampaignMgr.html#dw_campaign_CampaignMgr_getPromotions_Product_DetailAnchor">getPromotions(Product)</a>,
 <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>
 returns all promotions related to the specified product, regardless
 of whether the product is qualifying, discounted, or both, and
 also returns promotions where the product is a bonus product.
 * @memberOf dw.campaign.CampaignMgr
 * @param {dw.catalog.Product} product - Discounted product
 * @return {dw.util.Collection} List of promotions
 * @deprecated Use <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActivePromotions_DetailAnchor">PromotionMgr.getActivePromotions()</a> and
                   <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">PromotionPlan.getProductPromotions(Product)</a>
 * @static
 */
dw.campaign.CampaignMgr.getPromotions = function(product) {};

/**
 *
 * @class
 * @extends Object
 */
dw.campaign.CampaignStatusCodes = function() {};
dw.campaign.CampaignStatusCodes.prototype = new Object();

/**
 * Indicates that the coupon has already been applied to the basket.
 * @type String
 * @memberOf dw.campaign.CampaignStatusCodes
 * @deprecated Use <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_COUPON_CODE_ALREADY_IN_BASKET_DetailAnchor">CouponStatusCodes.COUPON_CODE_ALREADY_IN_BASKET</a>,
  <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_COUPON_ALREADY_IN_BASKET_DetailAnchor">CouponStatusCodes.COUPON_ALREADY_IN_BASKET</a> instead.
 * @static
 * @const
 */
dw.campaign.CampaignStatusCodes.COUPON_ALREADY_APPLIED = '';

/**
 * Indicates that the coupon has already been redeemed.
 * @type String
 * @memberOf dw.campaign.CampaignStatusCodes
 * @deprecated Use <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_COUPON_CODE_ALREADY_REDEEMED_DetailAnchor">CouponStatusCodes.COUPON_CODE_ALREADY_REDEEMED</a> instead.
 * @static
 * @const
 */
dw.campaign.CampaignStatusCodes.COUPON_ALREADY_REDEEMED = '';

/**
 * Indicates that the coupon is not currently redeemable.
 * @type String
 * @memberOf dw.campaign.CampaignStatusCodes
 * @deprecated Use <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_COUPON_DISABLED_DetailAnchor">CouponStatusCodes.COUPON_DISABLED</a>,
  <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_COUPON_CODE_UNKNOWN_DetailAnchor">CouponStatusCodes.COUPON_CODE_UNKNOWN</a>,
  <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_REDEMPTION_LIMIT_EXCEEDED_DetailAnchor">CouponStatusCodes.REDEMPTION_LIMIT_EXCEEDED</a>,
  <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_CUSTOMER_REDEMPTION_LIMIT_EXCEEDED_DetailAnchor">CouponStatusCodes.CUSTOMER_REDEMPTION_LIMIT_EXCEEDED</a>,
  <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_TIMEFRAME_REDEMPTION_LIMIT_EXCEEDED_DetailAnchor">CouponStatusCodes.TIMEFRAME_REDEMPTION_LIMIT_EXCEEDED</a> or
  <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_NO_APPLICABLE_PROMOTION_DetailAnchor">CouponStatusCodes.NO_APPLICABLE_PROMOTION</a>
 * @static
 * @const
 */
dw.campaign.CampaignStatusCodes.COUPON_NOT_REDEEMABLE = '';

/**
 * Indicates that the coupon code is not valid.
 * @type String
 * @memberOf dw.campaign.CampaignStatusCodes
 * @deprecated Use <a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_COUPON_CODE_UNKNOWN_DetailAnchor">CouponStatusCodes.COUPON_CODE_UNKNOWN</a> instead
 * @static
 * @const
 */
dw.campaign.CampaignStatusCodes.COUPON_UNKNOWN = '';

/**
 * Represents a coupon in the Demandware framework.
 * @class
 * @extends dw.object.PersistentObject
 */
dw.campaign.Coupon = function() {};
dw.campaign.Coupon.prototype = new dw.object.PersistentObject();

/**
 * Constant representing coupon type <i>multiple-codes</i>.
 * @type String
 * @memberOf dw.campaign.Coupon
 * @static
 * @const
 */
dw.campaign.Coupon.TYPE_MULTIPLE_CODES = '';

/**
 * Constant representing coupon type <i>single-code</i>.
 * @type String
 * @memberOf dw.campaign.Coupon
 * @static
 * @const
 */
dw.campaign.Coupon.TYPE_SINGLE_CODE = '';

/**
 * Constant representing coupon type <i>system-codes</i>.
 * @type String
 * @memberOf dw.campaign.Coupon
 * @static
 * @const
 */
dw.campaign.Coupon.TYPE_SYSTEM_CODES = '';

/**
 * Returns the prefix defined for coupons of type <a href="class_dw_campaign_Coupon.html#dw_campaign_Coupon_TYPE_SYSTEM_CODES_DetailAnchor">TYPE_SYSTEM_CODES</a>
 If no prefix is defined, or coupon is of type <a href="class_dw_campaign_Coupon.html#dw_campaign_Coupon_TYPE_SINGLE_CODE_DetailAnchor">TYPE_SINGLE_CODE</a>
 or <a href="class_dw_campaign_Coupon.html#dw_campaign_Coupon_TYPE_MULTIPLE_CODES_DetailAnchor">TYPE_MULTIPLE_CODES</a>, null is returned.
 * @memberOf dw.campaign.Coupon
 * @return {String} Coupon code prefix or null
 */
dw.campaign.Coupon.prototype.getCodePrefix = function() {};

/**
 * Returns the ID of the coupon.
 * @memberOf dw.campaign.Coupon
 * @return {String} Coupon ID
 */
dw.campaign.Coupon.prototype.getID = function() {};

/**
 * Returns the next unissued code of this coupon.
 For single-code coupons, the single fixed coupon code is returned.
 For all multi-code coupons, the next available, unissued coupon code is returned.
 If all codes of the coupon have been issued, then there is no next code, and null is returned.
 * @memberOf dw.campaign.Coupon
 * @return {String} Next available code of this coupon, or null if there are no available codes.
 */
dw.campaign.Coupon.prototype.getNextCouponCode = function() {};

/**
 * Returns the coupon-based promotions directly or indirectly (through
 campaigns) assigned to this coupon.
 * @memberOf dw.campaign.Coupon
 * @return {dw.util.Collection} Promotions assigned to the coupon in no particular order.
 */
dw.campaign.Coupon.prototype.getPromotions = function() {};

/**
 * Returns the defined limit on redemptions per coupon code. Null is
 returned if no limit is defined, which means that each code can be
 redeemed an unlimited number of times.
 * @memberOf dw.campaign.Coupon
 * @return {Number} Maximum number of redemptions per coupon code
 */
dw.campaign.Coupon.prototype.getRedemptionLimitPerCode = function() {};

/**
 * Returns the defined limit on redemptions of this coupon per customer.
 Null is returned if no limit is defined, which means that customers can
 redeem this coupon an unlimited number of times.
 * @memberOf dw.campaign.Coupon
 * @return {Number} Maxmimum number of redemptions per customer
 */
dw.campaign.Coupon.prototype.getRedemptionLimitPerCustomer = function() {};

/**
 * Returns the defined limit on redemptions per customer per timeframe (see
 <a href="class_dw_campaign_Coupon.html#dw_campaign_Coupon_getRedemptionLimitTimeFrame_DetailAnchor">getRedemptionLimitTimeFrame()</a>. Null is returned if no limit is
 defined, which means that there is no time-specific redemption limit for
 customers.
 * @memberOf dw.campaign.Coupon
 * @return {Number} Maximum number of redemptions per customer within timeframe
 * @see <a href="class_dw_campaign_Coupon.html#dw_campaign_Coupon_getRedemptionLimitTimeFrame_DetailAnchor">getRedemptionLimitTimeFrame()</a>
 */
dw.campaign.Coupon.prototype.getRedemptionLimitPerTimeFrame = function() {};

/**
 * Returns the timeframe (days) of the defined limit on redemptions per
 customer per timeframe. Null is returned if no limit is defined, which
 means that there is no time-specific redemption limit for customers.
 * @memberOf dw.campaign.Coupon
 * @return {Number} Timeframe (days) of redemptions per time
 * @see <a href="class_dw_campaign_Coupon.html#dw_campaign_Coupon_getRedemptionLimitPerTimeFrame_DetailAnchor">getRedemptionLimitPerTimeFrame()</a>
 */
dw.campaign.Coupon.prototype.getRedemptionLimitTimeFrame = function() {};

/**
 * Returns the coupon type.
 Possible values are <a href="class_dw_campaign_Coupon.html#dw_campaign_Coupon_TYPE_SINGLE_CODE_DetailAnchor">TYPE_SINGLE_CODE</a>, <a href="class_dw_campaign_Coupon.html#dw_campaign_Coupon_TYPE_MULTIPLE_CODES_DetailAnchor">TYPE_MULTIPLE_CODES</a>
 and <a href="class_dw_campaign_Coupon.html#dw_campaign_Coupon_TYPE_SYSTEM_CODES_DetailAnchor">TYPE_SYSTEM_CODES</a>.
 * @memberOf dw.campaign.Coupon
 * @return {String} Coupon type
 */
dw.campaign.Coupon.prototype.getType = function() {};

/**
 * Returns true if coupon is enabled, else false.
 * @memberOf dw.campaign.Coupon
 * @return {Boolean} true if coupon is enabled.
 */
dw.campaign.Coupon.prototype.isEnabled = function() {};

/**
 * Manager to access coupons.
 * @class
 * @extends Object
 */
dw.campaign.CouponMgr = function() {};
dw.campaign.CouponMgr.prototype = new Object();

/**
 * Returns the coupon with the specified ID.
 * @memberOf dw.campaign.CouponMgr
 * @param {String} couponID - the coupon identifier.
 * @return {dw.campaign.Coupon} Coupon with specified ID or null
 * @static
 */
dw.campaign.CouponMgr.getCoupon = function(couponID) {};

/**
 * Tries to find a coupon for the given coupon code. The method first
 searches for a coupon with a fixed code matching the passed value. If no
 such fixed coupon is found, it searches for a coupon with a
 system-generated code matching the passed value. If found, the coupon is
 returned. Otherwise, the method returns null.
 * @memberOf dw.campaign.CouponMgr
 * @param {String} couponCode - The coupon code to get the coupon for.
 * @return {dw.campaign.Coupon} The coupon with the matching coupon code or null if no coupon was          found.
 * @static
 */
dw.campaign.CouponMgr.getCouponByCode = function(couponCode) {};

/**
 * Returns all coupons in the current site in no specific order.
 * @memberOf dw.campaign.CouponMgr
 * @return {dw.util.Collection} Coupons in current site
 * @static
 */
dw.campaign.CouponMgr.getCoupons = function() {};

/**
 * Returns list of CouponRedemptions for the specified coupon and coupon code,
 sorted by redemption date descending (i.e. last redemption first).
 Usually, there should only either be 0 or 1 redemption. But if a coupon and code
 is removed and recreated and re-issued later, there might be multiple such redemption records.
 Returns an empty list if no redemption record exists in system for the specified coupon and code.
 * @memberOf dw.campaign.CouponMgr
 * @param {String} couponID - The coupon id to find redemption for.
 * @param {String} couponCode - The coupon code to find redemption for.
 * @return {dw.util.Collection} A sorted list of CouponRedemptions for the specified coupon and coupon code or  an empty list if no redemption record exists.
 * @static
 */
dw.campaign.CouponMgr.getRedemptions = function(couponID, couponCode) {};

/**
 *
 * @class
 * @extends Object
 */
dw.campaign.CouponRedemption = function() {};
dw.campaign.CouponRedemption.prototype = new Object();

/**
 * Returns email of redeeming customer.
 * @memberOf dw.campaign.CouponRedemption
 * @return {String} email of redeeming customer.
 */
dw.campaign.CouponRedemption.prototype.getCustomerEmail = function() {};

/**
 * Returns number of the order the code was redeemed with.
 * @memberOf dw.campaign.CouponRedemption
 * @return {String} number of the order the code was redeemed with.
 */
dw.campaign.CouponRedemption.prototype.getOrderNo = function() {};

/**
 * Returns date of redemption.
 * @memberOf dw.campaign.CouponRedemption
 * @return {Date} date of redemption.
 */
dw.campaign.CouponRedemption.prototype.getRedemptionDate = function() {};

/**
 * Helper class containing status codes for why a coupon code cannot be added
 to cart or why a coupon code already in cart is not longer valid for redemption.
 * @class
 * @extends Object
 */
dw.campaign.CouponStatusCodes = function() {};
dw.campaign.CouponStatusCodes.prototype = new Object();

/**
 * Coupon is currently applied in basket = Coupon code is valid for redemption and
 Coupon is assigned to one or multiple applicable! promotions.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.APPLIED = '';

/**
 * Indicates that another code of the same MultiCode/System coupon has already been added to basket.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.COUPON_ALREADY_IN_BASKET = '';

/**
 * Indicates that coupon code has already been added to basket.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.COUPON_CODE_ALREADY_IN_BASKET = '';

/**
 * Indicates that code of MultiCode/System coupon has already been redeemed.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.COUPON_CODE_ALREADY_REDEEMED = '';

/**
 * Indicates that coupon not found for given coupon code or that the code itself was not found.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.COUPON_CODE_UNKNOWN = '';

/**
 * Indicates that coupon is not enabled.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.COUPON_DISABLED = '';

/**
 * Indicates that No. of redemptions per code &amp; customer exceeded.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.CUSTOMER_REDEMPTION_LIMIT_EXCEEDED = '';

/**
 * Indicates that coupon is not assigned to an active promotion.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.NO_ACTIVE_PROMOTION = '';

/**
 * Coupon is assigned to one or multiple active promotions, but none of these promotions is currently applicable.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.NO_APPLICABLE_PROMOTION = '';

/**
 * Indicates that no. of redemptions per code exceeded.
 Usually happens for single code coupons
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.REDEMPTION_LIMIT_EXCEEDED = '';

/**
 * Indicates that No. of redemptions per code,customer &amp; time exceeded.
 * @type String
 * @memberOf dw.campaign.CouponStatusCodes
 * @static
 * @const
 */
dw.campaign.CouponStatusCodes.TIMEFRAME_REDEMPTION_LIMIT_EXCEEDED = '';

/**
 * Constant representing discounts of type <i>amount</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_AMOUNT = '';

/**
 * Constant representing discounts of type <i>bonus</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_BONUS = '';

/**
 * Constant representing discounts of type <i>bonus choice</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_BONUS_CHOICE = '';

/**
 * Constant representing discounts of type <i>fixed-price</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_FIXED_PRICE = '';

/**
 * Constant representing discounts of type <i>fixed price shipping</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_FIXED_PRICE_SHIPPING = '';

/**
 * Constant representing discounts of type <i>free</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_FREE = '';

/**
 * Constant representing discounts of type <i>free shipping</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_FREE_SHIPPING = '';

/**
 * Constant representing discounts of type <i>percentage</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_PERCENTAGE = '';

/**
 * Constant representing discounts of type <i>percent off options</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_PERCENTAGE_OFF_OPTIONS = '';

/**
 * Constant representing discounts of type <i>price book price</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_PRICEBOOK_PRICE = '';

/**
 * Constant representing discounts of type <i>total fixed price</i>.
 * @type String
 * @memberOf dw.campaign.Discount
 * @static
 * @const
 */
dw.campaign.Discount.TYPE_TOTAL_FIXED_PRICE = '';

/**
 * Returns the promotion this discount is based on.
 * @memberOf dw.campaign.Discount
 * @return {dw.campaign.Promotion} Promotion related to this discount
 */
dw.campaign.Discount.prototype.getPromotion = function() {};

/**
 * Returns the quantity of the discount. This quantity specifies how often
 this discount applies to its target object. For example, a 10% off
 discount with quantity 2 associated to a product line item with
 quantity 3 is applied to two items of the product line item. <br/>
 Discounts of order and shipping promotions, and bonus discounts
 have a fix quantity of 1.
 * @memberOf dw.campaign.Discount
 * @return {Number} Discount quantity
 */
dw.campaign.Discount.prototype.getQuantity = function() {};

/**
 * Returns the type of the discount.
 * @memberOf dw.campaign.Discount
 * @return {String} Discount type
 */
dw.campaign.Discount.prototype.getType = function() {};

/**
 * DiscountPlan represents a set of <a href="class_dw_campaign_Discount.html">Discount</a>s. Instances of the class are
 returned by the <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> when requesting applicable discounts
 for a specified set of promotions and a line item container
 (see <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getDiscounts_LineItemCtnr_PromotionPlan_DetailAnchor">PromotionMgr.getDiscounts(LineItemCtnr, PromotionPlan)</a>).
 <p/>
 DiscountPlan provides methods to access the discounts contained in the plan,
 add additional discounts to the plan (future) or remove discounts from the plan.
 * @class
 * @extends Object
 * @see <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a>
 */
dw.campaign.DiscountPlan = function() {};
dw.campaign.DiscountPlan.prototype = new Object();

/**
 * Get the collection of order discounts that the LineItemCtnr "almost"
 qualifies for based on the merchandise total in the cart. Nearness is
 controlled by thresholds configured at the promotion level.
 <p/>
 The collection of returned approaching discounts is ordered by the
 condition threshold of the promotion (e.g. "spend $100 and get 10% off"
 discount is returned before "spend $150 and get 15% off" discount.) A
 discount is not returned if it would be prevented from applying (because
 of compatibility rules) by an order discount already in the DiscountPlan
 or an approaching order discount with a lower condition threshold.
 * @memberOf dw.campaign.DiscountPlan
 * @return {dw.util.Collection} Collection of approaching order discounts ordered by the          condition threshold of the promotion ascending.
 */
dw.campaign.DiscountPlan.prototype.getApproachingOrderDiscounts = function() {};

/**
 * Get the collection of shipping discounts that the passed shipment
 "almost" qualifies for based on the merchandise total in the shipment.
 Nearness is controlled by thresholds configured at the promotion level.
 <p/>
 The collection of returned approaching discounts is ordered by the
 condition threshold of the promotion (e.g.
 "spend $100 and get free standard shipping" discount is returned before
 "spend $150 and get free standard shipping" discount.) A discount is not
 returned if it would be prevented from applying (because of compatibility
 rules) by a shipping discount already in the DiscountPlan or an
 approaching shipping discount with a lower condition threshold.
 * @memberOf dw.campaign.DiscountPlan
 * @param {dw.order.Shipment} shipment - The shipment to calculate approaching discounts for.
 * @return {dw.util.Collection} Collection of approaching shipping discounts ordered by the          condition threshold of the promotion ascending.
 */
dw.campaign.DiscountPlan.prototype.getApproachingShippingDiscounts = function(shipment) {};

/**
 * Get the collection of shipping discounts that the passed shipment
 "almost" qualifies for based on the merchandise total in the shipment.
 Here "almost" is controlled by thresholds configured at the promotion
 level.
 <p/>
 This method only returns discounts for shipping promotions which apply to
 one of the passed shipping methods.
 <p/>
 The collection of returned approaching discounts is ordered by the
 condition threshold of the promotion (e.g.
 "spend $100 and get free standard shipping" discount is returned before
 "spend $150 and get free standard shipping" discount.) A discount is not
 returned if it would be prevented from applying (because of compatibility
 rules) by a shipping discount already in the DiscountPlan or an
 approaching shipping discount with a lower condition threshold.
 * @memberOf dw.campaign.DiscountPlan
 * @param {dw.order.Shipment} shipment - The shipment to calculate approaching discounts for.
 * @param {dw.util.Collection} shippingMethods - The shipping methods to filter by.
 * @return {dw.util.Collection} Collection of approaching shipping discounts ordered by the          condition threshold of the promotion ascending.
 */
dw.campaign.DiscountPlan.prototype.getApproachingShippingDiscounts = function(shipment, shippingMethods) {};

/**
 * Get the collection of shipping discounts that the passed shipment
 "almost" qualifies for based on the merchandise total in the shipment.
 Here "almost" is controlled by thresholds configured at the promotion
 level.
 <p/>
 This method only returns discounts for shipping promotions which apply to
 the passed shipping method.
 <p/>
 The collection of returned approaching discounts is ordered by the
 condition threshold of the promotion (e.g.
 "spend $100 and get free standard shipping" discount is returned before
 "spend $150 and get free standard shipping" discount.) A discount is not
 returned if it would be prevented from applying (because of compatibility
 rules) by a shipping discount already in the DiscountPlan or an
 approaching shipping discount with a lower condition threshold.
 * @memberOf dw.campaign.DiscountPlan
 * @param {dw.order.Shipment} shipment - The shipment to calculate approaching discounts for.
 * @param {dw.order.ShippingMethod} shippingMethod - The shipping method to filter by.
 * @return {dw.util.Collection} Collection of approaching shipping discounts ordered by the          condition threshold of the promotion, ascending.
 */
dw.campaign.DiscountPlan.prototype.getApproachingShippingDiscounts = function(shipment, shippingMethod) {};

/**
 * Returns all bonus discounts contained in the discount plan.
 * @memberOf dw.campaign.DiscountPlan
 * @return {dw.util.Collection} All bonus discounts contained in discount plan
 */
dw.campaign.DiscountPlan.prototype.getBonusDiscounts = function() {};

/**
 * Returns line item container associated with discount plan. <br/>
 A discount plan is created from and associated with a line item container.
 This method returns the line item container associated with this discount plan.
 * @memberOf dw.campaign.DiscountPlan
 * @return {dw.order.LineItemCtnr} Line item container associated with plan
 */
dw.campaign.DiscountPlan.prototype.getLineItemCtnr = function() {};

/**
 * Returns the percentage and amount order discounts contained in the
 discount plan.
 * @memberOf dw.campaign.DiscountPlan
 * @return {dw.util.Collection} Order discounts contained in the discount plan
 */
dw.campaign.DiscountPlan.prototype.getOrderDiscounts = function() {};

/**
 * Returns the percentage, amount and fix price discounts associated
 with the specified product line item. If the specified product line
 item is not contained in the discount plan, an empty collection is
 returned.
 * @memberOf dw.campaign.DiscountPlan
 * @param {dw.order.ProductLineItem} productLineItem - Product line item
 * @return {dw.util.Collection} Discounts associated with specified product line item
 */
dw.campaign.DiscountPlan.prototype.getProductDiscounts = function(productLineItem) {};

/**
 * Returns the product-shipping discounts associated with the specified
 product line item. If the specified product line item is not contained in
 the discount plan, an empty collection is returned.
 * @memberOf dw.campaign.DiscountPlan
 * @param {dw.order.ProductLineItem} productLineItem - Product line item
 * @return {dw.util.Collection} Product-shipping discounts associated with specified product line          item
 */
dw.campaign.DiscountPlan.prototype.getProductShippingDiscounts = function(productLineItem) {};

/**
 * Returns the percentage, amount and fix price discounts associated with
 the specified shipment. If the specified shipment is not contained in
 the discount plan, an empty collection is returned.
 * @memberOf dw.campaign.DiscountPlan
 * @param {dw.order.Shipment} shipment - the shipment for which to fetch discounts.
 * @return {dw.util.Collection} Discounts associated with specified shipment
 */
dw.campaign.DiscountPlan.prototype.getShippingDiscounts = function(shipment) {};

/**
 * Removes the specified discount from the discount plan. <br/>

 This method should only be used for very simple discount scenarios. It
 is not recommended to use the method in case of stacked discounts
 (i.e. multiple order or product discounts), or complex discount types
 like Buy X Get Y or Total Fixed Price, since correct re-calculation of the
 discount plan based on the promotion rules is not guaranteed.
 * @memberOf dw.campaign.DiscountPlan
 * @param {dw.campaign.Discount} discount - Discount to be removed
 */
dw.campaign.DiscountPlan.prototype.removeDiscount = function(discount) {};

/**
 * Create a fixed-price-discount on the fly. Can be used to create a custom price adjustment.
 * @class
 * @extends dw.campaign.Discount
 * @param {Number} amount - fixed price e.g. 10.00
 */
dw.campaign.FixedPriceDiscount = function(amount) {};
dw.campaign.FixedPriceDiscount.prototype = new dw.campaign.Discount();

/**
 * Returns the fixed price amount, for example 0.99 for a "Shipping only $0.99"
 discount.
 * @memberOf dw.campaign.FixedPriceDiscount
 * @return {Number} Fixed price amount
 */
dw.campaign.FixedPriceDiscount.prototype.getFixedPrice = function() {};

/**
 * Create a fixed-price-shipping-discount on the fly. Can be used to create a custom price adjustment.
 * @class
 * @extends dw.campaign.Discount
 * @param {Number} amount - fixed price for shipping e.g. 10.00
 */
dw.campaign.FixedPriceShippingDiscount = function(amount) {};
dw.campaign.FixedPriceShippingDiscount.prototype = new dw.campaign.Discount();

/**
 * Returns the fixed price amount, for example 0.99 for a "Shipping only $0.99"
 discount.
 * @memberOf dw.campaign.FixedPriceShippingDiscount
 * @return {Number} Fixed price amount
 */
dw.campaign.FixedPriceShippingDiscount.prototype.getFixedPrice = function() {};

/**
 * Represents a <i>free</i> discount in the discount plan, for example
 "Free shipping on all orders $25 or more."
 * @class
 * @extends dw.campaign.Discount
 */
dw.campaign.FreeDiscount = function() {};
dw.campaign.FreeDiscount.prototype = new dw.campaign.Discount();

/**
 * Represents a <i>free shipping</i> discount in the discount plan, for example
 "Free shipping on all iPods."
 * @class
 * @extends dw.campaign.Discount
 */
dw.campaign.FreeShippingDiscount = function() {};
dw.campaign.FreeShippingDiscount.prototype = new dw.campaign.Discount();

/**
 * Create a percentage-discount on the fly. Can be used to create a custom price adjustment.
 * @class
 * @extends dw.campaign.Discount
 * @param {Number} percentage - percentage value, e.g. 15.00 for 15%
 */
dw.campaign.PercentageDiscount = function(percentage) {};
dw.campaign.PercentageDiscount.prototype = new dw.campaign.Discount();

/**
 * Returns the percentage discount value, for example 10.00 for a "10% off"
 discount.
 * @memberOf dw.campaign.PercentageDiscount
 * @return {Number} Discount percentage value
 */
dw.campaign.PercentageDiscount.prototype.getPercentage = function() {};

/**
 * Represents a <i>percentage-off options</i> discount in the discount plan, for
 example "50% off monogramming on shirts".
 * @class
 * @extends dw.campaign.Discount
 */
dw.campaign.PercentageOptionDiscount = function() {};
dw.campaign.PercentageOptionDiscount.prototype = new dw.campaign.Discount();

/**
 * Returns the percentage discount value, for example 10.00 for a "10% off"
 discount.
 * @memberOf dw.campaign.PercentageOptionDiscount
 * @return {Number} Discount percentage value
 */
dw.campaign.PercentageOptionDiscount.prototype.getPercentage = function() {};

/**
 * Discount representing that a product's price has been calculated from a
 separate sales price book other than the standard price book assigned to the
 site.
 * @class
 * @extends dw.campaign.Discount
 */
dw.campaign.PriceBookPriceDiscount = function() {};
dw.campaign.PriceBookPriceDiscount.prototype = new dw.campaign.Discount();

/**
 *
 * @memberOf dw.campaign.PriceBookPriceDiscount
 * @return {String}
 */
dw.campaign.PriceBookPriceDiscount.prototype.getPriceBookID = function() {};

/**
 * This class represents a promotion in the Demandware system. Examples of
 promotions include:

 <ul>
 <li>"Get 20% off your order"</li>
 <li>"$15 off a given product"</li>
 <li>"free shipping for all orders over $50"</li>
 <li>Get a bonus product with purchase of another product</li>
 </ul>

 The Promotion class provides access to the basic attributes of the promotion
 such as name, callout message, and description, but the details of the
 promotion rules are not available in the API due to their complexity.
 <p/>
 The Demandware system allows merchants to create a single logical "promotion
 rule" (e.g. "Get 20% off your order") and then assign it to one or more
 "containers" where the supported container types are campaigns or AB-tests. A
 Promotion represents a specific instance of a promotion rule assigned to a
 container. Promotion rules themselves that are not assigned to any container
 are inaccessible through the API. Each instance (i.e. assignment) can have
 separate "qualifiers". Qualifiers are the customer groups, source code
 groups, or coupons that trigger a given promotion for a customer.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.campaign.Promotion = function() {};
dw.campaign.Promotion.prototype = new dw.object.ExtensibleObject();

/**
 * Constant representing promotion exclusivity of type <i>class</i>.
 * @type String
 * @memberOf dw.campaign.Promotion
 * @static
 * @const
 */
dw.campaign.Promotion.EXCLUSIVITY_CLASS = '';

/**
 * Constant representing promotion exclusivity of type <i>global</i>.
 * @type String
 * @memberOf dw.campaign.Promotion
 * @static
 * @const
 */
dw.campaign.Promotion.EXCLUSIVITY_GLOBAL = '';

/**
 * Constant representing promotion exclusivity of type <i>no</i>.
 * @type String
 * @memberOf dw.campaign.Promotion
 * @static
 * @const
 */
dw.campaign.Promotion.EXCLUSIVITY_NO = '';

/**
 * Constant representing promotion class of type <i>order</i>.
 * @type String
 * @memberOf dw.campaign.Promotion
 * @static
 * @const
 */
dw.campaign.Promotion.PROMOTION_CLASS_ORDER = '';

/**
 * Constant representing promotion class of type <i>product</i>.
 * @type String
 * @memberOf dw.campaign.Promotion
 * @static
 * @const
 */
dw.campaign.Promotion.PROMOTION_CLASS_PRODUCT = '';

/**
 * Constant representing promotion class of type <i>shipping</i>.
 * @type String
 * @memberOf dw.campaign.Promotion
 * @static
 * @const
 */
dw.campaign.Promotion.PROMOTION_CLASS_SHIPPING = '';

/**
 * Constant indicating that that all qualifier conditions must be met in
 order for this promotion to apply for a given customer.
 * @type String
 * @memberOf dw.campaign.Promotion
 * @static
 * @const
 */
dw.campaign.Promotion.QUALIFIER_MATCH_MODE_ALL = '';

/**
 * Constant indicating that that at least one qualifier condition must be
 met in order for this promotion to apply for a given customer.
 * @type String
 * @memberOf dw.campaign.Promotion
 * @static
 * @const
 */
dw.campaign.Promotion.QUALIFIER_MATCH_MODE_ANY = '';

/**
 * Returns the callout message of the promotion.
 * @memberOf dw.campaign.Promotion
 * @return {dw.content.MarkupText} Callout message of the promotion.
 */
dw.campaign.Promotion.prototype.getCalloutMsg = function() {};

/**
 * Returns the campaign this particular instance of the promotion is defined
 in.
 <p/>
 Note: If this promotion is defined as part of an AB-test, then a Campaign
 object will be returned, but it is a mock implementation, and not a true
 Campaign. This behavior is required for backwards compatibility and
 should not be relied upon as it may change in future releases.
 * @memberOf dw.campaign.Promotion
 * @return {dw.campaign.Campaign} Campaign of the promotion.
 */
dw.campaign.Promotion.prototype.getCampaign = function() {};

/**
 * Returns a description of the condition that must be met for this
 promotion to be applicable.
 <p/>
 The method and the related attribute have been deprecated. Use the
 <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_getDetails_DetailAnchor">getDetails()</a> method instead.
 * @memberOf dw.campaign.Promotion
 * @return {dw.content.MarkupText} Condition promotion description.
 * @deprecated Use <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_getDetails_DetailAnchor">getDetails()</a>
 * @todo what to do?
 */
dw.campaign.Promotion.prototype.getConditionalDescription = function() {};

/**
 * Returns the coupons directly assigned to the promotion or assigned to the campaign of the promotion. <p/>
 If the promotion is not based on coupons (see <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_isBasedOnCoupons_DetailAnchor">isBasedOnCoupons()</a>), or no coupons is assigned to the
 promotion or its campaign, an empty collection is returned.
 * @memberOf dw.campaign.Promotion
 * @return {dw.util.Collection} Coupons assigned to promotion in no particular order.
 */
dw.campaign.Promotion.prototype.getCoupons = function() {};

/**
 * Returns the custom attributes for this extensible object.
 * @memberOf dw.campaign.Promotion
 * @return {dw.object.CustomAttributes}
 * @synchronized
 */
dw.campaign.Promotion.prototype.getCustom = function() {};

/**
 * Returns the customer groups directly assigned to the promotion or assigned to the campaign of the promotion. <p/>
 If the promotion is not based on customer groups (see <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_isBasedOnCustomerGroups_DetailAnchor">isBasedOnCustomerGroups()</a>), or no customer group is assigned to the
 promotion or its campaign, an empty collection is returned.
 * @memberOf dw.campaign.Promotion
 * @return {dw.util.Collection} Customer groups assigned to promotion in no particular order.
 */
dw.campaign.Promotion.prototype.getCustomerGroups = function() {};

/**
 * Returns the description of the promotion.
 <p/>
 Method is deprecated and returns the same value as <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_getCalloutMsg_DetailAnchor">getCalloutMsg()</a>.
 * @memberOf dw.campaign.Promotion
 * @return {dw.content.MarkupText} Description of the promotion.
 * @deprecated Use <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_getCalloutMsg_DetailAnchor">getCalloutMsg()</a>
 */
dw.campaign.Promotion.prototype.getDescription = function() {};

/**
 * Returns the detailed description of the promotion.
 * @memberOf dw.campaign.Promotion
 * @return {dw.content.MarkupText} Detailed promotion description.
 */
dw.campaign.Promotion.prototype.getDetails = function() {};

/**
 * Returns the effective end date of this instance of the promotion. If no
 explicit end date is defined for the promotion, the end date of the
 containing Campaign or AB-test is returned.
 * @memberOf dw.campaign.Promotion
 * @return {Date} End date of the promotion, or null if no end date is defined.
 */
dw.campaign.Promotion.prototype.getEndDate = function() {};

/**
 * Returns the promotion's exclusivity specifying how the promotion can be
 combined with other promotions.
 Possible values are <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_EXCLUSIVITY_NO_DetailAnchor">EXCLUSIVITY_NO</a>, <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_EXCLUSIVITY_CLASS_DetailAnchor">EXCLUSIVITY_CLASS</a>
 and <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_EXCLUSIVITY_GLOBAL_DetailAnchor">EXCLUSIVITY_GLOBAL</a>.
 * @memberOf dw.campaign.Promotion
 * @return {String} Promotion exclusivity
 */
dw.campaign.Promotion.prototype.getExclusivity = function() {};

/**
 * Returns the unique ID of the promotion.
 * @memberOf dw.campaign.Promotion
 * @return {String} ID of the promotion.
 */
dw.campaign.Promotion.prototype.getID = function() {};

/**
 * Returns the reference to the promotion image.
 * @memberOf dw.campaign.Promotion
 * @return {dw.content.MediaFile} Image of the promotion.
 */
dw.campaign.Promotion.prototype.getImage = function() {};

/**
 * Returns the date that this object was last modified.
 * @memberOf dw.campaign.Promotion
 * @return {Date} the date that this object was last modified.
 */
dw.campaign.Promotion.prototype.getLastModified = function() {};

/**
 * Returns the name of the promotion.
 * @memberOf dw.campaign.Promotion
 * @return {String} Name of the promotion.
 */
dw.campaign.Promotion.prototype.getName = function() {};

/**
 * Returns the promotional price for the specified product. The promotional
 price is only returned if the following conditions are met:

 <ul>
 <li>this promotion is a product promotion without purchase conditions,
 i.e. is of type 'Without qualifying products'.</li>
 <li>this promotion's discount is Discount.TYPE_AMOUNT,
 Discount.TYPE_PERCENTAGE, Discount.TYPE_FIXED_PRICE, or
 Discount.TYPE_PRICEBOOK_PRICE.</li>
 <li>specified product is one of the discounted products of the
 promotion.</li>
 <li>the product has a valid sales price for quantity 1.0.</li>
 </ul>

 In all other cases, the method will return Money.NOT_AVAILABLE. It is
 not required that this promotion be an active customer
 promotion.

 NOTE: the method might be extended in the future to support more
 promotion types.

 To calculate the promotional price, the method uses the current sales
 price of the product for quantity 1.0, and applies the discount
 associated with the promotion to this price. For example, if the product
 price is $14.99, and the promotion discount is 10%, the method will
 return $13.49. If the discount is $2 off, the method will return $12.99.
 If the discount is $10.00 fixed price, the method will return $10.00.
 * @memberOf dw.campaign.Promotion
 * @param {dw.catalog.Product} product - the product to calculate the discount for
 * @return {dw.value.Money} the price of the passed product after promotional discount is          applied, or Money.NOT_AVAILABLE if any of the restrictions on          product or promotion are not met.
 */
dw.campaign.Promotion.prototype.getPromotionalPrice = function(product) {};

/**
 * This method follows the same logic as
 <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_getPromotionalPrice_Product_DetailAnchor">getPromotionalPrice(Product)</a> but prices are calculated based
 on the option values selected in the specified option model.
 * @memberOf dw.campaign.Promotion
 * @param {dw.catalog.Product} product - the product to calculate the discount for
 * @param {dw.catalog.ProductOptionModel} optionModel - the option model to use when calculating
 * @return {dw.value.Money} the price of the passed product after promotional discount is          applied, or Money.NOT_AVAILABLE if any of the restrictions on          product or promotion are not met.
 */
dw.campaign.Promotion.prototype.getPromotionalPrice = function(product, optionModel) {};

/**
 * Returns the promotion class indicating the general type of the promotion.
 Possible values are <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_PROMOTION_CLASS_PRODUCT_DetailAnchor">PROMOTION_CLASS_PRODUCT</a>,
 <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_PROMOTION_CLASS_ORDER_DetailAnchor">PROMOTION_CLASS_ORDER</a>, and <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_PROMOTION_CLASS_SHIPPING_DetailAnchor">PROMOTION_CLASS_SHIPPING</a>.
 * @memberOf dw.campaign.Promotion
 * @return {String} Promotion class or null if the promotion rule has not been          configured.
 */
dw.campaign.Promotion.prototype.getPromotionClass = function() {};

/**
 * Returns the qualifier matching mode specified by this promotion. A
 promotion may have up to 3 qualifier conditions based on whether it is
 customer-group based, coupon based, and/or source-code based. A promotion
 may require for example that a customer belong to a certain customer
 group and also have a certain coupon in the cart in order for the
 promotion to apply. This method returns QUALIFIER_MATCH_MODE_ALL if it is
 necessary that all the qualifier conditions are satisfied in order for
 this promotion to apply for a given customer. Otherwise, this method
 returns QUALIFIER_MATCH_MODE_ANY indicating that at least of the
 qualifier conditions must be satisfied.
 <p/>
 Note: currently QUALIFIER_MATCH_MODE_ALL is only supported for promotions
 assigned to campaigns, and not those assigned to AB-tests.
 * @memberOf dw.campaign.Promotion
 * @return {String} the qualifier matching mode specified by this promotion, either          QUALIFIER_MATCH_MODE_ALL or QUALIFIER_MATCH_MODE_ANY.
 */
dw.campaign.Promotion.prototype.getQualifierMatchMode = function() {};

/**
 * Returns the promotion's rank. Rank is a numeric attribute that you can specify.
 Promotions with a defined rank are calculated before promotions without a defined rank.
 If two promotions have a rank, the one with the lowest rank is calculated first.
 For example, a promotion with rank 10 is calculated before one with rank 30.
 * @memberOf dw.campaign.Promotion
 * @return {Number} The promotion's rank.
 */
dw.campaign.Promotion.prototype.getRank = function() {};

/**
 * Returns the source code groups directly assigned to the promotion or assigned to the campaign of the promotion. <p/>
 If the promotion is not based on source code groups (see <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_isBasedOnSourceCodes_DetailAnchor">isBasedOnSourceCodes()</a>), or no source code group is assigned to the
 promotion or its campaign, an empty collection is returned.
 * @memberOf dw.campaign.Promotion
 * @return {dw.util.Collection} Source code groups assigned to promotion in no particular order.
 */
dw.campaign.Promotion.prototype.getSourceCodeGroups = function() {};

/**
 * Returns the effective start date of this instance of the promotion. If no
 explicit start date is defined for this instance, the start date of the
 containing Campaign or AB-test is returned.
 * @memberOf dw.campaign.Promotion
 * @return {Date} Start date of the promotion, or null if no start date is defined.
 */
dw.campaign.Promotion.prototype.getStartDate = function() {};

/**
 * Returns the promotion's tags. Tags are a way of categorizing and organizing promotions. A promotion can have many
 tags. Tags will be returned in alphabetical order.
 * @memberOf dw.campaign.Promotion
 * @return {String[]} The promotion's set of tags.
 */
dw.campaign.Promotion.prototype.getTags = function() {};

/**
 * Returns 'true' if promotion is active, otherwise 'false'. <br/>
 A promotion is active if its campaign is active, and the promotion
 is enabled, and it is scheduled for <i>now</i>.
 * @memberOf dw.campaign.Promotion
 * @return {Boolean} true if promotion is active, otherwise false.
 */
dw.campaign.Promotion.prototype.isActive = function() {};

/**
 * Returns 'true' if the promotion is triggered by a coupon,
 false otherwise.
 <p/>
 * @memberOf dw.campaign.Promotion
 * @return {Boolean} true if promotion is triggered by coupon, otherwise false.
 * @deprecated Use <a href="class_dw_campaign_Promotion.html#dw_campaign_Promotion_isBasedOnCoupons_DetailAnchor">isBasedOnCoupons()</a>
 */
dw.campaign.Promotion.prototype.isBasedOnCoupon = function() {};

/**
 * Returns 'true' if the promotion is triggered by coupons,
 false otherwise.
 * @memberOf dw.campaign.Promotion
 * @return {Boolean} true if promotion is triggered by coupons, otherwise false.
 */
dw.campaign.Promotion.prototype.isBasedOnCoupons = function() {};

/**
 * Returns 'true' if the promotion is triggered by customer groups,
 false otherwise.
 * @memberOf dw.campaign.Promotion
 * @return {Boolean} true if promotion is triggered by customer groups, otherwise false.
 */
dw.campaign.Promotion.prototype.isBasedOnCustomerGroups = function() {};

/**
 * Returns 'true' if the promotion is triggered by source codes,
 false otherwise.
 * @memberOf dw.campaign.Promotion
 * @return {Boolean} true if promotion is triggered by source codes, otherwise false.
 */
dw.campaign.Promotion.prototype.isBasedOnSourceCodes = function() {};

/**
 * Returns true if promotion is enabled, otherwise false.
 * @memberOf dw.campaign.Promotion
 * @return {Boolean} true if promotion is enabled, otherwise false.
 */
dw.campaign.Promotion.prototype.isEnabled = function() {};

/**
 * <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> is used to access campaigns and promotion
 definitions, display active or upcoming promotions in a storefront, and to
 calculate and apply promotional discounts to line item containers.
 <p/>
 To access campaign and promotion definitions, use methods
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getCampaigns_DetailAnchor">getCampaigns()</a>, <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getCampaign_String_DetailAnchor">getCampaign(String)</a>,
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getPromotions_DetailAnchor">getPromotions()</a> and <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getPromotion_String_DetailAnchor">getPromotion(String)</a>.
 <p/>
 To display active or upcoming promotions in the storefront, e.g. on product
 pages, various methods are provided. <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActivePromotions_DetailAnchor">getActivePromotions()</a> returns
 a <a href="class_dw_campaign_PromotionPlan.html">PromotionPlan</a> with all enabled promotions scheduled for <i>now</i>.
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">getActiveCustomerPromotions()</a> returns a <a href="class_dw_campaign_PromotionPlan.html">PromotionPlan</a> with
 all enabled promotions scheduled for <i>now</i> and applicable for the
 session currency, current customer and active source code.
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getUpcomingPromotions_int_DetailAnchor">getUpcomingPromotions(Number)</a> returns a <a href="class_dw_campaign_PromotionPlan.html">PromotionPlan</a> with all
 promotions that are enabled, not scheduled for <i>now</i>, but scheduled for
 any time between <i>now</i> and <i>now + previewTime(hours)</i>.
 <p/>
 Applying promotions to line item containers is a 3-step process, and
 <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> provides methods supporting each of these steps.
 Convenience methods can be used that execute all three steps at once,
 or the steps can be executed individually if you need to customize
 the output of the steps due to specific business rules. <br/>
 <ul>
 <li>Step 1 - calculate active customer promotions: Determine the active
 promotions for the session currency, current customer, source code and redeemed coupons.</li>
 <li>Step 2 - calculate applicable discounts: Based on the active promotions
 determined in step 1, applicable discounts are calculated.</li>
 <li>Step 3 - apply discounts: applicable discounts are applied to a line
 item container by creating price adjustment line items.</li>
 </ul>
 <p/>
 The simpliest way to execute steps 1-3 is to use method
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_applyDiscounts_LineItemCtnr_DetailAnchor">applyDiscounts(LineItemCtnr)</a>. The method identifies all active
 customer promotions, calculates and applies applicable discounts.
 <p/>
 Due to specific business rules it might be necessary to manipulate
 the set of applicable discounts calculated by the promotion engine
 before applying them to the line item container. To implement such a scenario,
 you want to use method <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getDiscounts_LineItemCtnr_DetailAnchor">getDiscounts(LineItemCtnr)</a>, which
 identifies all active customer promotions, and calculates and returns
 applicable discounts in an instance of <a href="class_dw_campaign_DiscountPlan.html">DiscountPlan</a>. The discount
 plan contains a description for all applicable discounts for the specified line
 item container, and you can remove discounts from it if necessary.
 The customized discount plan can then be passed on for application by
 using method <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_applyDiscounts_DiscountPlan_DetailAnchor">applyDiscounts(DiscountPlan)</a>.
 <p/>
 Due to specific business rules it might be necessary to manipulate the
 set of active customer promotions before calculating applicable discounts
 from it. For example, you might want to add promotions to the
 plan or remove promotions from it.
 You want to use method <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">getActiveCustomerPromotions()</a>, which
 identifies all active customer promotions and returns an instance of
 <a href="class_dw_campaign_PromotionPlan.html">PromotionPlan</a>. You can add promotions to the promotion plan
 or remove promotions from the plan. The customized promotion plan can then be
 passed on to calculate applicable discounts by using method
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getDiscounts_LineItemCtnr_PromotionPlan_DetailAnchor">getDiscounts(LineItemCtnr, PromotionPlan)</a>.<br/>
 <p/>
 * @class
 * @extends Object
 */
dw.campaign.PromotionMgr = function() {};
dw.campaign.PromotionMgr.prototype = new Object();

/**
 * Applies the discounts contained in the specified discount plan
 to the line item container associated with the discount
 plan. <br/>
 <p/>
 As a result of this method, the specified line item container
 contains price adjustments and/or bonus product line items for
 all discounts contained in the specified discount plan.
 The method also removes price adjustment and/or bonus product line items
 from the line item container if the specified discount plan does not
 contain the related discount.
 <p/>
 <i>Note that the method does not evaluate if the discounts in the specified
 discount plan are applicable nor that the promotions related to these
 discounts are active.</i>
 * @memberOf dw.campaign.PromotionMgr
 * @param {dw.campaign.DiscountPlan} discountPlan - Discount plan to apply to associated line item container
 * @see <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getDiscounts_LineItemCtnr_DetailAnchor">getDiscounts(LineItemCtnr)</a>
 * @see <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_applyDiscounts_LineItemCtnr_DetailAnchor">applyDiscounts(LineItemCtnr)</a>
 * @todo Should method return Status object?
 * @static
 */
dw.campaign.PromotionMgr.applyDiscounts = function(discountPlan) {};

/**
 * Identifies active promotions, calculates the applicable
 discounts from these promotions and applies these discounts to the
 specified line item container.
 <p/>
 As a result of this method, the specified line item container
 contains price adjustments and/or bonus product line items for
 all applicable discounts. The method also removes price
 adjustment and/or bonus product line items from the line item
 container if the related to promotions/discounts are no longer
 applicable.
 * @memberOf dw.campaign.PromotionMgr
 * @param {dw.order.LineItemCtnr} lineItemCtnr - Line item ctnr to apply promotions on
 * @static
 */
dw.campaign.PromotionMgr.applyDiscounts = function(lineItemCtnr) {};

/**
 * Returns all promotions scheduled for <i>now</i> and applicable for the
 session currency, current customer, source code, or presented coupons.<br/>

 The active promotions are returned in an instance of
 <a href="class_dw_campaign_PromotionPlan.html">PromotionPlan</a>. The promotion plan contains all
 promotions assigned to any customer group of the current customer, the
 current source code, or coupons in the current session basket.
 * @memberOf dw.campaign.PromotionMgr
 * @return {dw.campaign.PromotionPlan} {@link dw.campaign.PromotionPlan} with active customer promotions
 * @see <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActivePromotions_DetailAnchor">getActivePromotions()</a>
 * @static
 */
dw.campaign.PromotionMgr.getActiveCustomerPromotions = function() {};

/**
 * Returns all promotions assigned to the passed campaign, which are active
 at some point within the specified date range, and are applicable for the
 current customer, source code, or presented coupons. A promotion must be
 active for an actual time period within the passed date range, and not
 just a single point.
 <p/>
 The passed campaign and dates must not be null or an exception is thrown.
 It is valid for the from and to dates to be in the past. If an invalid
 time range is specified (i.e. from is after to), the returned
 PromotionPlan will be empty.
 * @memberOf dw.campaign.PromotionMgr
 * @param {dw.campaign.Campaign} campaign - The campaign, must not be null or an exception is thrown.
 * @param {Date} from - The start of the date range to consider. If null, this             signifies an open ended time period.
 * @param {Date} to - The end of the date range to consider. If null, this signifies             an open ended time period.
 * @return {dw.campaign.PromotionPlan} PromotionPlan with promotions matching all the criteria.
 * @static
 */
dw.campaign.PromotionMgr.getActiveCustomerPromotionsForCampaign = function(campaign, from, to) {};

/**
 * Returns all promotions scheduled for <i>now</i>, and applicable for the
 session currency but regardless of current customer or source code.<br/>
 The active promotions are returned in an instance of <a href="class_dw_campaign_PromotionPlan.html">PromotionPlan</a>.
 * @memberOf dw.campaign.PromotionMgr
 * @return {dw.campaign.PromotionPlan} {@link dw.campaign.PromotionPlan} with active promotions
 * @see <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">getActiveCustomerPromotions()</a>
 * @static
 */
dw.campaign.PromotionMgr.getActivePromotions = function() {};

/**
 * Returns all promotions assigned to the passed campaign which are active
 at some point within the specified date range. A promotion must be active
 for an actual time period within the passed date range, and not just a
 single point. A promotion must be applicable for the session currency.
 <p/>
 This method considers only the enabled flags and time conditions of the
 promotion and campaign. It does not consider whether the current customer
 satisfies the qualifiers of the promotion (customer group, source code,
 or coupon).
 <p/>
 The passed campaign and dates must not be null or an exception is thrown.
 It is valid for the from and/or to dates to be in the past. If an invalid
 time range is specified (i.e. from is after to), the returned
 PromotionPlan will be empty.
 * @memberOf dw.campaign.PromotionMgr
 * @param {dw.campaign.Campaign} campaign - The campaign. Must not be null.
 * @param {Date} from - The start of the date range to consider. Must not be null
 * @param {Date} to - The end of the date range to consider. Must not be null.
 * @return {dw.campaign.PromotionPlan} PromotionPlan with promotions matching all the criteria.
 * @static
 */
dw.campaign.PromotionMgr.getActivePromotionsForCampaign = function(campaign, from, to) {};

/**
 * Returns the campaign identified by the specified ID.
 * @memberOf dw.campaign.PromotionMgr
 * @param {String} id - Campaign ID
 * @return {dw.campaign.Campaign} Campaign or null if not found
 * @static
 */
dw.campaign.PromotionMgr.getCampaign = function(id) {};

/**
 * Returns all campaigns of the current site in no specific order.
 * @memberOf dw.campaign.PromotionMgr
 * @return {dw.util.Collection} All campaigns of current site
 * @static
 */
dw.campaign.PromotionMgr.getCampaigns = function() {};

/**
 * Returns the discounts applicable for the current customer, active
 source code and specified line item container. <br/>

 This method identifies all active  promotions assigned to the customer
 groups of the current customer, the active source code and any coupon
 contained in the specified line item container, and calculates applicable
 discounts from these promotions.
 <p/>
 The applicable discounts are contained in the returned instance of
 <a href="class_dw_campaign_DiscountPlan.html">DiscountPlan</a>.
 * @memberOf dw.campaign.PromotionMgr
 * @param {dw.order.LineItemCtnr} lineItemCtnr - Line item container
 * @return {dw.campaign.DiscountPlan} Discount plan with applicable discounts
 * @static
 */
dw.campaign.PromotionMgr.getDiscounts = function(lineItemCtnr) {};

/**
 * Returns the discounts applicable for the current customer, active
 source code and specified line item container, based on the specified
 promotion plan. <br/>

 This method calculates applicable discounts from the promotions in the
 specified promotion plan. Note that any promotion in the promotion
 plan that is inactive, or not applicable for the current customer
 or source code, is being ignored.
 <p/>
 The applicable discounts are contained in the returned instance of
 <a href="class_dw_campaign_DiscountPlan.html">DiscountPlan</a>.
 * @memberOf dw.campaign.PromotionMgr
 * @param {dw.order.LineItemCtnr} lineItemCtnr - Line item container
 * @param {dw.campaign.PromotionPlan} promotionPlan - Promotion plan with active promotions
 * @return {dw.campaign.DiscountPlan} Discount plan with applicable discounts
 * @static
 */
dw.campaign.PromotionMgr.getDiscounts = function(lineItemCtnr, promotionPlan) {};

/**
 * Returns the promotion identified by the specified ID. The same logical
 promotion may be assigned to multiple campaigns or AB-tests. In this
 case, the system returns the instance of highest rank. Some attributes of
 the returned Promotion may vary based on exactly which instance is
 returned. This method returns null if there is no promotion in the system
 with the given ID, or if a promotion with the given ID exists but it is
 not assigned to any campaign or AB-test.
 * @memberOf dw.campaign.PromotionMgr
 * @param {String} id - Promotion ID
 * @return {dw.campaign.Promotion} Promotion or null if not found
 * @static
 */
dw.campaign.PromotionMgr.getPromotion = function(id) {};

/**
 * Returns all promotions of the current site in no specific order.
 * @memberOf dw.campaign.PromotionMgr
 * @return {dw.util.Collection} All promotions of current site
 * @static
 */
dw.campaign.PromotionMgr.getPromotions = function() {};

/**
 * Returns all promotions currently inactive, but scheduled
 for any time between <i>now</i> and <i>now + previewTime(hours)</i>,
 and which are applicable based on the current customer, source code, and
 coupons in the current basket.<br/>
 The parameter <i>previewTime</i> specifies for how many hours promotions
 should be previewed.
 * @memberOf dw.campaign.PromotionMgr
 * @param {Number} previewTime - Preview time in hours
 * @return {dw.campaign.PromotionPlan} PromotionPlan with active promotions
 * @see <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActivePromotions_DetailAnchor">getActivePromotions()</a>
 * @static
 */
dw.campaign.PromotionMgr.getUpcomingCustomerPromotions = function(previewTime) {};

/**
 * Returns all promotions currently inactive, but scheduled
 for any time between <i>now</i> and <i>now + previewTime(hours)</i>. <br/>
 The upcoming promotions are returned in an instance of
 <a href="class_dw_campaign_PromotionPlan.html">PromotionPlan</a> and might not necessarily be applicable for
 the current customer or source code. <br/>
 The parameter <i>previewTime</i> specifies for how many hours promotions
 should be previewed.
 * @memberOf dw.campaign.PromotionMgr
 * @param {Number} previewTime - Preview time in hours
 * @return {dw.campaign.PromotionPlan} PromotionPlan with active promotions
 * @see <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActivePromotions_DetailAnchor">getActivePromotions()</a>
 * @static
 */
dw.campaign.PromotionMgr.getUpcomingPromotions = function(previewTime) {};

/**
 * PromotionPlan represents a set of <a href="class_dw_campaign_Promotion.html">Promotion</a> instances and
 is used to display active or upcoming promotions on storefront pages, or to
 pass it to the <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a> to calculate a
 <a href="class_dw_campaign_DiscountPlan.html">DiscountPlan</a> and subsequently apply discounts to a line
 item container. Instances of the class are returned by the
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActivePromotions_DetailAnchor">PromotionMgr.getActivePromotions()</a>,
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getActiveCustomerPromotions_DetailAnchor">PromotionMgr.getActiveCustomerPromotions()</a> and
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_getUpcomingPromotions_int_DetailAnchor">PromotionMgr.getUpcomingPromotions(Number)</a>.
 <p/>
 PromotionPlan provides methods to access the promotions in the plan and to
 remove promotions from the plan. All methods which return a collection of
 promotions sort them by the following ordered criteria:
 <p/>

 <ol>
 <li>Exclusivity: GLOBAL exclusive promotions first, followed by CLASS
 exclusive promotions, and NO exclusive promotions last.</li>
 <li>Rank: sorted ascending</li>
 <li>Promotion Class: PRODUCT promotions first, followed by ORDER promotions,
 and SHIPPING promotions last.</li>
 <li>Discount type: Fixed price promotions first, followed by free,
 amount-off, percentage-off, and bonus product promotions last.</li>
 <li>Best discount: Sorted descending. For example, 30% off comes before 20%
 off.</li>
 <li>ID: alphanumeric ascending.</li>
 </ol>
 * @class
 * @extends Object
 * @see <a href="class_dw_campaign_PromotionMgr.html">PromotionMgr</a>
 */
dw.campaign.PromotionPlan = function() {};
dw.campaign.PromotionPlan.prototype = new Object();

/**
 * Constant indicating that a collection of promotions should be sorted
 first by exclusivity, then rank, promotion class, etc.  See class-level
 javadoc for details.  This is the default sort order for methods that
 return a collection of promotions.
 * @type Number
 * @memberOf dw.campaign.PromotionPlan
 * @static
 * @const
 */
dw.campaign.PromotionPlan.SORT_BY_EXCLUSIVITY = 0;

/**
 * Constant indicating that a collection of promotions should be sorted by
 start date ascending. If there is no explicit start date for a promotion
 the start date of its containing Campaign or AB-test is used instead.
 Promotions without a start date are sorted before promotions with a start
 date in the future and after promotions with a start date in the past. In
 case two promotion assignments have the same start date, they are sorted
 by their ID.
 * @type Number
 * @memberOf dw.campaign.PromotionPlan
 * @static
 * @const
 */
dw.campaign.PromotionPlan.SORT_BY_START_DATE = 0;

/**
 * Returns all order promotions contained in this plan.
 * @memberOf dw.campaign.PromotionPlan
 * @return {dw.util.Collection} The sorted collection of order promotions contained in the promotion plan.
 */
dw.campaign.PromotionPlan.prototype.getOrderPromotions = function() {};

/**
 * Returns the order promotions explicitly associated to the specified
 discounted payment card.
 <p/>
 This method is usually used to display order promotions along with
 payment card choices.
 * @memberOf dw.campaign.PromotionPlan
 * @param {dw.order.PaymentCard} paymentCard - Discounted payment card
 * @return {dw.util.Collection} The sorted collection of order promotions associated with the          specified payment card.
 */
dw.campaign.PromotionPlan.prototype.getPaymentCardPromotions = function(paymentCard) {};

/**
 * Returns the order promotions explicitly associated to the specified
 discounted payment method.
 <p/>
 This method is usually used to display order promotions along with
 payment method choices.
 * @memberOf dw.campaign.PromotionPlan
 * @param {dw.order.PaymentMethod} paymentMethod - Discounted payment method
 * @return {dw.util.Collection} The sorted collection of order promotions associated with the          specified payment method.
 */
dw.campaign.PromotionPlan.prototype.getPaymentMethodPromotions = function(paymentMethod) {};

/**
 * Returns all product promotions contained in this plan.
 * @memberOf dw.campaign.PromotionPlan
 * @return {dw.util.Collection} The sorted collection of product promotions contained in the promotion plan.
 */
dw.campaign.PromotionPlan.prototype.getProductPromotions = function() {};

/**
 * Returns the promotions related to the specified product. <br/>
 The method returns all promotions where the product is either a
 qualifying product, or a discounted product, or both. It also returns
 promotions where the specified product is a bonus product.
 <p/>
 This method is usually used to display product promotions on a product
 details page.
 <p/>
 If a master product is passed, then this method will return promotions
 which are relevant for the master itself or at least one of its variants.
 * @memberOf dw.campaign.PromotionPlan
 * @param {dw.catalog.Product} product - Product associated with promotion
 * @return {dw.util.Collection} The sorted collection of promotions related to specified          discounted product.
 */
dw.campaign.PromotionPlan.prototype.getProductPromotions = function(product) {};

/**
 * Returns the product promotions for which the specified product is a
 discounted (and possibly also a qualifying) product. It also returns
 promotions where the specified product is a bonus product.
 <p/>
 This method is usually used to display product promotions on a product
 details page when separate callout messages are defined depending on if
 the product is a qualifying or discounted product for the promotion.
 <p/>
 If a master product is passed, then this method will return promotions
 for which the master product itself or at least one of its product's
 variants is a discounted product.
 * @memberOf dw.campaign.PromotionPlan
 * @param {dw.catalog.Product} product - The discounted product.
 * @return {dw.util.Collection} Product promotions related to the specified discounted product.
 */
dw.campaign.PromotionPlan.prototype.getProductPromotionsForDiscountedProduct = function(product) {};

/**
 * Returns the product promotions for which the specified product is a
 qualifying but NOT a discounted product.
 <p/>
 This method is usually used to display product promotions on a product
 details page when separate callout messages are defined depending on if
 the product is a qualifying or discounted product for the promotion.
 <p/>
 If a master product is passed, then this method will return promotions
 for which the master product itself or at least one of its product's
 variants is a qualifying product.
 * @memberOf dw.campaign.PromotionPlan
 * @param {dw.catalog.Product} product - The qualifying product.
 * @return {dw.util.Collection} Product promotions related to the specified qualifying product.
 */
dw.campaign.PromotionPlan.prototype.getProductPromotionsForQualifyingProduct = function(product) {};

/**
 * Returns all promotions contained in this plan sorted by exclusivity.
 * @memberOf dw.campaign.PromotionPlan
 * @return {dw.util.Collection} The sorted collection of promotions contained in the promotion plan.
 */
dw.campaign.PromotionPlan.prototype.getPromotions = function() {};

/**
 * Returns all promotions contained in this plan sorted according to the
 specified sort order. If the passed sort order is invalid, then the
 returned promotions will be sorted by exclusivity.
 * @memberOf dw.campaign.PromotionPlan
 * @param {Number} sortOrder - the sort order to use. Must be SORT_BY_EXCLUSIVITY or             SORT_BY_START_DATE. If an invalid value is passed,             SORT_BY_EXCLUSIVITY is used.
 * @return {dw.util.Collection} The sorted collection of promotions contained in the promotion          plan.
 */
dw.campaign.PromotionPlan.prototype.getPromotions = function(sortOrder) {};

/**
 * Returns the promotions related to the specified product. <br/>
 The method returns all promotions where the product is either
 a qualifying product, or a discounted product, or both. It also
 returns promotions where the specified product is a bonus product.
 <p/>
 This method is usually used to display product promotions on a
 product details page.
 * @memberOf dw.campaign.PromotionPlan
 * @param {dw.catalog.Product} product - Product associated with promotion
 * @return {dw.util.Collection} The sorted collection of promotions related to the specified discounted product.
 * @deprecated Use <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_Product_DetailAnchor">getProductPromotions(Product)</a>
 */
dw.campaign.PromotionPlan.prototype.getPromotions = function(product) {};

/**
 * Returns all shipping promotions contained in this plan.
 * @memberOf dw.campaign.PromotionPlan
 * @return {dw.util.Collection} The sorted collection of shipping promotions contained in promotion plan.
 */
dw.campaign.PromotionPlan.prototype.getShippingPromotions = function() {};

/**
 * Returns the shipping promotions related to the specified discounted
 shipping method, i.e. the returned promotions apply a discount on
 the specified shipping method.
 <p/>
 This method is usually used to display shipping promotions along with
 shipping methods.
 * @memberOf dw.campaign.PromotionPlan
 * @param {dw.order.ShippingMethod} shippingMethod - Discounted shipping method
 * @return {dw.util.Collection} The sorted collection of shipping promotions with specified method as discounted method.
 */
dw.campaign.PromotionPlan.prototype.getShippingPromotions = function(shippingMethod) {};

/**
 * Remove promotion from promotion plan. <br/>
 Please note that this is the only way to remove promotions from the
 plan, i.e. removing promotions from the collections returned
 by methods such as <a href="class_dw_campaign_PromotionPlan.html#dw_campaign_PromotionPlan_getProductPromotions_DetailAnchor">getProductPromotions()</a> has no effect
 on the promotion plan.
 * @memberOf dw.campaign.PromotionPlan
 * @param {dw.campaign.Promotion} promotion - Promotion to remove from promotion plan
 */
dw.campaign.PromotionPlan.prototype.removePromotion = function(promotion) {};

/**
 * Represents content for a slot.
 * @class
 * @extends Object
 */
dw.campaign.SlotContent = function() {};
dw.campaign.SlotContent.prototype = new Object();

/**
 * Returns the callout message for the slot.
 * @memberOf dw.campaign.SlotContent
 * @return {dw.content.MarkupText} Callout message of the slot.
 */
dw.campaign.SlotContent.prototype.getCalloutMsg = function() {};

/**
 * Returns a collection of content based on the content type
 for the slot. The collection will include one of the following
 types: <a href="class_dw_catalog_Product.html">Product</a>, <a href="class_dw_content_Content.html">Content</a>, <a href="class_dw_catalog_Category.html">Category</a>, or <a href="class_dw_content_MarkupText.html">MarkupText</a>.
 * @memberOf dw.campaign.SlotContent
 * @return {dw.util.Collection} All content of the slot.
 */
dw.campaign.SlotContent.prototype.getContent = function() {};

/**
 * Returns the custom attributes for the slot.
 * @memberOf dw.campaign.SlotContent
 * @return {dw.util.Map} Custom attributes of the slot.
 */
dw.campaign.SlotContent.prototype.getCustom = function() {};

/**
 * Returns the unique slot ID.
 * @memberOf dw.campaign.SlotContent
 * @return {String} ID of the slot.
 */
dw.campaign.SlotContent.prototype.getSlotID = function() {};

/**
 * A source code group defines a collection of source codes. Source code groups
 are generally pattern based and any source code satisfying the pattern
 belongs to the group. In this way, merchants may define a large set of source
 codes which qualify a customer for site experiences (different prices, for
 example), which customers without that source code do not receive.
 The class <a href="class_dw_campaign_SourceCodeInfo.html">SourceCodeInfo</a> represents an individual source
 code.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.campaign.SourceCodeGroup = function() {};
dw.campaign.SourceCodeGroup.prototype = new dw.object.ExtensibleObject();

/**
 * The ID of the SourceCodeGroup.
 * @memberOf dw.campaign.SourceCodeGroup
 * @return {String} the ID.
 */
dw.campaign.SourceCodeGroup.prototype.getID = function() {};

/**
 * Returns a Collection of PriceBooks the SourceCodeGroup is assigned to.
 * @memberOf dw.campaign.SourceCodeGroup
 * @return {dw.util.Collection} Collection of PriceBooks the SourceCodeGroup is assigned to.
 */
dw.campaign.SourceCodeGroup.prototype.getPriceBooks = function() {};

/**
 * Class representing a code (i.e. a "source code") that has been applied to a
 customer's session. Source codes can qualify customers for different
 campaigns, promotions, and other site experiences from those that the typical
 customer sees. Codes are organized into source code groups.
 <p/>
 Typically, a code is applied to a customer's session automatically by the
 Demandware framework when a customer accesses a Demandware URL with a well
 known request parameter in the querystring.  A code may also be explicitly
 applied to a customer session using the <code>SetSourceCode</code>
 pipelet.
 * @class
 * @extends Object
 */
dw.campaign.SourceCodeInfo = function() {};
dw.campaign.SourceCodeInfo.prototype = new Object();

/**
 * The literal source-code is found and currently active.
 * @type Number
 * @memberOf dw.campaign.SourceCodeInfo
 * @static
 * @const
 */
dw.campaign.SourceCodeInfo.STATUS_ACTIVE = 0;

/**
 * The literal source-code is found but not active.
 * @type Number
 * @memberOf dw.campaign.SourceCodeInfo
 * @static
 * @const
 */
dw.campaign.SourceCodeInfo.STATUS_INACTIVE = 0;

/**
 * The literal source-code is not found in the system.
 * @type Number
 * @memberOf dw.campaign.SourceCodeInfo
 * @static
 * @const
 */
dw.campaign.SourceCodeInfo.STATUS_INVALID = 0;

/**
 * The literal source-code.
 * @memberOf dw.campaign.SourceCodeInfo
 * @return {String} the source-code.
 */
dw.campaign.SourceCodeInfo.prototype.getCode = function() {};

/**
 * The associated source-code group.
 * @memberOf dw.campaign.SourceCodeInfo
 * @return {dw.campaign.SourceCodeGroup} the source-code group.
 */
dw.campaign.SourceCodeInfo.prototype.getGroup = function() {};

/**
 * Retrieves the redirect information from the last processed SourceCodeGroup (active or inactive). If none exists,
 then the redirect information is retrieved from the source-code preferences, based on the active/inactive status
 of the SourceCodeGroup. The redirect information is then resolved to the output URL. If the redirect information
 cannot be resolved to a URL, or there is an error retrieving the preferences, then null is returned.
 * @memberOf dw.campaign.SourceCodeInfo
 * @return {dw.web.URLRedirect} URLRedirect containing the location and status code, null in case of no redirect was found
 */
dw.campaign.SourceCodeInfo.prototype.getRedirect = function() {};

/**
 * The status of the source-code.  One of the following:
 STATUS_INVALID - The source code is not found in the system.
 STATUS_INACTIVE - The source code is found but not active.
 STATUS_INACTIVE - The source code is found and active.
 * @memberOf dw.campaign.SourceCodeInfo
 * @return {Number} the status.
 */
dw.campaign.SourceCodeInfo.prototype.getStatus = function() {};

/**
 *
 * @class
 * @extends Object
 */
dw.campaign.SourceCodeStatusCodes = function() {};
dw.campaign.SourceCodeStatusCodes.prototype = new Object();

/**
 * Indicates that the specified source code was found in one or more
 source-code groups, none of which are active.
 * @type String
 * @memberOf dw.campaign.SourceCodeStatusCodes
 * @static
 * @const
 */
dw.campaign.SourceCodeStatusCodes.CODE_INACTIVE = '';

/**
 * Indicates that the specified source code is not contained
 in any source-code group.
 * @type String
 * @memberOf dw.campaign.SourceCodeStatusCodes
 * @static
 * @const
 */
dw.campaign.SourceCodeStatusCodes.CODE_INVALID = '';

/**
 * Represents a <i>total fix price</i> discount on a group of products in the
 discount plan.  For example:  "buy 3 products of type X for a total price
 of $29.99".
 * @class
 * @extends dw.campaign.Discount
 */
dw.campaign.TotalFixedPriceDiscount = function() {};
dw.campaign.TotalFixedPriceDiscount.prototype = new dw.campaign.Discount();

/**
 * Returns the total fixed price amount.
 * @memberOf dw.campaign.TotalFixedPriceDiscount
 * @return {Number} Total fixed price amount
 */
dw.campaign.TotalFixedPriceDiscount.prototype.getTotalFixedPrice = function() {};

/**
 * Represents a Demandware Catalog. Catalogs are containers of products and
 other product-related information and can be shared between sites. Every
 product in the system is contained in (or "owned by") exactly one catalog.
 Every site has a single "site catalog" which defines the products that are
 available to purchase on that site. The static method
 <a href="class_dw_catalog_CatalogMgr.html#dw_catalog_CatalogMgr_getSiteCatalog_DetailAnchor">CatalogMgr.getSiteCatalog()</a> returns the site catalog for
 the current site.
 <p/>
 Catalogs are organized into a tree of categories with a single top-level root
 category. Products are assigned to categories within catalogs. They can be
 assigned to categories in their owning catalog, or other catalogs. They can
 be assigned to multiple categories within the same catalog. Products that are
 not assigned to any categories are considered "uncategorized." A product has
 a single "classification category" in some catalog, and one
 "primary category" per catalog. The classification category defines the
 attribute set of the product. The primary category is used as standard
 presentation context within that catalog in the storefront.
 <p/>
 While the Demandware platform does not currently distinguish different
 catalog types, it is common practice to have two general types of catalog:

 <ul>
 <li>"Product catalogs" typically contain detailed product information and are
 frequently generated from some backend PIM system.</li>
 <li>"Site Catalogs" define the category structure of the storefront and
 contain primarily the assignments of these categories to the products defined
 in the product catalogs. The site catalog is assigned to the site.</li>
 </ul>
 <p/>
 In addition to products and categories, catalogs contain recommendations,
 shared variation attributes which can be used by multiple master products,
 and shared product options which can be used by multiple option products.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.Catalog = function() {};
dw.catalog.Catalog.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the value of the localized extensible object attribute
 "shortDescription" for the current locale.
 * @memberOf dw.catalog.Catalog
 * @return {String} The value of the attribute for the current locale,               or null if it wasn't found.
 */
dw.catalog.Catalog.prototype.getDescription = function() {};

/**
 * Returns the value of the localized extensible object attribute
 "displayName" for the current locale.
 * @memberOf dw.catalog.Catalog
 * @return {String} The value of the attribute for the current locale,               or null if it wasn't found.
 */
dw.catalog.Catalog.prototype.getDisplayName = function() {};

/**
 * Returns the value of attribute 'id'.
 * @memberOf dw.catalog.Catalog
 * @return {String} the value of the attribute 'id'
 */
dw.catalog.Catalog.prototype.getID = function() {};

/**
 * Returns the object for the relation 'root'.
 * @memberOf dw.catalog.Catalog
 * @return {dw.catalog.Category} the object for the relation 'root'.
 */
dw.catalog.Catalog.prototype.getRoot = function() {};

/**
 * Provides helper methods for getting categories.
 * @class
 * @extends Object
 */
dw.catalog.CatalogMgr = function() {};
dw.catalog.CatalogMgr.prototype = new Object();

/**
 * Returns the catalog identified by the specified catalog id.
 Returns null if no catalog with the specified id exists in the
 current organization context.
 * @memberOf dw.catalog.CatalogMgr
 * @param {String} id - Catalog id
 * @return {dw.catalog.Catalog} the catalog or null.
 * @static
 */
dw.catalog.CatalogMgr.getCatalog = function(id) {};

/**
 * Returns the category of the site catalog identified by the specified
 category id. Returns null if no site catalog is defined, or no category
 with the specified id is found in the site catalog.
 * @memberOf dw.catalog.CatalogMgr
 * @param {String} id - the category identifier.
 * @return {dw.catalog.Category} the category of the site catalog identified by the specified  category id or null if no site catalog is found.
 * @static
 */
dw.catalog.CatalogMgr.getCategory = function(id) {};

/**
 * Returns the catalog of the current site or null if no catalog is assigned to the site.
 * @memberOf dw.catalog.CatalogMgr
 * @return {dw.catalog.Catalog} the catalog of the current site or null.
 * @static
 */
dw.catalog.CatalogMgr.getSiteCatalog = function() {};

/**
 * Returns the sorting option with the given ID for this site, or
 <code>null</code> if there is no such option.
 * @memberOf dw.catalog.CatalogMgr
 * @param {String} id - the ID of the sorting option
 * @return {dw.catalog.SortingOption} a SortingOption or null.
 * @static
 */
dw.catalog.CatalogMgr.getSortingOption = function(id) {};

/**
 * Returns a list containing the sorting options configured for this site.
 * @memberOf dw.catalog.CatalogMgr
 * @return {dw.util.List} a list of SortingOption objects
 * @static
 */
dw.catalog.CatalogMgr.getSortingOptions = function() {};

/**
 * Returns the sorting rule with the given ID for this site,
 or <code>null</code> if there is no such rule.
 * @memberOf dw.catalog.CatalogMgr
 * @param {String} id - the ID of the sorting rule
 * @return {dw.catalog.SortingRule} a SortingRule or null.
 * @static
 */
dw.catalog.CatalogMgr.getSortingRule = function(id) {};

/**
 * Returns a collection containing all of the sorting rules for this site.
 * @memberOf dw.catalog.CatalogMgr
 * @return {dw.util.Collection} a collection of SortingRule objects
 * @static
 */
dw.catalog.CatalogMgr.getSortingRules = function() {};

/**
 * Represents a category in a product catalog.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.Category = function() {};
dw.catalog.Category.prototype = new dw.object.ExtensibleObject();

/**
 * Returns all outgoing recommendations for this category.  The
 recommendations are sorted by their explicitly set order.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly empty.
 */
dw.catalog.Category.prototype.getAllRecommendations = function() {};

/**
 * Returns all outgoing recommendations for this category which are of the
 specified type. The recommendations are sorted by their explicitly set
 order.
 * @memberOf dw.catalog.Category
 * @param {Number} type - the recommendation type.
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly empty.
 */
dw.catalog.Category.prototype.getAllRecommendations = function(type) {};

/**
 * Returns a collection of category assignments of the category.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} Collection of category assignments of the category.
 */
dw.catalog.Category.prototype.getCategoryAssignments = function() {};

/**
 * Returns the default sorting rule configured for this category,
 or <code>null</code> if there is no default rule to be applied for it.

 This method returns the default rule for the parent category if this
 category inherits one.  The parent category may inherit its default
 rule from its parent, and so on, up to the root category.

 This method returns <code>null</code> if no ancestor category for this
 category has a default rule.
 * @memberOf dw.catalog.Category
 * @return {dw.catalog.SortingRule} the default SortingRule or null.
 */
dw.catalog.Category.prototype.getDefaultSortingRule = function() {};

/**
 * Returns the description of the catalog category for the current locale.
 * @memberOf dw.catalog.Category
 * @return {String} The value of the property for the current locale, or null if it          wasn't found.
 */
dw.catalog.Category.prototype.getDescription = function() {};

/**
 * Returns the display name of the of the catalog category for the current locale.

 This value is intended to be used as the
 external visible name of the catalog category.
 * @memberOf dw.catalog.Category
 * @return {String} The value of the property for the current locale, or null if it          wasn't found.
 */
dw.catalog.Category.prototype.getDisplayName = function() {};

/**
 * Returns the id of the category.
 * @memberOf dw.catalog.Category
 * @return {String} the id of the category.
 */
dw.catalog.Category.prototype.getID = function() {};

/**
 * Returns the image reference of this catalog category.
 * @memberOf dw.catalog.Category
 * @return {dw.content.MediaFile} the image reference for this category.
 */
dw.catalog.Category.prototype.getImage = function() {};

/**
 * Returns the collection of <a href="class_dw_catalog_CategoryLink.html">CategoryLink</a> objects for which this category
 is the target.  If the source category of a link belongs to a different
 catalog than the catalog owning this category, it is not returned.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} a collection of {@link dw.catalog.CategoryLink} objects, possibly empty but not null.
 */
dw.catalog.Category.prototype.getIncomingCategoryLinks = function() {};

/**
 * Returns the collection of <a href="class_dw_catalog_CategoryLink.html">CategoryLink</a> objects for which this category
 is the target and which are of the specified type.  If the source
 category of a link belongs to a different catalog than the catalog owning
 this category, it is not returned.
 * @memberOf dw.catalog.Category
 * @param {Number} type - the link type type.
 * @return {dw.util.Collection} a collection of {@link dw.catalog.CategoryLink} objects, possibly empty but not null.
 */
dw.catalog.Category.prototype.getIncomingCategoryLinks = function(type) {};

/**
 * Returns a collection of category assignments of the category where the
 referenced product is currently online. When checking the online status
 of the product, the online flag and the online from &amp; to dates are taken
 into account. Online flag, online from &amp; to dates set for the current site
 takes precedence over the default values.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} Collection of online category assignments of the category.
 */
dw.catalog.Category.prototype.getOnlineCategoryAssignments = function() {};

/**
 * Returns the online status flag of the category.
 * @memberOf dw.catalog.Category
 * @return {Boolean} the online status flag of the category.
 */
dw.catalog.Category.prototype.getOnlineFlag = function() {};

/**
 * Returns the date from which the category is online or valid.
 * @memberOf dw.catalog.Category
 * @return {Date} the date from which the category is online or valid.
 */
dw.catalog.Category.prototype.getOnlineFrom = function() {};

/**
 * Returns the collection of <a href="class_dw_catalog_CategoryLink.html">CategoryLink</a> objects for
 which this category is the target. If the source category of a link
 belongs to a different catalog than the catalog owning this category, it
 is not returned. Additionally, this method will only return a link if the
 source category is currently online. A category is currently online if
 its online flag equals true and the current site date is within the date
 range defined by the onlineFrom and onlineTo attributes.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} a collection of {@link dw.catalog.CategoryLink} objects, possibly          empty but not null.
 */
dw.catalog.Category.prototype.getOnlineIncomingCategoryLinks = function() {};

/**
 * Returns the collection of <a href="class_dw_catalog_CategoryLink.html">CategoryLink</a> objects for
 which this category is the source. If the target category of a link
 belongs to a different catalog than the catalog owning this category, it
 is not returned. Additionally, this method will only return a link if the
 target category is currently online. A category is currently online if
 its online flag equals true and the current site date is within the date
 range defined by the onlineFrom and onlineTo attributes.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} a collection of {@link dw.catalog.CategoryLink} objects, possibly          empty but not null.
 */
dw.catalog.Category.prototype.getOnlineOutgoingCategoryLinks = function() {};

/**
 * Returns the online products assigned to this category. Offline
 products are not included in the returned collection.
 When checking the online status of the product,
 the online flag and the online from &amp; to dates are taken into account.
 Online flag, online from &amp; to dates set for the current site takes precedence
 over the default values. <br/>

 The order of products in the returned collection corresponds to the
 defined explicit sorting of products in this category. <br/>
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} Sorted collection of online products of this category.
 */
dw.catalog.Category.prototype.getOnlineProducts = function() {};

/**
 * Returns a sorted collection of currently online subcategories of this
 catalog category. A category is currently online if its online flag
 equals true and the current site date is within the date range defined by
 the onlineFrom and onlineTo attributes.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} a collection of currently online subcategories. The returned          collection is sorted by position. Subcategories marked as          "unsorted" always appear after those marked as "sorted" but are          otherwise not in any guaranteed order.
 */
dw.catalog.Category.prototype.getOnlineSubCategories = function() {};

/**
 * Returns the date until which the category is online or valid.
 * @memberOf dw.catalog.Category
 * @return {Date} the date until which the category is online or valid.
 */
dw.catalog.Category.prototype.getOnlineTo = function() {};

/**
 * Returns a list of outgoing recommendations for this category. This method
 behaves similarly to <a href="class_dw_catalog_Category.html#dw_catalog_Category_getRecommendations_DetailAnchor">getRecommendations()</a> but additionally filters out
 recommendations for which the target product is unorderable according to
 its product availability model.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly          empty.
 * @see <a href="class_dw_catalog_ProductAvailabilityModel.html#dw_catalog_ProductAvailabilityModel_isOrderable_DetailAnchor">ProductAvailabilityModel.isOrderable()</a>
 */
dw.catalog.Category.prototype.getOrderableRecommendations = function() {};

/**
 * Returns a list of outgoing recommendations for this category. This method
 behaves similarly to <a href="class_dw_catalog_Category.html#dw_catalog_Category_getRecommendations_int_DetailAnchor">getRecommendations(Number)</a> but additionally
 filters out recommendations for which the target product is unorderable
 according to its product availability model.
 * @memberOf dw.catalog.Category
 * @param {Number} type - the recommendation type.
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly          empty.
 * @see <a href="class_dw_catalog_ProductAvailabilityModel.html#dw_catalog_ProductAvailabilityModel_isOrderable_DetailAnchor">ProductAvailabilityModel.isOrderable()</a>
 */
dw.catalog.Category.prototype.getOrderableRecommendations = function(type) {};

/**
 * Returns the collection of <a href="class_dw_catalog_CategoryLink.html">CategoryLink</a> objects for which this category
 is the source.  If the target category of a link belongs to a different
 catalog than the catalog owning this category, it is not returned.
 The collection of links is sorted by the explicitly defined order
 for this category with unsorted links appearing at the end.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} a collection of {@link dw.catalog.CategoryLink} objects, possibly empty but not null.
 */
dw.catalog.Category.prototype.getOutgoingCategoryLinks = function() {};

/**
 * Returns the collection of <a href="class_dw_catalog_CategoryLink.html">CategoryLink</a> objects for which this category
 is the source and which are of the specified type.  If the target
 category of a link belongs to a different catalog than the catalog owning
 this category, it is not returned.  The collection of links is sorted by
 the explicitly defined order for this category with unsorted links
 appearing at the end.
 * @memberOf dw.catalog.Category
 * @param {Number} type - the link type type.
 * @return {dw.util.Collection} a collection of {@link dw.catalog.CategoryLink} objects, possibly empty but not null.
 */
dw.catalog.Category.prototype.getOutgoingCategoryLinks = function(type) {};

/**
 * Returns the page description of this category for the default locale.
 * @memberOf dw.catalog.Category
 * @return {String} The value of the pageDescription property for the default locale,               or null if it wasn't found.
 */
dw.catalog.Category.prototype.getPageDescription = function() {};

/**
 * Returns the page keywords of this category for the default locale.
 * @memberOf dw.catalog.Category
 * @return {String} The value of the pageKeywords property for the default locale,               or null if it wasn't found.
 */
dw.catalog.Category.prototype.getPageKeywords = function() {};

/**
 * Returns the page title of this category for the default locale.
 * @memberOf dw.catalog.Category
 * @return {String} The value of the pageTitle property for the default locale,               or null if it wasn't found.
 */
dw.catalog.Category.prototype.getPageTitle = function() {};

/**
 * Returns the page URL property of this category.
 * @memberOf dw.catalog.Category
 * @return {String} The value of the pageUrl property for the default locale,               or null if it wasn't found.
 */
dw.catalog.Category.prototype.getPageURL = function() {};

/**
 * Returns the parent of this category.
 * @memberOf dw.catalog.Category
 * @return {dw.catalog.Category} a CatalogCategory instance representing  the parent of this CatalogCategory or null.
 */
dw.catalog.Category.prototype.getParent = function() {};

/**
 * Returns this category's ProductAttributeModel, which makes access to the
 category's attribute information convenient. The model is calculated
 based on the attribute definitions assigned to this category and the
 global attribute definitions for the object type 'Product'.
 * @memberOf dw.catalog.Category
 * @return {dw.catalog.ProductAttributeModel} the ProductAttributeModel for this category.
 */
dw.catalog.Category.prototype.getProductAttributeModel = function() {};

/**
 * Returns all products assigned to this category. <br/>

 The order of products in the returned collection corresponds to the
 defined explicit sorting of products in this category. <br/>
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} Sorted collection of all products of this category.
 */
dw.catalog.Category.prototype.getProducts = function() {};

/**
 * Returns the outgoing recommendations for this category.  If this category
 is not in the site catalog, or there is no site catalog, an empty
 collection is returned.  Only recommendations for which the target
 product exists and is assigned to the site catalog are returned.  The
 recommendations are sorted by their explicitly set order.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly empty.
 */
dw.catalog.Category.prototype.getRecommendations = function() {};

/**
 * Returns the outgoing recommendations for this category which are of the
 specified type.  Behaves the same as <a href="class_dw_catalog_Category.html#dw_catalog_Category_getRecommendations_DetailAnchor">getRecommendations()</a> but
 additionally filters by recommendation type.
 * @memberOf dw.catalog.Category
 * @param {Number} type - the recommendation type.
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly empty.
 */
dw.catalog.Category.prototype.getRecommendations = function(type) {};

/**
 * Returns the search placement of the category or null of no search placement is defined.
 * @memberOf dw.catalog.Category
 * @return {Number} The search placement of the category or null of no search placement is defined.
 */
dw.catalog.Category.prototype.getSearchPlacement = function() {};

/**
 * Returns the search rank of the category or null of no search rank is defined.
 * @memberOf dw.catalog.Category
 * @return {Number} The search rank of the category or null of no search rank is defined.
 */
dw.catalog.Category.prototype.getSearchRank = function() {};

/**
 * Returns the categorys change frequency needed for the sitemap creation.
 * @memberOf dw.catalog.Category
 * @return {String} The categorys sitemap change frequency.
 */
dw.catalog.Category.prototype.getSiteMapChangeFrequency = function() {};

/**
 * Returns the categorys priority needed for the sitemap creation.
 * @memberOf dw.catalog.Category
 * @return {Number} The categorys sitemap priority.
 */
dw.catalog.Category.prototype.getSiteMapPriority = function() {};

/**
 * Returns the subcategories of this category, including both online and
 offline subcategories.
 * @memberOf dw.catalog.Category
 * @return {dw.util.Collection} the subcategories of this category. The returned collection is          sorted by position. Subcategories marked as "unsorted" always          appear after those marked as "sorted" but are otherwise not in          any guaranteed order.
 */
dw.catalog.Category.prototype.getSubCategories = function() {};

/**
 * Returns the template property value , which is the file name of the template
 used to display the catalog category.
 * @memberOf dw.catalog.Category
 * @return {String} the value of the property 'template'.
 */
dw.catalog.Category.prototype.getTemplate = function() {};

/**
 * Returns the thumbnail image reference of this catalog category.
 * @memberOf dw.catalog.Category
 * @return {dw.content.MediaFile} the thumbnail image reference for this category.
 */
dw.catalog.Category.prototype.getThumbnail = function() {};

/**
 * Returns true if this category is a direct sub-category of the provided
 category.
 * @memberOf dw.catalog.Category
 * @param {dw.catalog.Category} parent - The parent category, must not be null.
 * @return {Boolean} True if this category is a direct sub-category of parent, false          otherwise.
 */
dw.catalog.Category.prototype.isDirectSubCategoryOf = function(parent) {};

/**
 * Returns the value indicating whether the catalog category is "currently
 online".  A category is currently online if its online flag equals true
 and the current site date is within the date range defined by the
 onlineFrom and onlineTo attributes.
 * @memberOf dw.catalog.Category
 * @return {Boolean} true if the category is currently online, false otherwise.
 */
dw.catalog.Category.prototype.isOnline = function() {};

/**
 * Identifies if the category is the root category of its catalog.
 * @memberOf dw.catalog.Category
 * @return {Boolean} 'true' if the category is the root category of its catalog,  'false' otherwise.
 */
dw.catalog.Category.prototype.isRoot = function() {};

/**
 * Returns true if this category is a sub-category of the provided category.
 This can be either a direct or an indirect sub-category.
 * @memberOf dw.catalog.Category
 * @param {dw.catalog.Category} ancestor - The ancestor category, must not be null.
 * @return {Boolean} true if this category is a sub-category of ancestor, false          otherwise.
 */
dw.catalog.Category.prototype.isSubCategoryOf = function(ancestor) {};

/**
 * Returns true if the category is a top level category, but not the root
 category.
 * @memberOf dw.catalog.Category
 * @return {Boolean} True if the category is a direct sub-category of the root          category, false otherwise.
 */
dw.catalog.Category.prototype.isTopLevel = function() {};

/**
 * Set the category's search placement.
 * @memberOf dw.catalog.Category
 * @param {Number} placement - The category's search placement.
 */
dw.catalog.Category.prototype.setSearchPlacement = function(placement) {};

/**
 * Set the categoriy's search rank.
 * @memberOf dw.catalog.Category
 * @param {Number} rank - The categoriy's search rank.
 */
dw.catalog.Category.prototype.setSearchRank = function(rank) {};

/**
 * Represents a category assignment in the Demandware framework.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.CategoryAssignment = function() {};
dw.catalog.CategoryAssignment.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the category assignment's callout message in the current locale.
 * @memberOf dw.catalog.CategoryAssignment
 * @return {dw.content.MarkupText} the category assignment's callout message in the current locale, or null if it          wasn't found.
 */
dw.catalog.CategoryAssignment.prototype.getCalloutMsg = function() {};

/**
 * Returns the category to which this category assignment is bound.
 * @memberOf dw.catalog.CategoryAssignment
 * @return {dw.catalog.Category} The category to which this category assignment is bound.
 */
dw.catalog.CategoryAssignment.prototype.getCategory = function() {};

/**
 * Returns the category assignment's image.
 * @memberOf dw.catalog.CategoryAssignment
 * @return {dw.content.MediaFile} the category assignment's image.
 */
dw.catalog.CategoryAssignment.prototype.getImage = function() {};

/**
 * Returns the category assignment's long description in the current locale.
 * @memberOf dw.catalog.CategoryAssignment
 * @return {dw.content.MarkupText} The category assignment's long description in the current locale, or null if it          wasn't found.
 */
dw.catalog.CategoryAssignment.prototype.getLongDescription = function() {};

/**
 * Returns the name of the category assignment in the current locale.
 * @memberOf dw.catalog.CategoryAssignment
 * @return {String} The name of the category assignment for the current locale, or null if it          wasn't found.
 */
dw.catalog.CategoryAssignment.prototype.getName = function() {};

/**
 * Returns the product to which this category assignment is bound.
 * @memberOf dw.catalog.CategoryAssignment
 * @return {dw.catalog.Product} The product to which this category assignment is bound.
 */
dw.catalog.CategoryAssignment.prototype.getProduct = function() {};

/**
 * Returns the category assignment's short description in the current locale.
 * @memberOf dw.catalog.CategoryAssignment
 * @return {dw.content.MarkupText} the category assignment's short description in the current locale, or null if it          wasn't found.
 */
dw.catalog.CategoryAssignment.prototype.getShortDescription = function() {};

/**
 * A CategoryLink represents a directed relationship between two catalog
 categories.  Merchants create category links in order to market similar or
 related groups of products.
 * @class
 * @extends Object
 */
dw.catalog.CategoryLink = function() {};
dw.catalog.CategoryLink.prototype = new Object();

/**
 * Represents an accessory category link.
 * @type Number
 * @memberOf dw.catalog.CategoryLink
 * @static
 * @const
 */
dw.catalog.CategoryLink.LINKTYPE_ACCESSORY = 0;

/**
 * Represents a cross-sell category link.
 * @type Number
 * @memberOf dw.catalog.CategoryLink
 * @static
 * @const
 */
dw.catalog.CategoryLink.LINKTYPE_CROSS_SELL = 0;

/**
 * Represents a miscellaneous category link.
 * @type Number
 * @memberOf dw.catalog.CategoryLink
 * @static
 * @const
 */
dw.catalog.CategoryLink.LINKTYPE_OTHER = 0;

/**
 * Represents a spare part category link.
 * @type Number
 * @memberOf dw.catalog.CategoryLink
 * @static
 * @const
 */
dw.catalog.CategoryLink.LINKTYPE_SPARE_PART = 0;

/**
 * Represents an up-sell category link.
 * @type Number
 * @memberOf dw.catalog.CategoryLink
 * @static
 * @const
 */
dw.catalog.CategoryLink.LINKTYPE_UP_SELL = 0;

/**
 * Returns the object for the relation 'sourceCategory'.
 * @memberOf dw.catalog.CategoryLink
 * @return {dw.catalog.Category} the object for the relation 'sourceCategory'
 */
dw.catalog.CategoryLink.prototype.getSourceCategory = function() {};

/**
 * Returns the object for the relation 'targetCategory'.
 * @memberOf dw.catalog.CategoryLink
 * @return {dw.catalog.Category} the object for the relation 'targetCategory'
 */
dw.catalog.CategoryLink.prototype.getTargetCategory = function() {};

/**
 * Returns the type of this category link (see constants).
 * @memberOf dw.catalog.CategoryLink
 * @return {Number} the type of the link.
 */
dw.catalog.CategoryLink.prototype.getTypeCode = function() {};

/**
 * Represents a price book.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.PriceBook = function() {};
dw.catalog.PriceBook.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the currency code of the price book.
 * @memberOf dw.catalog.PriceBook
 * @return {String} Currency code of the price book
 */
dw.catalog.PriceBook.prototype.getCurrencyCode = function() {};

/**
 * Returns the description of the price book.
 * @memberOf dw.catalog.PriceBook
 * @return {String} Currency code of the price book
 */
dw.catalog.PriceBook.prototype.getDescription = function() {};

/**
 * Returns the display name of the price book.
 * @memberOf dw.catalog.PriceBook
 * @return {String} Display name of the price book
 */
dw.catalog.PriceBook.prototype.getDisplayName = function() {};

/**
 * Returns the ID of the price book.
 * @memberOf dw.catalog.PriceBook
 * @return {String} ID of the price book
 */
dw.catalog.PriceBook.prototype.getID = function() {};

/**
 * Returns the online status flag of the price book.
 * @memberOf dw.catalog.PriceBook
 * @return {Boolean} the online status flag of the price book.
 */
dw.catalog.PriceBook.prototype.getOnlineFlag = function() {};

/**
 * Returns the date from which the price book is online or valid.
 * @memberOf dw.catalog.PriceBook
 * @return {Date} the date from which the price book is online or valid.
 */
dw.catalog.PriceBook.prototype.getOnlineFrom = function() {};

/**
 * Returns the date until which the price book is online or valid.
 * @memberOf dw.catalog.PriceBook
 * @return {Date} the date until which the price book is online or valid.
 */
dw.catalog.PriceBook.prototype.getOnlineTo = function() {};

/**
 * Returns the parent price book.
 * @memberOf dw.catalog.PriceBook
 * @return {dw.catalog.PriceBook} Parent price book
 */
dw.catalog.PriceBook.prototype.getParentPriceBook = function() {};

/**
 * Returns the online status of the price book. The online status
 is calculated from the online status flag and the onlineFrom
 onlineTo dates defined for the price book.
 * @memberOf dw.catalog.PriceBook
 * @return {Boolean} The online status of the price book.
 */
dw.catalog.PriceBook.prototype.isOnline = function() {};

/**
 * Price book manager provides methods to access price books.
 * @class
 * @extends Object
 */
dw.catalog.PriceBookMgr = function() {};
dw.catalog.PriceBookMgr.prototype = new Object();

/**
 * Returns all price books defined for the organization.
 * @memberOf dw.catalog.PriceBookMgr
 * @return {dw.util.Collection} All price books of the organization.
 * @static
 */
dw.catalog.PriceBookMgr.getAllPriceBooks = function() {};

/**
 * Returns the price book of the current organization matching the
 specified ID.
 * @memberOf dw.catalog.PriceBookMgr
 * @param {String} priceBookID - The price book id.
 * @return {dw.catalog.PriceBook} Price book or null of not found
 * @static
 */
dw.catalog.PriceBookMgr.getPriceBook = function(priceBookID) {};

/**
 * Returns all price books assigned to the current site. <br/>

 Please note that this doesn't include parent price books not assigned
 to the site, but considered by the price lookup.
 * @memberOf dw.catalog.PriceBookMgr
 * @return {dw.util.Collection} All price books assigned to the current site.
 * @static
 */
dw.catalog.PriceBookMgr.getSitePriceBooks = function() {};

/**
 * Represents a product in the Demandware framework. Products are identified by
 a unique product ID, sometimes called the SKU. There are several different
 types of product:

 <ul>
 <li><b>Simple product</b></li>
 <li><b>Master products:</b> This type of product defines a template for a set
 of related products which differ only by a set of defined
 "variation attributes", such as size or color. Master products are not
 orderable themselves. The variation information for a master product is
 available through its <a href="class_dw_catalog_ProductVariationModel.html">ProductVariationModel</a>.</li>
 <li><b>Variant:</b> Variants are the actual orderable products that are
 related to a master product. Each variant of a master product has a unique
 set of values for the defined variation attributes. Variants are said to be
 "mastered" by the corresponding master product.</li>
 <li><b>Option products:</b> Option products define additional options, such
 as a warranty, which can be purchased for a defined price at the time the
 product is purchased. The option information for an option product is
 available through its <a href="class_dw_catalog_ProductOptionModel.html">ProductOptionModel</a>.</li>
 <li><b>Product-sets:</b> A product-set is a set of products which the
 merchant can sell as a collection in the storefront, for example an outfit of
 clothes. Product-sets are not orderable and therefore do not define prices.
 They exist only to group the products together in the storefront UI. Members
 of the set are called "product-set-products".</li>
 <li><b>Products bundles:</b> A collection of products which can be ordered as
 a single unit and therefore can define its own price and inventory record.</li>
 </ul>

 <p/>
 Product price and availability information are retrievable through
 <a href="class_dw_catalog_Product.html#dw_catalog_Product_getPriceModel_DetailAnchor">getPriceModel()</a> and <a href="class_dw_catalog_Product.html#dw_catalog_Product_getAvailabilityModel_DetailAnchor">getAvailabilityModel()</a> respectively.
 Attribute information is retrievable through <a href="class_dw_catalog_Product.html#dw_catalog_Product_getAttributeModel_DetailAnchor">getAttributeModel()</a>.
 Products may reference other products, either as recommendations or product
 links. This class provides the methods for retrieving these referenced
 products.
 <p/>
 Products belong to a catalog (the "owning" catalog) and are assigned to
 categories in other catalogs. Products assigned to categories in the site
 catalog are typically orderable on the site.
 <p/>
 Any API method which returns products will return an instance of a
 <a href="class_dw_catalog_Variant.html">Variant</a> for variant products. This subclass contains
 methods which are specific to this type of product.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.Product = function() {};
dw.catalog.Product.prototype = new dw.object.ExtensibleObject();

/**
 * Identifies if this product is bound to the specified catalog category.
 * @memberOf dw.catalog.Product
 * @param {dw.catalog.Category} category - the CatalogCategory to check.
 * @return {Boolean} true if the product is bound to the CatalogCategory, false          otherwise.
 * @deprecated Use <a href="class_dw_catalog_Product.html#dw_catalog_Product_isAssignedToCategory_Category_DetailAnchor">isAssignedToCategory(Category)</a>
 */
dw.catalog.Product.prototype.assignedToCategory = function(category) {};

/**
 * Returns the active data for this product, for the current site.
 * @memberOf dw.catalog.Product
 * @return {dw.catalog.ProductActiveData} the active data for this product for the current site.
 */
dw.catalog.Product.prototype.getActiveData = function() {};

/**
 * Returns a collection of all categories to which this product is assigned.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of categories.
 */
dw.catalog.Product.prototype.getAllCategories = function() {};

/**
 * Returns all category assignments for this product in any catalog.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of category assignments of the product in any catalog.
 */
dw.catalog.Product.prototype.getAllCategoryAssignments = function() {};

/**
 * Returns all incoming ProductLinks.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} a collection of all incoming ProductLinks.
 */
dw.catalog.Product.prototype.getAllIncomingProductLinks = function() {};

/**
 * Returns all incoming ProductLinks of a specific type.
 * @memberOf dw.catalog.Product
 * @param {Number} type - the type of ProductLinks to use.
 * @return {dw.util.Collection} a collection of all incoming ProductLinks of a specific type.
 */
dw.catalog.Product.prototype.getAllIncomingProductLinks = function(type) {};

/**
 * Returns all outgoing ProductLinks.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} a collection of all outgoing ProductLinks.
 */
dw.catalog.Product.prototype.getAllProductLinks = function() {};

/**
 * Returns all outgoing ProductLinks of a specific type.
 * @memberOf dw.catalog.Product
 * @param {Number} type - the type of ProductLinks to fetch.
 * @return {dw.util.Collection} a collection of all outgoing ProductLinks of a specific type.
 */
dw.catalog.Product.prototype.getAllProductLinks = function(type) {};

/**
 * Returns the outgoing recommendations for this product which belong to the
 specified catalog. The recommendations are sorted by their explicitly set
 order.
 * @memberOf dw.catalog.Product
 * @param {dw.catalog.Catalog} catalog - the catalog containing the recommendations.
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly empty.
 */
dw.catalog.Product.prototype.getAllRecommendations = function(catalog) {};

/**
 * Returns the outgoing recommendations for this product which are of the
 specified type and which belong to the specified catalog.
 The recommendations are sorted by their explicitly set order.
 * @memberOf dw.catalog.Product
 * @param {dw.catalog.Catalog} catalog - the catalog containing the recommendations.
 * @param {Number} type - the recommendation type.
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly empty.
 */
dw.catalog.Product.prototype.getAllRecommendations = function(catalog, type) {};

/**
 * Returns this product's ProductAttributeModel, which makes access to the
 product attribute information convenient. The model is calculated based
 on the product attributes assigned to this product's classification
 category (or any of it's ancestors) and the global attribute definitions
 for the system object type 'Product'. If this product has no
 classification category, the attribute model is calculated on the global
 attribute definitions only. If this product is a variant, then the
 attribute model is calculated based on the classification category of its
 corresponding master product.
 * @memberOf dw.catalog.Product
 * @return {dw.catalog.ProductAttributeModel} the ProductAttributeModel for this product.
 */
dw.catalog.Product.prototype.getAttributeModel = function() {};

/**
 * Returns the availability model, which can be used to determine availability
 information for a product.
 * @memberOf dw.catalog.Product
 * @return {dw.catalog.ProductAvailabilityModel} the availability model for a product.
 */
dw.catalog.Product.prototype.getAvailabilityModel = function() {};

/**
 * Returns the availability model of the given inventory list, which can be
 used to determine availability information for a product.
 * @memberOf dw.catalog.Product
 * @param {dw.catalog.ProductInventoryList} list - The inventory list to get the availability model for. Must             not be null or an exception will be raised.
 * @return {dw.catalog.ProductAvailabilityModel} the availability model of the given inventory list for a product.
 */
dw.catalog.Product.prototype.getAvailabilityModel = function(list) {};

/**
 * Identifies if the product is available.
 * @memberOf dw.catalog.Product
 * @return {Boolean} the availability status flag of the product.
 * @deprecated Use <a href="class_dw_catalog_Product.html#dw_catalog_Product_getAvailabilityModel_DetailAnchor">getAvailabilityModel()</a> instead.
 */
dw.catalog.Product.prototype.getAvailableFlag = function() {};

/**
 * Returns the Brand of the product.
 * @memberOf dw.catalog.Product
 * @return {String} the Brand of the product.
 */
dw.catalog.Product.prototype.getBrand = function() {};

/**
 * Returns the quantity of the specified product within the bundle. If the
 specified product is not part of the bundle, a 0 quantity is returned.
 * @memberOf dw.catalog.Product
 * @param {dw.catalog.Product} aProduct - The product to determine the quantity for.
 * @return {dw.value.Quantity} The quantity of the product within the bundle or 0 if the product          is not part of the bundle.
 */
dw.catalog.Product.prototype.getBundledProductQuantity = function(aProduct) {};

/**
 * Returns a collection containing all products that participate in the
 product bundle.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} A collection containing all products of the product bundle.
 */
dw.catalog.Product.prototype.getBundledProducts = function() {};

/**
 * Returns a collection of all bundles in which this product is included.
 The method only returns bundles assigned to the current site.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of bundles in which this product is included, possibly empty.
 */
dw.catalog.Product.prototype.getBundles = function() {};

/**
 * Returns a collection of all categories to which this product is assigned
 and which are also available through the current site.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of categories to which this product is assigned  and which are also available through the current site.
 */
dw.catalog.Product.prototype.getCategories = function() {};

/**
 * Returns the category assignment for a specific category.
 * @memberOf dw.catalog.Product
 * @param {dw.catalog.Category} category - the category to use when fetching assignments.
 * @return {dw.catalog.CategoryAssignment} The category assignment for a specific category.
 */
dw.catalog.Product.prototype.getCategoryAssignment = function(category) {};

/**
 * Returns a collection of category assignments for this product in
 the current site catalog.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of category assignments.
 */
dw.catalog.Product.prototype.getCategoryAssignments = function() {};

/**
 * Returns the classification category associated with this Product. A
 product has a single classification category which may or may not be in
 the site catalog. The classification category defines the attribute set
 of the product. See <a href="class_dw_catalog_Product.html#dw_catalog_Product_getAttributeModel_DetailAnchor">Product.getAttributeModel()</a> for
 how the classification category is used.
 * @memberOf dw.catalog.Product
 * @return {dw.catalog.Category} the associated classification Category, or null if none is          associated.
 */
dw.catalog.Product.prototype.getClassificationCategory = function() {};

/**
 * Returns the European Article Number of the product.
 * @memberOf dw.catalog.Product
 * @return {String} the European Article Number of the product.
 */
dw.catalog.Product.prototype.getEAN = function() {};

/**
 * Returns the ID of the product.
 * @memberOf dw.catalog.Product
 * @return {String} ID of the product.
 */
dw.catalog.Product.prototype.getID = function() {};

/**
 * Returns the product's image.
 * @memberOf dw.catalog.Product
 * @return {dw.content.MediaFile} the product's image.
 * @deprecated <p>Demandware introduces a new more powerful product image
 management. It allows to group product images by self-defined view types
 (e.g. 'large', 'thumbnail', 'swatch') and variation values (e.g. for attribute
 color 'red', 'blue'). Images can be annotated with pattern based title and
 alt. Product images can be accessed from Demandware or external storage
 locations.</p>
 <p>Please use the new product image management. Therefore you have to set
 up the common product image settings like view types, image location,
 default image alt and title for your catalogs first. After that you can
 group your product images by the previously defined view types in context
 of a product. Finally use <a href="class_dw_catalog_Product.html#dw_catalog_Product_getImages_String_DetailAnchor">getImages(String)</a> and
  <a href="class_dw_catalog_Product.html#dw_catalog_Product_getImage_String_int_DetailAnchor">getImage(String, Number)</a> to access your images.</p>
 */
dw.catalog.Product.prototype.getImage = function() {};

/**
 * The method calls <a href="class_dw_catalog_Product.html#dw_catalog_Product_getImages_String_DetailAnchor">getImages(String)</a> and returns the first image.
 If no image is available the method returns null.

 When called for a variant with defined images for specified view type the
 method returns the first image.

 When called for a variant without defined images for specified view type
 the method returns the first master product image. If no master product
 images are defined, the method returns null.
 * @memberOf dw.catalog.Product
 * @param {String} viewtype - the view type annotated to image
 * @return {dw.content.MediaFile} the MediaFile or null
 * @throws NullArgumentException if viewtype is null
 * @const
 */
dw.catalog.Product.prototype.getImage = function(viewtype) {};

/**
 * The method calls <a href="class_dw_catalog_Product.html#dw_catalog_Product_getImages_String_DetailAnchor">getImages(String)</a> and returns the image at
 the specific index. If no image for specified index is available the
 method returns null.
 * @memberOf dw.catalog.Product
 * @param {String} viewtype - the view type annotated to image
 * @param {Number} index - the index number of the image within image list
 * @return {dw.content.MediaFile} the MediaFile or null
 * @throws NullArgumentException if viewtype is null
 */
dw.catalog.Product.prototype.getImage = function(viewtype, index) {};

/**
 * Returns all images assigned to this product for a specific view type,
 e.g. all 'thumbnail' images. The images are returned in the order of
 their index number ascending.

 When called for a master the method returns the images specific to the
 master, which are typically the fall back images.
 * @memberOf dw.catalog.Product
 * @param {String} viewtype - the view type annotated to images
 * @return {dw.util.List} a list of MediaFile objects, possibly empty
 * @throws NullArgumentException if viewtype is null
 */
dw.catalog.Product.prototype.getImages = function(viewtype) {};

/**
 * Returns incoming ProductLinks, where the source product is a site product.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} a collection of incoming ProductLinks, where the source product is          a site product.
 */
dw.catalog.Product.prototype.getIncomingProductLinks = function() {};

/**
 * Returns incoming ProductLinks, where the source product is a site product
 of a specific type.
 * @memberOf dw.catalog.Product
 * @param {Number} type - the type of ProductLinks to fetch.
 * @return {dw.util.Collection} a collection of incoming ProductLinks, where the source product is          a site product of a specific type.
 */
dw.catalog.Product.prototype.getIncomingProductLinks = function(type) {};

/**
 * Returns the product's long description in the current locale.
 * @memberOf dw.catalog.Product
 * @return {dw.content.MarkupText} The product's long description in the current locale, or null if it          wasn't found.
 */
dw.catalog.Product.prototype.getLongDescription = function() {};

/**
 * Returns the name of the product manufacturer.
 * @memberOf dw.catalog.Product
 * @return {String} the name of the product manufacturer.
 */
dw.catalog.Product.prototype.getManufacturerName = function() {};

/**
 * Returns the value of the manufacturer's stock keeping unit.
 * @memberOf dw.catalog.Product
 * @return {String} the value of the manufacturer's stock keeping unit.
 */
dw.catalog.Product.prototype.getManufacturerSKU = function() {};

/**
 * Returns the minimum order quantity for this product.
 * @memberOf dw.catalog.Product
 * @return {dw.value.Quantity} the minimum order quantity of the product.
 */
dw.catalog.Product.prototype.getMinOrderQuantity = function() {};

/**
 * Returns the name of the product in the current locale.
 * @memberOf dw.catalog.Product
 * @return {String} The name of the product for the current locale, or null if it          wasn't found.
 */
dw.catalog.Product.prototype.getName = function() {};

/**
 * Returns a collection of all currently online categories to which this
 product is assigned and which are also available through the current
 site. A category is currently online if its online flag equals true and
 the current site date is within the date range defined by the onlineFrom
 and onlineTo attributes.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of currently online categories to which this product          is assigned and which are also available through the current          site.
 */
dw.catalog.Product.prototype.getOnlineCategories = function() {};

/**
 * Returns the online status flag of the product.
 * @memberOf dw.catalog.Product
 * @return {Boolean} the online status flag of the product.
 */
dw.catalog.Product.prototype.getOnlineFlag = function() {};

/**
 * Returns the date from which the product is online or valid.
 * @memberOf dw.catalog.Product
 * @return {Date} the date from which the product is online or valid.
 */
dw.catalog.Product.prototype.getOnlineFrom = function() {};

/**
 * Returns the date until which the product is online or valid.
 * @memberOf dw.catalog.Product
 * @return {Date} the date until which the product is online or valid.
 */
dw.catalog.Product.prototype.getOnlineTo = function() {};

/**
 * Returns the product's option model. The option values selections are
 initialized with the values defined for the product, or the default values
 defined for the option.
 * @memberOf dw.catalog.Product
 * @return {dw.catalog.ProductOptionModel} the products option model.
 */
dw.catalog.Product.prototype.getOptionModel = function() {};

/**
 * Returns a list of outgoing recommendations for this product. This method
 behaves similarly to <a href="class_dw_catalog_Product.html#dw_catalog_Product_getRecommendations_DetailAnchor">getRecommendations()</a> but additionally filters out
 recommendations for which the target product is unorderable according to
 its product availability model.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly          empty.
 * @see <a href="class_dw_catalog_ProductAvailabilityModel.html#dw_catalog_ProductAvailabilityModel_isOrderable_DetailAnchor">ProductAvailabilityModel.isOrderable()</a>
 */
dw.catalog.Product.prototype.getOrderableRecommendations = function() {};

/**
 * Returns a list of outgoing recommendations for this product. This method
 behaves similarly to <a href="class_dw_catalog_Product.html#dw_catalog_Product_getRecommendations_int_DetailAnchor">getRecommendations(Number)</a> but additionally
 filters out recommendations for which the target product is unorderable
 according to its product availability model.
 * @memberOf dw.catalog.Product
 * @param {Number} type - the recommendation type.
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly          empty.
 * @see <a href="class_dw_catalog_ProductAvailabilityModel.html#dw_catalog_ProductAvailabilityModel_isOrderable_DetailAnchor">ProductAvailabilityModel.isOrderable()</a>
 */
dw.catalog.Product.prototype.getOrderableRecommendations = function(type) {};

/**
 * Returns product's page description in the default locale.
 * @memberOf dw.catalog.Product
 * @return {String} The product's page description in the default locale,               or null if it wasn't found.
 */
dw.catalog.Product.prototype.getPageDescription = function() {};

/**
 * Returns the product's page keywords in the default locale.
 * @memberOf dw.catalog.Product
 * @return {String} The product's page keywords in the default locale,               or null if it wasn't found.
 */
dw.catalog.Product.prototype.getPageKeywords = function() {};

/**
 * Returns the product's page title in the default locale.
 * @memberOf dw.catalog.Product
 * @return {String} The product's page title in the default locale,               or null if it wasn't found.
 */
dw.catalog.Product.prototype.getPageTitle = function() {};

/**
 * Returns the product's page URL in the default locale.
 * @memberOf dw.catalog.Product
 * @return {String} The product's page URL in the default locale,               or null if it wasn't found.
 */
dw.catalog.Product.prototype.getPageURL = function() {};

/**
 * Returns the price model, which can be used to retrieve a price
 for this product.
 * @memberOf dw.catalog.Product
 * @return {dw.catalog.ProductPriceModel} the price model, which can be used to retrieve a price  for this product.
 */
dw.catalog.Product.prototype.getPriceModel = function() {};

/**
 * Returns the price model based on the specified optionModel. The
 price model can be used to retrieve a price
 for this product. Prices are calculated based on the option values
 selected in the specified option model.
 * @memberOf dw.catalog.Product
 * @param {dw.catalog.ProductOptionModel} optionModel - the option model to use when fetching the  price model.
 * @return {dw.catalog.ProductPriceModel} the price model based on the specified optionModel.
 */
dw.catalog.Product.prototype.getPriceModel = function(optionModel) {};

/**
 * Returns the primary category of the product within the current site catalog.
 * @memberOf dw.catalog.Product
 * @return {dw.catalog.Category} The product's primary category or null.
 */
dw.catalog.Product.prototype.getPrimaryCategory = function() {};

/**
 * Returns the category assignment to the primary category in the current site
 catalog or null if no primary category is defined within the current site
 catalog.
 * @memberOf dw.catalog.Product
 * @return {dw.catalog.CategoryAssignment} The category assignment to the primary category or null.
 */
dw.catalog.Product.prototype.getPrimaryCategoryAssignment = function() {};

/**
 * Returns all outgoing ProductLinks, where the target product is also
 available in the current site. The ProductLinks are unsorted.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} a collection of outgoing ProductLinks where the target product is also  available in the current site.
 */
dw.catalog.Product.prototype.getProductLinks = function() {};

/**
 * Returns all outgoing ProductLinks of a specific type, where the target
 product is also available in the current site. The ProductLinks are
 sorted.
 * @memberOf dw.catalog.Product
 * @param {Number} type - the type of ProductLinks to fetch.
 * @return {dw.util.Collection} a collection of outgoing ProductLinks where the target product is also  available in the current site.
 */
dw.catalog.Product.prototype.getProductLinks = function(type) {};

/**
 * Returns a collection of all products which are assigned to this product
 and which are also available through the current site.  If this product
 does not represent a product set then an empty collection will be
 returned.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of products which are assigned to this product  and which are also available through the current site.
 */
dw.catalog.Product.prototype.getProductSetProducts = function() {};

/**
 * Returns a collection of all product sets in which this product is included.
 The method only returns product sets assigned to the current site.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of product sets in which this product is included, possibly empty.
 */
dw.catalog.Product.prototype.getProductSets = function() {};

/**
 * Returns the outgoing recommendations for this product which
 belong to the site catalog.  If this product is not assigned to the site
 catalog, or there is no site catalog, an empty collection is returned.
 Only recommendations for which the target product exists and is assigned
 to the site catalog are returned.  The recommendations are sorted by
 their explicitly set order.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly empty.
 */
dw.catalog.Product.prototype.getRecommendations = function() {};

/**
 * Returns the outgoing recommendations for this product which are of the
 specified type and which belong to the site catalog.  Behaves the same as
 <a href="class_dw_catalog_Product.html#dw_catalog_Product_getRecommendations_DetailAnchor">getRecommendations()</a> but additionally filters by recommendation
 type.
 * @memberOf dw.catalog.Product
 * @param {Number} type - the recommendation type.
 * @return {dw.util.Collection} the sorted collection of recommendations, never null but possibly empty.
 */
dw.catalog.Product.prototype.getRecommendations = function(type) {};

/**
 * Returns, whether the product is currently searchable.
 * @memberOf dw.catalog.Product
 * @return {Boolean} the searchable status flag of the product.
 */
dw.catalog.Product.prototype.getSearchableFlag = function() {};

/**
 * Returns the product's search placement classification. The higher the
 numeric product placement value, the more relevant is the product when
 sorting search results. The range of numeric placement values is
 defined in the meta data of object type 'Product' and can therefore be
 customized.
 * @memberOf dw.catalog.Product
 * @return {Number} The product's search placement classification.
 */
dw.catalog.Product.prototype.getSearchPlacement = function() {};

/**
 * Returns the product's search rank. The higher the numeric product rank,
 the more relevant is the product when sorting search results. The range of
 numeric rank values is defined in the meta data of object type 'Product'
 and can therefore be customized.
 * @memberOf dw.catalog.Product
 * @return {Number} The product's search rank.
 */
dw.catalog.Product.prototype.getSearchRank = function() {};

/**
 * Returns the product's short description in the current locale.
 * @memberOf dw.catalog.Product
 * @return {dw.content.MarkupText} the product's short description in the current locale, or null if it          wasn't found.
 */
dw.catalog.Product.prototype.getShortDescription = function() {};

/**
 * Returns the product's change frequency needed for the sitemap creation.
 * @memberOf dw.catalog.Product
 * @return {String} The product's sitemap change frequency.
 */
dw.catalog.Product.prototype.getSiteMapChangeFrequency = function() {};

/**
 * Returns the product's priority needed for the sitemap creation.
 * @memberOf dw.catalog.Product
 * @return {Number} The product's sitemap priority.
 */
dw.catalog.Product.prototype.getSiteMapPriority = function() {};

/**
 * Returns the steps in which the order amount of the product can be
 increased.
 * @memberOf dw.catalog.Product
 * @return {dw.value.Quantity} the order amount by which the product can be increased.
 */
dw.catalog.Product.prototype.getStepQuantity = function() {};

/**
 * Returns the ID of the product's tax class.
 * @memberOf dw.catalog.Product
 * @return {String} the ID of the product's tax class.
 */
dw.catalog.Product.prototype.getTaxClassID = function() {};

/**
 * Returns the name of the product's rendering template.
 * @memberOf dw.catalog.Product
 * @return {String} the name of the product's rendering template.
 */
dw.catalog.Product.prototype.getTemplate = function() {};

/**
 * Returns the product's thumbnail image.
 * @memberOf dw.catalog.Product
 * @return {dw.content.MediaFile} the product's thumbnail image.
 * @deprecated <p>Demandware introduces a new more powerful product image
 management. It allows to group product images by self-defined view types
 (e.g. 'large', 'thumbnail', 'swatch') and variation values (e.g. for attribute
 color 'red', 'blue'). Images can be annotated with pattern based title and
 alt. Product images can be accessed from Demandware or external storage
 locations.</p>
 <p>Please use the new product image management. Therefore you have to set
 up the common product image settings like view types, image location,
 default image alt and title for your catalogs first. After that you can
 group your product images by the previously defined view types in context
 of a product. Finally use <a href="class_dw_catalog_Product.html#dw_catalog_Product_getImages_String_DetailAnchor">getImages(String)</a> and
  <a href="class_dw_catalog_Product.html#dw_catalog_Product_getImage_String_int_DetailAnchor">getImage(String, Number)</a> to access your images.</p>
 */
dw.catalog.Product.prototype.getThumbnail = function() {};

/**
 * Returns the product's sales unit.
 * @memberOf dw.catalog.Product
 * @return {String} the products sales unit.
 */
dw.catalog.Product.prototype.getUnit = function() {};

/**
 * Returns the Universal Product Code of the product.
 * @memberOf dw.catalog.Product
 * @return {String} the Universal Product Code of the product.
 */
dw.catalog.Product.prototype.getUPC = function() {};

/**
 * Returns a collection of all variants assigned to this variation master
 or variation group product. All variants are returned regardless of whether
 they are online or offline.

 If this product does not represent a variation master or variation group
 product then an empty collection is returned.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of variants associated with this variation master or          variation group product.
 */
dw.catalog.Product.prototype.getVariants = function() {};

/**
 * Returns a collection of all variation groups assigned to this variation
 master product. All variation groups are returned regardless of whether
 they are online or offline.

 If this product does not represent a variation master product then an
 empty collection is returned.
 * @memberOf dw.catalog.Product
 * @return {dw.util.Collection} Collection of variation groups associated with this variation  master product.
 */
dw.catalog.Product.prototype.getVariationGroups = function() {};

/**
 * Returns the variation model of this product. If this product is a master
 product, then the returned model will encapsulate all the information
 about its variation attributes and variants. If this product is a variant
 product, then the returned model will encapsulate all the same
 information, but additionally pre-select all the variation attribute
 values of this variant. (See <a href="class_dw_catalog_ProductVariationModel.html">ProductVariationModel</a> for
 details on what "selected" means.) If this product is neither a master
 product or a variation product, then a model will be returned but will be
 essentially empty and not useful for any particular purpose.
 * @memberOf dw.catalog.Product
 * @return {dw.catalog.ProductVariationModel} the variation model of the product.
 */
dw.catalog.Product.prototype.getVariationModel = function() {};

/**
 * Identifies if the specified product participates in this product bundle.
 If this product does not represent a bundle at all, then false will
 always be returned.
 * @memberOf dw.catalog.Product
 * @param {dw.catalog.Product} product - the product to check for participation.
 * @return {Boolean} true if the product participates in the bundle, false otherwise.
 */
dw.catalog.Product.prototype.includedInBundle = function(product) {};

/**
 * Returns 'true' if item is assigned to the specified
 category.
 * @memberOf dw.catalog.Product
 * @param {dw.catalog.Category} category - the category to check.
 * @return {Boolean} true if item is assigned to category.
 */
dw.catalog.Product.prototype.isAssignedToCategory = function(category) {};

/**
 * Returns 'true' if the product is assigned to the current site (via the
 site catalog), otherwise 'false' is returned.
 * @memberOf dw.catalog.Product
 * @return {Boolean} 'true' if product assigned to site.
 */
dw.catalog.Product.prototype.isAssignedToSiteCatalog = function() {};

/**
 * Identifies if the product is available.
 * @memberOf dw.catalog.Product
 * @return {Boolean} the value of the attribute 'available'.
 * @deprecated Use <a href="class_dw_catalog_Product.html#dw_catalog_Product_getAvailabilityModel_DetailAnchor">getAvailabilityModel()</a>.isInStock() instead
 */
dw.catalog.Product.prototype.isAvailable = function() {};

/**
 * Identifies if this product instance is a product bundle.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the product is a bundle, false otherwise.
 */
dw.catalog.Product.prototype.isBundle = function() {};

/**
 * Identifies if this product instance is bundled within at least one
 product bundle.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the product is bundled, false otherwise.
 */
dw.catalog.Product.prototype.isBundled = function() {};

/**
 * Identifies if this product is bound to at least one catalog category.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the product is bound to at least one catalog category,          false otherwise.
 */
dw.catalog.Product.prototype.isCategorized = function() {};

/**
 * Identifies if this product instance is a product master.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the product is a master, false otherwise.
 */
dw.catalog.Product.prototype.isMaster = function() {};

/**
 * Returns the online status of the product. The online status
 is calculated from the online status flag and the onlineFrom
 onlineTo dates defined for the product.
 * @memberOf dw.catalog.Product
 * @return {Boolean} the online status of the product.
 */
dw.catalog.Product.prototype.isOnline = function() {};

/**
 * Identifies if the product has options.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if product has options, false otherwise.
 */
dw.catalog.Product.prototype.isOptionProduct = function() {};

/**
 * Returns 'true' if the instance represents a product. Returns 'false' if
 the instance represents a product set.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the instance is a product, false otherwise.
 * @see <a href="class_dw_catalog_Product.html#dw_catalog_Product_isProductSet_DetailAnchor">isProductSet()</a>
 */
dw.catalog.Product.prototype.isProduct = function() {};

/**
 * Returns 'true' if the instance represents a product set, otherwise 'false'.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the instance is a product set, false otherwise.
 * @see <a href="class_dw_catalog_Product.html#dw_catalog_Product_isProduct_DetailAnchor">isProduct()</a>
 */
dw.catalog.Product.prototype.isProductSet = function() {};

/**
 * Returns true if this product is part of any product set, otherwise false.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the product is part of any product set, false otherwise.
 */
dw.catalog.Product.prototype.isProductSetProduct = function() {};

/**
 * Identifies if this product instance is part of a retail set.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the product is part of a retail set, false otherwise.
 * @deprecated Use <a href="class_dw_catalog_Product.html#dw_catalog_Product_isProductSet_DetailAnchor">isProductSet()</a> instead
 */
dw.catalog.Product.prototype.isRetailSet = function() {};

/**
 * Identifies if the product is searchable.
 * @memberOf dw.catalog.Product
 * @return {Boolean} the value of the attribute 'searchable'.
 */
dw.catalog.Product.prototype.isSearchable = function() {};

/**
 * Returns 'true' if the product is assigned to the current site (via the
 site catalog), otherwise 'false' is returned.
 * @memberOf dw.catalog.Product
 * @return {Boolean} 'true' if product assigned to site.
 * @deprecated Use <a href="class_dw_catalog_Product.html#dw_catalog_Product_isAssignedToSiteCatalog_DetailAnchor">isAssignedToSiteCatalog()</a> instead
 */
dw.catalog.Product.prototype.isSiteProduct = function() {};

/**
 * Identifies if this product instance is mastered by a product master.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the product is mastered, false otherwise.
 */
dw.catalog.Product.prototype.isVariant = function() {};

/**
 * Identifies if this product instance is a variation group product.
 * @memberOf dw.catalog.Product
 * @return {Boolean} true if the product is a variation group, false otherwise.
 */
dw.catalog.Product.prototype.isVariationGroup = function() {};

/**
 * Set the availability status flag of the product.
 * @memberOf dw.catalog.Product
 * @param {Boolean} available - Availability status flag.
 * @deprecated Don't use this method anymore.
 */
dw.catalog.Product.prototype.setAvailableFlag = function(available) {};

/**
 * Set the online status flag of the product.
 * @memberOf dw.catalog.Product
 * @param {Boolean} online - Online status flag.
 */
dw.catalog.Product.prototype.setOnlineFlag_1 = function(online) {};

/**
 * Set the online status flag of the product for the current site. If current site is not available (i.e.
 in case this method is called by a job that runs on organization level) the online status flag is set global,
 which can affect all sites.<p/>
 In previous versions this method set the online status flag global, instead of site specific.
 * @memberOf dw.catalog.Product
 * @param {Boolean} online - Online status flag.
 */
dw.catalog.Product.prototype.setOnlineFlag_2 = function(online) {};

/**
 * Set the flag indicating whether the product is searchable or not.
 * @memberOf dw.catalog.Product
 * @param {Boolean} searchable - The value of the attribute 'searchable'.
 */
dw.catalog.Product.prototype.setSearchableFlag_1 = function(searchable) {};

/**
 * Set the flag indicating whether the product is searchable or not in context of the current site. If current site
 is not available (i.e. in case this method is called by a job that runs on organization level) the searchable
 flag is set global, which can affect all sites.<p/>
 In previous versions this method set the searchable flag global, instead of site specific.
 * @memberOf dw.catalog.Product
 * @param {Boolean} searchable - The value of the attribute 'searchable'.
 */
dw.catalog.Product.prototype.setSearchableFlag_2 = function(searchable) {};

/**
 * Set the product's search placement.
 * @memberOf dw.catalog.Product
 * @param {Number} placement - The product's search placement classification.
 */
dw.catalog.Product.prototype.setSearchPlacement_1 = function(placement) {};

/**
 * Set the product's search placement classification in context of the current site. If current site is not
 available (i.e. in case this method is called by a job that runs on organization level) the search placement is
 set global, which can affect all sites.<p/>
 In previous versions this method set the search placement classification global, instead of site specific.
 * @memberOf dw.catalog.Product
 * @param {Number} placement - The product's search placement classification.
 */
dw.catalog.Product.prototype.setSearchPlacement_2 = function(placement) {};

/**
 * Set the product's search rank.
 * @memberOf dw.catalog.Product
 * @param {Number} rank - The product's search rank.
 */
dw.catalog.Product.prototype.setSearchRank_1 = function(rank) {};

/**
 * Set the product's search rank in context of the current site. If current site is not available (i.e. in case this
 method is called by a job that runs on organization level) the search rank is set global, which can affect all
 sites.<p/>
 In previous versions this method set the search rank global, instead of site specific.
 * @memberOf dw.catalog.Product
 * @param {Number} rank - The product's search rank.
 */
dw.catalog.Product.prototype.setSearchRank_2 = function(rank) {};

/**
 * Represents the active data for a <a href="class_dw_catalog_Product.html">Product</a> in the Demandware framework.
 * @class
 * @extends dw.object.ActiveData
 */
dw.catalog.ProductActiveData = function() {};
dw.catalog.ProductActiveData.prototype = new dw.object.ActiveData();

/**
 * Returns the date the product became available on the site, or
 <code>null</code> if none has been set.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Date} the date the product became available.
 */
dw.catalog.ProductActiveData.prototype.getAvailableDate = function() {};

/**
 * Returns the average gross margin percentage of the product,
 over the most recent day for the site, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average gross margin percentage over the last day.
 */
dw.catalog.ProductActiveData.prototype.getAvgGrossMarginPercentDay = function() {};

/**
 * Returns the average gross margin percentage of the product,
 over the most recent 30 days for the site, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average gross margin percentage over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getAvgGrossMarginPercentMonth = function() {};

/**
 * Returns the average gross margin percentage of the product,
 over the most recent 7 days for the site, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average gross margin percentage over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getAvgGrossMarginPercentWeek = function() {};

/**
 * Returns the average gross margin percentage of the product,
 over the most recent 365 days for the site, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average gross margin percentage over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getAvgGrossMarginPercentYear = function() {};

/**
 * Returns the average gross margin value of the product,
 over the most recent day for the site, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average gross margin value over the last day.
 */
dw.catalog.ProductActiveData.prototype.getAvgGrossMarginValueDay = function() {};

/**
 * Returns the average gross margin value of the product,
 over the most recent 30 days for the site, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average gross margin value over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getAvgGrossMarginValueMonth = function() {};

/**
 * Returns the average gross margin value of the product,
 over the most recent 7 days for the site, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average gross margin value over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getAvgGrossMarginValueWeek = function() {};

/**
 * Returns the average gross margin value of the product,
 over the most recent 365 days for the site, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average gross margin value over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getAvgGrossMarginValueYear = function() {};

/**
 * Returns the average sales price for the product, over the most recent day
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average sales price over the last day.
 */
dw.catalog.ProductActiveData.prototype.getAvgSalesPriceDay = function() {};

/**
 * Returns the average sales price for the product, over the most recent 30 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average sales price over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getAvgSalesPriceMonth = function() {};

/**
 * Returns the average sales price for the product, over the most recent 7 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average sales price over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getAvgSalesPriceWeek = function() {};

/**
 * Returns the average sales price for the product, over the most recent 365 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the average sales price over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getAvgSalesPriceYear = function() {};

/**
 * Returns the conversion rate of the product, over the most recent day
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the conversion over the last day.
 */
dw.catalog.ProductActiveData.prototype.getConversionDay = function() {};

/**
 * Returns the conversion rate of the product, over the most recent 30 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the conversion over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getConversionMonth = function() {};

/**
 * Returns the conversion rate of the product, over the most recent 7 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the conversion over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getConversionWeek = function() {};

/**
 * Returns the conversion rate of the product, over the most recent 365 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the conversion over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getConversionYear = function() {};

/**
 * Returns the cost price for the product for the site,
 or <code>null</code> if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the cost price.
 */
dw.catalog.ProductActiveData.prototype.getCostPrice = function() {};

/**
 * Returns the number of days the product has been available on the site.
 The number is calculated based on the current date and the date the
 product became available on the site, or if that date has not been set,
 the date the product was created in the system.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the age in days.
 * @see <a href="class_dw_catalog_ProductActiveData.html#dw_catalog_ProductActiveData_getAvailableDate_DetailAnchor">getAvailableDate()</a>
 */
dw.catalog.ProductActiveData.prototype.getDaysAvailable = function() {};

/**
 * Returns the impressions of the product, over the most recent day
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the impressions over the last day.
 */
dw.catalog.ProductActiveData.prototype.getImpressionsDay = function() {};

/**
 * Returns the impressions of the product, over the most recent 30 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the impressions over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getImpressionsMonth = function() {};

/**
 * Returns the impressions of the product, over the most recent 7 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the impressions over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getImpressionsWeek = function() {};

/**
 * Returns the impressions of the product, over the most recent 365 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the impressions over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getImpressionsYear = function() {};

/**
 * Returns the look to book ratio of the product, over the most recent day
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the look to book ratio over the last day.
 */
dw.catalog.ProductActiveData.prototype.getLookToBookRatioDay = function() {};

/**
 * Returns the look to book ratio of the product, over the most recent 30 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the look to book ratio over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getLookToBookRatioMonth = function() {};

/**
 * Returns the look to book ratio of the product, over the most recent 7 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the look to book ratio over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getLookToBookRatioWeek = function() {};

/**
 * Returns the look to book ratio of the product, over the most recent 365 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the look to book ratio over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getLookToBookRatioYear = function() {};

/**
 * Returns the number of orders containing the product, over the most
 recent day for the site, or <code>null</code> if none has been set
 or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the orders over the last day.
 */
dw.catalog.ProductActiveData.prototype.getOrdersDay = function() {};

/**
 * Returns the number of orders containing the product, over the most
 recent 30 days for the site, or <code>null</code> if none has been set
 or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the orders over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getOrdersMonth = function() {};

/**
 * Returns the number of orders containing the product, over the most
 recent 7 days for the site, or <code>null</code> if none has been set
 or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the orders over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getOrdersWeek = function() {};

/**
 * Returns the number of orders containing the product, over the most
 recent 365 days for the site, or <code>null</code> if none has been set
 or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the orders over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getOrdersYear = function() {};

/**
 * Returns the return rate for the product for the site,
 or <code>null</code> if none has been set or the value is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the return rate.
 */
dw.catalog.ProductActiveData.prototype.getReturnRate = function() {};

/**
 * Returns the revenue of the product, over the most recent day
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the revenue over the last day.
 */
dw.catalog.ProductActiveData.prototype.getRevenueDay = function() {};

/**
 * Returns the revenue of the product, over the most recent 30 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the revenue over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getRevenueMonth = function() {};

/**
 * Returns the revenue of the product, over the most recent 7 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the revenue over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getRevenueWeek = function() {};

/**
 * Returns the revenue of the product, over the most recent 365 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the revenue over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getRevenueYear = function() {};

/**
 * Returns the sales velocity of the product, over the most recent day
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the sales velocity over the last day.
 */
dw.catalog.ProductActiveData.prototype.getSalesVelocityDay = function() {};

/**
 * Returns the sales velocity of the product, over the most recent 30 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the sales velocity over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getSalesVelocityMonth = function() {};

/**
 * Returns the sales velocity of the product, over the most recent 7 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the sales velocity over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getSalesVelocityWeek = function() {};

/**
 * Returns the sales velocity of the product, over the most recent 365 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the sales velocity over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getSalesVelocityYear = function() {};

/**
 * Returns the units of the product ordered over the most recent day
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the units over the last day.
 */
dw.catalog.ProductActiveData.prototype.getUnitsDay = function() {};

/**
 * Returns the units of the product ordered over the most recent 30 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the units over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getUnitsMonth = function() {};

/**
 * Returns the units of the product ordered over the most recent 7 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the units over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getUnitsWeek = function() {};

/**
 * Returns the units of the product ordered over the most recent 365 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the units over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getUnitsYear = function() {};

/**
 * Returns the views of the product, over the most recent day
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the views over the last day.
 */
dw.catalog.ProductActiveData.prototype.getViewsDay = function() {};

/**
 * Returns the views of the product, over the most recent 30 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the views over the last 30 days.
 */
dw.catalog.ProductActiveData.prototype.getViewsMonth = function() {};

/**
 * Returns the views of the product, over the most recent 7 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the views over the last 7 days.
 */
dw.catalog.ProductActiveData.prototype.getViewsWeek = function() {};

/**
 * Returns the views of the product, over the most recent 365 days
 for the site, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.catalog.ProductActiveData
 * @return {Number} the views over the last 365 days.
 */
dw.catalog.ProductActiveData.prototype.getViewsYear = function() {};

/**
 * Constructs a product attribute model that is not based on a product nor
 a category. Therefore, the model only describes the product attributes
 globally defined for the system object type 'Product'.
 * @class
 * @extends Object
 */
dw.catalog.ProductAttributeModel = function() {};
dw.catalog.ProductAttributeModel.prototype = new Object();

/**
 * Returns the attribute definition with the given id from the product attribute
 model. If attribute definition does not exist, null is returned.
 * @memberOf dw.catalog.ProductAttributeModel
 * @param {String} id - the identifier of the attribute definition.
 * @return {dw.object.ObjectAttributeDefinition} attribute definition or null if not exist
 */
dw.catalog.ProductAttributeModel.prototype.getAttributeDefinition = function(id) {};

/**
 * Returns a sorted collection of attribute definitions for the given attribute
 group. If no attribute definition exist for the group, an empty collection
 is returned.
 <p/>
 The returned attribute definitions are sorted according to the explicit
 sort order defined for the attributes in the group.  This is managed
 by merchant in the Business Manager.
 * @memberOf dw.catalog.ProductAttributeModel
 * @param {dw.object.ObjectAttributeGroup} group - the group whose attribute definitions are returned.
 * @return {dw.util.Collection} a sorted collection of ObjectAttributeDefinition instances.
 */
dw.catalog.ProductAttributeModel.prototype.getAttributeDefinitions = function(group) {};

/**
 * Returns the attribute group with the given id from the product attribute
 model. If attribute group does not exist, null is returned.
 * @memberOf dw.catalog.ProductAttributeModel
 * @param {String} id - the attribute group identifier.
 * @return {dw.object.ObjectAttributeGroup} the attribute group or null if not exist
 */
dw.catalog.ProductAttributeModel.prototype.getAttributeGroup = function(id) {};

/**
 * Returns a sorted collection of attribute groups of this model. The groups
 returned depends on how this model is constructed and what it represents.
 (See class-level documentation for details).
 <p/>
 The collection of returned groups is sorted first by scope and secondly
 by explicit sort order. Global groups always appear before
 category-specific groups in the list. Groups of parent categories always
 appear before groups belonging to subcategories. At each scope, groups
 have an explicit sort order which can be managed within the Business
 Manager.
 <p/>
 When there are multiple attribute groups with the same ID, the following
 rules apply:

 <ul>
 <li>If this model represents the global product attribute group only
 (e.g. the no-arg constructor was used), duplicates cannot occur since
 only one group can be defined with a given ID at that scope.</li>
 <li>If this model is associated with specific categories (e.g. it is
 constructed from a product with a classification category), then a
 category product attribute group might have the same ID as a global
 product attribute group. In this case, the category group overrides the
 global one.</li>
 <li>If a category and one of its ancestor categories both define a
 product attribute group with the same ID, the sub-category group
 overrides the parent group.</li>
 </ul>

 As a result of these rules, this method will never return two attribute
 groups with the same ID.
 * @memberOf dw.catalog.ProductAttributeModel
 * @return {dw.util.Collection} collection of all attribute groups.
 */
dw.catalog.ProductAttributeModel.prototype.getAttributeGroups = function() {};

/**
 * Returns the value that the underlying product defines for the given
 attribute definition in the current locale. In case the attribute
 definition defines localized attribute values, the product's value is
 used as an id to find the localized display value.
 * @memberOf dw.catalog.ProductAttributeModel
 * @param {dw.object.ObjectAttributeDefinition} definition - the definition to use.
 * @return {Object} The localized product attribute display value.
 */
dw.catalog.ProductAttributeModel.prototype.getDisplayValue_1 = function(definition) {};

/**
 * Returns the value that the underlying product defines for the given
 attribute definition in the current locale. In case the attribute definition
 defines localized attribute values, the product's value is used as an id
 to find the localized display value.

 In case of an Image attribute this method returns a MediaFile instance.
 In previous versions this method returned a String with the image path.
 In case of an HTML attribute this method returns a MarkupText instance.
 In previous versions this method returned a String with the HTML source.
 * @memberOf dw.catalog.ProductAttributeModel
 * @param {dw.object.ObjectAttributeDefinition} definition - the definition to use.
 * @return {Object} The localized product attribute display value.
 */
dw.catalog.ProductAttributeModel.prototype.getDisplayValue_2 = function(definition) {};

/**
 * Returns an unsorted collection of attribute definitions marked as
 order-required. Order-required attributes are usually copied into order
 line items.
 <p/>
 The returned attribute definitions are sorted according to the explicit
 sort order defined for the attributes in the group. This is managed by
 merchant in the Business Manager.
 * @memberOf dw.catalog.ProductAttributeModel
 * @return {dw.util.Collection} a collection of order-required ObjectAttributeDefinition          instances.
 */
dw.catalog.ProductAttributeModel.prototype.getOrderRequiredAttributeDefinitions = function() {};

/**
 * Returns the attribute value for the specified attribute
 definition. If the product does not define a value, null is returned.<p/>

 Note: this method may only be used where the attribute model was created for
 a specific product; otherwise it will always return null.<p/>

 If the attribute is localized, the value for the current session locale
 is returned.
 * @memberOf dw.catalog.ProductAttributeModel
 * @param {dw.object.ObjectAttributeDefinition} definition - the attribute definition to use when locating  and returning the value.
 * @return {Object} value the value associated with the object attribute definition.
 */
dw.catalog.ProductAttributeModel.prototype.getValue_1 = function(definition) {};

/**
 * Returns the attribute value for the specified attribute definition. If
 the product does not define a value, null is returned.
 <p/>
 Note: this method may only be used where the attribute model was created
 for a specific product; otherwise it will always return null.
 <p/>
 If the attribute is localized, the value for the current session locale
 is returned.
 <p/>
 In case of an Image attribute this method returns a MediaFile instance.
 In previous versions this method returned a String with the image path.
 In case of an HTML attribute this method returns a MarkupText instance.
 In previous versions this method returned a String with the HTML source.
 * @memberOf dw.catalog.ProductAttributeModel
 * @param {dw.object.ObjectAttributeDefinition} definition - the attribute definition to use when locating and             returning the value.
 * @return {Object} value the value associated with the object attribute definition.
 */
dw.catalog.ProductAttributeModel.prototype.getValue_2 = function(definition) {};

/**
 * Returns a sorted collection of all visible attribute definitions for the
 given attribute group. If no visible attribute definition exist for the
 group, an empty collection is returned.
 <p/>
 An attribute definition is considered visible if is marked as visible. If
 the product attribute model is created for a specific product, the
 product must also define a value for the attribute definition; else the
 attribute definition is considered as invisible.
 <p/>
 The returned attribute definitions are sorted according to the explicit
 sort order defined for the attributes in the group. This is managed by
 merchant in the Business Manager.
 * @memberOf dw.catalog.ProductAttributeModel
 * @param {dw.object.ObjectAttributeGroup} group - the group whose visible attribute definitions are returned.
 * @return {dw.util.Collection} a sorted collection of visible ObjectAttributeDefinition          instances.
 */
dw.catalog.ProductAttributeModel.prototype.getVisibleAttributeDefinitions = function(group) {};

/**
 * Returns a sorted collection of visible attribute groups of this model.
 This method is similar to <a href="class_dw_catalog_ProductAttributeModel.html#dw_catalog_ProductAttributeModel_getAttributeGroups_DetailAnchor">getAttributeGroups()</a> but only includes
 attribute groups containing at least one attribute definition that is
 visible. See
 <a href="class_dw_catalog_ProductAttributeModel.html#dw_catalog_ProductAttributeModel_getVisibleAttributeDefinitions_ObjectAttributeGroup_DetailAnchor">getVisibleAttributeDefinitions(ObjectAttributeGroup)</a>.
 * @memberOf dw.catalog.ProductAttributeModel
 * @return {dw.util.Collection} sorted collection of visible ObjectAttributeGroup instances.
 */
dw.catalog.ProductAttributeModel.prototype.getVisibleAttributeGroups = function() {};

/**
 * Encapsulates the quantity of items available for each availability status.
 * @class
 * @extends Object
 * @author jlowe
 */
dw.catalog.ProductAvailabilityLevels = function() {};
dw.catalog.ProductAvailabilityLevels.prototype = new Object();

/**
 *
 * @memberOf dw.catalog.ProductAvailabilityLevels
 * @return {dw.value.Quantity} the backorder quantity.
 */
dw.catalog.ProductAvailabilityLevels.prototype.getBackorder = function() {};

/**
 *
 * @memberOf dw.catalog.ProductAvailabilityLevels
 * @return {Number} the number of attributes that contain non-zero quantities.
 */
dw.catalog.ProductAvailabilityLevels.prototype.getCount = function() {};

/**
 *
 * @memberOf dw.catalog.ProductAvailabilityLevels
 * @return {dw.value.Quantity} the quantity in stock.
 */
dw.catalog.ProductAvailabilityLevels.prototype.getInStock = function() {};

/**
 *
 * @memberOf dw.catalog.ProductAvailabilityLevels
 * @return {dw.value.Quantity} the quantity that is not available.
 */
dw.catalog.ProductAvailabilityLevels.prototype.getNotAvailable = function() {};

/**
 *
 * @memberOf dw.catalog.ProductAvailabilityLevels
 * @return {dw.value.Quantity} the pre-order quantity.
 */
dw.catalog.ProductAvailabilityLevels.prototype.getPreorder = function() {};

/**
 * The ProductAvailabilityModel provides methods for retrieving all information
 on availability of a single product.
 * @class
 * @extends Object
 * @author tlohr
 */
dw.catalog.ProductAvailabilityModel = function() {};
dw.catalog.ProductAvailabilityModel.prototype = new Object();

/**
 * Indicates that the product stock has run out, but will be replenished, and is therefore available for ordering.
 * @type String
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @static
 * @const
 */
dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_BACKORDER = '';

/**
 * Indicates that the product is in stock and available for ordering.
 * @type String
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @static
 * @const
 */
dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_IN_STOCK = '';

/**
 * Indicates that the product is not currently available for ordering.
 * @type String
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @static
 * @const
 */
dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_NOT_AVAILABLE = '';

/**
 * Indicates that the product is not yet in stock but is available for ordering.
 * @type String
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @static
 * @const
 */
dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER = '';

/**
 * Returns the availability of the product, which roughly defined is the
 ratio of the original stock that is still available to sell.  The basic
 formula, if the current site uses an
 inventory list, is the ATS quantity divided by allocation
 amount. If the product is not orderable at all this method returns 0.
 The following specific rules apply for standard products:
 <ul>
 <li>If inventory lists are in use:
     <ul>
     <li>If no inventory record exists and the inventory list default-in-stock flag is true this method returns 1.</li>
     <li>If no inventory record exists the inventory list default-in-stock flag is false this method returns 0.</li>
     <li>If the product is not available this method returns 0.</li>
     <li>If the product is perpetually available this method returns 1.</li>
     <li>Otherwise this method returns the ATS / allocation.</li>
     </ul>
 </li>
 </ul>
 If inventory lists are not in use the method returns 0.

 The following rules apply for special product types:
 <ul>
 <li>For a master product this method returns the average availability
 of its online variations.</li>
 <li>For a master product with no online variations this method returns 0.</li>
 <li>For a master product with own inventory record the rules of the standard
 products apply. Note: In this case the availability of the variations is not considered.</li>
 <li>For a product set this method returns the greatest availability of
 the online products in the set.</li>
 <li>For a product set with no online products this method returns 0.</li>
 <li>For a product set with an inventory record the rules of the standard
 products apply. Note: In this case the availability of the set products is not considered.</li>
 <li>For a bundle, this method returns the least availability of the bundled
 products according to their bundled quantity and if it exist also from
 the bundle inventory record.</li>
 </ul>
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @return {Number}
 */
dw.catalog.ProductAvailabilityModel.prototype.getAvailability = function() {};

/**
 * <p>Returns an instance of <a href="class_dw_catalog_ProductAvailabilityLevels.html">ProductAvailabilityLevels</a>,
 where each available quantity represents a part of the input quantity.
 This method is typically used to display availability information in
 the context of a known order quantity, e.g. a shopping cart.</p>

 <p>For example, if for a given product
 there are 3 pieces in stock with no pre/backorder handling specified,
 and the order quantity is 10, then the return instance would have the
 following state:
 <ul>
 <li><a href="class_dw_catalog_ProductAvailabilityLevels.html#dw_catalog_ProductAvailabilityLevels_getInStock_DetailAnchor">ProductAvailabilityLevels.getInStock()</a> - 3</li>
 <li><a href="class_dw_catalog_ProductAvailabilityLevels.html#dw_catalog_ProductAvailabilityLevels_getPreorder_DetailAnchor">ProductAvailabilityLevels.getPreorder()</a> - 0</li>
 <li><a href="class_dw_catalog_ProductAvailabilityLevels.html#dw_catalog_ProductAvailabilityLevels_getBackorder_DetailAnchor">ProductAvailabilityLevels.getBackorder()</a> - 0</li>
 <li><a href="class_dw_catalog_ProductAvailabilityLevels.html#dw_catalog_ProductAvailabilityLevels_getNotAvailable_DetailAnchor">ProductAvailabilityLevels.getNotAvailable()</a> - 7</li>
 </ul>

 The following assertions can be made about the state of the returned instance.
 <ul>
 <li>Between 1 and 3 levels are non-zero.</li>
 <li>The sum of the levels equals the input quantity.</li>
 <li><a href="class_dw_catalog_ProductAvailabilityLevels.html#dw_catalog_ProductAvailabilityLevels_getPreorder_DetailAnchor">ProductAvailabilityLevels.getPreorder()</a> or <a href="class_dw_catalog_ProductAvailabilityLevels.html#dw_catalog_ProductAvailabilityLevels_getBackorder_DetailAnchor">ProductAvailabilityLevels.getBackorder()</a> may be available, but not both.</li>
 </ul>
 </p>

 <p>Product bundles are handled specially:  The availability of product
 bundles is calculated based on the availability of the bundled products.
 Therefore, if a bundle contains products that are not in stock, then
 the bundle itself is not in stock.  If all the products in the bundle
 are on backorder, then the bundle itself is backordered.  If a product
 bundle has its own inventory record, then this record may
 further limit the availability.  If a bundle has no record, then
 only the records of the bundled products are considered.</p>

 <p>Product masters and product sets without an own inventory record are
 handled specially too:   The availability is calculated based on the
 availability of the variants or set products. A product master or product
 set is in stock as soon as one of its variants or set products is in stock.
 Each product master or product set availability level reflects the sum of
 the variant or set product availability levels up to the specified quantity.</p>

 <p>Product masters or product sets with own inventory record are handled like
 standard products. The availability of the variants or set products is not
 considered. (Such an inventory scenario should be avoided.)</p>

 <p>Offline products are always unavailable and will result in returned
 levels that are all unavailable.</p>
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @param {Number} quantity - The quantity to evaluate.
 * @return {dw.catalog.ProductAvailabilityLevels} an instance of ProductAvailabilityLevels, which encapsulates the number  of items for each relevant availability-status.
 * @see <a href="class_dw_catalog_ProductAvailabilityLevels.html">ProductAvailabilityLevels</a>
 * @throws IllegalArgumentException if the specified quantity is less or equal than zero
 */
dw.catalog.ProductAvailabilityModel.prototype.getAvailabilityLevels = function(quantity) {};

/**
 * Returns the availability-status for the minimum-orderable-quantity (MOQ) of
 the product.  The MOQ essentially represents a single orderable unit, and
 therefore can be represented by a single availability-status.  This
 method is essentially a convenience method.  The same information
 can be retrieved by calling <a href="class_dw_catalog_ProductAvailabilityModel.html#dw_catalog_ProductAvailabilityModel_getAvailabilityLevels_double_DetailAnchor">getAvailabilityLevels(Number)</a>
 with the MOQ of the product as the parameter and then retrieving the
 single status from the returned map.

 This method is typically used to display a product's availability in
 the catalog when the order quantity is not known.
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @return {String} the availability-status.
 */
dw.catalog.ProductAvailabilityModel.prototype.getAvailabilityStatus = function() {};

/**
 * Returns the ProductInventoryRecord for the Product associated
 with this model.
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @return {dw.catalog.ProductInventoryRecord} the ProductInventoryRecord or null if there is none.
 */
dw.catalog.ProductAvailabilityModel.prototype.getInventoryRecord = function() {};

/**
 * Returns the SKU coverage of the product.  The basic formula for a
 master product is the ratio of online variations that are in stock
 to the total number of online variations.  The following specific rules
 apply for standard products:
 <ul>
 <li>If the product is in stock this method returns the availability of the product.</li>
 <li>If the product is out of stock this method returns 0.</li>
 </ul>
 The following rules apply for special product types:
 <ul>
 <li>For a master product this method returns the average SKU coverage
 of its online variations.</li>
 <li>For a master product with no online variations this method returns 0.</li>
 <li>For a product set this method returns the ratio of orderable SKUs in the product set
 over the total number of online SKUs in the product set. </li>
 <li>For a product set with no online products this method returns 0.</li>
 <li>For a product bundle this method returns 1 if all of the bundled
 products are online, and 0 otherwise.</li>
 <li>For a product bundle with no online bundled products this method
 returns 0.</li>
 </ul>
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @return {Number}
 */
dw.catalog.ProductAvailabilityModel.prototype.getSKUCoverage = function() {};

/**
 * Returns the number of hours before the product is expected to go out
 of stock.  The basic formula is the ATS quantity divided by the
 sales velocity for the most recent day.  The following specific rules
 apply for standard products:
 <ul>
 <li>If the product is out of stock this method returns 0.</li>
 <li>If the product is perpetually available this method returns 1.</li>
 <li>If the sales velocity or ATS is not available this method returns 0.</li>
 <li>Otherwise this method returns ATS / sales velocity.</li>
 </ul>
 The following rules apply for special product types:
 <ul>
 <li>For a master product this method returns the greatest time to out
 of stock of its online variations.</li>
 <li>For a master product with no online variations this method returns 0.</li>
 <li>For a product set this method returns the greatest time to out
 of stock of the online products in the set.</li>
 <li>For a product set with no online products this method returns 0.</li>
 <li>For a bundle with no product inventory record, this method returns
 the least time to out of stock of the online bundled products.</li>
 <li>For a bundle with no product inventory record, and no online
 bundled products, this method returns 0.</li>
 </ul>
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @return {Number}
 */
dw.catalog.ProductAvailabilityModel.prototype.getTimeToOutOfStock = function() {};

/**
 * Convenience method for <a href="class_dw_catalog_ProductAvailabilityModel.html#dw_catalog_ProductAvailabilityModel_isInStock_double_DetailAnchor">isInStock(Number)</a>. Returns true, if the
 Product is available in the minimum-order-quantity. If the product does
 not have a minimum-order-quantity defined, in-stock is checked for a
 quantity value 1.
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @return {Boolean} true if the Product is in stock, otherwise false.
 */
dw.catalog.ProductAvailabilityModel.prototype.isInStock = function() {};

/**
 * Returns true if the Product is in-stock in the given quantity. This is
 determined as follows:
 <ol>
 <li>If the product is not currently online (based on its online flag and
 online dates), then return false.</li>
 <li>If there is no inventory-list for the current site, then return
 false.</li>
 <li>If there is no inventory-record for the product, then return the
 default setting on the inventory-list.</li>
 <li>If there is no allocation-amount on the inventory-record, then return
 the value of the perpetual-flag.</li>
 <li>If there is an allocation-amount, but the perpetual-flag is true,
 then return true.</li>
 <li>If the quantity is less than or equal to the stock-level, then return
 true.</li>
 <li>Otherwise return false.</li>
 </ol>
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @param {Number} quantity - the quantity that is requested
 * @return {Boolean} true if the Product is in-stock.
 * @throws Exception if the specified quantity is less or equal than zero
 */
dw.catalog.ProductAvailabilityModel.prototype.isInStock = function(quantity) {};

/**
 * Convenience method for <a href="class_dw_catalog_ProductAvailabilityModel.html#dw_catalog_ProductAvailabilityModel_isOrderable_double_DetailAnchor">isOrderable(Number)</a>. Returns true if the
 Product is currently online (based on its online flag and online dates)
 and is orderable in its minimum-order-quantity. If the product does not
 have a minimum-order-quantity specified, then 1 is used. The method
 returns false otherwise.
 <p/>
 Note: Orderable status is more general than in-stock status. A product
 may be out-of-stock but orderable because it is back-orderable or
 pre-orderable.
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @return {Boolean} true if the Product is orderable for the minimum-order-quantity          of the product.
 */
dw.catalog.ProductAvailabilityModel.prototype.isOrderable = function() {};

/**
 * Returns true if the Product is currently online (based on its online flag
 and online dates) and the specified quantity does not exceed the quantity
 available for sale, and returns false otherwise.
 <p/>
 Note: Orderable status is more general than in-stock status. A product
 may be out-of-stock but orderable because it is back-orderable or
 pre-orderable.
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @param {Number} quantity - the quantity to test against.
 * @return {Boolean} true if the item can be ordered in the specified quantity.
 * @throws Exception if the specified quantity is less or equal than zero
 */
dw.catalog.ProductAvailabilityModel.prototype.isOrderable = function(quantity) {};

/**
 * Reduces the stock-level by the amount specified.
 The following conditions must be met for the update to succeed:
 <ul>
 <li>There must be an inventory list for the current site.</li>
 <li>There must be an inventory record for the product.</li>
 <li>There must be an allocation amount on the inventory record.</li>
 </ul>

 Product bundles are handled specially:  When the stock level for
 a product bundle is updated, the stock levels for the bundled products
 are updated accordingly.  If a product bundle has its own inventory
 record, then the stock level for this record is also updated.
 * @memberOf dw.catalog.ProductAvailabilityModel
 * @param {Number} amount - the  to use to update the stock level.
 * @return {Boolean} true if successful
 * @deprecated Please update stock level via import.
 */
dw.catalog.ProductAvailabilityModel.prototype.updateStockLevel = function(amount) {};

/**
 * The ProductInventoryList provides access to ID, description and defaultInStockFlag of the list.
 Furthermore inventory records can be accessed by product or product ID.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.ProductInventoryList = function() {};
dw.catalog.ProductInventoryList.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the default in-stock flag of the inventory list.
 * @memberOf dw.catalog.ProductInventoryList
 * @return {Boolean} Default in-stock flag of inventory list.
 */
dw.catalog.ProductInventoryList.prototype.getDefaultInStockFlag = function() {};

/**
 * Returns the description of the inventory list.
 * @memberOf dw.catalog.ProductInventoryList
 * @return {String} Description of inventory list.
 */
dw.catalog.ProductInventoryList.prototype.getDescription = function() {};

/**
 * Returns the ID of the inventory list.
 * @memberOf dw.catalog.ProductInventoryList
 * @return {String} ID of inventory list.
 */
dw.catalog.ProductInventoryList.prototype.getID = function() {};

/**
 * Returns the inventory record for the specified product or null
 if there is no record for the product in this list.
 * @memberOf dw.catalog.ProductInventoryList
 * @param {dw.catalog.Product} product - The product to lookup inventory record.
 * @return {dw.catalog.ProductInventoryRecord} Inventory record or <code>null</code> if not found.
 */
dw.catalog.ProductInventoryList.prototype.getRecord = function(product) {};

/**
 * Returns the inventory record for the specified product ID or null
 if there is no record for the product id in this list.
 * @memberOf dw.catalog.ProductInventoryList
 * @param {String} productID - The product ID to lookup inventory record.
 * @return {dw.catalog.ProductInventoryRecord} Inventory record or <code>null</code> if not found.
 */
dw.catalog.ProductInventoryList.prototype.getRecord = function(productID) {};

/**
 * This manager provides access to inventory-related objects.
 * @class
 * @extends Object
 */
dw.catalog.ProductInventoryMgr = function() {};
dw.catalog.ProductInventoryMgr.prototype = new Object();

/**
 * Returns the inventory list assigned to the current site or null if no
 inventory list is assigned to the current site.
 * @memberOf dw.catalog.ProductInventoryMgr
 * @return {dw.catalog.ProductInventoryList} The ProductInventoryList assigned to the current site, or null.
 * @static
 */
dw.catalog.ProductInventoryMgr.getInventoryList = function() {};

/**
 * Returns the inventory list with the passed ID or null if no inventory
 list exists with that ID.
 * @memberOf dw.catalog.ProductInventoryMgr
 * @param {String} listID - The ID of the inventory list to retrieve.
 * @return {dw.catalog.ProductInventoryList} The ProductInventoryList identified by listID, or null.
 * @static
 */
dw.catalog.ProductInventoryMgr.getInventoryList = function(listID) {};

/**
 * The ProductInventoryRecord holds information about a Product's inventory, and
 availability.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.ProductInventoryRecord = function() {};
dw.catalog.ProductInventoryRecord.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the allocation quantity that is currently set. The quantity unit
 is the same unit as the product itself.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {dw.value.Quantity} the allocation quantity or quantity N/A if not available.
 */
dw.catalog.ProductInventoryRecord.prototype.getAllocation = function() {};

/**
 * Returns the date the allocation quantity was initialized or reset.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {Date} the allocation reset date.
 */
dw.catalog.ProductInventoryRecord.prototype.getAllocationResetDate = function() {};

/**
 * Returns the quantity of items available to sell (ATS). This is calculated
 as the allocation plus the preorderBackorderAllocation minus the turnover.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {dw.value.Quantity} the quantity or quantity N/A if not available.
 */
dw.catalog.ProductInventoryRecord.prototype.getATS = function() {};

/**
 * Returns the date that the item is expected to be in stock.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {Date} the date that the item is expected to be in stock.
 */
dw.catalog.ProductInventoryRecord.prototype.getInStockDate = function() {};

/**
 * Returns the on-hand quantity, the actual quantity of available (on-hand)
 items.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {dw.value.Quantity} the on-hand quantity or quantity N/A if not available.
 * @deprecated Use <a href="class_dw_catalog_ProductInventoryRecord.html#dw_catalog_ProductInventoryRecord_getStockLevel_DetailAnchor">getStockLevel()</a> instead.
 */
dw.catalog.ProductInventoryRecord.prototype.getOnHand = function() {};

/**
 * Returns the quantity of items that are allocated for sale, beyond
 the initial stock allocation.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {dw.value.Quantity} the quantity or quantity N/A if not available.
 */
dw.catalog.ProductInventoryRecord.prototype.getPreorderBackorderAllocation = function() {};

/**
 * Returns the quantity of items that are reserved. An item is considered
 actively reserved by this method if it was reserved within the last 10
 minutes using the ReserveInventoryForOrder pipelet. Items reserved more
 than 10 minutes ago are ignored by this method.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {dw.value.Quantity} the quantity of items reserved for this product.
 */
dw.catalog.ProductInventoryRecord.prototype.getReserved = function() {};

/**
 * Returns the current stock level.  This is calculated as the allocation
 minus the turnover.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {dw.value.Quantity} the stock level or quantity N/A if not available.
 */
dw.catalog.ProductInventoryRecord.prototype.getStockLevel = function() {};

/**
 * Returns the sum of all inventory transactions (decrements and increments)
 that have been recorded subsequent to the allocation was reset date.
 The quantity value can be negative due to higher quantity of
 inventory decrements than increments.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {dw.value.Quantity} the turnover or quantity N/A if not available.
 */
dw.catalog.ProductInventoryRecord.prototype.getTurnover = function() {};

/**
 * Determines if the product is backorderable.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {Boolean} true if the product is backorderable.
 */
dw.catalog.ProductInventoryRecord.prototype.isBackorderable = function() {};

/**
 * Determines if the product is perpetually in stock.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {Boolean} true if the product is perpetually in stock.
 */
dw.catalog.ProductInventoryRecord.prototype.isPerpetual = function() {};

/**
 * Determines if the product is preorderable.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @return {Boolean} true if the product is preorderable.
 */
dw.catalog.ProductInventoryRecord.prototype.isPreorderable = function() {};

/**
 * Sets the allocation quantity. This also updates the allocation reset date.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @param {Number} quantity - the allocation quantity to set.
 */
dw.catalog.ProductInventoryRecord.prototype.setAllocation = function(quantity) {};

/**
 * The method is used to set whether the product is backorderable.
 Setting the backorderable flag to true will clear the preorderable flag.
 If the record's preorderable flag is set to true, calling this method
 with backorderableFlag==false will have no effect.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @param {Boolean} backorderableFlag - the flag to set backorderable status.
 */
dw.catalog.ProductInventoryRecord.prototype.setBackorderable = function(backorderableFlag) {};

/**
 * Sets the date that the item is expected to be in stock.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @param {Date} inStockDate - the date that the item is expected to be in stock.
 */
dw.catalog.ProductInventoryRecord.prototype.setInStockDate = function(inStockDate) {};

/**
 * Sets if the product is perpetually in stock.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @param {Boolean} perpetualFlag - true to set the product perpetually in stock.
 */
dw.catalog.ProductInventoryRecord.prototype.setPerpetual = function(perpetualFlag) {};

/**
 * The method is used to set whether the product is preorderable.
 Setting the preorderable flag to true will clear the backorderable flag.
 If the record's backorderable flag is set to true, calling this method
 with preorderableFlag==false will have no effect.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @param {Boolean} preorderableFlag - the flag to set preorderable status.
 */
dw.catalog.ProductInventoryRecord.prototype.setPreorderable = function(preorderableFlag) {};

/**
 * Sets the quantity of items that are allocated for sale, beyond
 the initial stock allocation.
 * @memberOf dw.catalog.ProductInventoryRecord
 * @param {Number} quantity - the quantity to set.
 */
dw.catalog.ProductInventoryRecord.prototype.setPreorderBackorderAllocation = function(quantity) {};

/**
 * The class represents a link between two products.
 * @class
 * @extends Object
 */
dw.catalog.ProductLink = function() {};
dw.catalog.ProductLink.prototype = new Object();

/**
 * Represents an accessory product link.
 * @type Number
 * @memberOf dw.catalog.ProductLink
 * @static
 * @const
 */
dw.catalog.ProductLink.LINKTYPE_ACCESSORY = 0;

/**
 * Represents an alternative order unit product link.
 * @type Number
 * @memberOf dw.catalog.ProductLink
 * @static
 * @const
 */
dw.catalog.ProductLink.LINKTYPE_ALT_ORDERUNIT = 0;

/**
 * Represents a cross-sell product link.
 * @type Number
 * @memberOf dw.catalog.ProductLink
 * @static
 * @const
 */
dw.catalog.ProductLink.LINKTYPE_CROSS_SELL = 0;

/**
 * Represents a newer verion link.
 * @type Number
 * @memberOf dw.catalog.ProductLink
 * @static
 * @const
 */
dw.catalog.ProductLink.LINKTYPE_NEWER_VERSION = 0;

/**
 * Represents a miscellaneous product link.
 * @type Number
 * @memberOf dw.catalog.ProductLink
 * @static
 * @const
 */
dw.catalog.ProductLink.LINKTYPE_OTHER = 0;

/**
 * Represents a replacement product link.
 * @type Number
 * @memberOf dw.catalog.ProductLink
 * @static
 * @const
 */
dw.catalog.ProductLink.LINKTYPE_REPLACEMENT = 0;

/**
 * Represents a spare part product link.
 * @type Number
 * @memberOf dw.catalog.ProductLink
 * @static
 * @const
 */
dw.catalog.ProductLink.LINKTYPE_SPARE_PART = 0;

/**
 * Represents an up-sell product link.
 * @type Number
 * @memberOf dw.catalog.ProductLink
 * @static
 * @const
 */
dw.catalog.ProductLink.LINKTYPE_UP_SELL = 0;

/**
 * Returns the source product for this link.
 * @memberOf dw.catalog.ProductLink
 * @return {dw.catalog.Product} the source product for this link.
 */
dw.catalog.ProductLink.prototype.getSourceProduct = function() {};

/**
 * Returns the target product for this link.
 * @memberOf dw.catalog.ProductLink
 * @return {dw.catalog.Product} the target product for this link.
 */
dw.catalog.ProductLink.prototype.getTargetProduct = function() {};

/**
 * Returns the type of this link (see constants).
 * @memberOf dw.catalog.ProductLink
 * @return {Number} the type of the link.
 */
dw.catalog.ProductLink.prototype.getTypeCode = function() {};

/**
 * Provides helper methods for getting products based on Product ID or <a href="class_dw_catalog_Catalog.html">Catalog</a>.
 * @class
 * @extends Object
 */
dw.catalog.ProductMgr = function() {};
dw.catalog.ProductMgr.prototype = new Object();

/**
 * Returns the product with the specified id.
 * @memberOf dw.catalog.ProductMgr
 * @param {String} productID - the product identifier.
 * @return {dw.catalog.Product} Product for specified id or null
 * @static
 */
dw.catalog.ProductMgr.getProduct = function(productID) {};

/**
 * Returns all products assigned to the current site.
 <p/>
 A product is assigned to a site if <br/>
 <ul>
 <li>it is assigned to at least one category of the site catalog or</li>
 <li>it is a variant and it's master product is assigned to the current site</li>
 </ul>

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.catalog.ProductMgr
 * @return {dw.util.SeekableIterator} Iterator of all site products
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 */
dw.catalog.ProductMgr.queryAllSiteProducts = function() {};

/**
 * Returns all products assigned to the current site.
 <p/>
 Works like queryAllSiteProducts(), but additionally sorts the result set
 by product ID.

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.catalog.ProductMgr
 * @return {dw.util.SeekableIterator} Iterator of all site products sorted by product ID.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 */
dw.catalog.ProductMgr.queryAllSiteProductsSorted = function() {};

/**
 * Returns all products assigned to the the specified catalog, where
 assignment has the same meaning as it does for queryAllSiteProducts().

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.catalog.ProductMgr
 * @param {dw.catalog.Catalog} catalog - The catalog whose assigned products should be returned.
 * @return {dw.util.SeekableIterator} Iterator of all products assigned to specified catalog.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 */
dw.catalog.ProductMgr.queryProductsInCatalog = function(catalog) {};

/**
 * Returns all products assigned to the the specified catalog.
 Works like queryProductsInCatalog(), but additionally sorts the result
 set by product ID.

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.catalog.ProductMgr
 * @param {dw.catalog.Catalog} catalog - The catalog whose assigned products should be returned.
 * @return {dw.util.SeekableIterator} Iterator of all products assigned to specified catalog sorted by          product ID.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 */
dw.catalog.ProductMgr.queryProductsInCatalogSorted = function(catalog) {};

/**
 * Represents a product option.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.ProductOption = function() {};
dw.catalog.ProductOption.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the default value for the product option.
 * @memberOf dw.catalog.ProductOption
 * @return {dw.catalog.ProductOptionValue} the object for the relation 'defaultValue'
 */
dw.catalog.ProductOption.prototype.getDefaultValue = function() {};

/**
 * Returns the product option's short description in the current locale.
 * @memberOf dw.catalog.ProductOption
 * @return {String} The value of the short description in the current locale,               or null if it wasn't found.
 */
dw.catalog.ProductOption.prototype.getDescription = function() {};

/**
 * Returns the product option's display name in the current locale.
 * @memberOf dw.catalog.ProductOption
 * @return {String} The value of the display name in the current locale,               or null if it wasn't found.
 */
dw.catalog.ProductOption.prototype.getDisplayName = function() {};

/**
 * Returns an HTML representation of the option id.
 * @memberOf dw.catalog.ProductOption
 * @return {String} an HTML representation of the option id.
 */
dw.catalog.ProductOption.prototype.getHtmlName = function() {};

/**
 * Returns an HTML representation of the option id with the custom prefix.
 * @memberOf dw.catalog.ProductOption
 * @param {String} prefix - a custom prefix for the html name.
 * @return {String} an HTML representation of the option id.
 */
dw.catalog.ProductOption.prototype.getHtmlName = function(prefix) {};

/**
 * Returns the product option ID.
 * @memberOf dw.catalog.ProductOption
 * @return {String} the product option identifier.
 */
dw.catalog.ProductOption.prototype.getID = function() {};

/**
 * Returns the product option's image.
 * @memberOf dw.catalog.ProductOption
 * @return {dw.content.MediaFile} the product option's image.
 */
dw.catalog.ProductOption.prototype.getImage = function() {};

/**
 * Returns a collection containing the product option values.
 * @memberOf dw.catalog.ProductOption
 * @return {dw.util.Collection} a collection containing the product option values.
 */
dw.catalog.ProductOption.prototype.getOptionValues = function() {};

/**
 * This class represents the option model of a specific product and
 for a specific currency. It provides accessor methods to the configured
 options and the values of those options. It has also methods to set a
 specific selection of option values.
 * @class
 * @extends Object
 */
dw.catalog.ProductOptionModel = function() {};
dw.catalog.ProductOptionModel.prototype = new Object();

/**
 * Returns the product option for the specified ID.
 * @memberOf dw.catalog.ProductOptionModel
 * @param {String} optionID - the product option identifier.
 * @return {dw.catalog.ProductOption} the product option for the specified ID.
 */
dw.catalog.ProductOptionModel.prototype.getOption = function(optionID) {};

/**
 * Returns the collection of product options.
 * @memberOf dw.catalog.ProductOptionModel
 * @return {dw.util.Collection} Collection of Product Options.
 */
dw.catalog.ProductOptionModel.prototype.getOptions = function() {};

/**
 * Returns the product option value object for the passed value id and in
 the context of the passed option.
 * @memberOf dw.catalog.ProductOptionModel
 * @param {dw.catalog.ProductOption} option - The option to get the specified value for.
 * @param {String} valueID - The id of the value to retrieve
 * @return {dw.catalog.ProductOptionValue} a value for the specified product option and value id
 */
dw.catalog.ProductOptionModel.prototype.getOptionValue = function(option, valueID) {};

/**
 * Returns a collection of product option values for the
 specified product option.
 * @memberOf dw.catalog.ProductOptionModel
 * @param {dw.catalog.ProductOption} option - the option for which we want to extract  the collection of product option values.
 * @return {dw.util.Collection} a collection of product option values for the  specified product option.
 */
dw.catalog.ProductOptionModel.prototype.getOptionValues = function(option) {};

/**
 * Returns the effective price of the specified option value.
 * @memberOf dw.catalog.ProductOptionModel
 * @param {dw.catalog.ProductOptionValue} optionValue - the product option value to use.
 * @return {dw.value.Money} the effective price of the specified option value.
 */
dw.catalog.ProductOptionModel.prototype.getPrice = function(optionValue) {};

/**
 * Returns the selected value for the specified product option. If no
 option values was set as selected option explicitly, the method
 returns the default option value for this option.
 * @memberOf dw.catalog.ProductOptionModel
 * @param {dw.catalog.ProductOption} option - The option to get the selected value for.
 * @return {dw.catalog.ProductOptionValue} a selected value for the specified product option.
 */
dw.catalog.ProductOptionModel.prototype.getSelectedOptionValue = function(option) {};

/**
 * Returns true if the specified option value is the one currently selected,
 false otherwise.
 * @memberOf dw.catalog.ProductOptionModel
 * @param {dw.catalog.ProductOption} option - the product option.
 * @param {dw.catalog.ProductOptionValue} value - the product option value.
 * @return {Boolean} true if the specified option value is the one currently selected,  false otherwise.
 */
dw.catalog.ProductOptionModel.prototype.isSelectedOptionValue = function(option, value) {};

/**
 * Updates the selection of the specified option based on the specified value.
 * @memberOf dw.catalog.ProductOptionModel
 * @param {dw.catalog.ProductOption} option - the option to update.
 * @param {dw.catalog.ProductOptionValue} value - the value to use when updating the product option.
 */
dw.catalog.ProductOptionModel.prototype.setSelectedOptionValue = function(option, value) {};

/**
 * Returns a URL that can be used to select one or more option values. The
 optional <code>varOptionAndValues</code> argument can be empty, or can
 contain one or more option / value pairs. This variable list must be even
 in length, with options and values alternating. If the list is odd in
 length, the last argument will be ignored. Options can be specified as
 instances of ProductOption, or String option ID. Values can be specified
 as instances of ProductOptionValue or as strings representing the value
 ID. If a parameter is invalid, then the parameter pair is not included in
 the generated URL. The returned URL will contain options and values
 already selected in the product option model, as well as options and
 values specified as method parameters. This includes option values
 explicitly selected and implicitly selected by default.
 * @memberOf dw.catalog.ProductOptionModel
 * @param {String} action - The pipeline action, must not be null.
 * @param {Object[]} varOptionAndValues - Variable length list of options and values.
 * @return {dw.web.URL} The constructed URL.
 * @varArgs
 */
dw.catalog.ProductOptionModel.prototype.url = function(action, varOptionAndValues) {};

/**
 * Returns an URL that can be used to select a specific value of a specific
 option.
 * @memberOf dw.catalog.ProductOptionModel
 * @param {String} action - the action to use.
 * @param {dw.catalog.ProductOption} option - the option to use when constructing the URL.
 * @param {dw.catalog.ProductOptionValue} value - the value to use when constructing the URL.
 * @return {String} The constructed URL as string.
 */
dw.catalog.ProductOptionModel.prototype.urlSelectOptionValue = function(action, option, value) {};

/**
 * Represents the value of a product option.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.ProductOptionValue = function() {};
dw.catalog.ProductOptionValue.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the the product option value's description
 in the current locale.
 * @memberOf dw.catalog.ProductOptionValue
 * @return {String} The value of the product option value's description  in the current locale, or null if it wasn't found.
 */
dw.catalog.ProductOptionValue.prototype.getDescription = function() {};

/**
 * Returns the the product option value's display name
 in the current locale.
 * @memberOf dw.catalog.ProductOptionValue
 * @return {String} The value of the product option value's display name  in the current locale, or null if it wasn't found.
 */
dw.catalog.ProductOptionValue.prototype.getDisplayValue = function() {};

/**
 * Returns the product option value's ID.
 * @memberOf dw.catalog.ProductOptionValue
 * @return {String} the product option value's ID.
 */
dw.catalog.ProductOptionValue.prototype.getID = function() {};

/**
 * Returns the product option value's product ID modifier which
 can be used to build the SKU for the actual product.
 * @memberOf dw.catalog.ProductOptionValue
 * @return {String} the product option value's product ID modifier which  can be used to build the SKU for the actual product.
 */
dw.catalog.ProductOptionValue.prototype.getProductIDModifier = function() {};

/**
 * Simple class representing a product price point.  This class is useful
 because it provides additional information beyond just the price.  Since the
 system calculates sales prices based on applicable price books, it is
 sometimes useful to know additional information such as which price book
 defined a price point, what percentage discount off the base price
 this value represents, and the date range for which this price point is active.
 * @class
 * @extends Object
 */
dw.catalog.ProductPriceInfo = function() {};
dw.catalog.ProductPriceInfo.prototype = new Object();

/**
 * Returns the date from which the associated price point is valid. If such a date doesn't exist, e.g. as in the
 case of a continuous price point, null will be returned.
 * @memberOf dw.catalog.ProductPriceInfo
 * @return {Date} the date from which the associated price point is valid
 */
dw.catalog.ProductPriceInfo.prototype.getOnlineFrom = function() {};

/**
 * Returns the date until which the associated price point is valid. If such a date doesn't exist, e.g. as in the case
 of a continuous price point, null will be returned.
 * @memberOf dw.catalog.ProductPriceInfo
 * @return {Date} the date to which the associated price point is valid
 */
dw.catalog.ProductPriceInfo.prototype.getOnlineTo = function() {};

/**
 * Returns the percentage off value of this price point related to the base
 price for the product's minimum order quantity.
 * @memberOf dw.catalog.ProductPriceInfo
 * @return {Number} the percentage off value of this price point
 */
dw.catalog.ProductPriceInfo.prototype.getPercentage = function() {};

/**
 * Returns the monetary price for this price point.
 * @memberOf dw.catalog.ProductPriceInfo
 * @return {dw.value.Money} the price amount
 */
dw.catalog.ProductPriceInfo.prototype.getPrice = function() {};

/**
 * Returns the price book which defined this price point.
 * @memberOf dw.catalog.ProductPriceInfo
 * @return {dw.catalog.PriceBook} the price book defining this price
 */
dw.catalog.ProductPriceInfo.prototype.getPriceBook = function() {};

/**
 * Returns the price info associated with this price point. This is an
 arbitrary string which a merchant can associate with a price entry. This
 can be used for example, to track which back-end system the price is
 derived from.
 * @memberOf dw.catalog.ProductPriceInfo
 * @return {String} the price info associated with this price point.
 */
dw.catalog.ProductPriceInfo.prototype.getPriceInfo = function() {};

/**
 * ProductPriceModel provides methods to access all the
 <a href="class_dw_catalog_PriceBook.html">PriceBook</a> information of a product. A ProductPriceModel
 instance is retrieved by calling <a href="class_dw_catalog_Product.html#dw_catalog_Product_getPriceModel_DetailAnchor">Product.getPriceModel()</a>
 or <a href="class_dw_catalog_Product.html#dw_catalog_Product_getPriceModel_ProductOptionModel_DetailAnchor">Product.getPriceModel(ProductOptionModel)</a> for a
 specific product. The latter method will return a model which also includes
 the additional option prices of an option product.
 <p/>
 When the current price of a product is accessed in the storefront via its
 price model, a price lookup is performed. The high-level steps of this price
 lookup are:

 <ul>
 <li>Get all price books applicable in the context of the current site, time,
 session, customer, source code.</li>
 <li>Identify all prices in the applicable price books and for a requested
 quantity.</li>
 <li>Calculate the best-price of all identified prices. The best-price is the
 lowest price.</li>
 </ul>

 In more detail:
 <p/>

 <b>Identify applicable price books</b><br/>
 <ul>
 <li>If any price books are explicitly registered in the session (see pipelet
 SetApplicablePriceBooks), use these price books and their direct parents for
 price lookup. Ignore all inactive price books, price books not valid at the
 current time, and price books with a currency other than the session currency.</li>
 </ul>

 <b>Otherwise:</b><br/>
 <ul>
 <li>If a valid source code is registered with the current session, get all
 price books assigned to the source code and their parent price books. Ignore
 all inactive price books, price books not valid at the current time, and
 price books with a currency other than the session currency.</li>
 <li>Get all price books assigned to site and their parent price books. Ignore
 all inactive price books, price books not valid at the current time, and
 price books with a currency other than the session currency.</li>
 </ul>

 <b>Identify all prices:</b><br/>
 <ul>
 <li>Get all price definitions for the product from all applicable price
 books. Ignore price definitions not valid at the current time.</li>
 <li>Convert any percentage price definition into a monetary amount. As the
 base price for this calculation, the minimum product price for the minimum
 order quantity of the product, including product options, is used.</li>
 <li>Compare all prices and identify the lowest (= best) price.</li>
 <li>Calculate best price for each defined price cut in the price table and
 return price table.</li>
 </ul>

 <b>Variation Price Fallback:</b><br/>
 <ul>
 <li>If no applicable pricebooks for a variant is found, the price lookup gets
 the price books from the variant's master product</li>
 <li>A price books is also not applicable of the price definition for the
 variant in the price book is not valid at the current time.</li>
 </ul>

 <p/>

 Typically, in order to do a standard price lookup, it is only necessary to
 call <code>Product.getPriceModel().getPrice()</code>. However Demandware also
 supports tiered prices, meaning that higher quantities receive a lower price.
 In this case, the merchant typically wants to display a table of price points
 on product detail pages. Therefore, the ProductPriceModel provides the method
 <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceTable_DetailAnchor">getPriceTable()</a> to retrieve a table of these prices.

 <p/>

 If a merchant wants to know not only what the price of a given product is,
 but what price book the price was derived from, this class provides the
 method <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceInfo_DetailAnchor">getPriceInfo()</a>. This class also provides methods to lookup
 product prices in specific price books by name and quantity. See
 <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceBookPrice_String_DetailAnchor">getPriceBookPrice(String)</a>.
 * @class
 * @extends Object
 */
dw.catalog.ProductPriceModel = function() {};
dw.catalog.ProductPriceModel.prototype = new Object();

/**
 * Returns the quantity for which the base price is defined. This
 is typically 1.0.
 * @memberOf dw.catalog.ProductPriceModel
 * @return {dw.value.Quantity} the quantity for which the base price is defined.
 */
dw.catalog.ProductPriceModel.prototype.getBasePriceQuantity = function() {};

/**
 * Calculates and returns the maximum price-book price of all variants (for
 master products) or set-products (for product sets) for base quantity
 1.00. This value can be used to display a range of prices in storefront.
 If the product represented by this model is not a master product or
 product set, then this method behaves the same as <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPrice_DetailAnchor">getPrice()</a>.
 Only online products are considered. If the "orderable products only"
 search preference is enabled for the current site, then only orderable
 products are considered. For master products, only variants with all
 variation attributes configured are considered.<p/>

 <b>Warning:</b>  If the product represented by this model is a master
 product with numerous variants, this method can be very expensive and
 should be avoided.
 * @memberOf dw.catalog.ProductPriceModel
 * @return {dw.value.Money} Maximum price of all online variants or set-products.
 */
dw.catalog.ProductPriceModel.prototype.getMaxPrice = function() {};

/**
 * Calculates and returns the maximum price in a given price book of all
 variants (for master products) or set-products (for product sets) for
 base quantity 1.00. This value can be used to display a range of prices
 in storefront.

 This method follows the same rules as
 <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceBookPrice_String_DetailAnchor">getPriceBookPrice(String)</a> in determining the price book
 price for each variant or set-product. If the product represented by this
 model is not a master product or product set, then this method behaves
 the same as <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceBookPrice_String_DetailAnchor">getPriceBookPrice(String)</a>.
 * @memberOf dw.catalog.ProductPriceModel
 * @param {String} priceBookID - ID of price book the price is requested for, must not             be null.
 * @return {dw.value.Money} The maximum price across all subproducts in the specified price          book.
 */
dw.catalog.ProductPriceModel.prototype.getMaxPriceBookPrice = function(priceBookID) {};

/**
 * Calculates and returns the minimum price-book price of all variants (for
 master products) or set-products (for product sets) for base quantity
 1.00. This value can be used to display a range of prices in storefront.
 If the product represented by this model is not a master product or
 product set, then this method behaves the same as <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPrice_DetailAnchor">getPrice()</a>.
 Only online products are considered. If the "orderable products only"
 search preference is enabled for the current site, then only orderable
 products are considered. For master products, only variants with all
 variation attributes configured are considered.<p/>

 <b>Warning:</b>  If the product represented by this model is a master
 product with numerous variants, this method can be very expensive and
 should be avoided.
 * @memberOf dw.catalog.ProductPriceModel
 * @return {dw.value.Money} Minimum price of all online variants or set-products.
 */
dw.catalog.ProductPriceModel.prototype.getMinPrice = function() {};

/**
 * Calculates and returns the minimum price in a given price book of all
 variants (for master products) or set-products (for product sets) for
 base quantity 1.00. This value can be used to display a range of prices
 in storefront.

 This method follows the same rules as
 <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceBookPrice_String_DetailAnchor">getPriceBookPrice(String)</a> in determining the price book
 price for each variant or set-product. If the product represented by this
 model is not a master product or product set, then this method behaves
 the same as <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceBookPrice_String_DetailAnchor">getPriceBookPrice(String)</a>.
 * @memberOf dw.catalog.ProductPriceModel
 * @param {String} priceBookID - ID of price book the price is requested for, must not             be null.
 * @return {dw.value.Money} The minimum price across all subproducts in the specified price          book.
 */
dw.catalog.ProductPriceModel.prototype.getMinPriceBookPrice = function(priceBookID) {};

/**
 * Returns the price of a product, calculated based on base price quantity
 1.00. The price is returned for the currency of the current session.
 <p/>
 The price lookup is based on the configuration of price books. It depends
 on various settings, such as which price books are active, or explicitly
 set as applicable in the current session.
 <p/>
 If the product represented by this model is an option product, option
 prices will be added to the price book price if the price model was
 initialized with an option model.
 <p/>
 If no price could be found, MONEY.NOT_AVAILABLE is returned.
 * @memberOf dw.catalog.ProductPriceModel
 * @return {dw.value.Money} the product price.
 */
dw.catalog.ProductPriceModel.prototype.getPrice = function() {};

/**
 * Returns the price of a product, calculated based on the passed order
 quantity. The price is returned for the currency of the current session.
 <p/>
 The price lookup is based on the configuration of price books. It depends
 on various settings, such as which price books are active, or explicitly
 set as applicable in the current session.
 <p/>
 If the product represented by this model is an option product, option
 prices will be added to the price book price if the price model was
 initialized with an option model.
 <p/>
 If no price could be found, MONEY.NOT_AVAILABLE is returned.
 * @memberOf dw.catalog.ProductPriceModel
 * @param {dw.value.Quantity} quantity - Quantity price is requested for
 * @return {dw.value.Money} the product price.
 */
dw.catalog.ProductPriceModel.prototype.getPrice = function(quantity) {};

/**
 * Returns the active price of the product in the specified price book for
 quantity 1.00.
 <p/>
 If the product represented by this model is an option product, option
 prices will be added to the price book price if the price model was
 initialized with an option model.
 <p/>
 Money.NOT_AVAILABLE will be returned in any of the following cases:

 <ul>
 <li>priceBookID is null or does not identify a valid price book.</li>
 <li>The price book has no price for the product.</li>
 <li>None of the prices for the product in the price book is currently
 active.</li>
 <li>The currently active price entry is a percentage.</li>
 </ul>
 * @memberOf dw.catalog.ProductPriceModel
 * @param {String} priceBookID - ID of price book the price is requested for.
 * @return {dw.value.Money} the price of the product in the specified price book.
 */
dw.catalog.ProductPriceModel.prototype.getPriceBookPrice = function(priceBookID) {};

/**
 * Returns the active price of the product in the specified price book for
 the specified quantity.
 <p/>
 If the product represented by this model is an option product, option
 prices will be added to the price book price if the price model was
 initialized with an option model.
 <p/>
 Money.NOT_AVAILABLE will be returned in any of the following cases:

 <ul>
 <li>priceBookID is null or does not identify a valid price book.</li>
 <li>quantity is null.</li>
 <li>The price book has no price for the product.</li>
 <li>None of the prices for the product in the price book is currently
 active.</li>
 <li>The currently active price entry is a percentage.</li>
 </ul>
 * @memberOf dw.catalog.ProductPriceModel
 * @param {String} priceBookID - ID of price book the price is requested for.
 * @param {dw.value.Quantity} quantity - the specified quantity to find the price for.
 * @return {dw.value.Money} the price of the product in the specified price book.
 */
dw.catalog.ProductPriceModel.prototype.getPriceBookPrice = function(priceBookID, quantity) {};

/**
 * This method acts similarly to <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceBookPrice_String_DetailAnchor">getPriceBookPrice(String)</a> but
 returns a ProductPriceInfo object wrapping the actual price with
 additional information.
 * @memberOf dw.catalog.ProductPriceModel
 * @param {String} priceBookID - ID of price book the price is requested for, must not             be null.
 * @return {dw.catalog.ProductPriceInfo} the product price info, or null if not found.
 */
dw.catalog.ProductPriceModel.prototype.getPriceBookPriceInfo = function(priceBookID) {};

/**
 * This method acts similarly to
 <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceBookPrice_String_Quantity_DetailAnchor">getPriceBookPrice(String, Quantity)</a> but returns a
 ProductPriceInfo object wrapping the actual price with additional
 information.
 * @memberOf dw.catalog.ProductPriceModel
 * @param {String} priceBookID - ID of price book the price is requested for, must not             be null.
 * @param {dw.value.Quantity} quantity - Quantity price is requested for.
 * @return {dw.catalog.ProductPriceInfo} the product price info, or null if not found.
 */
dw.catalog.ProductPriceModel.prototype.getPriceBookPriceInfo = function(priceBookID, quantity) {};

/**
 * Returns the price info of a product, calculated based on base price
 quantity 1.00. The price is returned for the currency of the current
 session.
 <p/>
 This method is similar to <code>getPrice()</code> but instead of just
 returning the price value, it returns a <code>ProductPriceInfo</code>
 which contains additional information such as the PriceBook which defined
 the price and the percentage discount this price point represents.
 <p/>
 If the product represented by this model is an option product, option
 prices will be added to the price book price if the price model was
 initialized with an option model.
 <p/>
 If no price info could be found, null is returned.
 * @memberOf dw.catalog.ProductPriceModel
 * @return {dw.catalog.ProductPriceInfo} the product price info, or null if not found.
 * @see <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPrice_DetailAnchor">getPrice()</a>
 * @see <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPriceInfo_Quantity_DetailAnchor">getPriceInfo(Quantity)</a>
 */
dw.catalog.ProductPriceModel.prototype.getPriceInfo = function() {};

/**
 * Returns the price info of a product, calculated based on the passed order
 quantity. The price is returned for the currency of the current session.
 <p/>
 This method is similar to <code>getPrice(Quantity)</code> but instead of
 just returning the price value, it returns a
 <code>ProductPriceInfo</code> which contains additional information such
 as the PriceBook which defined the price and the percentage discount this
 price point represents.
 <p/>
 If the product represented by this model is an option product, option
 prices will be added to the price book price if the price model was
 initialized with an option model.
 <p/>
 If no price info could be found, null is returned.
 * @memberOf dw.catalog.ProductPriceModel
 * @param {dw.value.Quantity} quantity - the quantity to use.
 * @return {dw.catalog.ProductPriceInfo} the product price info, or null if not found.
 * @see <a href="class_dw_catalog_ProductPriceModel.html#dw_catalog_ProductPriceModel_getPrice_Quantity_DetailAnchor">getPrice(Quantity)</a>
 */
dw.catalog.ProductPriceModel.prototype.getPriceInfo = function(quantity) {};

/**
 * Calculates and returns the percentage off amount of the passed
 comparePrice to the passed basePrice.
 * @memberOf dw.catalog.ProductPriceModel
 * @param {dw.value.Money} basePrice - The assumed 100% price amount
 * @param {dw.value.Money} comparePrice - The price to compare to the basePrice
 * @return {Number} The percentage between comparePrice and basePrice (e.g. 90%).
 * @deprecated Use <a href="class_dw_value_Money.html#dw_value_Money_percentLessThan_Money_DetailAnchor">Money.percentLessThan(Money)</a>
 */
dw.catalog.ProductPriceModel.prototype.getPricePercentage = function(basePrice, comparePrice) {};

/**
 * Returns the product price table object. The price table represents a map
 between order quantities and prices, and also provides % off information
 to be shown to storefront customers. The price is returned for the
 currency of the current session.
 <p/>
 Usually, the product price table is printed on product detail pages in
 the storefront.
 <p/>
 If the product represented by this model is an option product, option
 prices will be added to the price book price if the price model was
 initialized with an option model.
 <p/>
 All other methods of this class are based on the information in the
 product price table.
 * @memberOf dw.catalog.ProductPriceModel
 * @return {dw.catalog.ProductPriceTable} the Product price table.
 */
dw.catalog.ProductPriceModel.prototype.getPriceTable = function() {};

/**
 * Returns true if this product is a master product (or product set) and the
 collection of online variants (or set products respectively) contains
 products of different prices.<p/>

 <b>Warning:</b>  If the product represented by this model is a master
 product with numerous variants, this method can be very expensive and
 should be avoided.
 * @memberOf dw.catalog.ProductPriceModel
 * @return {Boolean} True if this product has a range of prices, false otherwise.
 */
dw.catalog.ProductPriceModel.prototype.isPriceRange = function() {};

/**
 * Returns true if this product is a master product (or product set) and the
 collection of online variants (or set products respectively) contains
 products of different prices in the specified price book.
 * @memberOf dw.catalog.ProductPriceModel
 * @param {String} priceBookID - The ID of the price book.
 * @return {Boolean} True if this product has a range of prices, false otherwise.
 */
dw.catalog.ProductPriceModel.prototype.isPriceRange = function(priceBookID) {};

/**
 * A ProductPriceTable is a map of quantities to prices representing the
 potentially tiered prices of a product in the Demandware system. The price
 of a product is the price associated with the largest quantity in
 the ProductPriceTable which does not exceed the purchase quantity.
 * @class
 * @extends Object
 */
dw.catalog.ProductPriceTable = function() {};
dw.catalog.ProductPriceTable.prototype = new Object();

/**
 * Returns the quantity following the passed quantity in the price table.
 If the passed quantity is the last entry in the price table, null is
 returned.
 * @memberOf dw.catalog.ProductPriceTable
 * @param {dw.value.Quantity} quantity - the quantity to use to locate the next quantity in the price table.
 * @return {dw.value.Quantity} the next quantity or null.
 */
dw.catalog.ProductPriceTable.prototype.getNextQuantity = function(quantity) {};

/**
 * Returns the percentage off value of the price related to the passed quantity,
 calculated based on the price of the products minimum order quantity.
 * @memberOf dw.catalog.ProductPriceTable
 * @param {dw.value.Quantity} quantity - the price quantity to compute the percentage off.
 * @return {Number} the percentage off value of the price related to the passed quantity.
 */
dw.catalog.ProductPriceTable.prototype.getPercentage = function(quantity) {};

/**
 * Returns the monetary price for the passed order quantity. If
 no price is defined for the passed quantity, null is returned. This
 can happen if for example no price is defined for a single item.
 * @memberOf dw.catalog.ProductPriceTable
 * @param {dw.value.Quantity} quantity - the quantity to use to determine price.
 * @return {dw.value.Money} price amount for the passed quantity
 */
dw.catalog.ProductPriceTable.prototype.getPrice = function(quantity) {};

/**
 * Returns the price book which defined the monetary price for the passed
 order quantity. If no price is defined for the passed quantity, null is
 returned. This can happen if for example no price is defined for a single
 item.
 * @memberOf dw.catalog.ProductPriceTable
 * @param {dw.value.Quantity} quantity - the quantity to use to determine price.
 * @return {dw.catalog.PriceBook} the price book defining this price, or null
 */
dw.catalog.ProductPriceTable.prototype.getPriceBook = function(quantity) {};

/**
 * Returns all quantities stored in the price table.
 * @memberOf dw.catalog.ProductPriceTable
 * @return {dw.util.Collection} all price table quantities.
 */
dw.catalog.ProductPriceTable.prototype.getQuantities = function() {};

/**
 * Represents a product search result item returned by the Search pipelet. <br/>
 An instance of ProductSearchHit is a wrapper around the actual product
 returned by the search. The wrapped product can be accessed by method
 <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getProduct_DetailAnchor">getProduct()</a>.
 <p/>
 For special product types, the wrapped product can be the representative of
 other related products actually hit by the search. A variation master or
 variation group returned by the search represents a collection of hit
 variants. A product set returned by the search represents a collection of hit
 set-products. A bundle returned by the search represents a collection of hit
 bundled-products. If the product wrapped by this ProductSearchHit is the
 representative of other products, method <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts()</a>
 can be used to access all these products.
 * @class
 * @extends Object
 */
dw.catalog.ProductSearchHit = function() {};
dw.catalog.ProductSearchHit.prototype = new Object();

/**
 * Returns the first product represented by the product wrapped by the search
 hit.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {dw.catalog.Product} The first product represented by the wrapped product.
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts()</a>
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getLastRepresentedProduct_DetailAnchor">getLastRepresentedProduct()</a>
 */
dw.catalog.ProductSearchHit.prototype.getFirstRepresentedProduct = function() {};

/**
 * Returns the first product ID represented by the product wrapped by the search
 hit.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {String} The first product ID represented by the wrapped product.
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProductIDs_DetailAnchor">getRepresentedProductIDs()</a>
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getLastRepresentedProductID_DetailAnchor">getLastRepresentedProductID()</a>
 */
dw.catalog.ProductSearchHit.prototype.getFirstRepresentedProductID = function() {};

/**
 * Returns the last product represented by the product wrapped by the search
 hit.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {dw.catalog.Product} The last product represented by the wrapped product.
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts()</a>
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getFirstRepresentedProduct_DetailAnchor">getFirstRepresentedProduct()</a>
 */
dw.catalog.ProductSearchHit.prototype.getLastRepresentedProduct = function() {};

/**
 * Returns the last product ID represented by the product wrapped by the search
 hit.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {String} The last product ID represented by the wrapped product.
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProductIDs_DetailAnchor">getRepresentedProductIDs()</a>
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getFirstRepresentedProductID_DetailAnchor">getFirstRepresentedProductID()</a>
 */
dw.catalog.ProductSearchHit.prototype.getLastRepresentedProductID = function() {};

/**
 * Returns the maximum price of all products represented by the
 product hit. See <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts()</a> for details on
 the set of products used for finding the maximum. The method returns
 <code>N/A</code> in case no price information can be found.
 <p/>
 Note: The method uses price information of the search index and therefore
 might return different prices than the ProductPriceModel.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {dw.value.Money} The maximum price of all products represented by the product hit.
 */
dw.catalog.ProductSearchHit.prototype.getMaxPrice = function() {};

/**
 * Returns the minimum price of all products represented by the
 product hit. See <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts()</a> for details on
 the set of products used for finding the minimum. The method returns
 <code>N/A</code> in case no price information can be found.
 <p/>
 Note: The method uses price information of the search index and therefore
 might return different prices than the ProductPriceModel.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {dw.value.Money} The minimum price of all products represented by the product hit.
 */
dw.catalog.ProductSearchHit.prototype.getMinPrice = function() {};

/**
 * Returns the product wrapped by this ProductSearchHit. For special product
 types, the wrapped product can be the representative of other related
 products actually hit by the search. A variation master returned by the
 search represents a collection of hit variants. A product set returned by
 the search represents a collection of hit set-products. A bundle returned
 by the search represents a collection of hit bundled-products. In this
 case call <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts()</a> to get a list of the
 represented products.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {dw.catalog.Product} the Product wrapped by this ProductSearchHit, which is possible a          representative of other related products actually hit by the          search.
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts()</a>
 */
dw.catalog.ProductSearchHit.prototype.getProduct = function() {};

/**
 * Returns the product ID of this ProductSearchHit. For special product
 types, the ID can be the representative of other related products
 actually hit by the search. A variation master ID returned by the search
 represents a collection of hit variants. A product set ID returned by the
 search represents a collection of hit set-products. A bundle ID returned
 by the search represents a collection of hit bundled-products. In this
 case call <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProductIDs_DetailAnchor">getRepresentedProductIDs()</a> to get a list of the
 represented product IDs.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {String} the Product ID of this ProductSearchHit, that possibly represents          a set of related products actually hit by the search.
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProductIDs_DetailAnchor">getRepresentedProductIDs()</a>
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts()</a>
 */
dw.catalog.ProductSearchHit.prototype.getProductID = function() {};

/**
 * In case the product that is wrapped by this ProductSearchHit (see
 <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getProduct_DetailAnchor">getProduct()</a>) is a variation or a variation master or a product
 set, this ProductSearchHit can represent multiple products.
 <p/>
 * The following specific rules apply: <br/>
 <ul>
 <li>If the wrapped product is a variation master, the method returns all
 variant IDs of this master that satisfy the search query.</li>
 <li>If the wrapped product is a variation group, the method returns all
 variant IDs of this variation group that satisfy the search query.</li>
 <li>If the wrapped product is a variant representing other variants (due
 to variation slicing), the method returns this variant ID and all
 represented variant IDs that satisfy the search query.</li>
 <li>If the wrapped product is a product set, the method returns all set
 products IDs that satisfy the search query.</li>
 <li>If the wrapped product is a product bundle, the method returns all
 bundled product IDs that satisfy the search query.</li>
 <li>If the wrapped product is a <i>simple</i> product, the method returns
 this product ID</li>
 </ul>
 <p/>
 If the method returns multiple product IDs, the ID of the product with
 the highest sort rank is returned first, and the ID of the product with
 the lowest sort rank is returned last. The product sort rank depends in
 the sorting conditions used for the search query.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {dw.util.List} a sorted list of product IDs represented by the wrapped product.
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getFirstRepresentedProductID_DetailAnchor">getFirstRepresentedProductID()</a>
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getLastRepresentedProductID_DetailAnchor">getLastRepresentedProductID()</a>
 */
dw.catalog.ProductSearchHit.prototype.getRepresentedProductIDs = function() {};

/**
 * In case the product that is wrapped by this ProductSearchHit (see
 <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getProduct_DetailAnchor">getProduct()</a>) is a variation or a variation master or a product
 set, this ProductSearchHit can represent multiple products.
 <p/>
 * The following specific rules apply: <br/>
 <ul>
 <li>If the wrapped product is a variation master, the method returns all
 variants of this master that satisfy the search query.</li>
 <li>If the wrapped product is a variation group, the method returns all
 variants of this variation group that satisfy the search query.</li>
 <li>If the wrapped product is a variant representing other variants (due
 to variation slicing), the method returns this variant and all
 represented variants that satisfy the search query.</li>
 <li>If the wrapped product is a product set, the method returns all set
 products that satisfy the search query.</li>
 <li>If the wrapped product is a product bundle, the method returns all
 bundled products that satisfy the search query.</li>
 <li>If the wrapped product is a <i>simple</i> product, the method returns
 this product</li>
 </ul>
 <p/>
 If the method returns multiple products, the product with the highest
 sort rank is returned first, and the product with the lowest sort rank is
 returned last. The product sort rank depends in the sorting conditions
 used for the search query.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {dw.util.List} a sorted list of products represented by the wrapped product.
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getFirstRepresentedProduct_DetailAnchor">getFirstRepresentedProduct()</a>
 * @see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getLastRepresentedProduct_DetailAnchor">getLastRepresentedProduct()</a>
 */
dw.catalog.ProductSearchHit.prototype.getRepresentedProducts = function() {};

/**
 * This method is only applicable if this ProductSearchHit represents a
 product variation (see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts</a>). It returns the
 distinct value set for the specified variation attribute for all variants
 represented by this ProductSearchHit. The values are returned in the same
 order as they are defined for the variation.
 <p/>
 This method will accept a ProductVariationAttribute parameter or a String
 which is the ID of a variation attribute. If any other object type is
 passed, or null is passed, an exception will be thrown. If this
 ProductSearchHit does not represent a product variation, or the passed
 variation attribute is not associated with this product, the method
 returns an empty list.
 * @memberOf dw.catalog.ProductSearchHit
 * @param {Object} va - the product variation attribute, specified as either a             ProductVariationAttribute or a String which is the ID of a             variation attribute associated with this product.
 * @return {dw.util.List} A list containing all distinct ProductVariationAttributeValues.
 */
dw.catalog.ProductSearchHit.prototype.getRepresentedVariationValues = function(va) {};

/**
 * Convenience method to check whether this ProductSearchHit represents
 multiple products (see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getRepresentedProducts_DetailAnchor">getRepresentedProducts()</a>) that have
 different prices.
 * @memberOf dw.catalog.ProductSearchHit
 * @return {Boolean} <code>True</code> if the represented products form a price range          <code>False</code> otherwise.
 */
dw.catalog.ProductSearchHit.prototype.isPriceRange = function() {};

/**
 * Constructs a new ProductSearchModel.
 * @class
 * @extends dw.catalog.SearchModel
 */
dw.catalog.ProductSearchModel = function() {};
dw.catalog.ProductSearchModel.prototype = new dw.catalog.SearchModel();

/**
 * URL Parameter for the category ID
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.CATEGORYID_PARAMETER = '';

/**
 * URL Parameter for the maximum price
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.PRICE_MAX_PARAMETER = '';

/**
 * URL Parameter for the minimum price
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.PRICE_MIN_PARAMETER = '';

/**
 * URL Parameter for the product ID
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.PRODUCTID_PARAMETER = '';

/**
 * constant indicating that all related products should be returned for the next product search by promotion ID
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.PROMOTION_PRODUCT_TYPE_ALL = '';

/**
 * constant indicating that only discounted products should be returned for the next product search by promotion ID
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.PROMOTION_PRODUCT_TYPE_DISCOUNTED = '';

/**
 *
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.PROMOTION_PRODUCT_TYPE_PARAMETER = '';

/**
 * constant indicating that only qualifying products should be returned for the next product search by promotion ID
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.PROMOTION_PRODUCT_TYPE_QUALIFYING = '';

/**
 * URL Parameter for the promotion ID
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.PROMOTIONID_PARAMETER = '';

/**
 * URL Parameter prefix for a refinement name
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.REFINE_NAME_PARAMETER_PREFIX = '';

/**
 * URL Parameter prefix for a refinement value
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.REFINE_VALUE_PARAMETER_PREFIX = '';

/**
 * URL Parameter prefix for a refinement value
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.SORT_BY_PARAMETER_PREFIX = '';

/**
 * URL Parameter prefix for a refinement value
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.SORT_DIRECTION_PARAMETER_PREFIX = '';

/**
 * URL Parameter prefix for a sorting rule
 * @type String
 * @memberOf dw.catalog.ProductSearchModel
 * @static
 * @const
 */
dw.catalog.ProductSearchModel.SORTING_RULE_PARAMETER = '';

/**
 * Returns the category object for the category id specified in the query.
 If a category with that id doesn't exist or if the category is offline
 this method returns null.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {dw.catalog.Category} the category object for the category id specified in the query.
 */
dw.catalog.ProductSearchModel.prototype.getCategory = function() {};

/**
 * Returns the category id that was specified in the search query.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {String} the category id that was specified in the search query.
 */
dw.catalog.ProductSearchModel.prototype.getCategoryID = function() {};

/**
 * Returns the deepest common category of all products in the search result.
 In case of an empty search result the method returns the root category.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {dw.catalog.Category} the deepest common category of all products in the search result of this search model or root for an empty search result.
 */
dw.catalog.ProductSearchModel.prototype.getDeepestCommonCategory = function() {};

/**
 * Get the flag indicating whether unorderable products should be excluded
 when the next call to getProducts() is made. If this value has not been
 previously set, then the value returned will be based on the value of the
 search preference.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {Boolean} true if unorderable products should be excluded from product          search results, false otherwise.
 */
dw.catalog.ProductSearchModel.prototype.getOrderableProductsOnly = function() {};

/**
 * Returns the maximum price for the product associated with this search.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {Number} the maximum price for the product associated with this search.
 */
dw.catalog.ProductSearchModel.prototype.getPriceMax = function() {};

/**
 * Returns the minimum price for the product associated with this search.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {Number} the minimum price for the product associated with this search.
 */
dw.catalog.ProductSearchModel.prototype.getPriceMin = function() {};

/**
 * Returns the product id that was specified in the search query.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {String} the product id that was specified in the search.
 */
dw.catalog.ProductSearchModel.prototype.getProductID = function() {};

/**
 * Returns all products in the search result. <br/>
 Note that products that were removed or went offline since the last index
 update are not included in the returned set.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {dw.util.Iterator} Products in search result
 * @see <a href="class_dw_catalog_ProductSearchModel.html#dw_catalog_ProductSearchModel_getProductSearchHits_DetailAnchor">getProductSearchHits()</a>
 */
dw.catalog.ProductSearchModel.prototype.getProducts = function() {};

/**
 * Returns the underlying ProductSearchHit for a product, or null if no
 ProductSearchHit found for this product.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.catalog.Product} product - the product to find the underlying ProductSearchHit
 * @return {dw.catalog.ProductSearchHit} the underlying ProductSearchHit for a product, or null if no          ProductSearchHit found for this product.
 */
dw.catalog.ProductSearchModel.prototype.getProductSearchHit = function(product) {};

/**
 * Returns the product search hits in the search result. <br/>
 Note that method does also return search hits representing products that
 were removed or went offline since the last index update, i.e. you must
 implement appropriate checks before accessing the product related to the
 search hit instance (see <a href="class_dw_catalog_ProductSearchHit.html#dw_catalog_ProductSearchHit_getProduct_DetailAnchor">ProductSearchHit.getProduct</a>)
 * @memberOf dw.catalog.ProductSearchModel
 * @return {dw.util.Iterator} Products hits in search result
 * @see <a href="class_dw_catalog_ProductSearchModel.html#dw_catalog_ProductSearchModel_getProducts_DetailAnchor">getProducts()</a>
 */
dw.catalog.ProductSearchModel.prototype.getProductSearchHits = function() {};

/**
 * Returns the promotion id that was specified in the search query or null if no promotion id set. If multiple
 promotion id's specified the method returns only the first id. See <a href="class_dw_catalog_ProductSearchModel.html#dw_catalog_ProductSearchModel_setPromotionIDs_List_DetailAnchor">setPromotionIDs(List)</a> and
 <a href="class_dw_catalog_ProductSearchModel.html#dw_catalog_ProductSearchModel_getPromotionIDs_DetailAnchor">getPromotionIDs()</a>.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {String} the promotion id that was specified in the search query or null if no promotion id set.
 */
dw.catalog.ProductSearchModel.prototype.getPromotionID = function() {};

/**
 * Returns a list of promotion id's that were specified in the search query or an empty list if no promotion id set.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {dw.util.List} the list of promotion id's that was specified in the search query or an empty list if no promotion id set.
 */
dw.catalog.ProductSearchModel.prototype.getPromotionIDs = function() {};

/**
 * Returns the promotion product type specified in the search query.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {String} the promotion product type that was specified in the search          query.
 */
dw.catalog.ProductSearchModel.prototype.getPromotionProductType = function() {};

/**
 * Returns the ProductSearchRefinements associated with this search and filtered by session currency.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {dw.catalog.ProductSearchRefinements} the ProductSearchRefinements associated with this search.
 */
dw.catalog.ProductSearchModel.prototype.getRefinements = function() {};

/**
 * Returns the sorting rule explicitly set on this model to be used
 to order the products in the results of this query, or <code>null</code>
 if no rule has been explicitly set.

 This method does not return the sorting rule that will be used implicitly
 based on the context of the search, such as the refinement category.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {dw.catalog.SortingRule} a SortingRule or null.
 */
dw.catalog.ProductSearchModel.prototype.getSortingRule = function() {};

/**
 * Returns the suggested search phrase with the highest accuracy provided
 for the current search phrase.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {String} the suggested search phrase.
 */
dw.catalog.ProductSearchModel.prototype.getSuggestedSearchPhrase = function() {};

/**
 * Returns a list with up to 5 suggested search phrases provided for the
 current search phrase. It is possible that less than 5 suggestions
 or even no suggestions are returned.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {dw.util.List} a list containing the suggested search phrases.
 */
dw.catalog.ProductSearchModel.prototype.getSuggestedSearchPhrases = function() {};

/**
 * The method returns true, if this is a pure search for a category. The
 method checks, that a category ID is specified and no search phrase is
 specified.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {Boolean} True if this is a category search
 */
dw.catalog.ProductSearchModel.prototype.isCategorySearch = function() {};

/**
 * Get the flag that determines if the category search will
 be recursive.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {Boolean} true if the category search will be recursive, false otherwise
 */
dw.catalog.ProductSearchModel.prototype.isRecursiveCategorySearch = function() {};

/**
 * The method returns true, if the search is refined by a category.
 The method checks, that a category ID is specified.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {Boolean} true, if the search is refined by a category, false otherwise.
 */
dw.catalog.ProductSearchModel.prototype.isRefinedByCategory = function() {};

/**
 * Identifies if this search has been refined by price.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {Boolean} True if the search is refined by price, false otherwise.
 */
dw.catalog.ProductSearchModel.prototype.isRefinedByPrice = function() {};

/**
 * Identifies if this search has been refined by the given price range.
 Either range parameters may be null to represent open ranges.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {Number} priceMin - The lower bound of the price range.
 * @param {Number} priceMax - The upper bound of the price range.
 * @return {Boolean} True if the search is refinemd on the given price range, false          otherwise.
 */
dw.catalog.ProductSearchModel.prototype.isRefinedByPriceRange = function(priceMin, priceMax) {};

/**
 * Identifies if this is a category search and is refined with further
 criteria, like a brand refinement or an attribute refinement.
 * @memberOf dw.catalog.ProductSearchModel
 * @return {Boolean} true if this is a category search and is refined with further          criteria, false otherwise.
 */
dw.catalog.ProductSearchModel.prototype.isRefinedCategorySearch = function() {};

/**
 * Execute the search.
 * @memberOf dw.catalog.ProductSearchModel
 */
dw.catalog.ProductSearchModel.prototype.search = function() {};

/**
 * Specifies the category id used for the search query.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} categoryID - the category id for the search query.
 */
dw.catalog.ProductSearchModel.prototype.setCategoryID = function(categoryID) {};

/**
 * Set a flag indicating whether unorderable products should be excluded
 when the next call to getProducts() is made. This method overrides the
 default behavior which is controlled by the search preference.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {Boolean} orderableOnly - true if unorderable products should be excluded from             product search results, false otherwise.
 */
dw.catalog.ProductSearchModel.prototype.setOrderableProductsOnly = function(orderableOnly) {};

/**
 * Sets the maximum price for the product associated with this search.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {Number} priceMax - sets the maximum price for the product associated with this             search.
 */
dw.catalog.ProductSearchModel.prototype.setPriceMax = function(priceMax) {};

/**
 * Sets the minimum price for the product associated with this search.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {Number} priceMin - the minimum price for the product associated with this search.
 */
dw.catalog.ProductSearchModel.prototype.setPriceMin = function(priceMin) {};

/**
 * Specifies the product id used for the search query.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} productID - the product id for the search query.
 */
dw.catalog.ProductSearchModel.prototype.setProductID = function(productID) {};

/**
 * Specifies the promotion id used for the search query.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} promotionID - the promotion id for the search query.
 */
dw.catalog.ProductSearchModel.prototype.setPromotionID = function(promotionID) {};

/**
 * Specifies multiple promotion id's used for the search query. The method supports up to 30 promotion id's. If more
 than 30 promotion id's used the method throws an IllegalArgumentException.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.util.List} promotionIDs - the promotion ids for the search query.
 * @throws IllegalArgumentException
             if more than 30 promotion id's used
 */
dw.catalog.ProductSearchModel.prototype.setPromotionIDs = function(promotionIDs) {};

/**
 * Specifies the promotion product type used for the search query. This
 value is only relevant for searches by promotion ID.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} promotionProductType - The type of product to filter by when             searching by promotion ID. Allowed values are             PROMOTION_PRODUCT_TYPE_ALL, PROMOTION_PRODUCT_TYPE_QUALIFYING,             and PROMOTION_PRODUCT_TYPE_DISCOUNTED. If null is passed, or             an invalid value is passed, the search will use             PROMOTION_PRODUCT_TYPE_ALL.
 */
dw.catalog.ProductSearchModel.prototype.setPromotionProductType = function(promotionProductType) {};

/**
 * Set a flag to indicate if the search in category should be recursive.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {Boolean} recurse - recurse the category in the search
 */
dw.catalog.ProductSearchModel.prototype.setRecursiveCategorySearch = function(recurse) {};

/**
 * Sets the sorting rule to be used to order the products in the
 results of this query.  Setting the rule in this way overrides the
 default behavior of choosing the sorting rule based on the context of the
 search, such as the refinement category.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.catalog.SortingRule} rule - the SortingRule to use to sort the products
 */
dw.catalog.ProductSearchModel.prototype.setSortingRule = function(rule) {};

/**
 * Constructs a URL that you can use to execute a query for a specific
 Category.

 The generated URL will be an absolute URL which uses the protocol of
 the current request.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} action - pipeline action, e.g. 'Search-Show'.
 * @param {String} cgid - the category ID.
 * @return {dw.web.URL} the new URL.
 * @static
 */
dw.catalog.ProductSearchModel.urlForCategory = function(action, cgid) {};

/**
 * Constructs a URL that you can use to execute a query for a specific
 Category. The search specific parameters are appended to the provided
 URL. The URL is typically generated with one of the URLUtils methods.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.web.URL} url - the URL to use to generate the new URL.
 * @param {String} cgid - the category ID.
 * @return {dw.web.URL} the new URL.
 * @static
 */
dw.catalog.ProductSearchModel.urlForCategory = function(url, cgid) {};

/**
 * Constructs a URL that you can use to execute a query for a specific
 Product. The passed action is used to build an initial url. All search
 specific attributes are appended.

 The generated URL will be an absolute URL which uses the protocol of
 the current request.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} action - pipeline action, e.g. 'Search-Show'.
 * @param {String} cgid - the category id or null if product is not in category             context.
 * @param {String} pid - the product id.
 * @return {dw.web.URL} the new URL.
 * @static
 */
dw.catalog.ProductSearchModel.urlForProduct = function(action, cgid, pid) {};

/**
 * Constructs a URL that you can use to execute a query for a specific
 Product. The passed url can be either a full url or just the name for a
 pipeline. In the later case a relative URL is created.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.web.URL} url - the URL to use to generate the new URL.
 * @param {String} cgid - the category id or null if product is not in category             context.
 * @param {String} pid - the product id.
 * @return {dw.web.URL} the new URL.
 * @static
 */
dw.catalog.ProductSearchModel.urlForProduct = function(url, cgid, pid) {};

/**
 * Constructs a URL that you can use to execute a query for a specific
 attribute name-value pair.

 The generated URL will be an absolute URL which uses the protocol of
 the current request.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} action - pipeline action, e.g. 'Search-Show'.
 * @param {String} attributeID - the attribute ID for the refinement.
 * @param {String} value - the attribute value for the refinement.
 * @return {dw.web.URL} the new URL.
 * @static
 */
dw.catalog.ProductSearchModel.urlForRefine = function(action, attributeID, value) {};

/**
 * Constructs a URL that you can use to execute a query for a specific
 attribute name-value pair. The search specific parameters are appended to
 the provided URL. The URL is typically generated with one of the URLUtils
 methods.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.web.URL} url - the URL to use to generate the new URL.
 * @param {String} attributeID - the attribute ID for the refinement.
 * @param {String} value - the attribute value for the refinement.
 * @return {dw.web.URL} the new URL.
 * @static
 */
dw.catalog.ProductSearchModel.urlForRefine = function(url, attributeID, value) {};

/**
 * Constructs a URL that you can use to re-execute the query with a
 category refinement.

 The generated URL will be an absolute URL which uses the protocol of
 the current request.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} action - the pipeline action, e.g. 'Search-Show'
 * @param {String} refineCategoryID - the ID of the category.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlRefineCategory = function(action, refineCategoryID) {};

/**
 * Constructs a URL that you can use to re-execute the query with a
 category refinement. The search specific parameters are appended to the
 provided URL. The URL is typically generated with one of the URLUtils
 methods.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.web.URL} url - the existing URL to use to create the new URL.
 * @param {String} refineCategoryID - the ID of the category.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlRefineCategory = function(url, refineCategoryID) {};

/**
 * Constructs a URL that you can use to re-execute the query with an
 additional price filter.

 The generated URL will be an absolute URL which uses the protocol of
 the current request.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} action - the pipeline action, e.g. 'Search-Show'.
 * @param {Number} min - the minimum price.
 * @param {Number} max - the maximum price.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlRefinePrice = function(action, min, max) {};

/**
 * Constructs a URL that you can use to re-execute the query with an
 additional price filter. The search specific parameters are appended to
 the provided URL. The URL is typically generated with one of the URLUtils
 methods.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.web.URL} url - the URL to use to generate the new URL.
 * @param {Number} min - the minimum price.
 * @param {Number} max - the maximum price.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlRefinePrice = function(url, min, max) {};

/**
 * Constructs a URL that you can use to re-execute the query without any
 category refinement.

 The generated URL will be an absolute URL which uses the protocol of
 the current request.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} action - the pipeline action, e.g. 'Search-Show'.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlRelaxCategory = function(action) {};

/**
 * Constructs a URL that you can use to re-execute the query without any
 category refinement. The search specific parameters are appended to the
 provided URL. The URL is typically generated with one of the URLUtils
 methods.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.web.URL} url - the existing URL to use to create the new URL.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlRelaxCategory = function(url) {};

/**
 * Constructs a URL that you can use to re-execute the query with no price
 filter.

 The generated URL will be an absolute URL which uses the protocol of
 the current request.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} action - the pipeline action, e.g. 'Search-Show'
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlRelaxPrice = function(action) {};

/**
 * Constructs a URL that you can use to would re-execute the query with no
 price filter. The search specific parameters are appended to the provided
 URL. The URL is typically generated with one of the URLUtils methods.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.web.URL} url - the existing URL to use to create the new URL.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlRelaxPrice = function(url) {};

/**
 * Constructs a URL that you can use to re-execute the query but sort the
 results by the given rule.

 The generated URL will be an absolute URL which uses the protocol of the
 current request.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {String} action - the pipeline action, e.g. 'Search-Show'.
 * @param {dw.catalog.SortingRule} rule - sorting rule
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlSortingRule = function(action, rule) {};

/**
 * Constructs a URL that you can use to re-execute the query but sort
 the results by the given rule. The search specific parameters are
 appended to the provided URL. The URL is typically generated with one of
 the URLUtils methods.
 * @memberOf dw.catalog.ProductSearchModel
 * @param {dw.web.URL} url - the existing URL to use to create the new URL.
 * @param {dw.catalog.SortingRule} rule - sorting rule
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.ProductSearchModel.prototype.urlSortingRule = function(url, rule) {};

/**
 * This class provides an interface to refinement options for the product search.
 * @class
 * @extends dw.catalog.SearchRefinementDefinition
 */
dw.catalog.ProductSearchRefinementDefinition = function() {};
dw.catalog.ProductSearchRefinementDefinition.prototype = new dw.catalog.SearchRefinementDefinition();

/**
 * Identifies if this is a category refinement.
 * @memberOf dw.catalog.ProductSearchRefinementDefinition
 * @return {Boolean} true if this is a category refinement, false otherwise.
 */
dw.catalog.ProductSearchRefinementDefinition.prototype.isCategoryRefinement = function() {};

/**
 * Identifies if this is a price refinement.
 * @memberOf dw.catalog.ProductSearchRefinementDefinition
 * @return {Boolean} true if this is a price refinement, false otherwise.
 */
dw.catalog.ProductSearchRefinementDefinition.prototype.isPriceRefinement = function() {};

/**
 * This class provides an interface to refinement options for the product
 search. In a typical usage, the client application UI displays the search
 refinements along with the search results and allows customers to "refine"
 the results (i.e. limit the results that are shown) by specifying additional
 product criteria, or "relax" (i.e. broaden) the results after previously
 refining. The three types of product search refinements are:

 <ul>
 <li><b>Refine By Category:</b> Limit the products to those assigned to
 specific child/ancestor categories of the search category.</li>
 <li><b>Refine By Attribute:</b> Limit the products to those with specific
 values for a given attribute. Values may be grouped into "buckets" so that a
 given set of values are represented as a single refinement option.</li>
 <li><b>Refine By Price:</b> Limit the products to those whose prices fall in
 a specific range.</li>
 </ul>

 Rendering a product search refinement UI typically begins with iterating the
 refinement definitions for the search result. Call
 <a href="class_dw_catalog_SearchRefinements.html#dw_catalog_SearchRefinements_getRefinementDefinitions_DetailAnchor">SearchRefinements.getRefinementDefinitions()</a> or
 <a href="class_dw_catalog_SearchRefinements.html#dw_catalog_SearchRefinements_getAllRefinementDefinitions_DetailAnchor">SearchRefinements.getAllRefinementDefinitions()</a> to
 retrieve the appropriate collection of refinement definitions. For each
 definition, display the available refinement values by calling
 <a href="class_dw_catalog_ProductSearchRefinements.html#dw_catalog_ProductSearchRefinements_getAllRefinementValues_ProductSearchRefinementDefinition_DetailAnchor">getAllRefinementValues(ProductSearchRefinementDefinition)</a>. Depending
 on the type of the refinement definition, the application must use slightly
 different logic to display the refinement widgets. For all 3 types, methods
 in <a href="class_dw_catalog_ProductSearchModel.html">ProductSearchModel</a> are used to generate URLs to render
 hyperlinks in the UI. When clicked, these links trigger a call to the Search
 pipelet which in turn applies the appropriate filters to the native search
 result.
 * @class
 * @extends dw.catalog.SearchRefinements
 */
dw.catalog.ProductSearchRefinements = function() {};
dw.catalog.ProductSearchRefinements.prototype = new dw.catalog.SearchRefinements();

/**
 * Returns a sorted collection of refinement values for the passed
 refinement definition. The returned collection includes all refinement
 values for which the hit count is greater than 0 within the search result
 when the passed refinement definition is excluded from filtering the
 search hits but all other refinement filters are still applied. This
 method is useful for rendering broadening options for definitions that
 the search is currently refined by. If the search is not currently
 restricted by the passed refinement definition, then this method will
 return the same result as
 <a href="class_dw_catalog_ProductSearchRefinements.html#dw_catalog_ProductSearchRefinements_getRefinementValues_ProductSearchRefinementDefinition_DetailAnchor">getRefinementValues(ProductSearchRefinementDefinition)</a>.
 <p/>
 For attribute-based refinement definitions, the returned collection
 depends upon how the "value set" property is configured. (Category and
 price refinement definitions do not have such a property.) If this
 property is set to "search result values", the behavior is as described
 above. If this property is set to "all values of category", then the
 returned collection will also include all refinement values for products
 in the category subtree rooted at the search definition's category. This
 setting is useful for refinements whose visualization is supposed to
 remain constant for a certain subtree of a catalog (e.g. color pickers or
 size charts). These additional values are independent of the search
 result and do not contribute towards the value hit counts. If the search
 result is further refined by one of these values, it is possible to get
 an empty search result. Except for this one case this method does NOT
 return refinement values independent of the search result.
 * @memberOf dw.catalog.ProductSearchRefinements
 * @param {dw.catalog.ProductSearchRefinementDefinition} definition - The refinement definition to return refinement values             for. Must not be null.
 * @return {dw.util.Collection} The collection of ProductSearchRefinementValue instances, sorted          according to the settings of the refinement definition.
 */
dw.catalog.ProductSearchRefinements.prototype.getAllRefinementValues = function(definition) {};

/**
 * Returns the appropriate category refinement definition based on the search
 result. The category refinement definition returned will be the first that
 can be found traversing the category tree upward starting at the deepest
 common category of the search result.
 * @memberOf dw.catalog.ProductSearchRefinements
 * @return {dw.catalog.ProductSearchRefinementDefinition} The category refinement definition or <code>null</code> if none can          be found.
 */
dw.catalog.ProductSearchRefinements.prototype.getCategoryRefinementDefinition = function() {};

/**
 * Returns category refinement values based on the current search result
 filtered such that only category refinements representing children of the
 given category are present. If no category is given, the method uses the
 catalog's root category. The refinement value product counts represent
 all hits contained in the catalog tree starting at the corresponding
 child category.
 * @memberOf dw.catalog.ProductSearchRefinements
 * @param {dw.catalog.Category} category - The category to return child category refinement values for.
 * @return {dw.util.Collection} The refinement values for all child categories of the given          category.
 */
dw.catalog.ProductSearchRefinements.prototype.getNextLevelCategoryRefinementValues = function(category) {};

/**
 * Returns the appropriate price refinement definition based on the search
 result. The price refinement definition returned will be the first that
 can be found traversing the category tree upward starting at the deepest
 common category of the search result.
 * @memberOf dw.catalog.ProductSearchRefinements
 * @return {dw.catalog.ProductSearchRefinementDefinition} The price refinement definition or <code>null</code> if none can          be found.
 */
dw.catalog.ProductSearchRefinements.prototype.getPriceRefinementDefinition = function() {};

/**
 * Returns the refinement value (incl. product hit count) for the given
 refinement definition and the given (selected) value.
 * @memberOf dw.catalog.ProductSearchRefinements
 * @param {dw.catalog.ProductSearchRefinementDefinition} definition - The definition to return the refinement for.
 * @param {String} value - The value to return the refinement for.
 * @return {dw.catalog.ProductSearchRefinementValue} The refinement value.
 */
dw.catalog.ProductSearchRefinements.prototype.getRefinementValue = function(definition, value) {};

/**
 * Returns the refinement value (incl. product hit count) for the given
 refinement attribute and the given (selected) value.
 * @memberOf dw.catalog.ProductSearchRefinements
 * @param {String} name - The name of the refinement attribute.
 * @param {String} value - The value to return the refinement for.
 * @return {dw.catalog.ProductSearchRefinementValue} The refinement value.
 */
dw.catalog.ProductSearchRefinements.prototype.getRefinementValue = function(name, value) {};

/**
 * Returns a collection of refinement values for the given refinement
 definition. The returned refinement values only include those that are
 part of the actual search result (i.e. hit count will always be > 0).
 * @memberOf dw.catalog.ProductSearchRefinements
 * @param {dw.catalog.ProductSearchRefinementDefinition} definition - The refinement definition to return refinement values for.
 * @return {dw.util.Collection} The collection of refinement values sorted according to the          settings of the definition.
 */
dw.catalog.ProductSearchRefinements.prototype.getRefinementValues = function(definition) {};

/**
 * Represents the value of a product search refinement.
 * @class
 * @extends dw.catalog.SearchRefinementValue
 */
dw.catalog.ProductSearchRefinementValue = function() {};
dw.catalog.ProductSearchRefinementValue.prototype = new dw.catalog.SearchRefinementValue();

/**
 * Returns the lower bound for price refinements.  For example, 50.00
 for a range of $50.00 - $99.99.
 * @memberOf dw.catalog.ProductSearchRefinementValue
 * @return {Number} the lower bound for price refinements.
 */
dw.catalog.ProductSearchRefinementValue.prototype.getValueFrom = function() {};

/**
 * Returns the upper bound for price refinements.  For example, 99.99
 for a range of $50.00 - $99.99.
 * @memberOf dw.catalog.ProductSearchRefinementValue
 * @return {Number} the upper bound for price refinements.
 */
dw.catalog.ProductSearchRefinementValue.prototype.getValueTo = function() {};

/**
 * Represents a product variation attribute
 * @class
 * @extends Object
 */
dw.catalog.ProductVariationAttribute = function() {};
dw.catalog.ProductVariationAttribute.prototype = new Object();

/**
 * Returns the ID of the product attribute defintion related to
 this variation attribute.  This ID matches the
 value returned by <a href="class_dw_object_ObjectAttributeDefinition.html#dw_object_ObjectAttributeDefinition_getID_DetailAnchor">ObjectAttributeDefinition.getID()</a>
 for the appropriate product attribute definition.
 This ID is generally different than the ID returned by
 <a href="class_dw_catalog_ProductVariationAttribute.html#dw_catalog_ProductVariationAttribute_getID_DetailAnchor">getID()</a>.
 * @memberOf dw.catalog.ProductVariationAttribute
 * @return {String} the ID of the product attribute definition of this variation  attribute.
 */
dw.catalog.ProductVariationAttribute.prototype.getAttributeID = function() {};

/**
 * Returns the display name for the product variation attribute, which can be used in the
 user interface.
 * @memberOf dw.catalog.ProductVariationAttribute
 * @return {String} the display name for the product variation attribute, which can be used in the  user interface.
 */
dw.catalog.ProductVariationAttribute.prototype.getDisplayName = function() {};

/**
 * Returns the ID of the product variation attribute.
 * @memberOf dw.catalog.ProductVariationAttribute
 * @return {String} the ID of the product variation attribute.
 */
dw.catalog.ProductVariationAttribute.prototype.getID = function() {};

/**
 * Represents a product variation attribute
 * @class
 * @extends Object
 */
dw.catalog.ProductVariationAttributeValue = function() {};
dw.catalog.ProductVariationAttributeValue.prototype = new Object();

/**
 * Returns true if the specified object is equal to this object.
 * @memberOf dw.catalog.ProductVariationAttributeValue
 * @param {Object} obj - the object to test.
 * @return {Boolean} true if the specified object is equal to this object.
 */
dw.catalog.ProductVariationAttributeValue.prototype.equals = function(obj) {};

/**
 * Returns the description of the product variation attribute value in the current locale.
 * @memberOf dw.catalog.ProductVariationAttributeValue
 * @return {String} the description of the product variation attribute value in the current locale,          or null if it wasn't found.
 */
dw.catalog.ProductVariationAttributeValue.prototype.getDescription = function() {};

/**
 * Returns the display value for the product variation attribute value, which can be used in the
 user interface.
 * @memberOf dw.catalog.ProductVariationAttributeValue
 * @return {String} the display value for the product variation attribute value, which can be used in the  user interface.
 */
dw.catalog.ProductVariationAttributeValue.prototype.getDisplayValue = function() {};

/**
 * Returns the ID of the product variation attribute value.
 * @memberOf dw.catalog.ProductVariationAttributeValue
 * @return {String} the ID of the product variation attribute value.
 */
dw.catalog.ProductVariationAttributeValue.prototype.getID = function() {};

/**
 * The method calls <a href="class_dw_catalog_ProductVariationAttributeValue.html#dw_catalog_ProductVariationAttributeValue_getImages_String_DetailAnchor">getImages(String)</a> and returns the first image
 of the list. The method is specifically built for handling color
 swatches in an apparel site.

 If no images are defined for this variant and specified view type, then
 the first image of the master product images for that view type is
 returned. If no master product images are defined, the method returns
 null.
 * @memberOf dw.catalog.ProductVariationAttributeValue
 * @param {String} viewtype - the view type annotated to image
 * @return {dw.content.MediaFile} the MediaFile or null
 * @throws NullArgumentException if viewtype is null
 */
dw.catalog.ProductVariationAttributeValue.prototype.getImage = function(viewtype) {};

/**
 * The method calls <a href="class_dw_catalog_ProductVariationAttributeValue.html#dw_catalog_ProductVariationAttributeValue_getImages_String_DetailAnchor">getImages(String)</a> and returns the image at
 the specific index.

 If images are defined for this view type and variant, but not for
 specified index, the method returns null.

 If no images are defined for this variant and specified view type, the
 image at the specified index of the master product images is returned. If
 no master product image for specified index is defined, the method
 returns null.
 * @memberOf dw.catalog.ProductVariationAttributeValue
 * @param {String} viewtype - the view type annotated to image
 * @param {Number} index - the index number of the image within image list
 * @return {dw.content.MediaFile} the MediaFile or null
 * @throws NullArgumentException if viewtype is null
 */
dw.catalog.ProductVariationAttributeValue.prototype.getImage = function(viewtype, index) {};

/**
 * Returns all images that match the given view type and have the variant
 value of this value, which is typically the 'color' attribute. The images
 are returned in the order of their index number ascending.

 If no images are defined for this variant, then the images of the master
 for that view type are returned.
 * @memberOf dw.catalog.ProductVariationAttributeValue
 * @param {String} viewtype - the view type annotated to images
 * @return {dw.util.List} a list of MediaFile objects, possibly empty
 * @throws NullArgumentException if viewtype is null
 */
dw.catalog.ProductVariationAttributeValue.prototype.getImages = function(viewtype) {};

/**
 * Returns the value for the product variation attribute value.
 * @memberOf dw.catalog.ProductVariationAttributeValue
 * @return {Object} the value for the product variation attribute value.
 */
dw.catalog.ProductVariationAttributeValue.prototype.getValue = function() {};

/**
 * Calculates the hash code for a product variation attribute value.
 * @memberOf dw.catalog.ProductVariationAttributeValue
 * @return {Number} the hash code for a product variation attribute value.
 */
dw.catalog.ProductVariationAttributeValue.prototype.hashCode = function() {};

/**
 * Class representing the complete variation information for a master product in
 the system. An instance of this class provides methods to access the
 following information:

 <ul>
 <li>The variation attributes of the master product (e.g. size and color). Use
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getProductVariationAttributes_DetailAnchor">getProductVariationAttributes()</a>.</li>
 <li>The variation attribute values (e.g. size=Small, Medium, Large and
 color=Red, Blue). Use <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getAllValues_ProductVariationAttribute_DetailAnchor">getAllValues(ProductVariationAttribute)</a>.</li>
 <li>The variation groups which may represent a subset of variants by defining a
 subset of the variation attribute values (e.g. color=Red, size=empty). Use
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getVariationGroups_DetailAnchor">getVariationGroups()</a>.</li>
 <li>The variants themselves (e.g. the products representing Small Red, Large
 Red, Small Blue, Large Blue, etc). Use <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getVariants_DetailAnchor">getVariants()</a>.</li>
 <li>The variation attribute values of those variants. Use
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getVariationValue_Product_ProductVariationAttribute_DetailAnchor">getVariationValue(Product, ProductVariationAttribute)</a>.</li>
 </ul>

 This model only considers variants which are complete (i.e. the variant has a
 value for each variation attribute), and currently online. Incomplete or
 offline variants will not be returned by any method that returns Variants,
 and their attribute values will not be considered in any method that returns
 values.
 <p/>
 In addition to providing access to this meta information,
 ProductVariationModel maintains a collection of selected variation attribute
 values, representing the selections that a customer makes in the storefront.
 It is possible to query the current selections by calling getSelectedValue()
 or isSelectedAttributeValue(}. There is no simple programmatic method for
 selecting values. However, the model provides helper methods to generate URLs
 for selecting and unselecting variation attribute values. See those methods
 for details.
 <p/>
 If this model was constructed for a master product, then none of the
 attributes will have pre-selected values. If this model was constructed for a
 variant product, then all the attribute values of that variant will be
 pre-selected. If this model was constructed for a product that is neither a
 master nor a variant, then none of the methods will return useful values at
 all.
 <p/>
 The methods in this class which access the currently selected variation
 attribute values can be used on product detail pages to render information
 about which combinations are available or unavailable. The methods
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getFilteredValues_ProductVariationAttribute_DetailAnchor">getFilteredValues(ProductVariationAttribute)</a> and
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_hasOrderableVariants_ProductVariationAttribute_ProductVariationAttributeValue_DetailAnchor">hasOrderableVariants(ProductVariationAttribute, ProductVariationAttributeValue)</a>
 can be used to determine this type of situation and render the appropriate
 message in the storefront.
 <p/>
 NOTE: Several methods in this class have a version taking a
 <a href="class_dw_catalog_ProductVariationAttribute.html">ProductVariationAttribute</a> parameter, and another
 deprecated version accepting a <a href="class_dw_object_ObjectAttributeDefinition.html">ObjectAttributeDefinition</a>
 parameter instead. The former should be strictly favored. The latter are
 historical leftovers from when object attributes were used directly as the
 basis for variation, and the value lists were stored directly on the
 ObjectAttributeDefinition. Every ProductVariationAttribute corresponds with
 exactly one ObjectAttributeDefinition, but values are now stored on the
 ProductVariationAttribute and not the ObjectAttributeDefinition.
 * @class
 * @extends Object
 */
dw.catalog.ProductVariationModel = function() {};
dw.catalog.ProductVariationModel.prototype = new Object();

/**
 * Returns the value definitions for the specified attribute. Only values
 that actually exist for at least one of the master product's currently
 online and complete variants are returned.
 <p/>
 Returns an empty collection if the passed attribute is not even a
 variation attribute of the master product.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.object.ObjectAttributeDefinition} attribute - the attribute whose values will be returned.
 * @return {dw.util.Collection} the sorted collection of ObjectAttributeValueDefinition instances          representing the value definitions defined for the specified          attribute. The collection is sorted by the explicit sort order          defined for the values.
 * @deprecated This method is deprecated since custom code should work with
             ProductVariationAttributes and not directly with their
             corresponding ObjectAttributeDefinitions. Use
             <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getAllValues_ProductVariationAttribute_DetailAnchor">getAllValues(ProductVariationAttribute)</a> to get the
             collection of ProductVariationAttributeValue instances
             instead.
 */
dw.catalog.ProductVariationModel.prototype.getAllValues = function(attribute) {};

/**
 * Returns the values for the specified attribute. Only values that actually
 exist for at least one of the master product's currently online and
 complete variants are returned.
 <p/>
 Returns an empty collection if the passed attribute is not even a
 variation attribute of the master product.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.catalog.ProductVariationAttribute} attribute - the variation attribute whose values will be returned.
 * @return {dw.util.Collection} the sorted collection of ProductVariationAttributeValue instances          representing the values defined for the specified attribute. The          collection is sorted by the explicit sort order defined for the          values.
 */
dw.catalog.ProductVariationModel.prototype.getAllValues = function(attribute) {};

/**
 * Returns the object attribute definitions corresponding with the product
 variation attributes of the master product.
 * @memberOf dw.catalog.ProductVariationModel
 * @return {dw.util.Collection} the collection of ObjectAttributeDefinition instances          corresponding with the variation attributes of the master          product, sorted by explicit position.
 * @deprecated This method is deprecated since custom code should work with
             ProductVariationAttributes and not directly with their
             corresponding ObjectAttributeDefinitions. Use
             <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getProductVariationAttributes_DetailAnchor">getProductVariationAttributes()</a> to get the
             product variation attributes.
 */
dw.catalog.ProductVariationModel.prototype.getAttributeDefinitions = function() {};

/**
 * Return the default variant of this model's master product. If no default
 variant has been defined, return an arbitrary variant.
 * @memberOf dw.catalog.ProductVariationModel
 * @return {dw.catalog.Variant} the default value of this model's master product, an arbitrary          variant if no default is defined, or null if this model does not          represent a master product with variants.
 */
dw.catalog.ProductVariationModel.prototype.getDefaultVariant = function() {};

/**
 * Returns a collection of the value definitions defined for the specified
 attribute, filtered based on currently selected values.
 <p/>
 A value is only returned if it at least one variant has the value and
 also possesses the selected values for all previous attributes. It is
 important to know that the filter is applied in a certain order. The
 method looks at all ObjectAttributeDefinition instances that appear
 before the passed one in the sorted collection returned by
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getAttributeDefinitions_DetailAnchor">getAttributeDefinitions()</a>. If the passed attribute is the first
 in this collection, then this method simply returns all its values. If an
 earlier attribute does not have a selected value, this method returns an
 empty list. Otherwise, the filter looks at all variants matching the
 selected value for all previous attributes, and considers the range of
 values possessed by these variants for the passed attribute.
 <p/>
 The idea behind this method is that customers in the storefront select
 variation attribute values one by one in the order the variation
 attributes are defined and displayed. After each selection, customer only
 wants to see values that he can possibly order for the remaining
 attributes.
 <p/>
 Returns an empty collection if the passed attribute is not even a
 variation attribute of the master product.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.object.ObjectAttributeDefinition} attribute - the attribute whose values are returned by this method.
 * @return {dw.util.Collection} a sorted collection of ObjectAttributeDefinitionValue instances          calculated based on the currently selected variation values.
 * @deprecated Use <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getFilteredValues_ProductVariationAttribute_DetailAnchor">getFilteredValues(ProductVariationAttribute)</a> to
             get the sorted and calculated collection of product variation
             attribute values.
 */
dw.catalog.ProductVariationModel.prototype.getFilteredValues = function(attribute) {};

/**
 * Returns a collection of the value definitions defined for the specified
 attribute, filtered based on currently selected values.
 <p/>
 A value is only returned if it at least one variant has the value and
 also possesses the selected values for all previous attributes. It is
 important to know that the filter is applied in a certain order. The
 method looks at all ProductVariationAttribute instances that appear
 before the passed one in the sorted collection returned by
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getProductVariationAttributes_DetailAnchor">getProductVariationAttributes()</a>. If the passed attribute is the
 first in this collection, then this method simply returns all its values.
 If an earlier attribute does not have a selected value, this method
 returns an empty list. Otherwise, the filter looks at all variants
 matching the selected value for all previous attributes, and considers
 the range of values possessed by these variants for the passed attribute.
 <p/>
 The idea behind this method is that customers in the storefront select
 variation attribute values one by one in the order the variation
 attributes are defined and displayed. After each selection, customer only
 wants to see values that he can possibly order for the remaining
 attributes.
 <p/>
 Returns an empty collection if the passed attribute is not even a
 variation attribute of the master product.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.catalog.ProductVariationAttribute} attribute - the product variation attribute whose values are to be             returned.
 * @return {dw.util.Collection} a sorted and filtered collection of product variation attribute          values. The collection is sorted by the explicit sort order          defined for the values.
 */
dw.catalog.ProductVariationModel.prototype.getFilteredValues = function(attribute) {};

/**
 * Returns an HTML representation of the variation attribute id. This method
 is deprecated. You should use getHtmlName(ProductVariationAttribute)
 instead.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.object.ObjectAttributeDefinition} attribute - the attribute whose ID is returned.
 * @return {String} an HTML representation of the attribute id.
 * @deprecated Use <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getHtmlName_ProductVariationAttribute_DetailAnchor">getHtmlName(ProductVariationAttribute)</a> to get
             the HTML representation of the product variation attribute
             id.
 */
dw.catalog.ProductVariationModel.prototype.getHtmlName = function(attribute) {};

/**
 * Returns an HTML representation of the product variation attribute id.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.catalog.ProductVariationAttribute} attribute - the  product variation attribute whose ID is returned.
 * @return {String} an HTML representation of the product variation attribute id.
 */
dw.catalog.ProductVariationModel.prototype.getHtmlName = function(attribute) {};

/**
 * Returns an HTML representation of the variation attribute id with the
 custom prefix. This method is deprecated. You should use
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getHtmlName_String_ProductVariationAttribute_DetailAnchor">getHtmlName(String, ProductVariationAttribute)</a> instead.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} prefix - a custom prefix.
 * @param {dw.object.ObjectAttributeDefinition} attribute - the attribute whose ID is returned.
 * @return {String} an HTML representation of the attribute id.
 * @deprecated Use <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getHtmlName_String_ProductVariationAttribute_DetailAnchor">getHtmlName(String, ProductVariationAttribute)</a>
             to get the HTML representation of the product variation
             attribute id with the custom prefix.
 */
dw.catalog.ProductVariationModel.prototype.getHtmlName = function(prefix, attribute) {};

/**
 * Returns an HTML representation of the  product variation attribute id with the custom prefix.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} prefix - a custom prefix.
 * @param {dw.catalog.ProductVariationAttribute} attribute - the product variation attribute whose ID is returned.
 * @return {String} an HTML representation of the product variation attribute id.
 */
dw.catalog.ProductVariationModel.prototype.getHtmlName = function(prefix, attribute) {};

/**
 * The method returns the first image appropriate for the current selected variation values
 with the specific index.

 If images are defined for this view type and variants, but not for
 specified index, the method returns null.

 If no images are defined for all variants and specified view type, the
 image at the specified index of the master product images is returned. If
 no master product image for specified index is defined, the method
 returns null.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} viewtype - the view type annotated to image
 * @return {dw.content.MediaFile} the MediaFile or null
 * @throws NullArgumentException if viewtype is null
 */
dw.catalog.ProductVariationModel.prototype.getImage = function(viewtype) {};

/**
 * The method returns an image appropriate for the current selected variation values
 with the specific index.

 If images are defined for this view type and variants, but not for
 specified index, the method returns null.

 If no images are defined for all variants and specified view type, the
 image at the specified index of the master product images is returned. If
 no master product image for specified index is defined, the method
 returns null.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} viewtype - the view type annotated to image
 * @param {Number} index - the index number of the image within image list
 * @return {dw.content.MediaFile} the MediaFile or null
 * @throws NullArgumentException if viewtype is null
 */
dw.catalog.ProductVariationModel.prototype.getImage = function(viewtype, index) {};

/**
 * The method returns the first image appropriate for the currently selected attribute values.

 The method first considers the most specific combination of attribute values (e.g
 "Red leather") and if that is not found, more general (e.g "Red").  If no image group
 is found for the attributes, returns null
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} viewtype - the view type annotated to image
 * @param {dw.catalog.ProductVariationAttribute} attribute - the variation attribute
 * @param {dw.catalog.ProductVariationAttributeValue} value - the the variation attribute value
 * @return {dw.content.MediaFile} the first image, or null if not found
 * @throws NullArgumentException if viewtype is null
 */
dw.catalog.ProductVariationModel.prototype.getImage = function(viewtype, attribute, value) {};

/**
 * The method returns the image appropriate for the currently selected attribute values.

 The method first considers the most specific combination of attribute values (e.g
 "Red leather") and if that is not found, more general (e.g "Red").  If no image group
 is found for the attributes, returns null
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} viewtype - the view type annotated to image
 * @return {dw.util.List} an array of images
 * @throws NullArgumentException if viewtype is null
 */
dw.catalog.ProductVariationModel.prototype.getImages = function(viewtype) {};

/**
 * Returns the master of the product variation.
 * @memberOf dw.catalog.ProductVariationModel
 * @return {dw.catalog.Product} the master of the product variation.
 */
dw.catalog.ProductVariationModel.prototype.getMaster = function() {};

/**
 * Returns the product variation attribute for the specific id,
 or null if there is no product variation attribute for that id.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} id - the id of the product variation attribute
 * @return {dw.catalog.ProductVariationAttribute} the product variation attribute, or null.
 */
dw.catalog.ProductVariationModel.prototype.getProductVariationAttribute = function(id) {};

/**
 * Returns a collection of product variation attributes of the variation.
 * @memberOf dw.catalog.ProductVariationModel
 * @return {dw.util.Collection} a collection of product variation attributes  of the variation.
 */
dw.catalog.ProductVariationModel.prototype.getProductVariationAttributes = function() {};

/**
 * Returns the selected value for the specified attribute. If no value is
 selected, null is returned.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.object.ObjectAttributeDefinition} attribute - the attribute whose value will be returned.
 * @return {dw.object.ObjectAttributeValueDefinition} the selected value for the specified attribute or null.
 * @deprecated Use <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getSelectedValue_ProductVariationAttribute_DetailAnchor">getSelectedValue(ProductVariationAttribute)</a> to
             get the selected product variation attribute value for the
             specified attribute.
 */
dw.catalog.ProductVariationModel.prototype.getSelectedValue = function(attribute) {};

/**
 * Returns the selected value for the specified product variation attribute. If no value is
 selected, null is returned.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.catalog.ProductVariationAttribute} attribute - the product variation attribute whose value will be returned.
 * @return {dw.catalog.ProductVariationAttributeValue} the selected product variation attribute value for the specified attribute or null.
 */
dw.catalog.ProductVariationModel.prototype.getSelectedValue = function(attribute) {};

/**
 * Returns the variant currently selected for this variation model.
 Returns null if no variant is selected.
 * @memberOf dw.catalog.ProductVariationModel
 * @return {dw.catalog.Variant} selected variant or null.
 */
dw.catalog.ProductVariationModel.prototype.getSelectedVariant = function() {};

/**
 * Returns the collection of product variants of this variation model.
 This collection only includes online variants. Offline variants are
 filtered out. If all variation products are required, consider using
 <a href="class_dw_catalog_Product.html#dw_catalog_Product_getVariants_DetailAnchor">Product.getVariants()</a>.

 The product variants are returned in no particular order.
 * @memberOf dw.catalog.ProductVariationModel
 * @return {dw.util.Collection} a collection of all the product variants of the variation model.
 */
dw.catalog.ProductVariationModel.prototype.getVariants = function() {};

/**
 * Returns the variants that match the specified filter conditions. The
 filter conditions are specified as a hash map of &lt;attribute_id&gt; -
 &lt;value_id&gt;.  This method does not consider the currently selected
 attribute values.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.util.HashMap} filter - the filters to apply when collecting the variants.
 * @return {dw.util.Collection} the collection of variants that match the specified filter          conditions.
 */
dw.catalog.ProductVariationModel.prototype.getVariants = function(filter) {};

/**
 * Returns the collection of variation groups of this variation model.
 This collection only includes online variation groups. Offline variation
 groups are filtered out. If all variation group products are required,
 consider using <a href="class_dw_catalog_Product.html#dw_catalog_Product_getVariationGroups_DetailAnchor">Product.getVariationGroups()</a>.

 The variation groups are returned in no particular order.
 * @memberOf dw.catalog.ProductVariationModel
 * @return {dw.util.Collection} a collection of all the variation groups of the variation model.
 */
dw.catalog.ProductVariationModel.prototype.getVariationGroups = function() {};

/**
 * Returns the value for the specified variant or variation group product and
 variation attribute. The specified product should be a <a href="class_dw_catalog_Variant.html">Variant</a>
 returned by <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getVariants_DetailAnchor">getVariants()</a> or a <a href="class_dw_catalog_VariationGroup.html">VariationGroup</a> returned by
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getVariationGroups_DetailAnchor">getVariationGroups()</a>. The variation attribute should be one returned by
 <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_getProductVariationAttributes_DetailAnchor">getProductVariationAttributes()</a>. If an invalid product or attribute is passed,
 null is returned. If null is passed for either argument, an exception is thrown.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.catalog.Product} variantOrVariationGroup - the variant or variation group product to retrieve a value for,         must not be null.
 * @param {dw.catalog.ProductVariationAttribute} attribute - the product variation attribute to get the value for, must not be null.
 * @return {dw.catalog.ProductVariationAttributeValue} the attribute value for the specified variant or variation group and attribute, or          null if an invalid variant, variation group or attribute is passed or the variation          group define no value for the variation attribute.
 */
dw.catalog.ProductVariationModel.prototype.getVariationValue = function(variantOrVariationGroup, attribute) {};

/**
 * Returns true if any variant is available with the specified value of the
 specified variation attribute. Available means that the variant is
 orderable according to the variant's availability model. This method
 takes currently selected attribute values into consideration. The
 specific rules are as follows:
 <ul>
 <li>If no variation value is currently selected, the method returns true
 if any variant with the specified value is available, else false.</li>
 <li>if one or more variation values are selected, the method returns true
 if any variant with a combination of the specified value and the selected
 value is available, else false.</li>
 <li>if all variation values are selected, the method returns true of the
 variant that is represented by the current selection is available, else
 false.</li>
 </ul>
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.catalog.ProductVariationAttribute} attribute - The product variation attribute whose values are to be             tested for orderable variants.
 * @param {dw.catalog.ProductVariationAttributeValue} value - The specific attribute value to test for orderable variants.
 * @return {Boolean} true if any variant is available with the specified value of the          specified variation attribute based on the currently selected          attribute values, false otherwise.
 * @see <a href="class_dw_catalog_ProductAvailabilityModel.html#dw_catalog_ProductAvailabilityModel_isOrderable_DetailAnchor">ProductAvailabilityModel.isOrderable</a>
 */
dw.catalog.ProductVariationModel.prototype.hasOrderableVariants = function(attribute, value) {};

/**
 * Identifies if the specified variation value is the one currently
 selected.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.object.ObjectAttributeDefinition} attribute - the attribute to check.
 * @param {dw.object.ObjectAttributeValueDefinition} value - the value to check for selection.
 * @return {Boolean} true if the specified variation value is currently selected,          false otherwise.
 * @deprecated Use
             <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_isSelectedAttributeValue_ProductVariationAttribute_ProductVariationAttributeValue_DetailAnchor">isSelectedAttributeValue(ProductVariationAttribute, ProductVariationAttributeValue)</a>
             to identify if the specified product variation attribute
             value is the one currently selected.
 */
dw.catalog.ProductVariationModel.prototype.isSelectedAttributeValue = function(attribute, value) {};

/**
 * Identifies if the specified product variation attribute value is the one
 currently selected.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {dw.catalog.ProductVariationAttribute} attribute - the attribute to check.
 * @param {dw.catalog.ProductVariationAttributeValue} value - the value to check for selection.
 * @return {Boolean} true if the specified variation attribute value is currently          selected, false otherwise.
 */
dw.catalog.ProductVariationModel.prototype.isSelectedAttributeValue = function(attribute, value) {};

/**
 * Constructs a URL to select a set of variation attribute values. The
 optional <code>varAttrAndValues</code> argument can be empty, or can
 contain one or more variation attribute / value pairs. This variable list
 should be even in length, with attributes and values alternating.
 Attributes can be specified as instances of ProductVariationAttribute, or
 String variation attribute ID. (Note: ObjectAttributeDefinition IDs are
 not supported.) Values can be specified as instances of
 ProductVariationAttributeValue or String or Integer depending on the data
 type of the variation attribute. If a parameter type is invalid, or does
 not reference a valid ProductVariationAttribute or
 ProductVariationAttributeValue, then the parameter pair is not included
 in the generated URL. The returned URL will contain variation attributes
 and values already selected in the product variation model, as well as
 attributes and values specified as method parameters. <p/>

 Sample usage: <p/>

 <pre>
 master.variationModel.url("Product-Show", "color", "red", "size", "XL"); <br/>
 master.variationModel.url("Product-Show", colorVarAttr, colorValue, sizeVarAttr, sizeValue); <br/>
 // --> on/demandware.store/Sites-SiteGenesis-Site/default/Product-Show?pid=master_id&amp;dwvar_color=red&amp;dwvar_size=XL <br/>
 </pre>
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} action - The pipeline action.
 * @param {Object[]} varAttrAndValues - Variable length list of attributes and             corresponding values to select.
 * @return {dw.web.URL} The constructed URL.
 * @varArgs
 */
dw.catalog.ProductVariationModel.prototype.url = function(action, varAttrAndValues) {};

/**
 * Constructs an URL to select the specified value of the specified
 variation attribute.
 <p/>
 The generated URL will be an absolute URL which uses the protocol of the
 current request.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} action - the pipeline action, e.g. "Product-Show".
 * @param {dw.object.ObjectAttributeDefinition} attribute - the attribute to select a value for.
 * @param {dw.object.ObjectAttributeValueDefinition} value - the attribute definition value portion of the variation.
 * @return {String} the generated URL, an absolute URL which uses the protocol of the          current request.
 * @deprecated Use
             <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_urlSelectVariationValue_String_ProductVariationAttribute_ProductVariationAttributeValue_DetailAnchor">urlSelectVariationValue(String, ProductVariationAttribute, ProductVariationAttributeValue)</a>
             to construct an URL to select the specified product variation
             attribute value of the specified product variation attribute.
 */
dw.catalog.ProductVariationModel.prototype.urlSelectVariationValue = function(action, attribute, value) {};

/**
 * Generates a URL for selecting a value for a given variation attribute.
 This URL is intended to be used on dynamic product detail pages. When a
 customer selects which value he wants for one of the variation
 attributes, the product detail page can issue a request to the passed URL
 which in turn can invoke the
 <code>UpdateProductVariationSelections</code> pipelet. That pipelet reads
 the querystring parameters and returns an updated variation model with
 the desired attribute value selected.
 <p/>
 The generated URL will be an absolute URL which uses the protocol of
 the current request.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} action - the pipeline action, e.g. "Product-Show".
 * @param {dw.catalog.ProductVariationAttribute} attribute - the product variation attribute to select a value for.
 * @param {dw.catalog.ProductVariationAttributeValue} value - the product variation attribute value to select.
 * @return {String} the generated URL, an absolute URL which uses the protocol of the          current request.
 */
dw.catalog.ProductVariationModel.prototype.urlSelectVariationValue = function(action, attribute, value) {};

/**
 * Constructs an URL to unselect the value of the specified variation
 attribute.
 <p/>
 The generated URL will be an absolute URL which uses the protocol of the
 current request.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} action - the pipeline action, e.g. "Product-Show".
 * @param {dw.object.ObjectAttributeDefinition} attribute - the attribute to unselect.
 * @return {String} the generated URL, an absolute URL which uses the protocol of the          current request.
 * @deprecated Use
             <a href="class_dw_catalog_ProductVariationModel.html#dw_catalog_ProductVariationModel_urlUnselectVariationValue_String_ProductVariationAttribute_DetailAnchor">urlUnselectVariationValue(String, ProductVariationAttribute)</a>
             to unselect the product variation attribute value of the
             specified product variation attribute.
 */
dw.catalog.ProductVariationModel.prototype.urlUnselectVariationValue = function(action, attribute) {};

/**
 * Generates a URL for unselecting a value for a given variation attribute.
 This URL is intended to be used on dynamic product detail pages. When a
 customer deselects a value for one of the variation attributes, the
 product detail page can issue a request to the passed URL which in turn
 can invoke the <code>UpdateProductVariationSelections</code> pipelet.
 That pipelet reads the querystring parameters and returns an updated
 variation model with the desired attribute value unselected.
 <p/>
 The generated URL will be an absolute URL which uses the protocol of
 the current request.
 * @memberOf dw.catalog.ProductVariationModel
 * @param {String} action - the pipeline action, e.g. "Product-Show".
 * @param {dw.catalog.ProductVariationAttribute} attribute - the product variation attribute to unselect.
 * @return {String} the generated URL, an absolute URL which uses the protocol of the          current request.
 */
dw.catalog.ProductVariationModel.prototype.urlUnselectVariationValue = function(action, attribute) {};

/**
 * Represents a recommendation in the Demandware framework.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.Recommendation = function() {};
dw.catalog.Recommendation.prototype = new dw.object.ExtensibleObject();

/**
 * Represents a cross-sell recommendation.
 * @type Number
 * @memberOf dw.catalog.Recommendation
 * @deprecated Use the integer value instead.  The recommendation types
 and their meanings are now configurable in the Business Manager.
 * @static
 * @const
 */
dw.catalog.Recommendation.RECOMMENDATION_TYPE_CROSS_SELL = 0;

/**
 * Represents a recommendation that is neither a cross-sell or an up-sell.
 * @type Number
 * @memberOf dw.catalog.Recommendation
 * @deprecated Use the integer value instead.  The recommendation types
 and their meanings are now configurable in the Business Manager.
 * @static
 * @const
 */
dw.catalog.Recommendation.RECOMMENDATION_TYPE_OTHER = 0;

/**
 * Represents an up-sell recommendation.
 * @type Number
 * @memberOf dw.catalog.Recommendation
 * @deprecated Use the integer value instead.  The recommendation types
 and their meanings are now configurable in the Business Manager.
 * @static
 * @const
 */
dw.catalog.Recommendation.RECOMMENDATION_TYPE_UP_SELL = 0;

/**
 * Returns the recommendation's callout message in the current locale.
 * @memberOf dw.catalog.Recommendation
 * @return {dw.content.MarkupText} the recommendation's callout message in the current locale, or          null if it wasn't found.
 */
dw.catalog.Recommendation.prototype.getCalloutMsg = function() {};

/**
 * Return the catalog containing the recommendation.
 * @memberOf dw.catalog.Recommendation
 * @return {dw.catalog.Catalog} the catalog containing the recommendation.
 */
dw.catalog.Recommendation.prototype.getCatalog = function() {};

/**
 * Returns the recommendation's image.
 * @memberOf dw.catalog.Recommendation
 * @return {dw.content.MediaFile} the recommendation's image.
 */
dw.catalog.Recommendation.prototype.getImage = function() {};

/**
 * Returns the recommendation's long description in the current locale.
 * @memberOf dw.catalog.Recommendation
 * @return {dw.content.MarkupText} The recommendation's long description in the current locale, or          null if it wasn't found.
 */
dw.catalog.Recommendation.prototype.getLongDescription = function() {};

/**
 * Returns the name of the recommended item in the current locale.
 * @memberOf dw.catalog.Recommendation
 * @return {String} The name of the recommended item for the current locale, or null          if it wasn't found.
 */
dw.catalog.Recommendation.prototype.getName = function() {};

/**
 * Returns the type of the recommendation.
 * @memberOf dw.catalog.Recommendation
 * @return {Number} the type of the recommendation expressed as an integer.
 */
dw.catalog.Recommendation.prototype.getRecommendationType = function() {};

/**
 * Return a reference to the recommended item.  This will always be an
 object of type <code>dw.catalog.Product</code> since this is the only
 currently supported recommendation target type.
 * @memberOf dw.catalog.Recommendation
 * @return {Object} the recommended item, possibly null if the item does not exist.
 */
dw.catalog.Recommendation.prototype.getRecommendedItem = function() {};

/**
 * Return the ID of the recommended item.  This will always be a product
 ID since this is the only currently supported recommendation target
 type.
 * @memberOf dw.catalog.Recommendation
 * @return {String} the recommended item ID.
 */
dw.catalog.Recommendation.prototype.getRecommendedItemID = function() {};

/**
 * Returns the recommendation's short description in the current locale.
 * @memberOf dw.catalog.Recommendation
 * @return {dw.content.MarkupText} the recommendations's short description in the current locale, or          null if it wasn't found.
 */
dw.catalog.Recommendation.prototype.getShortDescription = function() {};

/**
 * Return a reference to the source item.  This will be an object of type
 <code>dw.catalog.Product</code> or <code>dw.catalog.Category.</code>
 * @memberOf dw.catalog.Recommendation
 * @return {Object} the source item.
 */
dw.catalog.Recommendation.prototype.getSourceItem = function() {};

/**
 * Return the ID of the recommendation source item.  This will either be a
 product ID or category name.
 * @memberOf dw.catalog.Recommendation
 * @return {String} the source item ID.
 */
dw.catalog.Recommendation.prototype.getSourceItemID = function() {};

/**
 * URL Parameter for the Search Phrase
 * @type String
 * @memberOf dw.catalog.SearchModel
 * @static
 * @const
 */
dw.catalog.SearchModel.SEARCH_PHRASE_PARAMETER = '';

/**
 * Sorting parameter ASCENDING
 * @type Number
 * @memberOf dw.catalog.SearchModel
 * @static
 * @const
 */
dw.catalog.SearchModel.SORT_DIRECTION_ASCENDING = 0;

/**
 * Sorting parameter DESCENDING
 * @type Number
 * @memberOf dw.catalog.SearchModel
 * @static
 * @const
 */
dw.catalog.SearchModel.SORT_DIRECTION_DESCENDING = 0;

/**
 * Sorting parameter NO_SORT - will remove a sorting condition
 * @type Number
 * @memberOf dw.catalog.SearchModel
 * @static
 * @const
 */
dw.catalog.SearchModel.SORT_DIRECTION_NONE = 0;

/**
 * Adds a refinement. The method can be called to add an additional query
 parameter specified as name-value pair. The values string may encode
 multiple values delimited by the pipe symbol ('|').
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - The ID of the refinement attribute.
 * @param {String} values - the refinement value to set
 */
dw.catalog.SearchModel.prototype.addRefinementValues = function(attributeID, values) {};

/**
 * Identifies if the search can be relaxed without creating a search for all
 searchable items.
 * @memberOf dw.catalog.SearchModel
 * @return {Boolean} true if the search can be relaxed without creating a search for          all searchable items, false otherwise.
 */
dw.catalog.SearchModel.prototype.canRelax = function() {};

/**
 * Returns the number of search results found by this search.
 * @memberOf dw.catalog.SearchModel
 * @return {Number} the number of search results found by this search.
 */
dw.catalog.SearchModel.prototype.getCount = function() {};

/**
 * Returns the maximum refinement value selected in the query for the specific
 attribute, or null if there is no maximum refinement value or no refinement for that attribute.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - the attribute whose refinement value is returned.
 * @return {String} the maximum refinement value selected in the query for the specific          attribute.
 */
dw.catalog.SearchModel.prototype.getRefinementMaxValue = function(attributeID) {};

/**
 * Returns the minimum refinement value selected in the query for the specific
 attribute, or null if there is no minimum refinement value or no refinement for that attribute.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - the attribute whose refinement value is returned.
 * @return {String} the minimum refinement value selected in the query for the specific          attribute.
 */
dw.catalog.SearchModel.prototype.getRefinementMinValue = function(attributeID) {};

/**
 * Returns the refinement value selected in the query for the specific
 attribute, or null if there is no refinement for that attribute.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - the attribute whose refinement value is returned.
 * @return {String} the refinement value selected in the query for the specific          attribute.
 * @deprecated Use <a href="class_dw_catalog_SearchModel.html#dw_catalog_SearchModel_getRefinementValues_String_DetailAnchor">getRefinementValues(String)</a> to get the
             collection of refinement values.
 */
dw.catalog.SearchModel.prototype.getRefinementValue = function(attributeID) {};

/**
 * Returns the list of selected refinement values for the given attribute as
 used in the search.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - The name of the refinement attribute.
 * @return {dw.util.Collection} A list of values currently selected for the refinement attribute.
 */
dw.catalog.SearchModel.prototype.getRefinementValues = function(attributeID) {};

/**
 * Returns the search phrase used in this search.
 * @memberOf dw.catalog.SearchModel
 * @return {String} the search phrase used in this search.
 */
dw.catalog.SearchModel.prototype.getSearchPhrase = function() {};

/**
 * Returns the sorting condition for a given attribute name. A value of 0
 indicates that no sorting condition is set.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - the attribute name
 * @return {Number} zero if no sorting order set, or the sorting order
 */
dw.catalog.SearchModel.prototype.getSortingCondition = function(attributeID) {};

/**
 * Identifies if the query is emtpy when no search term, search parameter or
 refinement was specified for the search. In case also no result is
 returned. This "empty" is different to a query with a specified query and
 with an empty result.
 * @memberOf dw.catalog.SearchModel
 * @return {Boolean} true if the query is emtpy when no search term, search parameter          or refinement was specified for the search.
 */
dw.catalog.SearchModel.prototype.isEmptyQuery = function() {};

/**
 * The method returns true, if this search is refined by at least one
 attribute.
 * @memberOf dw.catalog.SearchModel
 * @return {Boolean} true, if the search is refined by at least one attribute, false          otherwise.
 */
dw.catalog.SearchModel.prototype.isRefinedByAttribute = function() {};

/**
 * Identifies if this search has been refined on the given attribute.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - The ID of the refinement attribute.
 * @return {Boolean} True if the search is refined on the attribute, false otherwise.
 */
dw.catalog.SearchModel.prototype.isRefinedByAttribute = function(attributeID) {};

/**
 * Identifies if this search has been refined on the given attribute and
 value.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - The ID of the refinement attribute.
 * @param {String} value - The value to be checked for inclusion in the refinement.
 * @return {Boolean} True if the search is refined on the attribute and value, false          otherwise.
 */
dw.catalog.SearchModel.prototype.isRefinedByAttributeValue = function(attributeID, value) {};

/**
 * Identifies if this was a refined search. A search is a refined search if
 at least one refinement is part of the query.
 * @memberOf dw.catalog.SearchModel
 * @return {Boolean} true if this is a refined search, false otherwise.
 */
dw.catalog.SearchModel.prototype.isRefinedSearch = function() {};

/**
 * Identifies if this search has been refined on the given attribute.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - The ID of the refinement attribute.
 * @return {Boolean} True if the search is refined on the attribute, false otherwise.
 */
dw.catalog.SearchModel.prototype.isRefinementByValueRange = function(attributeID) {};

/**
 * Identifies if this search has been refined on the given attribute and range values.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - The ID of the refinement attribute.
 * @param {String} minValue - The minimum value to be checked for inclusion in the refinement.
 * @param {String} maxValue - The maximum value to be checked for inclusion in the refinement.
 * @return {Boolean} True if the search is refined on the attribute and range values, false otherwise.
 */
dw.catalog.SearchModel.prototype.isRefinementByValueRange = function(attributeID, minValue, maxValue) {};

/**
 * Removes a refinement. The method can be called to remove previously added
 refinement values. The values string may encode multiple values delimited
 by the pipe symbol ('|').
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - The ID of the refinement attribute.
 * @param {String} values - the refinement value to remove or null to remove all values
 */
dw.catalog.SearchModel.prototype.removeRefinementValues = function(attributeID, values) {};

/**
 * Execute the search.
 * @memberOf dw.catalog.SearchModel
 */
dw.catalog.SearchModel.prototype.search = function() {};

/**
 * Sets a refinement value range for an attribute. The method can be called to set
 an additional range query parameter specified as name-range-value pair. The values
 string can contain only a range boundary.
 Existing refinement values for the attribute will be removed.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - The ID of the refinement attribute.
 * @param {String} minValue - the minimum refinement boundary value to set or null to remove the minimum boundary
 * @param {String} maxValue - the maximum refinement boundary value to set or null to remove the maximum boundary
 */
dw.catalog.SearchModel.prototype.setRefinementValueRange = function(attributeID, minValue, maxValue) {};

/**
 * Sets refinement values for an attribute. The method can be called to set
 an additional query parameter specified as name-value pair. The value
 string may encode multiple values delimited by the pipe symbol ('|').
 Existing refinement values for the attribute will be removed.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - The ID of the refinement attribute.
 * @param {String} values - the refinement values to set (delimited by '|') or null to             remove all values
 */
dw.catalog.SearchModel.prototype.setRefinementValues = function(attributeID, values) {};

/**
 * Sets the search phrase used in this search. The search query parser uses
 the following operators:

 <ul>
 <li>PHRASE operator (""), e.g. "cream cheese", "John Lennon"</li>
 <li>NOT operator (-), e.g. -cargo (will not return results containing
 "cargo")</li>
 <li>WILDCARD operator (*), e.g. sho* (will return results containing
 "shoulder", "shoes" and "shoot")</li>
 </ul>
 * @memberOf dw.catalog.SearchModel
 * @param {String} phrase - the search phrase used in this search.
 */
dw.catalog.SearchModel.prototype.setSearchPhrase = function(phrase) {};

/**
 * Sets or removes a sorting condition for the specified attribute. Specify
 either SORT_DIRECTION_ASCENDING or SORT_DIRECTION_DESCENDING to set a
 sorting condition. Specify SORT_DIRECTION_NONE to remove a sorting
 condition from the attribute.
 * @memberOf dw.catalog.SearchModel
 * @param {String} attributeID - the attribute ID
 * @param {Number} direction - SORT_DIRECTION_ASCENDING, SORT_DIRECTION_DESCENDING or             SORT_DIRECTION_NONE
 */
dw.catalog.SearchModel.prototype.setSortingCondition = function(attributeID, direction) {};

/**
 * Constructs an URL that you can use to re-execute the exact same query.
 The provided parameter must be an action, e.g. 'Search-Show'.
 * @memberOf dw.catalog.SearchModel
 * @param {String} action - the pipeline action.
 * @return {dw.web.URL} an URL that can be used to re-execute the exact same query.
 */
dw.catalog.SearchModel.prototype.url = function(action) {};

/**
 * Constructs an URL that you can use to re-execute the exact same query.
 The search specific parameter are appended to the provided URL. The URL
 is typically generated with one of the URLUtils methods.
 * @memberOf dw.catalog.SearchModel
 * @param {dw.web.URL} url - the url to use.
 * @return {dw.web.URL} a new url URL that can be used to re-execute the exact same          query.
 */
dw.catalog.SearchModel.prototype.url = function(url) {};

/**
 * Constructs an URL that you can use to re-execute the query with a default
 sorting. The provided parameter must be an action, e.g. 'Search-Show'.
 * @memberOf dw.catalog.SearchModel
 * @param {String} url - url or pipeline name
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlDefaultSort = function(url) {};

/**
 * Constructs an URL that you can use to re-execute the query with a default
 sorting. The search specific parameters are appended to the provided URL.
 The URL is typically generated with one of the URLUtils methods.
 * @memberOf dw.catalog.SearchModel
 * @param {dw.web.URL} url - url or pipeline name
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlDefaultSort = function(url) {};

/**
 * Constructs an URL that you can use to re-execute the query with an
 additional refinement.
 * @memberOf dw.catalog.SearchModel
 * @param {String} action - the pipeline action.
 * @param {String} attributeID - the ID of the refinement attribute.
 * @param {String} value - the value for the refinement attribute.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlRefineAttribute = function(action, attributeID, value) {};

/**
 * Constructs an URL that you can use to re-execute the query with an
 additional refinement. The search specific parameters are appended to the
 provided URL. The URL is typically generated with one of the URLUtils
 methods.
 * @memberOf dw.catalog.SearchModel
 * @param {dw.web.URL} url - url
 * @param {String} attributeID - the ID of the refinement attribute
 * @param {String} value - value for the refinement attribute
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlRefineAttribute = function(url, attributeID, value) {};

/**
 * Constructs an URL that you can use to re-execute the query with an
 additional refinement value for a given refinement attribute. The
 provided value will be added to the set of allowed values for the
 refinement attribute. This basically broadens the search result.
 * @memberOf dw.catalog.SearchModel
 * @param {String} action - the pipeline action.
 * @param {String} attributeID - the ID of the refinement attribute.
 * @param {String} value - the additional value for the refinement attribute.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlRefineAttributeValue = function(action, attributeID, value) {};

/**
 * Constructs an URL that you can use to re-execute the query with an
 additional refinement value for a given refinement attribute. The
 provided value will be added to the set of allowed values for the
 refinement attribute. This basically broadens the search result.

 The search specific parameters are appended to the provided URL. The URL
 is typically generated with one of the URLUtils methods.
 * @memberOf dw.catalog.SearchModel
 * @param {dw.web.URL} url - url
 * @param {String} attributeID - ID of the refinement attribute
 * @param {String} value - the additional value for the refinement attribute
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlRefineAttributeValue = function(url, attributeID, value) {};

/**
 * Constructs an URL that you can use to re-execute the query with an additional refinement value range for a given refinement attribute. The
 provided value range will be replace to the existing value range for the refinement attribute.

 The search specific parameters are appended to the provided URL. The URL is typically generated with one of the URLUtils methods.
 * @memberOf dw.catalog.SearchModel
 * @param {String} action - the pipeline action.
 * @param {String} attributeID - ID of the refinement attribute
 * @param {String} minValue - the min value for the refinement attribute
 * @param {String} maxValue - the max value for the refinement attribute
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlRefineAttributeValueRange = function(action, attributeID, minValue, maxValue) {};

/**
 * Constructs an URL that you can use to re-execute the query without the
 specified refinement. The value for the action parameter must be a
 pipeline action, e.g. 'Search-Show'.
 * @memberOf dw.catalog.SearchModel
 * @param {String} action - the pipeline action.
 * @param {String} attributeID - ID of the refinement attribute to be removed
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlRelaxAttribute = function(action, attributeID) {};

/**
 * Constructs an URL that you can use to re-execute the query without the
 specified refinement. The search specific parameters are appended to the
 provided URL. The URL is typically generated with one of the URLUtils
 methods.
 * @memberOf dw.catalog.SearchModel
 * @param {dw.web.URL} url - the url to use.
 * @param {String} attributeID - the ID of the refinement attribute to be removed.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlRelaxAttribute = function(url, attributeID) {};

/**
 * Constructs an URL that you can use to re-execute the query without the
 specified refinement. The value for the action parameter must be a
 pipeline action, e.g. 'Search-Show'.
 * @memberOf dw.catalog.SearchModel
 * @param {String} action - the pipeline action.
 * @param {String} attributeID - ID of the refinement attribute to be removed
 * @param {String} value - the value that should be removed from the list of refinement             values.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlRelaxAttributeValue = function(action, attributeID, value) {};

/**
 * Constructs an URL that you can use to re-execute the query without the
 specified refinement value. The search specific parameters are appended
 to the provided URL. The URL is typically generated with one of the
 URLUtils methods.
 * @memberOf dw.catalog.SearchModel
 * @param {dw.web.URL} url - the url to use.
 * @param {String} attributeID - the ID of the refinement attribute to relax the value for.
 * @param {String} value - the value that should be removed from the list of refinement             values.
 * @return {dw.web.URL} the new URL.
 */
dw.catalog.SearchModel.prototype.urlRelaxAttributeValue = function(url, attributeID, value) {};

/**
 * Constructs an URL that you can use to re-execute the query with a
 specific sorting criteria. This criteria will overwrite all previous sort
 critiria. The provided parameter must be an action, e.g. 'Search-Show'.
 * @memberOf dw.catalog.SearchModel
 * @param {String} action - Pipeline action
 * @param {String} sortBy - ID of the sort attribute
 * @param {Number} sortDir - Sort direction. 1 - ASCENDING (default), 2 - DESCENDING
 * @return {dw.web.URL} The new URL.
 */
dw.catalog.SearchModel.prototype.urlSort = function(action, sortBy, sortDir) {};

/**
 * Constructs an URL that you can use to re-execute the query with a
 specific sorting criteria. This criteria will overwrite all previous sort
 critiria. The search specific parameters are appended to the provided
 URL. The URL is typically generated with one of the URLUtils methods.
 * @memberOf dw.catalog.SearchModel
 * @param {dw.web.URL} url - URL
 * @param {String} sortBy - ID of the sort attribute
 * @param {Number} sortDir - Sort direction. 1 - ASCENDING (default), 2 - DESCENDING
 * @return {dw.web.URL} The new URL.
 */
dw.catalog.SearchModel.prototype.urlSort = function(url, sortBy, sortDir) {};

/**
 * Returns the attribute ID. If the refinement definition is not an
 attribute refinement, the method returns an empty string.
 * @memberOf dw.catalog.SearchRefinementDefinition
 * @return {String} the attribute ID.
 */
dw.catalog.SearchRefinementDefinition.prototype.getAttributeID = function() {};

/**
 * Returns the cut-off threshold.
 * @memberOf dw.catalog.SearchRefinementDefinition
 * @return {Number} the cut-off threshold.
 */
dw.catalog.SearchRefinementDefinition.prototype.getCutoffThreshold = function() {};

/**
 * Returns the display name.
 * @memberOf dw.catalog.SearchRefinementDefinition
 * @return {String} the display name.
 */
dw.catalog.SearchRefinementDefinition.prototype.getDisplayName = function() {};

/**
 * Returns a code for the data type used for this search refinement definition. See constants
 defined in ObjectAttributeDefinition.
 * @memberOf dw.catalog.SearchRefinementDefinition
 * @return {Number} a code for the data type used for this search refinement definition. See constants  defined in ObjectAttributeDefinition.
 */
dw.catalog.SearchRefinementDefinition.prototype.getValueTypeCode = function() {};

/**
 * Identifies if this is an attribute refinement.
 * @memberOf dw.catalog.SearchRefinementDefinition
 * @return {Boolean} true if this is an attribute refinement, false otherwise.
 */
dw.catalog.SearchRefinementDefinition.prototype.isAttributeRefinement = function() {};

/**
 *
 * @type Number
 * @memberOf dw.catalog.SearchRefinements
 * @static
 * @const
 */
dw.catalog.SearchRefinements.ASCENDING = 0;

/**
 *
 * @type Number
 * @memberOf dw.catalog.SearchRefinements
 * @static
 * @const
 */
dw.catalog.SearchRefinements.DESCENDING = 0;

/**
 *
 * @type Number
 * @memberOf dw.catalog.SearchRefinements
 * @static
 * @const
 */
dw.catalog.SearchRefinements.SORT_VALUE_COUNT = 0;

/**
 *
 * @type Number
 * @memberOf dw.catalog.SearchRefinements
 * @static
 * @const
 */
dw.catalog.SearchRefinements.SORT_VALUE_NAME = 0;

/**
 * Returns a sorted list of refinement definitions that are appropriate for
 the deepest common category (or deepest common folder) of the search
 result. The method concatenates the sorted refinement definitions per
 category starting at the root category until reaching the deepest common
 category.

 The method does not filter out refinement definitions that do
 not provide values for the current search result and can therefore also
 be used on empty search results.
 * @memberOf dw.catalog.SearchRefinements
 * @return {dw.util.Collection} A sorted list of refinement definitions appropriate for the          search result (based on its deepest common category)
 */
dw.catalog.SearchRefinements.prototype.getAllRefinementDefinitions = function() {};

/**
 * Returns a sorted collection of refinement values for the given refinement
 attribute. The returned collection includes all refinement values for
 which the hit count is greater than 0 within the search result when the
 passed attribute is excluded from filtering the search hits but all other
 refinement filters are still applied. This method is useful for rendering
 broadening options for attributes that the search is currently refined
 by. This method does NOT return refinement values independent of the
 search result.
 <p/>
 For product search refinements, this method may return slightly different
 results based on the "value set" property of the refinement definition.
 See
 <a href="class_dw_catalog_ProductSearchRefinements.html#dw_catalog_ProductSearchRefinements_getAllRefinementValues_ProductSearchRefinementDefinition_DetailAnchor">ProductSearchRefinements.getAllRefinementValues(ProductSearchRefinementDefinition)</a>
 for details.
 * @memberOf dw.catalog.SearchRefinements
 * @param {String} attributeName - The name of the attribute to return refinement values             for.
 * @return {dw.util.Collection} The collection of SearchRefinementValue instances, sorted          according to the settings of the refinement definition, or null          if there is no refinement definition for the passed attribute          name.
 */
dw.catalog.SearchRefinements.prototype.getAllRefinementValues = function(attributeName) {};

/**
 * Returns a sorted collection of refinement values for the given refinement
 attribute. In general, the returned collection includes all refinement
 values for which hit count is greater than 0 within the search result
 assuming that:

 <ul>
 <li>The passed refinement attribute is NOT used to filter the search
 hits.</li>
 <li>All other refinements are still applied.</li>
 </ul>

 This is useful for rendering broadening options for the refinement
 definitions that the search is already refined by. It is important to
 note that this method does NOT return refinement values independent of
 the search result.
 <p/>
 For product search refinements, this method may return slightly different
 results based on the "value set" of the refinement definition. See
 <a href="class_dw_catalog_ProductSearchRefinements.html#dw_catalog_ProductSearchRefinements_getAllRefinementValues_ProductSearchRefinementDefinition_DetailAnchor">ProductSearchRefinements.getAllRefinementValues(ProductSearchRefinementDefinition)</a>
 for details.
 * @memberOf dw.catalog.SearchRefinements
 * @param {String} attributeName - The name of the attribute to return refinement values             for.
 * @param {Number} sortMode - The sort mode to use to control how the collection is             sorted.
 * @param {Number} sortDirection - The sort direction to use.
 * @return {dw.util.Collection} The collection of SearchRefinementValue instances, sorted          according to the passed parameters.
 */
dw.catalog.SearchRefinements.prototype.getAllRefinementValues = function(attributeName, sortMode, sortDirection) {};

/**
 * Returns a sorted list of refinement definitions that are appropriate for
 the deepest common category (or deepest common folder) of the search
 result. The method concatenates the sorted refinement definitions per category
 starting at the root category until reaching the deepest common category.

 The method also filters out refinement definitions that do not provide
 any values for the current search result.
 * @memberOf dw.catalog.SearchRefinements
 * @return {dw.util.Collection} A sorted list of refinement definitions appropriate for the          search result (based on its deepest common category)
 */
dw.catalog.SearchRefinements.prototype.getRefinementDefinitions = function() {};

/**
 * Returns a collection of refinement values for the given refinement
 attribute, sorting mode and sorting direction.
 * @memberOf dw.catalog.SearchRefinements
 * @param {String} attributeName - The attribute name to use when collection refinement values.
 * @param {Number} sortMode - The sort mode to use to control how the collection is sorted.
 * @param {Number} sortDirection - The sort direction to use.
 * @return {dw.util.Collection} The collection of refinement values.
 */
dw.catalog.SearchRefinements.prototype.getRefinementValues = function(attributeName, sortMode, sortDirection) {};

/**
 * Returns the optional refinement value description in the current locale.
 * @memberOf dw.catalog.SearchRefinementValue
 * @return {String} the optional refinement value description in the current locale,          or null if none is defined.
 */
dw.catalog.SearchRefinementValue.prototype.getDescription = function() {};

/**
 * Returns the refinement display value. For attribute refinements, this is
 the appropriate display value based on optional value display names
 within the object attribute definition. If no display name is defined,
 the value itself is returned. For category refinements, this is the
 display name of the category in the current locale. For price
 refinements, this is a string representation of the range appropriate for
 display.
 * @memberOf dw.catalog.SearchRefinementValue
 * @return {String} the refinement display value in the current locale.
 */
dw.catalog.SearchRefinementValue.prototype.getDisplayValue = function() {};

/**
 * Returns the hit count value.
 * @memberOf dw.catalog.SearchRefinementValue
 * @return {Number} the hit count value.
 */
dw.catalog.SearchRefinementValue.prototype.getHitCount = function() {};

/**
 * Returns the refinement value's ID. For attribute refinements, this will
 be the ID of the corresponding
 <a href="class_dw_object_ObjectAttributeDefinition.html">ObjectAttributeDefinition</a>. This ID is included in the
 querystring parameter names returned by the URL-generating methods of
 <a href="class_dw_catalog_SearchModel.html">SearchModel</a>. For price and category refinements, this
 value will be empty.
 * @memberOf dw.catalog.SearchRefinementValue
 * @return {String} the refinement value's ID.
 */
dw.catalog.SearchRefinementValue.prototype.getID = function() {};

/**
 * Returns the optional presentation ID associated with this refinement
 value. The presentation ID can be used, for example, to associate an ID
 with an HTML widget.
 * @memberOf dw.catalog.SearchRefinementValue
 * @return {String} the presentation ID, or null if none is defined.
 */
dw.catalog.SearchRefinementValue.prototype.getPresentationID = function() {};

/**
 * Returns the refinement value. For attribute refinements, this is the
 attribute value if the refinement values are unbucketed, or the bucket
 display name if the values are bucketed. This value is included in the
 querystring parameter values returned by the URL-generating methods of
 <a href="class_dw_catalog_SearchModel.html">SearchModel</a>. For price refinements, the value will be
 a string representation of the price range lower bound. For category
 refinements, the value will be a category ID.
 * @memberOf dw.catalog.SearchRefinementValue
 * @return {String} the refinement value.
 */
dw.catalog.SearchRefinementValue.prototype.getValue = function() {};

/**
 * Represents an option for how to sort products in storefront search results.
 * @class
 * @extends dw.object.PersistentObject
 */
dw.catalog.SortingOption = function() {};
dw.catalog.SortingOption.prototype = new dw.object.PersistentObject();

/**
 * Returns the description of the sorting option for the current locale.
 * @memberOf dw.catalog.SortingOption
 * @return {String} The value of the property for the current locale, or null if it          wasn't found.
 */
dw.catalog.SortingOption.prototype.getDescription = function() {};

/**
 * Returns the display name of the of the sorting option for the current locale.
 * @memberOf dw.catalog.SortingOption
 * @return {String} The value of the property for the current locale, or null if it          wasn't found.
 */
dw.catalog.SortingOption.prototype.getDisplayName = function() {};

/**
 * Returns the ID of the sorting option.
 * @memberOf dw.catalog.SortingOption
 * @return {String} sorting option ID
 */
dw.catalog.SortingOption.prototype.getID = function() {};

/**
 * Returns the sorting rule for this sorting option,
 or <code>null</code> if there is no associated rule.
 * @memberOf dw.catalog.SortingOption
 * @return {dw.catalog.SortingRule} a ProductSortingRule instance representing the rule  for this option or null.
 */
dw.catalog.SortingOption.prototype.getSortingRule = function() {};

/**
 * Represents a product sorting rule for use with the <a href="class_dw_catalog_ProductSearchModel.html">ProductSearchModel</a>.
 * @class
 * @extends dw.object.PersistentObject
 */
dw.catalog.SortingRule = function() {};
dw.catalog.SortingRule.prototype = new dw.object.PersistentObject();

/**
 * Returns the ID of the sorting rule.
 * @memberOf dw.catalog.SortingRule
 * @return {String} sorting rule ID
 */
dw.catalog.SortingRule.prototype.getID = function() {};

/**
 * Represents a store in the Demandware framework.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.catalog.Store = function() {};
dw.catalog.Store.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the address1 of the store.
 * @memberOf dw.catalog.Store
 * @return {String} address1 of the store
 */
dw.catalog.Store.prototype.getAddress1 = function() {};

/**
 * Returns the address2 of the store.
 * @memberOf dw.catalog.Store
 * @return {String} address2 of the store
 */
dw.catalog.Store.prototype.getAddress2 = function() {};

/**
 * Returns the city of the store.
 * @memberOf dw.catalog.Store
 * @return {String} city of the store
 */
dw.catalog.Store.prototype.getCity = function() {};

/**
 * Returns the countryCode of the store.
 * @memberOf dw.catalog.Store
 * @return {dw.value.EnumValue} countryCode of the store
 */
dw.catalog.Store.prototype.getCountryCode = function() {};

/**
 * Returns the email of the store.
 * @memberOf dw.catalog.Store
 * @return {String} email of the store
 */
dw.catalog.Store.prototype.getEmail = function() {};

/**
 * Returns the fax of the store.
 * @memberOf dw.catalog.Store
 * @return {String} fax of the store
 */
dw.catalog.Store.prototype.getFax = function() {};

/**
 * Returns the ID of the store.
 * @memberOf dw.catalog.Store
 * @return {String} ID of the store
 */
dw.catalog.Store.prototype.getID = function() {};

/**
 * Returns the store image.
 * @memberOf dw.catalog.Store
 * @return {dw.content.MediaFile} the store image.
 */
dw.catalog.Store.prototype.getImage = function() {};

/**
 * Returns the inventory list the store is associated with. If the
 store is not associated with a inventory list, or the inventory list does not
 exist, the method returns null.
 * @memberOf dw.catalog.Store
 * @return {dw.catalog.ProductInventoryList} ProductInventoryList or null
 */
dw.catalog.Store.prototype.getInventoryList = function() {};

/**
 * Returns the latitude of the store.
 * @memberOf dw.catalog.Store
 * @return {Number} latitude of the store
 */
dw.catalog.Store.prototype.getLatitude = function() {};

/**
 * Returns the longitude of the store.
 * @memberOf dw.catalog.Store
 * @return {Number} longitude of the store
 */
dw.catalog.Store.prototype.getLongitude = function() {};

/**
 * Returns the name of the store.
 * @memberOf dw.catalog.Store
 * @return {String} name of the store
 */
dw.catalog.Store.prototype.getName = function() {};

/**
 * Returns the phone of the store.
 * @memberOf dw.catalog.Store
 * @return {String} phone of the store
 */
dw.catalog.Store.prototype.getPhone = function() {};

/**
 * Returns the postalCode of the store.
 * @memberOf dw.catalog.Store
 * @return {String} postalCode of the store
 */
dw.catalog.Store.prototype.getPostalCode = function() {};

/**
 * Returns the stateCode of the store.
 * @memberOf dw.catalog.Store
 * @return {String} stateCode of the store
 */
dw.catalog.Store.prototype.getStateCode = function() {};

/**
 * Returns the storeEvents of the store.
 * @memberOf dw.catalog.Store
 * @return {dw.content.MarkupText} storeEvents of the store
 */
dw.catalog.Store.prototype.getStoreEvents = function() {};

/**
 * Returns the storeHours of the store.
 * @memberOf dw.catalog.Store
 * @return {dw.content.MarkupText} storeHours of the store
 */
dw.catalog.Store.prototype.getStoreHours = function() {};

/**
 * Provides helper methods for getting stores based on id and querying for
 stores based on geolocation.
 * @class
 * @extends Object
 */
dw.catalog.StoreMgr = function() {};
dw.catalog.StoreMgr.prototype = new Object();

/**
 * Returns the store object with the specified id or null if store with this
 id does not exist in the site.
 * @memberOf dw.catalog.StoreMgr
 * @param {String} storeID - the store identifier.
 * @return {dw.catalog.Store} Store for specified id or null.
 * @static
 */
dw.catalog.StoreMgr.getStore = function(storeID) {};

/**
 * Convenience method.  Same as searchStoresByCoordinates(latitude, longitude, distanceUnit, maxDistance, null).
 * @memberOf dw.catalog.StoreMgr
 * @param {Number} latitude - Latitude coordinate which is the center of the search             area. Must not be null or an exception is thrown.
 * @param {Number} longitude - Longitude coordinate which is the center of the search             area. Must not be null or an exception is thrown.
 * @param {String} distanceUnit - The distance unit to be used for the calculation.             Supported values are 'mi' and 'km' (for miles and kilometers             respectively). If an invalid value is passed then 'km' will be             used.
 * @param {Number} maxDistance - Area (radius) in DistanceUnit where Stores will be             searched for. If null is passed, a system default is used.
 * @return {dw.util.LinkedHashMap} The stores and their distance from the specified location, sorted          in ascending order by distance.
 * @static
 */
dw.catalog.StoreMgr.searchStoresByCoordinates = function(latitude, longitude, distanceUnit, maxDistance) {};

/**
 * Search for stores based on geo-coordinates. The method returns a list of
 stores for the current site that are within a specified distance of a
 location on the earth and which optionally satisfy additional filter
 criteria. If no additional criteria are specified, then this method
 behaves similar to GetNearestStores pipelet. The criteria are specified
 as a querystring, using the same syntax as
 <a href="class_dw_object_SystemObjectMgr.html#dw_object_SystemObjectMgr_querySystemObjects_String_String_String_Object_DetailAnchor">)</a>
 <p/>
 The stores and their distance from the specified location are returned as
 a LinkedHashMap of Store objects to distances, sorting in ascending order
 by distance. The distance is interpreted either in miles or kilometers
 depending on the "distanceUnit" parameter.
 <p/>
 The latitude and longitude of each store is determined by first looking
 at <a href="class_dw_catalog_Store.html#dw_catalog_Store_getLatitude_DetailAnchor">Store.getLatitude()</a> and
 <a href="class_dw_catalog_Store.html#dw_catalog_Store_getLongitude_DetailAnchor">Store.getLongitude()</a>. If these are not set, then the
 system deduces the location of the store by looking for a configured
 geolocation matching the store's postal and country codes.
 * @memberOf dw.catalog.StoreMgr
 * @param {Number} latitude - Latitude coordinate which is the center of the search             area. Must not be null or an exception is thrown.
 * @param {Number} longitude - Longitude coordinate which is the center of the search             area. Must not be null or an exception is thrown.
 * @param {String} distanceUnit - The distance unit to be used for the calculation.             Supported values are 'mi' and 'km' (for miles and kilometers             respectively). If an invalid value is passed then 'km' will be             used.
 * @param {Number} maxDistance - Area (radius) in DistanceUnit where Stores will be             searched for. If null is passed, a system default is used.
 * @param {String} queryString - optional filter criteria specified as querystring.
 * @param {Object[]} args - the arguments to fill in the values in the querystring.
 * @return {dw.util.LinkedHashMap} The stores and their distance from the specified location, sorted          in ascending order by distance.
 * @static
 * @varArgs
 */
dw.catalog.StoreMgr.searchStoresByCoordinates = function(latitude, longitude, distanceUnit, maxDistance, queryString, args) {};

/**
 * Convenience method.  Same as searchStoresByPostalCode(countryCode, postalCode, distanceUnit, maxDistance, null).
 * @memberOf dw.catalog.StoreMgr
 * @param {String} countryCode - The country code for the search area, must not be null.
 * @param {String} postalCode - The postal code for the center of the search area, must             not be null.
 * @param {String} distanceUnit - The distance unit to be used for the calculation.             Supported values are 'mi' and 'km' (for miles and kilometers             respectively). If an invalid value is passed then 'km' will be             used.
 * @param {Number} maxDistance - Area (radius) in DistanceUnit where Stores will be             searched for. If null is passed, a system default is used.
 * @return {dw.util.LinkedHashMap} The stores and their distance from the specified location, sorted          in ascending order by distance.
 * @static
 */
dw.catalog.StoreMgr.searchStoresByPostalCode = function(countryCode, postalCode, distanceUnit, maxDistance) {};

/**
 * Search for stores by country/postal code and optionally by additional
 filter criteria. This method is analagous to
 <a href="class_dw_catalog_StoreMgr.html#dw_catalog_StoreMgr_searchStoresByCoordinates_Number_Number_String_Number_String_Object_DetailAnchor">)</a>
 but identifies a location on the earth indirectly using country and
 postal code. The method will look first in the saved geolocations of the
 system to find a geolocation matching the passed country and postal code.
 If none is found, this method will return an empty map. If one is found,
 it will use the latitude/longitude of the found geolocation as the center
 of the search.
 * @memberOf dw.catalog.StoreMgr
 * @param {String} countryCode - The country code for the search area, must not be null.
 * @param {String} postalCode - The postal code for the center of the search area, must             not be null.
 * @param {String} distanceUnit - The distance unit to be used for the calculation.             Supported values are 'mi' and 'km' (for miles and kilometers             respectively). If an invalid value is passed then 'km' will be             used.
 * @param {Number} maxDistance - Area (radius) in DistanceUnit where Stores will be             searched for. If null is passed, a system default is used.
 * @param {String} queryString - An optional search querystring which provides             additional criteria to filter stores by.
 * @param {Object[]} args - The arguments providing the dynamic values to the             querystring.
 * @return {dw.util.LinkedHashMap} The stores and their distance from the specified location, sorted          in ascending order by distance.
 * @static
 * @varArgs
 */
dw.catalog.StoreMgr.searchStoresByPostalCode = function(countryCode, postalCode, distanceUnit, maxDistance, queryString, args) {};

/**
 * Represents a variant of a product variation. Implements special fallback
 logic to inherit the attribute values of the variation master in case
 the variant does not define an own value.
 * @class
 * @extends dw.catalog.Product
 */
dw.catalog.Variant = function() {};
dw.catalog.Variant.prototype = new dw.catalog.Product();

/**
 * Returns all product links of the product variant. <br/>

 If the variant does not define any product links, but the master product
 does, the product links of the master are returned.
 * @memberOf dw.catalog.Variant
 * @return {dw.util.Collection} All product links of the variant or master
 */
dw.catalog.Variant.prototype.getAllProductLinks = function() {};

/**
 * Returns all product links of the specified type of the product variant. <br/>

 If the variant does not define any product links, but the master product
 does, the product links of the master are returned.
 * @memberOf dw.catalog.Variant
 * @param {Number} type - Type of the product link
 * @return {dw.util.Collection} Product links of specified type of the variant or master
 */
dw.catalog.Variant.prototype.getAllProductLinks = function(type) {};

/**
 * Returns the brand of the product variant. <br/>

 If the variant does not define an own value for 'brand', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The brand of the variant or master
 */
dw.catalog.Variant.prototype.getBrand = function() {};

/**
 * Returns the classification category of the product variant. <br/>

 <b>Please note</b> that the classification category is always inherited
 from the master and cannot be overridden by the variant.
 * @memberOf dw.catalog.Variant
 * @return {dw.catalog.Category} The classification category as defined for the master product of the variant
 */
dw.catalog.Variant.prototype.getClassificationCategory = function() {};

/**
 * Returns the custom attributes of the variant. <br/>

 Custom attributes are inherited from the master product and can
 be overridden by the variant.
 * @memberOf dw.catalog.Variant
 * @return {dw.object.CustomAttributes} the custom attributes of the variant.
 * @synchronized
 */
dw.catalog.Variant.prototype.getCustom = function() {};

/**
 * Returns the EAN of the product variant. <br/>

 If the variant does not define an own value for 'EAN', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The EAN of the variant or master
 */
dw.catalog.Variant.prototype.getEAN = function() {};

/**
 * Returns the image of the product variant. <br/>

 If the variant does not define an own value for 'image', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {dw.content.MediaFile} The image of the variant or master
 */
dw.catalog.Variant.prototype.getImage = function() {};

/**
 * Returns the long description of the product variant. <br/>

 If the variant does not define an own value for 'longDescription', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {dw.content.MarkupText} The long description name of the variant or master
 */
dw.catalog.Variant.prototype.getLongDescription = function() {};

/**
 * Returns the manufacturer name of the product variant. <br/>

 If the variant does not define an own value for 'manufacturerName', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The manufacturer name of the variant or master
 */
dw.catalog.Variant.prototype.getManufacturerName = function() {};

/**
 * Returns the manufacturer sku of the product variant. <br/>

 If the variant does not define an own value for 'manufacturerSKU', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The manufacturer sku of the variant or master
 */
dw.catalog.Variant.prototype.getManufacturerSKU = function() {};

/**
 * Returns the ProductMaster for this mastered product.
 * @memberOf dw.catalog.Variant
 * @return {dw.catalog.Product} the ProductMaster of this mastered product
 */
dw.catalog.Variant.prototype.getMasterProduct = function() {};

/**
 * Returns the minimum order quantity of the product variant. <br/>

 If the variant does not define an own value for 'minOrderQuantity', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {dw.value.Quantity} The minimum order quantity of the variant or master
 */
dw.catalog.Variant.prototype.getMinOrderQuantity = function() {};

/**
 * Returns the name of the product variant. <br/>

 If the variant does not define an own value for 'name', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The name of the variant or master
 */
dw.catalog.Variant.prototype.getName = function() {};

/**
 * Returns the onlineFrom date of the product variant. <br/>

 If the variant does not define an own value for 'onlineFrom', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {Date} The onlineFrom date of the variant or master
 */
dw.catalog.Variant.prototype.getOnlineFrom = function() {};

/**
 * Returns the onlineTo date of the product variant. <br/>

 If the variant does not define an own value for 'onlineTo', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {Date} The onlineTo date of the variant or master
 */
dw.catalog.Variant.prototype.getOnlineTo = function() {};

/**
 * Returns the pageDescription of the product variant. <br/>

 If the variant does not define an own value for 'pageDescription', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The pageDescription of the variant or master
 */
dw.catalog.Variant.prototype.getPageDescription = function() {};

/**
 * Returns the pageKeywords of the product variant. <br/>

 If the variant does not define an own value for 'pageKeywords', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The pageKeywords of the variant or master
 */
dw.catalog.Variant.prototype.getPageKeywords = function() {};

/**
 * Returns the pageTitle of the product variant. <br/>

 If the variant does not define an own value for 'pageTitle', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The pageTitle of the variant or master
 */
dw.catalog.Variant.prototype.getPageTitle = function() {};

/**
 * Returns the pageURL of the product variant. <br/>

 If the variant does not define an own value for 'pageURL', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The pageURL of the variant or master
 */
dw.catalog.Variant.prototype.getPageURL = function() {};

/**
 * Returns all product links of the product variant for which the target
 product is assigned to the current site catalog. <br/>

 If the variant does not define any product links, but the master product
 does, the product links of the master are returned.
 * @memberOf dw.catalog.Variant
 * @return {dw.util.Collection} Product links of the variant or master
 */
dw.catalog.Variant.prototype.getProductLinks = function() {};

/**
 * Returns all product links of the specified type of the product variant
 for which the target product is assigned to the current site catalog. <br/>

 If the variant does not define any product links of the specified type,
 but the master product does, the product links of the master are returned.
 * @memberOf dw.catalog.Variant
 * @param {Number} type - Type of the product link
 * @return {dw.util.Collection} Product links of specified type of the variant or master
 */
dw.catalog.Variant.prototype.getProductLinks = function(type) {};

/**
 * Retrieve the sorted collection of recommendations of the specified type
 for this product variant.  The types (cross-sell, up-sell, etc) are
 enumerated in the <code>dw.catalog.Recommendation</code> class.  Only
 recommendations which are stored in the current site catalog are returned.
 Furthermore, a recommendation is only returned if the target of the
 recommendation is assigned to the current site catalog.
 <p/>
 If the variant does not define any recommendations, but the master
 product does, the recommendations of the master are returned.
 * @memberOf dw.catalog.Variant
 * @param {Number} type - the recommendation type
 * @return {dw.util.Collection} the sorted collection, never null but possibly empty.
 */
dw.catalog.Variant.prototype.getRecommendations = function(type) {};

/**
 * Returns the short description of the product variant. <br/>

 If the variant does not define an own value for 'shortDescription', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {dw.content.MarkupText} The short description name of the variant or master
 */
dw.catalog.Variant.prototype.getShortDescription = function() {};

/**
 * Returns the step quantity of the product variant. <br/>

 If the variant does not define an own value for 'stepQuantity', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {dw.value.Quantity} The step quantity of the variant or master
 */
dw.catalog.Variant.prototype.getStepQuantity = function() {};

/**
 * Returns the tax class id of the product variant. <br/>

 If the variant does not define an own value for 'taxClassID', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The tax class id of the variant or master
 */
dw.catalog.Variant.prototype.getTaxClassID = function() {};

/**
 * Returns the rendering template name of the product variant. <br/>

 If the variant does not define an own value for 'template', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The rendering template name of the variant or master
 */
dw.catalog.Variant.prototype.getTemplate = function() {};

/**
 * Returns the thumbnail image of the product variant. <br/>

 If the variant does not define an own value for 'thumbnailImage', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {dw.content.MediaFile} The thumbnail image of the variant or master
 */
dw.catalog.Variant.prototype.getThumbnail = function() {};

/**
 * Returns the sales unit of the product variant as defined by the
 master product. <br/>

 If the variant does not define an own value for 'unit', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The sales unit of the variant or master
 */
dw.catalog.Variant.prototype.getUnit = function() {};

/**
 * Returns the UPC of the product variant. <br/>

 If the variant does not define an own value for 'UPC', the value of
 the master product is returned.
 * @memberOf dw.catalog.Variant
 * @return {String} The UPC of the variant or master
 */
dw.catalog.Variant.prototype.getUPC = function() {};

/**
 * Returns 'true' if the variant has any options, otherwise 'false'.
 Method also returns 'true' if the variant has not any options,
 but the related master product has options.
 * @memberOf dw.catalog.Variant
 * @return {Boolean} true if the variant has any options, false otherwise.
 */
dw.catalog.Variant.prototype.isOptionProduct = function() {};

/**
 * Reserved for beta users.

 Class representing a group of variants within a master product who share a
 common value for one or more variation attribute values. Variation groups are
 used to simplify merchandising of products.
 <p/>
 From a more technical perspective, variation groups are defined by two things:

 <ul>
 <li>A relation to a master product.</li>
 <li>A set of variation attributes which have fixed values.</li>
 </ul>
 A variant of the related master product is considered in the group if and
 only if it matches on the fixed variation attribute values.
 <p/>
 Similar to a Variant, a VariationGroup does a fallback to the master product
 for all attributes (name, description, etc) and relations (recommendations,
 etc).
 * @class
 * @extends dw.catalog.Product
 */
dw.catalog.VariationGroup = function() {};
dw.catalog.VariationGroup.prototype = new dw.catalog.Product();

/**
 * Returns all product links of the product variation group. <br/>

 If the variation group does not define any product links, but the master product
 does, the product links of the master are returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.util.Collection} All product links of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getAllProductLinks = function() {};

/**
 * Returns all product links of the specified type of the product variation group. <br/>

 If the variation group does not define any product links, but the master product
 does, the product links of the master are returned.
 * @memberOf dw.catalog.VariationGroup
 * @param {Number} type - Type of the product link
 * @return {dw.util.Collection} Product links of specified type of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getAllProductLinks = function(type) {};

/**
 * Returns the brand of the product variation group. <br/>

 If the variation group does not define an own value for 'brand', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The brand of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getBrand = function() {};

/**
 * Returns the classification category of the product variation group. <br/>

 <b>Please note</b> that the classification category is always inherited
 from the master and cannot be overridden by the variation group.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.catalog.Category} The classification category as defined for the master product of the variation group
 */
dw.catalog.VariationGroup.prototype.getClassificationCategory = function() {};

/**
 * Returns the custom attributes of the variation group. <br/>

 Custom attributes are inherited from the master product and can
 be overridden by the variation group.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.object.CustomAttributes} the custom attributes of the variation group.
 * @synchronized
 */
dw.catalog.VariationGroup.prototype.getCustom = function() {};

/**
 * Returns the EAN of the product variation group. <br/>

 If the variation group does not define an own value for 'EAN', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The EAN of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getEAN = function() {};

/**
 * Returns the image of the product variation group. <br/>

 If the variation group does not define an own value for 'image', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.content.MediaFile} The image of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getImage = function() {};

/**
 * Returns the long description of the product variation group. <br/>

 If the variation group does not define an own value for 'longDescription', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.content.MarkupText} The long description name of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getLongDescription = function() {};

/**
 * Returns the manufacturer name of the product variation group. <br/>

 If the variation group does not define an own value for 'manufacturerName', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The manufacturer name of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getManufacturerName = function() {};

/**
 * Returns the manufacturer sku of the product variation group. <br/>

 If the variation group does not define an own value for 'manufacturerSKU', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The manufacturer sku of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getManufacturerSKU = function() {};

/**
 * Returns the ProductMaster for this mastered product.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.catalog.Product} the ProductMaster of this mastered product
 */
dw.catalog.VariationGroup.prototype.getMasterProduct = function() {};

/**
 * Returns the minimum order quantity of the product variation group. <br/>

 If the variation group does not define an own value for 'minOrderQuantity', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.value.Quantity} The minimum order quantity of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getMinOrderQuantity = function() {};

/**
 * Returns the name of the product variation group. <br/>

 If the variation group does not define an own value for 'name', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The name of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getName = function() {};

/**
 * Returns the onlineFrom date of the product variation group. <br/>

 If the variation group does not define an own value for 'onlineFrom', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {Date} The onlineFrom date of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getOnlineFrom = function() {};

/**
 * Returns the onlineTo date of the product variation group. <br/>

 If the variation group does not define an own value for 'onlineTo', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {Date} The onlineTo date of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getOnlineTo = function() {};

/**
 * Returns the pageDescription of the product variation group. <br/>

 If the variation group does not define an own value for 'pageDescription', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The pageDescription of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getPageDescription = function() {};

/**
 * Returns the pageKeywords of the product variation group. <br/>

 If the variation group does not define an own value for 'pageKeywords', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The pageKeywords of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getPageKeywords = function() {};

/**
 * Returns the pageTitle of the product variation group. <br/>

 If the variation group does not define an own value for 'pageTitle', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The pageTitle of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getPageTitle = function() {};

/**
 * Returns the pageURL of the product variation group. <br/>

 If the variation group does not define an own value for 'pageURL', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The pageURL of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getPageURL = function() {};

/**
 * Returns all product links of the product variation group for which the target
 product is assigned to the current site catalog. <br/>

 If the variation group does not define any product links, but the master product
 does, the product links of the master are returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.util.Collection} Product links of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getProductLinks = function() {};

/**
 * Returns all product links of the specified type of the product variation group
 for which the target product is assigned to the current site catalog. <br/>

 If the variation group does not define any product links of the specified type,
 but the master product does, the product links of the master are returned.
 * @memberOf dw.catalog.VariationGroup
 * @param {Number} type - Type of the product link
 * @return {dw.util.Collection} Product links of specified type of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getProductLinks = function(type) {};

/**
 * Retrieve the sorted collection of recommendations of the specified type
 for this product variation group.  The types (cross-sell, up-sell, etc) are
 enumerated in the <code>dw.catalog.Recommendation</code> class.  Only
 recommendations which are stored in the current site catalog are returned.
 Furthermore, a recommendation is only returned if the target of the
 recommendation is assigned to the current site catalog.
 <p/>
 If the variation group does not define any recommendations, but the master
 product does, the recommendations of the master are returned.
 * @memberOf dw.catalog.VariationGroup
 * @param {Number} type - the recommendation type
 * @return {dw.util.Collection} the sorted collection, never null but possibly empty.
 */
dw.catalog.VariationGroup.prototype.getRecommendations = function(type) {};

/**
 * Returns the short description of the product variation group. <br/>

 If the variation group does not define an own value for 'shortDescription', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.content.MarkupText} The short description name of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getShortDescription = function() {};

/**
 * Returns the step quantity of the product variation group. <br/>

 If the variation group does not define an own value for 'stepQuantity', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.value.Quantity} The step quantity of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getStepQuantity = function() {};

/**
 * Returns the tax class id of the product variation group. <br/>

 If the variation group does not define an own value for 'taxClassID', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The tax class id of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getTaxClassID = function() {};

/**
 * Returns the rendering template name of the product variation group. <br/>

 If the variation group does not define an own value for 'template', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The rendering template name of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getTemplate = function() {};

/**
 * Returns the thumbnail image of the product variation group. <br/>

 If the variation group does not define an own value for 'thumbnailImage', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {dw.content.MediaFile} The thumbnail image of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getThumbnail = function() {};

/**
 * Returns the sales unit of the product variation group as defined by the
 master product. <br/>

 If the variation group does not define an own value for 'unit', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The sales unit of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getUnit = function() {};

/**
 * Returns the UPC of the product variation group. <br/>

 If the variation group does not define an own value for 'UPC', the value of
 the master product is returned.
 * @memberOf dw.catalog.VariationGroup
 * @return {String} The UPC of the variation group or master
 */
dw.catalog.VariationGroup.prototype.getUPC = function() {};

/**
 * Returns 'true' if the variation group has any options, otherwise 'false'.
 Method also returns 'true' if the variation group has not any options,
 but the related master product has options.
 * @memberOf dw.catalog.VariationGroup
 * @return {Boolean} true if the variation group has any options, false otherwise.
 */
dw.catalog.VariationGroup.prototype.isOptionProduct = function() {};

/**
 * Class representing a Content asset in the Demandware system.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.content.Content = function() {};
dw.content.Content.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the Folder associated with this Content. The folder is
 used to determine the classification of the content.
 * @memberOf dw.content.Content
 * @return {dw.content.Folder} the classification Folder.
 */
dw.content.Content.prototype.getClassificationFolder = function() {};

/**
 * Returns the description in the current locale or null.
 * @memberOf dw.content.Content
 * @return {String} the description in the current locale or null.
 */
dw.content.Content.prototype.getDescription = function() {};

/**
 * Returns all folders to which this content is assigned.
 * @memberOf dw.content.Content
 * @return {dw.util.Collection} Collection of Folder objects.
 */
dw.content.Content.prototype.getFolders = function() {};

/**
 * Returns the ID of the content asset.
 * @memberOf dw.content.Content
 * @return {String} the ID of the content asset.
 */
dw.content.Content.prototype.getID = function() {};

/**
 * Returns the name of the content asset.
 * @memberOf dw.content.Content
 * @return {String} the name of the content asset.
 */
dw.content.Content.prototype.getName = function() {};

/**
 * Returns the online status flag of the content.
 * @memberOf dw.content.Content
 * @return {Boolean} true if the content is online, false otherwise.
 */
dw.content.Content.prototype.getOnlineFlag = function() {};

/**
 * Returns the page description for the content in the current locale
 or null if there is no page description.
 * @memberOf dw.content.Content
 * @return {String} the page description for the content in the current locale  or null if there is no page description.
 */
dw.content.Content.prototype.getPageDescription = function() {};

/**
 * Returns the page keywords for the content in the current locale
 or null if there is no page title.
 * @memberOf dw.content.Content
 * @return {String} the page keywords for the content in the current locale  or null if there is no page title.
 */
dw.content.Content.prototype.getPageKeywords = function() {};

/**
 * Returns the page title for the content in the current locale
 or null if there is no page title.
 * @memberOf dw.content.Content
 * @return {String} the page title for the content in the current locale  or null if there is no page title.
 */
dw.content.Content.prototype.getPageTitle = function() {};

/**
 * Returns the page URL for the content in the current locale
 or null if there is no page URL.
 * @memberOf dw.content.Content
 * @return {String} the page URL for the content in the current locale  or null if there is no page URL.
 */
dw.content.Content.prototype.getPageURL = function() {};

/**
 * Returns the online status flag of the content.
 * @memberOf dw.content.Content
 * @return {Boolean} true if the content is searchable, false otherwise.
 */
dw.content.Content.prototype.getSearchableFlag = function() {};

/**
 * Returns the contents change frequency needed for the sitemap creation.
 * @memberOf dw.content.Content
 * @return {String} The contents sitemap change frequency.
 */
dw.content.Content.prototype.getSiteMapChangeFrequency = function() {};

/**
 * Returns the contents priority needed for the sitemap creation.
 If no priority is defined, the method returns 0.0.
 * @memberOf dw.content.Content
 * @return {Number} The contents sitemap priority.
 */
dw.content.Content.prototype.getSiteMapPriority = function() {};

/**
 * Returns the value of attribute 'template'.
 * @memberOf dw.content.Content
 * @return {String} the value of the attribute 'template'
 */
dw.content.Content.prototype.getTemplate = function() {};

/**
 * Returns the online status of the content.
 * @memberOf dw.content.Content
 * @return {Boolean} true if the content is online, false otherwise.
 */
dw.content.Content.prototype.isOnline = function() {};

/**
 * Returns the search status of the content.
 * @memberOf dw.content.Content
 * @return {Boolean} true if the content is searchable, false otherwise.
 */
dw.content.Content.prototype.isSearchable = function() {};

/**
 * Provides helper methods for getting content assets, library folders and the
 content library of the current site.
 * @class
 * @extends Object
 */
dw.content.ContentMgr = function() {};
dw.content.ContentMgr.prototype = new Object();

/**
 * Returns the content with the corresponding identifier within the current
 site's site library.
 * @memberOf dw.content.ContentMgr
 * @param {String} id - the ID of the content asset to find.
 * @return {dw.content.Content} the content if found, or null if not found.
 * @static
 */
dw.content.ContentMgr.getContent = function(id) {};

/**
 * Returns the folder identified by the specified id within the current
 site's site library.
 * @memberOf dw.content.ContentMgr
 * @param {String} id - the ID of the folder to find.
 * @return {dw.content.Folder} the folder, or null if not found.
 * @static
 */
dw.content.ContentMgr.getFolder = function(id) {};

/**
 * Returns the content library of the current site.
 * @memberOf dw.content.ContentMgr
 * @return {dw.content.Library} the content library of the current site, or null if there is not          content library assigned to the current site.
 * @static
 */
dw.content.ContentMgr.getSiteLibrary = function() {};

/**
 * Constructs a new ContentSearchModel.
 * @class
 * @extends dw.catalog.SearchModel
 */
dw.content.ContentSearchModel = function() {};
dw.content.ContentSearchModel.prototype = new dw.catalog.SearchModel();

/**
 * URL Parameter for the content ID
 * @type String
 * @memberOf dw.content.ContentSearchModel
 * @static
 * @const
 */
dw.content.ContentSearchModel.CONTENTID_PARAMETER = '';

/**
 * URL Parameter for the folder ID
 * @type String
 * @memberOf dw.content.ContentSearchModel
 * @static
 * @const
 */
dw.content.ContentSearchModel.FOLDERID_PARAMETER = '';

/**
 * Returns an Iterator containing all Content Assets that are the result of the
 search.
 * @memberOf dw.content.ContentSearchModel
 * @return {dw.util.Iterator} an Iterator containing all Content Assets that are the result of the          search.
 */
dw.content.ContentSearchModel.prototype.getContent = function() {};

/**
 * Returns the content ID against which the search results apply.
 * @memberOf dw.content.ContentSearchModel
 * @return {String} the content ID against which the search results apply.
 */
dw.content.ContentSearchModel.prototype.getContentID = function() {};

/**
 * Returns the deepest common folder of all content assets in the search result.
 * @memberOf dw.content.ContentSearchModel
 * @return {dw.content.Folder} the deepest common folder of all content assets in the search result of this search model.
 */
dw.content.ContentSearchModel.prototype.getDeepestCommonFolder = function() {};

/**
 * Returns the folder against which the search results apply.
 * @memberOf dw.content.ContentSearchModel
 * @return {dw.content.Folder} the folder against which the search results apply.
 */
dw.content.ContentSearchModel.prototype.getFolder = function() {};

/**
 * Returns the folder ID against which the search results apply.
 * @memberOf dw.content.ContentSearchModel
 * @return {String} the folder ID against which the search results apply.
 */
dw.content.ContentSearchModel.prototype.getFolderID = function() {};

/**
 * Returns the set of search refinements used in this search.
 * @memberOf dw.content.ContentSearchModel
 * @return {dw.content.ContentSearchRefinements} the set of search refinements used in this search.
 */
dw.content.ContentSearchModel.prototype.getRefinements = function() {};

/**
 * The method returns true, if this is a pure search for a folder. The
 method checks, that a folder ID is specified and no search phrase is
 specified.
 * @memberOf dw.content.ContentSearchModel
 * @return {Boolean} True if this is a folder search.
 */
dw.content.ContentSearchModel.prototype.isFolderSearch = function() {};

/**
 * Get the flag that determines if the folder search will
 be recursive.
 * @memberOf dw.content.ContentSearchModel
 * @return {Boolean} true if the folder search will be recursive, false otherwise
 */
dw.content.ContentSearchModel.prototype.isRecursiveFolderSearch = function() {};

/**
 * The method returns true, if the search is refined by a folder.
 The method checks, that a folder ID is specified.
 * @memberOf dw.content.ContentSearchModel
 * @return {Boolean} true, if the search is refined by a folder, false otherwise.
 */
dw.content.ContentSearchModel.prototype.isRefinedByFolder = function() {};

/**
 * Identifies if this is a folder search and is refined with further
 criteria, like a name refinement or an attribute refinement.
 * @memberOf dw.content.ContentSearchModel
 * @return {Boolean} true if this is a folder search and is refined with further          criteria, false otherwise.
 */
dw.content.ContentSearchModel.prototype.isRefinedFolderSearch = function() {};

/**
 * Execute the search.
 * @memberOf dw.content.ContentSearchModel
 */
dw.content.ContentSearchModel.prototype.search = function() {};

/**
 * Sets the contentID used in this search.
 * @memberOf dw.content.ContentSearchModel
 * @param {String} contentID - the contentID used in this search.
 */
dw.content.ContentSearchModel.prototype.setContentID = function(contentID) {};

/**
 * Sets the folderID used in this search.
 * @memberOf dw.content.ContentSearchModel
 * @param {String} folderID - the folderID used in this search.
 */
dw.content.ContentSearchModel.prototype.setFolderID = function(folderID) {};

/**
 * Set a flag to indicate if the search in folder should be recursive.
 * @memberOf dw.content.ContentSearchModel
 * @param {Boolean} recurse - recurse the folder in the search
 */
dw.content.ContentSearchModel.prototype.setRecursiveFolderSearch = function(recurse) {};

/**
 * Returns an URL that you can use to execute a query for a specific
 Content. The passed action is used to build an initial url. All search
 specific attributes are appended.
 * @memberOf dw.content.ContentSearchModel
 * @param {String} action - the pipeline action to use.
 * @param {String} cid - the content id.
 * @return {dw.web.URL} an URL that you can use to execute a query for a specific          Content. The passed action is used to build an initial url. All          search specific attributes are appended.
 * @static
 */
dw.content.ContentSearchModel.urlForContent = function(action, cid) {};

/**
 * Returns an URL that you can use to execute a query for a specific
 Content. The passed url can be either a full url or just the name for a
 pipeline. In the later case a relative URL is created.
 * @memberOf dw.content.ContentSearchModel
 * @param {dw.web.URL} url - the URL to use when constructing the new URL.
 * @param {String} cid - the content id.
 * @return {dw.web.URL} an URL that you can use to execute a query for a specific          Content. The passed url can be either a full url or just the name          for a pipeline. In the later case a relative URL is created.
 * @static
 */
dw.content.ContentSearchModel.urlForContent = function(url, cid) {};

/**
 * Returns an URL that you can use to execute a query for a specific
 Folder.
 * @memberOf dw.content.ContentSearchModel
 * @param {String} action - the pipeline action to use.
 * @param {String} fid - the id of the Folder to use.
 * @return {dw.web.URL} an URL that you can use to execute a query for a specific          Folder.
 * @static
 */
dw.content.ContentSearchModel.urlForFolder = function(action, fid) {};

/**
 * Returns an URL that you can use to execute a query for a specific
 Folder.
 * @memberOf dw.content.ContentSearchModel
 * @param {dw.web.URL} url - the URL to use in constructing the new URL.
 * @param {String} fid - the id of the Folder to use.
 * @return {dw.web.URL} an URL that you can use to execute a query for a specific          Folder.
 * @static
 */
dw.content.ContentSearchModel.urlForFolder = function(url, fid) {};

/**
 * Returns an URL that you can use to execute a query for a specific
 attribute name-value pair.
 * @memberOf dw.content.ContentSearchModel
 * @param {String} action - the pipeline action to use.
 * @param {String} name - the name of the attribute.
 * @param {String} value - the value for the attribute.
 * @return {dw.web.URL} an URL that you can use to execute a query for a specific          attribute name-value pair.
 * @static
 */
dw.content.ContentSearchModel.urlForRefine = function(action, name, value) {};

/**
 * Returns an URL that you can use to execute a query for a specific
 attribute name-value pair.
 * @memberOf dw.content.ContentSearchModel
 * @param {dw.web.URL} url - the URL to use when constructing the new URL.
 * @param {String} name - the name of the attribute.
 * @param {String} value - the value for the attribute.
 * @return {dw.web.URL} an URL that you can use to execute a query for a specific          attribute name-value pair.
 * @static
 */
dw.content.ContentSearchModel.urlForRefine = function(url, name, value) {};

/**
 * Returns an URL that you can use to re-execute the query using the
 specified pipeline action and folder refinement.
 * @memberOf dw.content.ContentSearchModel
 * @param {String} action - the action to use.
 * @param {String} refineFolderID - the folder ID to use as a refinement.
 * @return {dw.web.URL} an URL that you can use to re-execute the exact same query using          the specified pipeline action and folder refinement.
 */
dw.content.ContentSearchModel.prototype.urlRefineFolder = function(action, refineFolderID) {};

/**
 * Returns an URL that you can use to re-execute the query using the
 specified URL and folder refinement.
 * @memberOf dw.content.ContentSearchModel
 * @param {dw.web.URL} url - the existing URL to use when constructing the new URL.
 * @param {String} refineFolderID - the ID of the folder refinement to use.
 * @return {dw.web.URL} an URL that you can use to re-execute the query using the          specified URL and folder refinement.
 */
dw.content.ContentSearchModel.prototype.urlRefineFolder = function(url, refineFolderID) {};

/**
 * Returns an URL that you can use to re-execute the query with no folder
 refinement.
 * @memberOf dw.content.ContentSearchModel
 * @param {String} action - the pipeline action to use in the URL.
 * @return {dw.web.URL} an URL that you can use to re-execute the query with no folder          refinement.
 */
dw.content.ContentSearchModel.prototype.urlRelaxFolder = function(action) {};

/**
 * Returns an URL that you can use to re-execute the query with no folder
 refinement.
 * @memberOf dw.content.ContentSearchModel
 * @param {dw.web.URL} url - the existing URL to use when constructing the new URL.
 * @return {dw.web.URL} an URL that you can use to re-execute the query with no folder          refinement.
 */
dw.content.ContentSearchModel.prototype.urlRelaxFolder = function(url) {};

/**
 * This class provides an interface to refinement options for content search.
 * @class
 * @extends dw.catalog.SearchRefinementDefinition
 */
dw.content.ContentSearchRefinementDefinition = function() {};
dw.content.ContentSearchRefinementDefinition.prototype = new dw.catalog.SearchRefinementDefinition();

/**
 * Identifies if this is a folder refinement.
 * @memberOf dw.content.ContentSearchRefinementDefinition
 * @return {Boolean} true if this is a category refinement, false otherwise.
 */
dw.content.ContentSearchRefinementDefinition.prototype.isFolderRefinement = function() {};

/**
 * This class provides an interface to refinement options for the content asset
 search. In a typical usage, the client application UI displays the search
 refinements along with the search results and allows customers to "refine"
 the results (i.e. limit the results that are shown) by specifying additional
 criteria, or "relax" (i.e. broaden) the results after previously refining.
 The two types of content search refinements are:

 <ul>
 <li><b>Refine By Folder:</b> Limit the content assets to those assigned to
 specific child/ancestor folder of the search folder.</li>
 <li><b>Refine By Attribute:</b> Limit the content assets to those with
 specific values for a given attribute. Values may be grouped into "buckets"
 so that a given set of values are represented as a single refinement option.</li>
 </ul>

 Rendering a content search refinement UI typically begins with iterating the
 refinement definitions for the search result. Call
 <a href="class_dw_catalog_SearchRefinements.html#dw_catalog_SearchRefinements_getRefinementDefinitions_DetailAnchor">SearchRefinements.getRefinementDefinitions()</a> or
 <a href="class_dw_catalog_SearchRefinements.html#dw_catalog_SearchRefinements_getAllRefinementDefinitions_DetailAnchor">SearchRefinements.getAllRefinementDefinitions()</a> to
 retrieve the appropriate collection of refinement definitions. For each
 definition, display the available refinement values by calling
 <a href="class_dw_content_ContentSearchRefinements.html#dw_content_ContentSearchRefinements_getAllRefinementValues_ContentSearchRefinementDefinition_DetailAnchor">getAllRefinementValues(ContentSearchRefinementDefinition)</a>. Depending
 on the type of the refinement definition, the application must use slightly
 different logic to display the refinement widgets. For all 2 types, methods
 in <a href="class_dw_content_ContentSearchModel.html">ContentSearchModel</a> are used to generate URLs to render
 hyperlinks in the UI. When clicked, these links trigger a call to the Search
 pipelet which in turn applies the appropriate filters to the native search
 result.
 * @class
 * @extends dw.catalog.SearchRefinements
 */
dw.content.ContentSearchRefinements = function() {};
dw.content.ContentSearchRefinements.prototype = new dw.catalog.SearchRefinements();

/**
 * Returns a sorted collection of refinement values for the given refinement
 definition. The returned collection includes all refinement values for
 which the hit count is greater than 0 within the search result when the
 passed refinement definitions is excluded from filtering the search hits
 but all other refinement filters are still applied. This is useful for
 rendering broadening options for the refinement definitions that the
 search is already refined by. It is important to note that this method
 does NOT return refinement values independent of the search result.
 * @memberOf dw.content.ContentSearchRefinements
 * @param {dw.content.ContentSearchRefinementDefinition} definition - The refinement definition to return refinement values             for.
 * @return {dw.util.Collection} The collection of ContentSearchRefinementValue instances sorted          according to the settings of the definition.
 */
dw.content.ContentSearchRefinements.prototype.getAllRefinementValues = function(definition) {};

/**
 * Returns the number of search hits for the passed folder object.
 * @memberOf dw.content.ContentSearchRefinements
 * @param {dw.content.Folder} folder - Folder object.
 * @return {Number} Number of search hits.
 */
dw.content.ContentSearchRefinements.prototype.getFolderHits = function(folder) {};

/**
 * Returns the appropriate folder refinement definition based on the search
 result. The folder refinement definition returned will be the first that
 can be found traversing the folder tree upward starting at the deepest
 common folder of the search result.
 * @memberOf dw.content.ContentSearchRefinements
 * @return {dw.content.ContentSearchRefinementDefinition} The folder refinement definition or <code>null</code> if none can          be found.
 */
dw.content.ContentSearchRefinements.prototype.getFolderRefinementDefinition = function() {};

/**
 * Returns a collection of matching folders.
 * @memberOf dw.content.ContentSearchRefinements
 * @return {dw.util.Collection} Collection of matching folders.
 */
dw.content.ContentSearchRefinements.prototype.getMatchingFolders = function() {};

/**
 * Returns folder refinement values based on the current search result
 filtered such that only folder refinements representing children of the
 given folder are present. If no folder is given, the method uses the
 library's root folder. The refinement value content counts represent all
 hits contained in the library tree starting at the corresponding child
 folder.
 * @memberOf dw.content.ContentSearchRefinements
 * @param {dw.content.Folder} folder - The folder to return child folder refinement values for.
 * @return {dw.util.Collection} The refinement values for all child folders of the given folder.
 */
dw.content.ContentSearchRefinements.prototype.getNextLevelFolderRefinementValues = function(folder) {};

/**
 * Returns the refinement value (incl. content hit count) for the given
 refinement definition and the given (selected) value.
 * @memberOf dw.content.ContentSearchRefinements
 * @param {dw.content.ContentSearchRefinementDefinition} definition - The definition to return the refinement for.
 * @param {String} value - The value to return the refinement value for.
 * @return {dw.content.ContentSearchRefinementValue} The refinement value.
 */
dw.content.ContentSearchRefinements.prototype.getRefinementValue = function(definition, value) {};

/**
 * Returns the refinement value (incl. content hit count) for the given
 attribute refinement and the given (selected) value.
 * @memberOf dw.content.ContentSearchRefinements
 * @param {String} name - The name of the refinement attribute.
 * @param {String} value - The value to return the refinement value for.
 * @return {dw.content.ContentSearchRefinementValue} The refinement value.
 */
dw.content.ContentSearchRefinements.prototype.getRefinementValue = function(name, value) {};

/**
 * Returns a collection of refinement values for the given refinement
 definition. The returned refinement values only include those that are
 part of the actual search result (i.e. hit count will always be > 0).
 * @memberOf dw.content.ContentSearchRefinements
 * @param {dw.content.ContentSearchRefinementDefinition} definition - The refinement definition to return refinement values for.
 * @return {dw.util.Collection} The collection of refinement values sorted according to the          settings of the definition.
 */
dw.content.ContentSearchRefinements.prototype.getRefinementValues = function(definition) {};

/**
 * Represents the value of a content search refinement.
 * @class
 * @extends dw.catalog.SearchRefinementValue
 */
dw.content.ContentSearchRefinementValue = function() {};
dw.content.ContentSearchRefinementValue.prototype = new dw.catalog.SearchRefinementValue();

/**
 * Class representing a folder for organizing content assets in the Demandware
 system.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.content.Folder = function() {};
dw.content.Folder.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the content objects for this folder, sorted by position.
 * @memberOf dw.content.Folder
 * @return {dw.util.Collection} the content objects for this folder, sorted by position.
 */
dw.content.Folder.prototype.getContent = function() {};

/**
 * Returns the description for the folder as known in the current
 locale or null if it cannot be found.
 * @memberOf dw.content.Folder
 * @return {String} the description for the folder as known in the current  locale or null if it cannot be found.
 */
dw.content.Folder.prototype.getDescription = function() {};

/**
 * Returns the display name for the folder as known in the current
 locale or null if it cannot be found.
 * @memberOf dw.content.Folder
 * @return {String} the display name for the folder as known in the current  locale or null if it cannot be found.
 */
dw.content.Folder.prototype.getDisplayName = function() {};

/**
 * Returns the ID of the folder. The ID can be used to uniquely
 identify a folder within any given library. This folder ID provides
 an alternative lookup mechanism for folders frequently used in
 the storefront.
 * @memberOf dw.content.Folder
 * @return {String} the ID of the folder.
 */
dw.content.Folder.prototype.getID = function() {};

/**
 * Returns the online content objects for this folder, sorted by position.
 * @memberOf dw.content.Folder
 * @return {dw.util.Collection} the online content objects for this folder, sorted by position.
 */
dw.content.Folder.prototype.getOnlineContent = function() {};

/**
 * Returns the online subfolders of this folder, sorted by position.
 * @memberOf dw.content.Folder
 * @return {dw.util.Collection} the online subfolders of this folder, sorted by position.
 */
dw.content.Folder.prototype.getOnlineSubFolders = function() {};

/**
 * Returns the page description for this folder using the value in
 the current locale, or returns null if no value was found.
 * @memberOf dw.content.Folder
 * @return {String} the page description for this folder using the value in  the current locale, or returns null if no value was found.
 */
dw.content.Folder.prototype.getPageDescription = function() {};

/**
 * Returns the page keywords for this folder using the value in
 the current locale, or returns null if no value was found.
 * @memberOf dw.content.Folder
 * @return {String} the page keywords for this folder using the value in  the current locale, or returns null if no value was found.
 */
dw.content.Folder.prototype.getPageKeywords = function() {};

/**
 * Returns the page title for this folder using the value in
 the current locale, or returns null if no value was found.
 * @memberOf dw.content.Folder
 * @return {String} the page title for this folder using the value in  the current locale, or returns null if no value was found.
 */
dw.content.Folder.prototype.getPageTitle = function() {};

/**
 * Returns the page URL for this folder using the value in
 the current locale, or returns null if no value was found.
 * @memberOf dw.content.Folder
 * @return {String} the page URL for this folder using the value in  the current locale, or returns null if no value was found.
 */
dw.content.Folder.prototype.getPageURL = function() {};

/**
 * Returns the parent folder of this folder.
 * @memberOf dw.content.Folder
 * @return {dw.content.Folder} the parent folder of this folder.
 */
dw.content.Folder.prototype.getParent = function() {};

/**
 * Returns the subfolders of this folder, sorted by position.
 * @memberOf dw.content.Folder
 * @return {dw.util.Collection} the subfolders of this folder, sorted by position.
 */
dw.content.Folder.prototype.getSubFolders = function() {};

/**
 * Returns the name of the template used to render the folder
 in the store front.
 * @memberOf dw.content.Folder
 * @return {String} the name of the template used to render the folder.
 */
dw.content.Folder.prototype.getTemplate = function() {};

/**
 * Indicates if the folder is set online or
 offline. Initially, all folders are set online.
 * @memberOf dw.content.Folder
 * @return {Boolean} true if the folder is online, false otherwise.
 */
dw.content.Folder.prototype.isOnline = function() {};

/**
 * Indicates if this is the root folder.
 * @memberOf dw.content.Folder
 * @return {Boolean} true if this is the root folder, false otherwise.
 */
dw.content.Folder.prototype.isRoot = function() {};

/**
 * Class representing a collection of <a href="class_dw_content_Content.html">Content</a> assets, and a
 <a href="class_dw_content_Folder.html">Folder</a> hierarchy organizing these content assets.
 Currently only one library is allowed per site. An instance of this library
 can be obtained by calling <a href="class_dw_content_ContentMgr.html#dw_content_ContentMgr_getSiteLibrary_DetailAnchor">ContentMgr.getSiteLibrary()</a>.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.content.Library = function() {};
dw.content.Library.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the display name for the library as known in the current
 locale or null if it cannot be found.
 * @memberOf dw.content.Library
 * @return {String} the display name for the library as known in the current  locale or null if it cannot be found.
 */
dw.content.Library.prototype.getDisplayName = function() {};

/**
 * Returns the ID of this library.
 * @memberOf dw.content.Library
 * @return {String} the ID of this library.
 */
dw.content.Library.prototype.getID = function() {};

/**
 * Returns the root folder for this library.
 * @memberOf dw.content.Library
 * @return {dw.content.Folder} the root Folder for this library.
 */
dw.content.Library.prototype.getRoot = function() {};

/**
 * The class represents a content snippet with markup. This is typically a
 HTML content snippet. The class also processes the special links from
 the Demandware content management and automatically rewrites them into
 links for use in the storefront.
 <p/>
 The following special links can be used inside of a MarkupText:

 <ul>
 <p/>
 <li><code><b>$url('&lt;pipeline&gt;' [, '&lt;key1&gt;', '&lt;value1&gt;', '&lt;key2&gt;', '&lt;value2&gt;', ...])$</b></code></li>
 <p/>
 <u>Description:</u><br/>
 The <code>$url()$</code> function creates and absolute URL and retains the protocol incoming
 request.

 <p/>
 <u>Example:</u><br/>
 MarkupText:<br/>
 &nbsp;&nbsp;&nbsp;<code>$url('MyLinkPipeline-Start', 'key1', 'value1', 'key2', 'value2')$</code><br/>
 is rewritten to:<br/>
 &nbsp;&nbsp;&nbsp;<code>http://&lt;host&gt;:&lt;port&gt;/on/demandware.store/&lt;current site&gt;/default/MyLinkPipeline-Start?key1=value1&amp;key2=value2</code><br/>
 Note that the incoming protocol was http in the example above.


 <p/>
 <li><code><b>$httpUrl('&lt;pipeline&gt;' [, '&lt;key1&gt;', '&lt;value1&gt;', '&lt;key2&gt;', '&lt;value2&gt;', ...])$</b></code></li>
 <p/>
 <u>Description:</u><br/>
 The <code>$httpUrl()$</code> function creates an absolute URL but always with the fix protocol
 "http". The protocol type of the incomming request is ignored.<br/>

 <p/>
 <u>Example:</u><br/>
 MarkupText:<br/>
 &nbsp;&nbsp;&nbsp;<code>$httpUrl('MyLinkPipeline-Start', 'key1', 'value1', 'key2', 'value2')$</code><br/>
 is rewritten to:<br/>
 &nbsp;&nbsp;&nbsp;<code>http://&lt;host&gt;:'&lt;port&gt;/on/demandware.store/&lt;current site&gt;/default/MyLinkPipeline-Start?key1=value1&amp;key2=value2</code>


 <p/>
 <li><code><b>$httpsUrl('&lt;pipeline&gt;' [, '&lt;key1&gt;', '&lt;value1&gt;', '&lt;key2&gt;', '&lt;value2&gt;', ...])$</b></code></li>
 <p/>
 <u>Description:</u><br/>
 The <code>$httpsUrl()$</code> function creates an absolute URL but always with the fix protocol
 "https". The protocol type of the incomming request is ignored.

 <p/>
 <u>Example:</u><br/>
 MarkupText:<br/>
 &nbsp;&nbsp;&nbsp;<code>$httpsUrl('MyLinkPipeline-Start', 'key1', 'value1', 'key2', 'value2')$</code><br/>
 is rewritten to:<br/>
 &nbsp;&nbsp;&nbsp;<code>https://&lt;host&gt;:&lt;port&gt;/on/demandware.store/&lt;current site&gt;/default/MyLinkPipeline-Start?key1=value1&amp;key2=value2</code>
 <p/>

 <p/>
 <li><code><b>$include('&lt;pipeline&gt;' [, '&lt;key1&gt;', '&lt;value1&gt;', '&lt;key2&gt;', '&lt;value2&gt;', ...])$</b></code></li>
 <p/>
 <u>Description:</u><br/>
 The <code>$include()$</code> function creates a relative URL which is post processed by the Demandware Webadapter.
 The result is the content generated by the given pipeline call.

 <p/>
 <u>Example:</u><br/>
 MarkupText:<br/>
 &nbsp;&nbsp;&nbsp;<code>$include('MyIncludePipeline-Start','key1', 'value1', 'key2' ,'value2')$</code><br/>
 results in the content delivered by the 'MyIncludePipeline-Start' pipeline.


 <p/>
 <li><code><b>...?$staticlink$</b></code></li>
 <p/>
 <u>Description:</u><br/>
 The <code>$staticlink$</code> function can be used to create a URL to a static resource
 (such as an image). The URL being generated depends on the owner of the MarkupText instance.
 For example, a product's long description (which is a MarkupText) will generate
 links to static resources within the catalog. Possible URL targets are catalogs
 (for catalog related objects like products and categories), the content library
 (for library related objects like folders and assets) or the organization
 (for all objects that are not catalog or library related).

 <p/>
 <u>Example:</u><br/>
 MarkupText: (owned by a content asset)<br/>
 &nbsp;&nbsp;&nbsp;<code>&lt;img src="demo/content/bullet.gif?$staticlink$"&gt;</code><br/>
 is rewritten to:<br/>
 &nbsp;&nbsp;&nbsp;<code>&lt;img src="/on/demandware.static/&lt;current site&gt;/&lt;library&gt;/default/v1178201405900/demo/content/bullet.gif"&gt;</code>

 </ul>
 * @class
 * @extends Object
 */
dw.content.MarkupText = function() {};
dw.content.MarkupText.prototype = new Object();

/**
 * Returns the content with all links rewritten for storefront use.
 * @memberOf dw.content.MarkupText
 * @return {String} the content with all links rewritten for storefront use.
 */
dw.content.MarkupText.prototype.getMarkup = function() {};

/**
 * Returns the original content source, without any links re-written.
 * @memberOf dw.content.MarkupText
 * @return {String} the original content source, without any links re-written.
 */
dw.content.MarkupText.prototype.getSource = function() {};

/**
 * Returns a string representation of this class, the same as getMarkup().
 * @memberOf dw.content.MarkupText
 * @return {String} a string representation of this class, the same as getMarkup().
 */
dw.content.MarkupText.prototype.toString = function() {};

/**
 * This class represents references to media content (such as images)
 located within the Demandware system or on external systems.
 * @class
 * @extends Object
 */
dw.content.MediaFile = function() {};
dw.content.MediaFile.prototype = new Object();

/**
 * Returns an URL to the referenced image file. Image transformation
 can be applied to the image. The protocol for the reference is the
 current protocol of the current HTTP request.

 Image transformation can only be applied to images that are hosted on
 the Demandware Platform.
 * @memberOf dw.content.MediaFile
 * @param {Object} transform - the image for which to return an URL. <table>           <th>             <tr>               <td>Type of transformation</td>               <td>Parameters</td>               <td>Description</td>             </tr>           </th>             <tr>               <td>Scale an image</td>               <td>scaleWidth (sw), scaleHeight (sh), scaleMode (sm)</td>               <td>The scaleWidth and scaleHeight parameters are both               integers; setting one of these parameters triggers a scaling               operation. If both are provided, the one that scales the image               less is used to calculate the scale factor. The image is then               automatically cropped accord to the second dimension, with a               centered position of the cropped area. If the parameter would               scale the image larger, only this operation is applied, if the               image remains in the size of 2000x2000. Valid values for these               parameters are 10-2000. The scaleMode parameter can be set to               "cut" or "fit." The default scaleMode is "cut," the behavior of which               is explained above. If you specify "fit" as the scaleMode, the               system scales the image into the given box of dimensions while               keeping the aspect ratio (possibly resulting in a smaller image               in one dimension).</td>             </tr>             <tr>               <td>Overlay an image</td>               <td>imageX (ox), imageY (oy), imageURI (oimg)</td>               <td>The imageX and imageY parameters are both integers. Valid               values for these parameters are 0 or greater. The imageURI               parameter can be set to the absolute path of the overlayed               image. The value of the imageURI parameter must be given in               proper URL encoding, and it cannot exceed 400 characters in               length. The path must support query string               parameters, which supports dynamically generating the overlayed               image itself through this service; that is, the overlayed image               can itself be a transformed image. If the overlayed image               extends over the primary image's boundaries, the overlayed image               is cropped so that it fits directly over the primary               image.</td>             </tr>             <tr>               <td>Crop an image</td>               <td>cropX (cx), cropY (cy), cropWidth (cw), cropHeight               (ch)</td>               <td>The cropX, cropY, cropWidth, cropHeight parameters are               integers. All four parameters must be specified to trigger a               cropping operation. Valid values for the cropX and cropY               parameters are 0 or greater. If the crop location defined by               cropX and cropY is outside the image area, nothing is cropped.               Valid values for the cropWidth and cropHeight parameters are 10               or greater. If the cropWidth and cropHeight parameters specify a               size that is greater than the original image, the crop area is               reduced to the actual image area. If cropWidth and cropHeight               are 0 or less, no transformation is applied.</td>             </tr>             <tr>               <td>Format an image</td>               <td>format (sfrm)</td>               <td>The format parameter specifies the format of the source               image. Valid values are "tif", "tiff", "jpg", "jpeg", "png", or "gif". The               desired target format (which must be "png", "jpg", or "gif") is               retrieved from the path, not from a transformation parameter. If               no source format is specified, the source format must be the               same as the target format. Providing the source format as a               parameter ensures that the final image is loaded from a URL with               a matching file extension.</td>             </tr>       </table>       <p><b>Example: calling getAbsImageURL</b></p>       <p><code>product.image.getAbsImageURL({scaleWidth:100, format:jpg});</code></p>       <p>Returns:</p>       <p><code>http://(image server host name)/dw/image/v2/.../on/demandware.static/Catalog/Catalog/(path to product image)/FG45SDAF.jpg?sw=100&sfrm=jpg</code></p>
 * @return {dw.web.URL} an absolute URL to the referenced media file. The  protocol for the reference is the current protocol of the current  HTTP request. If the referenced media file is hosted externally,  an URL to the external file is returned.
 */
dw.content.MediaFile.prototype.getAbsImageURL = function(transform) {};

/**
 * Returns an absolute URL to the referenced media file. The
 protocol for the reference is the current protocol of the current
 HTTP request.
 * @memberOf dw.content.MediaFile
 * @return {dw.web.URL} an absolute URL to the referenced media file. The  protocol for the reference is the current protocol of the current  HTTP request.
 */
dw.content.MediaFile.prototype.getAbsURL = function() {};

/**
 * Returns the alternative text assigned to the media file in current
 requests locale. If no alternative text was assigned or if no defaulting
 rule was defined, the method returns null.
 * @memberOf dw.content.MediaFile
 * @return {String} the alternative text annotated to this media file or null
 */
dw.content.MediaFile.prototype.getAlt = function() {};

/**
 * Returns an URL to the referenced image file. Image transformation
 can be applied to the image. The protocol is http.

 Image transformation can only be applied to images that are hosted on
 the Demandware Platform.
 * @memberOf dw.content.MediaFile
 * @param {Object} transform - the image for which to return an URL.
 * @return {dw.web.URL} an absolute URL to the referenced media file. The  protocol is http. If the referenced media file is hosted externally,  an URL to the external file is returned.
 */
dw.content.MediaFile.prototype.getHttpImageURL = function(transform) {};

/**
 * Returns an URL to the referenced image file. Image transformation
 can be applied to the image. The protocol is https.

 Image transformation can only be applied to images that are hosted on
 the Demandware Platform.
 * @memberOf dw.content.MediaFile
 * @param {Object} transform - the image for which to return an URL.
 * @return {dw.web.URL} an absolute URL to the referenced media file. The  protocol is https. If the referenced media file is hosted externally,  an URL to the external file is returned.
 */
dw.content.MediaFile.prototype.getHttpsImageURL = function(transform) {};

/**
 * Returns an absolute URL to the referenced media file. The
 protocol is https.
 * @memberOf dw.content.MediaFile
 * @return {dw.web.URL} an absolute URL to the referenced media file. The  protocol is https.
 */
dw.content.MediaFile.prototype.getHttpsURL = function() {};

/**
 * Returns an absolute URL to the referenced media file. The
 protocol is http.
 * @memberOf dw.content.MediaFile
 * @return {dw.web.URL} an absolute URL to the referenced media file. The  protocol is http.
 */
dw.content.MediaFile.prototype.getHttpURL = function() {};

/**
 * Returns an URL to the referenced image file. Image transformation
 can be applied to the image.

 Image transformation can only be applied to images that are hosted on
 the Demandware Platform.
 * @memberOf dw.content.MediaFile
 * @param {Object} transform - the image for which to return an URL.  <table>           <th>             <tr>               <td>Type of transformation</td>               <td>Parameters</td>               <td>Description</td>             </tr>           </th>             <tr>               <td>Scale an image</td>               <td>scaleWidth (sw), scaleHeight (sh), scaleMode (sm)</td>               <td>The scaleWidth and scaleHeight parameters are both               integers; setting one of these parameters triggers a scaling               operation. If both are provided, the one that scales the image               less is used to calculate the scale factor. The image is then               automatically cropped accord to the second dimension, with a               centered position of the cropped area. If the parameter would               scale the image larger, only this operation is applied, if the               image remains in the size of 2000x2000. Valid values for these               parameters are 10-2000. The scaleMode parameter can be set to               "cut" or "fit." The default scaleMode is "cut," the behavior of which               is explained above. If you specify "fit" as the scaleMode, the               system scales the image into the given box of dimensions while               keeping the aspect ratio (possibly resulting in a smaller image               in one dimension).</td>             </tr>             <tr>               <td>Overlay an image</td>               <td>imageX (ox), imageY (oy), imageURI (oimg)</td>               <td>The imageX and imageY parameters are both integers. Valid               values for these parameters are 0 or greater. The imageURI               parameter can be set to the absolute path of the overlayed               image. The value of the imageURI parameter must be given in               proper URL encoding, and it cannot exceed 400 characters in               length. The path must support query string               parameters, which supports dynamically generating the overlayed               image itself through this service; that is, the overlayed image               can itself be a transformed image. If the overlayed image               extends over the primary image's boundaries, the overlayed image               is cropped so that it fits directly over the primary               image.</td>             </tr>             <tr>               <td>Crop an image</td>               <td>cropX (cx), cropY (cy), cropWidth (cw), cropHeight               (ch)</td>               <td>The cropX, cropY, cropWidth, cropHeight parameters are               integers. All four parameters must be specified to trigger a               cropping operation. Valid values for the cropX and cropY               parameters are 0 or greater. If the crop location defined by               cropX and cropY is outside the image area, nothing is cropped.               Valid values for the cropWidth and cropHeight parameters are 10               or greater. If the cropWidth and cropHeight parameters specify a               size that is greater than the original image, the crop area is               reduced to the actual image area. If cropWidth and cropHeight               are 0 or less, no transformation is applied.</td>             </tr>             <tr>               <td>Format an image</td>               <td>format (sfrm)</td>               <td>The format parameter specifies the format of the source               image. Valid values are "tif", "tiff", "jpg", "jpeg", "png", or "gif". The               desired target format (which must be "png", "jpg", or "gif") is               retrieved from the path, not from a transformation parameter. If               no source format is specified, the source format must be the               same as the target format. Providing the source format as a               parameter ensures that the final image is loaded from a URL with               a matching file extension.</td>             </tr>       </table>
 * @return {dw.web.URL} an URL to the referenced media file. The  returned URL is a relative URL. If the referenced media file is hosted  externally, an URL to the external file is returned.
 */
dw.content.MediaFile.prototype.getImageURL = function(transform) {};

/**
 * Returns the title assigned to the media file in current requests locale.
 If no title was assigned or if no defaulting rule was defined, the
 method returns null.
 * @memberOf dw.content.MediaFile
 * @return {String} the title annotated to this media file or null
 */
dw.content.MediaFile.prototype.getTitle = function() {};

/**
 * Returns an URL to the referenced media file. The
 returned URL is a relative URL.
 * @memberOf dw.content.MediaFile
 * @return {dw.web.URL} an URL to the referenced media file. The  returned URL is a relative URL.
 * @deprecated Use <a href="class_dw_content_MediaFile.html#dw_content_MediaFile_getURL_DetailAnchor">getURL()</a> instead.
 */
dw.content.MediaFile.prototype.getUrl = function() {};

/**
 * Returns an URL to the referenced media file. The
 returned URL is a relative URL.
 * @memberOf dw.content.MediaFile
 * @return {dw.web.URL} an URL to the referenced media file. The  returned URL is a relative URL.
 */
dw.content.MediaFile.prototype.getURL = function() {};

/**
 * Returns the view type annotation for the media file. The method returns
 null, if the media file has no view type annotation.
 * @memberOf dw.content.MediaFile
 * @return {String} the view type annotated to this media file or null
 */
dw.content.MediaFile.prototype.getViewType = function() {};

/**
 * Creates a <code>CertificateRef</code> from the passed alias. No check
 is made whether the alias is actually referring to a certificate in the keystore,
 this check is made when the <code>CertificateRef</code> is used.
 * @class
 * @extends Object
 * @param {String} alias - an alias that should refer to a certificate in the keystore.
 */
dw.crypto.CertificateRef = function(alias) {};
dw.crypto.CertificateRef.prototype = new Object();

/**
 * Returns the string representation of this CertificateRef.
 * @memberOf dw.crypto.CertificateRef
 * @return {String} The string representation of this CertificateRef.
 */
dw.crypto.CertificateRef.prototype.toString = function() {};

/**
 *
 * @class
 * @extends Object
 */
dw.crypto.Cipher = function() {};
dw.crypto.Cipher.prototype = new Object();

/**
 * Strings containing keys, plain texts, cipher texts etc. are internally
 converted into byte arrays using this encoding (currently UTF8).
 * @type String
 * @memberOf dw.crypto.Cipher
 * @static
 * @const
 */
dw.crypto.Cipher.CHAR_ENCODING = '';

/**
 * Alternative method to <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_1_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>, which allows
 to use a key in the keystore for the decryption.

 <p>
 Note: Only asymmetric (public/private key pair) algorithms can be used
 with this method, since only those keys can be added to a keystore.
 </p>
 * @memberOf dw.crypto.Cipher
 * @param {String} base64Msg - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_1_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>)
 * @param {dw.crypto.KeyRef} privateKey - A reference to a private key in the key store.
 * @param {String} transformation - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_1_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>)
 * @param {String} salt - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_1_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>)
 * @param {Number} iterations - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_1_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>)
 * @return {String} (see {@link #decrypt_1(String, String, String, String, int)})
 */
dw.crypto.Cipher.prototype.decrypt_1 = function(base64Msg, privateKey, transformation, salt, iterations) {};

/**
 * Decrypts the passed Base-64 encoded message using the passed key and
 applying the transformations described by the passed parameters.
 <p/>
 Decryption is the process of getting back the original data from the
 cipher-text using a decryption key.
 * @memberOf dw.crypto.Cipher
 * @param {String} base64Msg - the base64 encoded cipher bytes<p/>
 * @param {String} key - Use the same key to decrypt as was used to encrypt the message.           <p/>If the cryptographic algorithms is <em>symmetric</em>           (e.g. AES, ARCFOUR, Blowfish, DES, DESede or RC2)           or <em>asymmetric</em> (e.g. RSA), the key needs to be passed as base64           encoded string. The only exception is the <em>symmetric</em> cryptographic           algorithms <i>Password Based Encryption</i> (PBE). With PBE the key needs           to be passed as plain string (<i>without</i> any encoding).
 * @param {String} transformation - The transformation in <i>"algorithm"</i> or           <i>"algorithm/mode/padding"</i> format. Supported           transformations are listed above.
 * @param {String} salt - Initialization value appropriate for the algorithm, this might           be a Binary Salt or AlgorithmParameter or InitializationVector           (see above)<p/>           Should be appropriate for the algorithm being used. If this value is           null, a default initialization value will be used by the engine.           The same value used to Encrypt needs to be supplied to the           Decrypt function for many algorithms to successfully decrypt           the data, so it is best practice to specify an appropriate value.
 * @param {Number} iterations - The number of passes to make when turning a passphrase into a key.           <p/>This is only applicable for some types of algorithm.           Password Based Encryption (PBE) algorithms use this parameter,           and Block Encryption algorithms do not.           <p/>If this value is relevant to the algorithm it would be best           practice to supply it, as the same value would be needed to           decrypt the data that was used to encrypt the data.<p/>
 * @return {String} the original plaintext message.
 */
dw.crypto.Cipher.prototype.decrypt_1 = function(base64Msg, key, transformation, salt, iterations) {};

/**
 * Alternative method to <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_2_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>, which allows
 to use a key in the keystore for the decryption.

 <p>
 Note: Only asymmetric (public/private key pair) algorithms can be used
 with this method, since only those keys can be added to a keystore.
 </p>
 * @memberOf dw.crypto.Cipher
 * @param {String} base64Msg - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_2_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>)
 * @param {dw.crypto.KeyRef} privateKey - A reference to a private key in the key store.
 * @param {String} transformation - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_2_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>)
 * @param {String} salt - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_2_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>)
 * @param {Number} iterations - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_2_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>)
 * @return {String} (see {@link #decrypt_2(String, String, String, String, int)})
 */
dw.crypto.Cipher.prototype.decrypt_2 = function(base64Msg, privateKey, transformation, salt, iterations) {};

/**
 * Decrypts the passed Base-64 encoded message using the passed key and
 applying the transformations described by the passed parameters.
 <p/>
 Decryption is the process of getting back the original data from the
 cipher-text using a decryption key.
 * @memberOf dw.crypto.Cipher
 * @param {String} base64Msg - the base64 encoded cipher bytes<p/>
 * @param {String} key - Use the same key to decrypt as was used to encrypt the message.           <p/>If the cryptographic algorithms is <em>symmetric</em>           (e.g. AES, ARCFOUR, Blowfish, DES, DESede or RC2)           or <em>asymmetric</em> (e.g. RSA), the key needs to be passed as base64           encoded string. The only exception is the <em>symmetric</em> cryptographic           algorithms <i>Password Based Encryption</i> (PBE). With PBE the key needs           to be passed as plain string (<i>without</i> any encoding).
 * @param {String} transformation - The transformation in <i>"algorithm"</i> or           <i>"algorithm/mode/padding"</i> format. Supported           transformations are listed above.
 * @param {String} salt - Initialization value appropriate for the algorithm, this might           be a Binary Salt or AlgorithmParameter or InitializationVector           (see above)<p/>           Should be appropriate for the algorithm being used. If this value is           null, a default initialization value will be used by the engine.           The same value used to Encrypt needs to be supplied to the           Decrypt function for many algorithms to successfully decrypt           the data, so it is best practice to specify an appropriate value.
 * @param {Number} iterations - The number of passes to make when turning a passphrase into a key.           <p/>This is only applicable for some types of algorithm.           Password Based Encryption (PBE) algorithms use this parameter,           and Block Encryption algorithms do not.           <p/>If this value is relevant to the algorithm it would be best           practice to supply it, as the same value would be needed to           decrypt the data that was used to encrypt the data.<p/>
 * @return {String} the original plaintext message.
 */
dw.crypto.Cipher.prototype.decrypt_2 = function(base64Msg, key, transformation, salt, iterations) {};

/**
 * Alternative method to <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_1_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>, which allows
 to use a key in the keystore for the decryption.
 * @memberOf dw.crypto.Cipher
 * @param {dw.util.Bytes} encryptedBytes - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_1_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {dw.crypto.KeyRef} privateKey - A reference to a private key in the key store.
 * @param {String} transformation - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_1_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {String} salt - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_1_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {Number} iterations - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_1_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>)
 * @return {dw.util.Bytes} (see {@link #decryptBytes_1(Bytes, String, String, String, int)})
 */
dw.crypto.Cipher.prototype.decryptBytes_1 = function(encryptedBytes, privateKey, transformation, salt, iterations) {};

/**
 * Lower-level decryption API. Decrypts the passed bytes using the specified
 key and applying the transformations described by the specified
 parameters.
 <p/>
 Typical usage:

 <pre>
 var base64Msg : String = "some_encoded_encrypted_message";
 var charset : String = "UTF8";  // or "windows-1252", etc.

 var encryptedBytes : Bytes = Encoding.fromBase64(base64Msg);
 var messageBytes : Bytes = Cipher.decryptBytes(encryptedBytes, key, transformation, salt, iterations);
 var message : String = messageBytes.toString(charset);
 </pre>
 * @memberOf dw.crypto.Cipher
 * @param {dw.util.Bytes} encryptedBytes - The bytes to decrypt.
 * @param {String} key - The key to use for decryption.
 * @param {String} transformation - The transformation used to originally encrypt.
 * @param {String} salt - the salt to use.
 * @param {Number} iterations - the iterations to use.
 * @return {dw.util.Bytes} The decrypted bytes.
 * @see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_1_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>
 */
dw.crypto.Cipher.prototype.decryptBytes_1 = function(encryptedBytes, key, transformation, salt, iterations) {};

/**
 * Alternative method to <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_2_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>, which allows
 to use a key in the keystore for the decryption.
 * @memberOf dw.crypto.Cipher
 * @param {dw.util.Bytes} encryptedBytes - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_2_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {dw.crypto.KeyRef} privateKey - A reference to a private key in the key store.
 * @param {String} transformation - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_2_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {String} salt - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_2_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {Number} iterations - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decryptBytes_2_Bytes_String_String_String_int_DetailAnchor">decryptBytes(Bytes, String, String, String, Number)</a>)
 * @return {dw.util.Bytes} (see {@link #decryptBytes_2(Bytes, String, String, String, int)})
 */
dw.crypto.Cipher.prototype.decryptBytes_2 = function(encryptedBytes, privateKey, transformation, salt, iterations) {};

/**
 * Lower-level decryption API. Decrypts the passed bytes using the specified
 key and applying the transformations described by the specified
 parameters.
 <p/>
 Typical usage:

 <pre>
 var base64Msg : String = "some_encoded_encrypted_message";
 var charset : String = "UTF8";  // or "windows-1252", etc.

 var encryptedBytes : Bytes = Encoding.fromBase64(base64Msg);
 var messageBytes : Bytes = Cipher.decryptBytes(encryptedBytes, key, transformation, salt, iterations);
 var message : String = messageBytes.toString(charset);
 </pre>
 * @memberOf dw.crypto.Cipher
 * @param {dw.util.Bytes} encryptedBytes - The bytes to decrypt.
 * @param {String} key - The key to use for decryption.
 * @param {String} transformation - The transformation used to originally encrypt.
 * @param {String} salt - the salt to use.
 * @param {Number} iterations - the iterations to use.
 * @return {dw.util.Bytes} The decrypted bytes.
 * @see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_decrypt_2_String_String_String_String_int_DetailAnchor">decrypt(String, String, String, String, Number)</a>
 */
dw.crypto.Cipher.prototype.decryptBytes_2 = function(encryptedBytes, key, transformation, salt, iterations) {};

/**
 * Alternative method to
 <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_1_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>, which allows you to
 use a key in the keystore for encryption.
 <p>
 Note: Only asymmetric (public/private key pair) algorithms can be used
 with this method, since only those keys can be added to a keystore.
 </p>
 <p>
 For asymmetric algorithms a private/public key pair is required.
 Demandware only allows you to add private keys in the format *.p12 and *.pfx.
 You can assign private keys an extra password in Business Manager. Public keys
 can only be imported as trusted certificates in the format *.crt, *.pem,
 *.der, and *.cer.
 </p>
 <p/>Key pairs for asymmetric ciphers can be generated with an arbitrary tool.
 One of the most popular options is the open source tool <a href="http://www.openssl.org">OpenSSL</a>.
 OpenSSL has a command-line syntax and is available on major platforms.
 <p/>The following steps are involved in <b>creating an RSA key pair:</b>
 <p/>
 <p/>1. Generate a public and a non-protected private key ( *.crt and *.key ).< br/>
 <code>openssl req -x509 -newkey rsa:2048 -keyout nopass.key -out nopass.crt -days 365 -nodes</code>
 <p/>2. Generate a keystore that contains the public and private keys ( *.p12 ). < br/>
 <code>openssl pkcs12 -export -out nopass.p12 -inkey nopass.key -in nopass.crt</code>
 <p/>
 To import a private or public key into the Demandware keystore, navigate to
 <b>Administration > Operations > Private Keys and Certificates</b>
 Use a .p12 file to import a private key and a *.crt to import a public key.
 <p/>
 Typical usage:

 <pre>
 var plain : String = "some_plain_text";
 var publicKeyRef = new CertificateRef("rsa-certificate-2048");
 var cipher : Cipher = new Cipher();
 var encrypted : String = cipher.encrypt(plain, publicKeyRef, "RSA", null, 0);
 </pre>
 * @memberOf dw.crypto.Cipher
 * @param {String} message - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_1_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>)
 * @param {dw.crypto.CertificateRef} publicKey - A reference to a public key in the key store.
 * @param {String} transformation - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_1_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>)
 * @param {String} salt - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_1_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>)
 * @param {Number} iterations - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_1_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>)
 * @return {String} (see {@link #encrypt_1(String, String, String, String, int)})
 */
dw.crypto.Cipher.prototype.encrypt_1 = function(message, publicKey, transformation, salt, iterations) {};

/**
 * Encrypt the passed message by using the specified key and applying the
 transformations described by the specified parameters.
 <p/>
 Encryption is the process of converting normal data or plain text to
 something incomprehensible or cipher-text by applying transformations,
 which are the operation (or set of operations) to be performed on given input
 to produce some output. A transformation always includes the name of a
 cryptographic algorithm (e.g. RSA) and may be followed by a mode and padding scheme.
 The supported algorithms are listed in the parameter description below.
 <p/>The cryptographic algorithms can be partitioned into <em>symmetric</em>
 and <em>asymmetric</em> (or public key/private key).<p/>

 <b>Symmetric</b> or "secret key" algorithms use the same key to encrypt
 and to decrypt the data. Symmetric algorithms are what most people think
 of as codes: using a well-known algorithm and a secret key to encode information,
 which can be decoded using the same algorithm and the same key. The algorithm
 is not secret, the secrecy is inherent to guarding the key. A significant
 problem with symmetric ciphers is that it is difficult to transfer the keys
 themselves securely. Symmetric algorithms include <em>password-based</em> algorithms.<p/>
 <b>AES with key length of 256 bits is the preferred choice for symmetric encryption going forward.
 Please consider switching to it if you are using any other scheme or if using AES with a
 shorter key length. The rest of the symmetric algorithms will be deprecated in the future.</b><br/><br/>

 <b>Asymmetric</b> or "public key" cryptography uses a public/private key pair, and then publishes the public key.
 Only the holder of the private key will be able to decrypt.
 The public key and private key together are also called a "key pair".
 Data encrypted with one key can only be decrypted using the other key
 from the pair, and it is not possible to deduce one key from the other.
 This helps to solve the key distribution problem since it is possible to
 publicise one of the keys widely (the "public key") and keep the other
 a closely guarded secret (the "private key"). Many partners can then
 send data encrypted with the public key, but only the holder of the
 corresponding private key can decrypt it.

  <p/>Key pairs for asymmetric ciphers can be generated with an arbitrary tool.
  One of the most popular options is the open source tool <a href="http://www.openssl.org">OpenSSL</a>.
  OpenSSL has a command-line syntax and is available on major platforms.
  <p/>The following steps are involved in <b>creating an RSA key pair:</b>
  <p/>
  <p/>1. <code>openssl genrsa -out rsaprivatekey.pem 2048</code>
  <p/>2. <code>openssl rsa -in rsaprivatekey.pem -out publickey.pem -pubout</code>
  <p/>3. <code>openssl pkcs8 -topk8 -in rsaprivatekey.pem -out privatekey.pem -nocrypt</code>

  <p/>1. Generates an RSA private key with keylength of 2048 bits. Store this key in a safe place.
  <p/>2. Generates a public key from the private key. You use the public key to encrypt messages with Cipher.encrypt. OpenSSL saves the key PEM-encoded; this means the key is saved with a base64 encoding. After you removed the header and footer lines you can pass the content directly to the API method.
  <p/>3. Generates a private key in PKCS#8 format. You use that key to decrypt messages with Cipher.decrypt. OpenSSL saves the key PEM-encoded; this means the key is saved with a base64 encoding. After you removed the header and footer lines you can pass the content directly to the API method.
 <p/><b>Modes</b><p/>
  The following modes of operation are block cipher operations that
     are used with some algorithms.
          <ul>
          <li>"NONE" no mode</li>
          <li>"CBC" Cipher Block Chaining (defined in FIPS PUB 81)</li>
          <li>"CTR" Counter mode or Segmented Integer Counter mode (defined in FIPS PUB 81)</li>
          <li>"CTS" CipherText Streaming mode</li>
          <li>"CFB" Cipher Feedback Mode,  can be referred to with key
          length referenced as "CFB8","CFB16","CFB24".."CFB64" (defined in FIPS PUB 81)</li>
          <li>"ECB" Electronic Cook book  as defined in: The National
          Institute of Standards and Technology (NIST) Federal Information
          Processing Standard (FIPS) PUB 81, "DES Modes of Operation,"
          U.S. Department of Commerce, Dec 1980.</li>
          <li>"OFB" Output Feedback Mode, can be referred to with key
          length referenced as "OFB8","OFB16","OFB24".."OFB64" (defined in FIPS PUB 81)</li>
          <li>"PCBC" Propagating Cipher Block Chaining (defined in Kerberos V4)</li>
          </ul>
<p/><b>Paddings</b>
          <ul>
          <li>"NoPadding": No padding.</li>
          <li>OAEPWith&lt;digest&gt;And&lt;mgf&gt;Padding: <p/>Optimal Asymmetric Encryption
          Padding scheme defined in PKCS#1, where &lt;digest&gt; should be replaced
          by the message digest and &lt;mgf&gt; by the mask generation function.
          <p/>Examples: OAEPWITHMD5ANDMGF1PADDING, OAEPWITHSHA1ANDMGF1PADDING,
          OAEPWITHSHA-1ANDMGF1PADDING, OAEPWITHSHA-256ANDMGF1PADDING,
          OAEPWITHSHA-384ANDMGF1PADDING, OAEPWITHSHA-512ANDMGF1PADDING</li>
          <li>ISO10126PADDING the ISO10126-2:1991 DEA padding scheme</li>
          <li>PKCS1Padding: Public Key Cryptography Standard #1, a standard
          for padding from RSA Laboratories that can encrypt messages up
          to 11 bytes smaller than the modulus size in bytes.</li>
          <li>PKCS5Padding: Public Key Cryptography Standard #1, a standard
          for padding from RSA Laboratories, "PKCS#5: Password-Based Encryption Standard," version 1.5, November 1993.</li>
          <li>SSL3Padding: The padding scheme defined in the SSL Protocol Version 3.0, November 18, 1996, section 5.2.3.2 (CBC block cipher)</li>
          </ul>
 * @memberOf dw.crypto.Cipher
 * @param {String} message - A string to encrypt (will be first converted with UTF-8 encoding           into a byte stream)
 * @param {String} key - A string ready for use with the algorithm.           The key's format depends on the algorithm specified and the           keys are assumed to be correctly formulated for the algorithm           used, for example that the lengths are correct.           Keys are <em>not</em> checked for validity.            <p/>The cryptographic algorithms can be partitioned into <em>symmetric</em>           and <em>asymmetric</em> (or public key/private key). Symmetric algorithms           include <em>password-based</em> algorithms.           <p/>Symmetric keys are usually base64 encodings of an array of bytes.           Asymmetric keys are "key pairs" with a public key and a private key.           For asymmetric algorithms the private key needs to be passed.           Please provide the private key in PKCS#8 format, base64 encoded.           See class documentation on how to generate a key pair.           <p/>If the cryptographic algorithms is <em>symmetric</em>           (e.g. AES, ARCFOUR, Blowfish, DES, DESede or RC2)           or <em>asymmetric</em> (e.g. RSA), the key needs to be passed as base64           encoded string. The only exception is the <em>symmetric</em> cryptographic           algorithms <i>Password Based Encryption</i> (PBE). With PBE the key needs           to be passed as plain string (<i>without</i> any encoding).
 * @param {String} transformation - The transformation in <i>"algorithm"</i> or           <i>"algorithm/mode/padding"</i> format.           Symmetric or "secret key" algorithms use the same key to encrypt           and to decrypt the data. Asymmetric or "public key" cryptography           uses a public/private key pair, and then publishes the public key.           Only the holder of the private key will be able to decrypt.           The public key and private key are also known as a "key pair".           Symmetric algorithms are faster and do not require a mutual           secret key, asymmetric algorithms are more secure when used           correctly.            <p/>Supported Symmetric transformations include:            <ul>           <li>"AES" or Rijndael, Advanced Encryption Standard as specified by NIST<br/>           <b>AES with key length of 256 is the preferred choice for symmetric encryption</b>           <p/>Keysizes: 128, 192, or 256           <p/>Modes: "ECB","CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB128",           "OFB","OFB8","OFB16","OFB24".."OFB128"           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <li>"ARCFOUR" aka "RC4" A stream cipher developed by Ron Rivest.           <p/>Keysizes: between 40 and 1024 (inclusive)           <p/>Mode: "ECB"           <p/>Padding: "NOPADDING"</li>            <li>"Blowfish" designed by Bruce Schneier           <p/>Keysizes:  a multiple of 8, ranging from 32 to 448 (inclusive)           <p/>Modes: "ECB"<!--,"CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"-->           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <li>"DES" The Digital Encryption Standard as described in FIPS PUB 46-2           <p/>Keysize: 56           <p/>Modes: "ECB" <!--,"CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"-->           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <li>"DESede" aka "TripleDES" <p/>(DESede stands for DES encrypt, decrypt, encrypt. Uses three different keys to apply the DES cypher algorithm.)           <p/>Keysizes: 112 or 168           <p/>Modes: "ECB","CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <li>"RC2"           <p/>Keysizes: between 40 and 1024 (inclusive)           <p/>Modes: "ECB"<!--,"CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"-->           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <!--li>"RC5" or "Rivest Cipher" from RSA           <p/>Keysizes: between 40 and 1024 (inclusive)           <p/>Modes: "ECB","CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li-->            <!--li>"DSA"           <p/>Keysizes:  a multiple of 64, ranging from 512 to 1024(inclusive)</li-->            <li>"PBEWithMD5AndDES"  (PBE indicates Password Based Encryption)           <p/>Mode: "CBC"           <p/>Padding: "PKCS5Padding"</li>            <li>"PBEWithMD5AndTripleDES" (Proprietary to Sun not standardized)            (PBE indicates Password Based Encryption)           <p/>Mode: "CBC"           <p/>Padding: "PKCS5Padding"</li>            <li>"PBEWithSHA1AndDESede"  (PBE indicates Password Based Encryption)           <p/>Mode: "CBC"           <p/>Padding: "PKCS5Padding"</li>            <li>"PBEWithSHA1AndRC2_40"  (PBE indicates Password Based Encryption)           <p/>Mode: "CBC"           <p/>Padding: "PKCS5Padding"</li>           </ul>            <p/>Supported Asymmetric transformations include:            <ul>           <li>"RSA"           <p/>Mode: "ECB"           <p/>Padding: "NOPADDING", PKCS1PADDING", "OAEPWITHMD5ANDMGF1PADDING",           "OAEPWITHSHA1ANDMGF1PADDING", "OAEPWITHSHA-1ANDMGF1PADDING",           "OAEPWITHSHA-256ANDMGF1PADDING", "OAEPWITHSHA-384ANDMGF1PADDING",           "OAEPWITHSHA-512ANDMGF1PADDING"</li>            <li>"DiffieHellman"           <p/>Keysizes:  a multiple of 64, ranging from 512 to 1024(inclusive)</li>           </ul>
 * @param {String} salt - Initialization value appropriate for the algorithm, this might           be a Binary Salt or AlgorithmParameter or InitializationVector.           (As binary values cannot be passed, the equivalent Base64 String           should be passed for any binary salt value).            <p/>Should be appropriate for the algorithm being used. If this value is           null, a default initialization value will be used by the engine.           The same value used to Encrypt needs to be supplied to the           Decrypt function for many algorithms to successfully decrypt           the data, so it is best practice to specify an appropriate value.            Requirements for the size and generation of DES initialization           vectors (IV) are derived from FIPS 74 and FIPS 81 from the National           Institute of Standards and Technology. CBC mode requires an IV           with length 64 bits; CFB uses 48-64 bits; OFB uses 64 bits.           If the IV is to be used with DES in the OFB mode, then it is not           acceptable for the IV to remain fixed for multiple encryptions,           if the same key is used for those encryptions.<p/>            <p/>For Block Encryption algorithms this is the encoded Base64           String equivalent to the a random number to use as a "salt"           to use with the algorithm.           The algorithm must contain a Feedback Mode other than ECB.           This must be a binary value that is exactly the same size           as the algorithm block size.<p/>           RC2 and RC5 use an optional 8-byte initialization vector (IV),           but only in feedback mode (see CFB above).<p/>           For Password Based Encryption algorithms, the salt is the encoded           Base64 String equivalent to a random number value to transform the           password into a key. PBE derives an encryption key from a password.           In order to make the task of getting from password to key very           time-consuming for an attacker, most PBE implementations will           mix in a random number, known as a salt, to create the key. The salt           value and the iteration count are then combined into a           PBEParameterSpecification to initialize the cipher. <p/>           The PKCS#5 spec from RSA Labs defines the parameters for           password-based encryption (PBE).<p/>           The RSA algorithm requires a salt with length as defined in PKCS#1.<p/>           DSA has a specific initialization that uses three integers to           build a DSAParameterSpec (a prime, a sub-prime and a base).           To use this algorithm you should use the JCE or another           provider to supply a DSAParameterSpec and then supply the           Base64 equivalent string as the "salt". Please see the           documentation from the provider for additional restrictions.<p/>           Diffie-Hellman also needs a separately generated DHParameterSpec           for use in Diffie-Hellman key agreement. This is specified in           RSA Labs PKCS#3 as being done by a central authority. This allows           two parties, without any prior arrangements, to agree upon a           secret key that is known only to them. These keys are intended           to support protocols for establishing secure connections, such           as OSI's transport and network layers. Please have your security           staff work with your Certification Authority to arrange for D-H keys.           These are related to Internet Security Association and Key Management           Protocol (ISAKMP; see RFC 2408), and within that framework the           Internet Key Exchange (IKE) protocol (see RFC 2401).<p/>           The Sun JCE uses Blowfish in a similar way to other block cipher.           The iv is transmitted in the clear with the encrypted file.           Typically, the IV is prepended to the encrypted file.<p/>
 * @param {Number} iterations - The number of passes to make when turning a passphrase into a key.           <p/>This is only applicable for some types of algorithm.           Password Based Encryption (PBE) algorithms use this parameter,           and Block Encryption algorithms do not.           <p/>If this value is relevant to the algorithm it would be best           practice to supply it, as the same value would be needed to           decrypt the data.
 * @return {String} the encrypted message encoded as a String using base 64 encoding.
 */
dw.crypto.Cipher.prototype.encrypt_1 = function(message, key, transformation, salt, iterations) {};

/**
 * Alternative method to
 <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>, which allows you to
 use a key in the keystore for encryption.
 <p>
 Note: Only asymmetric (public/private key pair) algorithms can be used
 with this method, since only those keys can be added to a keystore.
 </p>
 <p>
 For asymmetric algorithms a private/public key pair is required.
 Demandware only allows you to add private keys in the format *.p12 and *.pfx.
 You can assign private keys an extra password in Business Manager. Public keys
 can only be imported as trusted certificates in the format *.crt, *.pem,
 *.der, and *.cer.
 </p>
 <p/>Key pairs for asymmetric ciphers can be generated with an arbitrary tool.
 One of the most popular options is the open source tool <a href="http://www.openssl.org">OpenSSL</a>.
 OpenSSL has a command-line syntax and is available on major platforms.
 <p/>The following steps are involved in <b>creating an RSA key pair:</b>
 <p/>
 <p/>1. Generate a public and a non-protected private key ( *.crt and *.key ).< br/>
 <code>openssl req -x509 -newkey rsa:2048 -keyout nopass.key -out nopass.crt -days 365 -nodes</code>
 <p/>2. Generate a keystore that contains the public and private keys ( *.p12 ). < br/>
 <code>openssl pkcs12 -export -out nopass.p12 -inkey nopass.key -in nopass.crt</code>
 <p/>
 To import a private or public key into the Demandware keystore, navigate to
 <b>Administration > Operations > Private Keys and Certificates</b>
 Use a .p12 file to import a private key and a *.crt to import a public key.
 <p/>
 Typical usage:

 <pre>
 var plain : String = "some_plain_text";
 var publicKeyRef = new CertificateRef("rsa-certificate-2048");
 var cipher : Cipher = new Cipher();
 var encrypted : String = cipher.encrypt(plain, publicKeyRef, "RSA", null, 0);
 </pre>
 * @memberOf dw.crypto.Cipher
 * @param {String} message - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>)
 * @param {dw.crypto.CertificateRef} publicKey - A reference to a public key in the key store.
 * @param {String} transformation - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>)
 * @param {String} salt - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>)
 * @param {Number} iterations - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>)
 * @return {String} (see {@link #encrypt_2(String, String, String, String, int)})
 */
dw.crypto.Cipher.prototype.encrypt_2 = function(message, publicKey, transformation, salt, iterations) {};

/**
 * Encrypt the passed message by using the specified key and applying the
 transformations described by the specified parameters.
 <p/>
 Encryption is the process of converting normal data or plain text to
 something incomprehensible or cipher-text by applying transformations,
 which are the operation (or set of operations) to be performed on given input
 to produce some output. A transformation always includes the name of a
 cryptographic algorithm (e.g. RSA) and may be followed by a mode and padding scheme.
 The supported algorithms are listed in the parameter description below.
 <p/>The cryptographic algorithms can be partitioned into <em>symmetric</em>
 and <em>asymmetric</em> (or public key/private key).<p/>

 <b>Symmetric</b> or "secret key" algorithms use the same key to encrypt
 and to decrypt the data. Symmetric algorithms are what most people think
 of as codes: using a well-known algorithm and a secret key to encode information,
 which can be decoded using the same algorithm and the same key. The algorithm
 is not secret, the secrecy is inherent to guarding the key. A significant
 problem with symmetric ciphers is that it is difficult to transfer the keys
 themselves securely. Symmetric algorithms include <em>password-based</em> algorithms.<p/>
 <b>AES with key length of 256 bits is the preferred choice for symmetric encryption going forward.
 Please consider switching to it if you are using any other scheme or if using AES with a
 shorter key length. The rest of the symmetric algorithms will be deprecated in the future.</b><br/><br/>

 <b>Asymmetric</b> or "public key" cryptography uses a public/private key pair, and then publishes the public key.
 Only the holder of the private key will be able to decrypt.
 The public key and private key together are also called a "key pair".
 Data encrypted with one key can only be decrypted using the other key
 from the pair, and it is not possible to deduce one key from the other.
 This helps to solve the key distribution problem since it is possible to
 publicise one of the keys widely (the "public key") and keep the other
 a closely guarded secret (the "private key"). Many partners can then
 send data encrypted with the public key, but only the holder of the
 corresponding private key can decrypt it.

  <p/>Key pairs for asymmetric ciphers can be generated with an arbitrary tool.
  One of the most popular options is the open source tool <a href="http://www.openssl.org">OpenSSL</a>.
  OpenSSL has a command-line syntax and is available on major platforms.
  <p/>The following steps are involved in <b>creating an RSA key pair:</b>
  <p/>
  <p/>1. <code>openssl genrsa -out rsaprivatekey.pem 2048</code>
  <p/>2. <code>openssl rsa -in rsaprivatekey.pem -out publickey.pem -pubout</code>
  <p/>3. <code>openssl pkcs8 -topk8 -in rsaprivatekey.pem -out privatekey.pem -nocrypt</code>

  <p/>1. Generates an RSA private key with keylength of 2048 bits. Store this key in a safe place.
  <p/>2. Generates a public key from the private key. You use the public key to encrypt messages with Cipher.encrypt. OpenSSL saves the key PEM-encoded; this means the key is saved with a base64 encoding. After you removed the header and footer lines you can pass the content directly to the API method.
  <p/>3. Generates a private key in PKCS#8 format. You use that key to decrypt messages with Cipher.decrypt. OpenSSL saves the key PEM-encoded; this means the key is saved with a base64 encoding. After you removed the header and footer lines you can pass the content directly to the API method.
 <p/><b>Modes</b><p/>
  The following modes of operation are block cipher operations that
     are used with some algorithms.
          <ul>
          <li>"NONE" no mode</li>
          <li>"CBC" Cipher Block Chaining (defined in FIPS PUB 81)</li>
          <li>"CTR" Counter mode or Segmented Integer Counter mode (defined in FIPS PUB 81)</li>
          <li>"CTS" CipherText Streaming mode</li>
          <li>"CFB" Cipher Feedback Mode,  can be referred to with key
          length referenced as "CFB8","CFB16","CFB24".."CFB64" (defined in FIPS PUB 81)</li>
          <li>"ECB" Electronic Cook book  as defined in: The National
          Institute of Standards and Technology (NIST) Federal Information
          Processing Standard (FIPS) PUB 81, "DES Modes of Operation,"
          U.S. Department of Commerce, Dec 1980.</li>
          <li>"OFB" Output Feedback Mode, can be referred to with key
          length referenced as "OFB8","OFB16","OFB24".."OFB64" (defined in FIPS PUB 81)</li>
          <li>"PCBC" Propagating Cipher Block Chaining (defined in Kerberos V4)</li>
          </ul>
<p/><b>Paddings</b>
          <ul>
          <li>"NoPadding": No padding.</li>
          <li>OAEPWith&lt;digest&gt;And&lt;mgf&gt;Padding: <p/>Optimal Asymmetric Encryption
          Padding scheme defined in PKCS#1, where &lt;digest&gt; should be replaced
          by the message digest and &lt;mgf&gt; by the mask generation function.
          <p/>Examples: OAEPWITHMD5ANDMGF1PADDING, OAEPWITHSHA1ANDMGF1PADDING,
          OAEPWITHSHA-1ANDMGF1PADDING, OAEPWITHSHA-256ANDMGF1PADDING,
          OAEPWITHSHA-384ANDMGF1PADDING, OAEPWITHSHA-512ANDMGF1PADDING</li>
          <li>ISO10126PADDING the ISO10126-2:1991 DEA padding scheme</li>
          <li>PKCS1Padding: Public Key Cryptography Standard #1, a standard
          for padding from RSA Laboratories that can encrypt messages up
          to 11 bytes smaller than the modulus size in bytes.</li>
          <li>PKCS5Padding: Public Key Cryptography Standard #1, a standard
          for padding from RSA Laboratories, "PKCS#5: Password-Based Encryption Standard," version 1.5, November 1993.</li>
          <li>SSL3Padding: The padding scheme defined in the SSL Protocol Version 3.0, November 18, 1996, section 5.2.3.2 (CBC block cipher)</li>
          </ul>
 * @memberOf dw.crypto.Cipher
 * @param {String} message - A string to encrypt (will be first converted with UTF-8 encoding           into a byte stream)
 * @param {String} key - A string ready for use with the algorithm.           The key's format depends on the algorithm specified and the           keys are assumed to be correctly formulated for the algorithm           used, for example that the lengths are correct.           Keys are <em>not</em> checked for validity.            <p/>The cryptographic algorithms can be partitioned into <em>symmetric</em>           and <em>asymmetric</em> (or public key/private key). Symmetric algorithms           include <em>password-based</em> algorithms.           <p/>Symmetric keys are usually base64 encodings of an array of bytes.           Asymmetric keys are "key pairs" with a public key and a private key.           For asymmetric algorithms the private key needs to be passed.           Please provide the private key in PKCS#8 format, base64 encoded.           See class documentation on how to generate a key pair.           <p/>If the cryptographic algorithms is <em>symmetric</em>           (e.g. AES, ARCFOUR, Blowfish, DES, DESede or RC2)           or <em>asymmetric</em> (e.g. RSA), the key needs to be passed as base64           encoded string. The only exception is the <em>symmetric</em> cryptographic           algorithms <i>Password Based Encryption</i> (PBE). With PBE the key needs           to be passed as plain string (<i>without</i> any encoding).
 * @param {String} transformation - The transformation in <i>"algorithm"</i> or           <i>"algorithm/mode/padding"</i> format.           Symmetric or "secret key" algorithms use the same key to encrypt           and to decrypt the data. Asymmetric or "public key" cryptography           uses a public/private key pair, and then publishes the public key.           Only the holder of the private key will be able to decrypt.           The public key and private key are also known as a "key pair".           Symmetric algorithms are faster and do not require a mutual           secret key, asymmetric algorithms are more secure when used           correctly.            <p/>Supported Symmetric transformations include:            <ul>           <li>"AES" or Rijndael, Advanced Encryption Standard as specified by NIST<br/>           <b>AES with key length of 256 is the preferred choice for symmetric encryption</b>           <p/>Keysizes: 128, 192, or 256           <p/>Modes: "ECB","CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB128",           "OFB","OFB8","OFB16","OFB24".."OFB128"           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <li>"ARCFOUR" aka "RC4" A stream cipher developed by Ron Rivest.           <p/>Keysizes: between 40 and 1024 (inclusive)           <p/>Mode: "ECB"           <p/>Padding: "NOPADDING"</li>            <li>"Blowfish" designed by Bruce Schneier           <p/>Keysizes:  a multiple of 8, ranging from 32 to 448 (inclusive)           <p/>Modes: "ECB"<!--,"CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"-->           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <li>"DES" The Digital Encryption Standard as described in FIPS PUB 46-2           <p/>Keysize: 56           <p/>Modes: "ECB" <!--,"CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"-->           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <li>"DESede" aka "TripleDES" <p/>(DESede stands for DES encrypt, decrypt, encrypt. Uses three different keys to apply the DES cypher algorithm.)           <p/>Keysizes: 112 or 168           <p/>Modes: "ECB","CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <li>"RC2"           <p/>Keysizes: between 40 and 1024 (inclusive)           <p/>Modes: "ECB"<!--,"CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"-->           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li>            <!--li>"RC5" or "Rivest Cipher" from RSA           <p/>Keysizes: between 40 and 1024 (inclusive)           <p/>Modes: "ECB","CBC","PCBC","CTR","CTS","CFB","CFB8","CFB16","CFB24".."CFB64",           "OFB","OFB8","OFB16","OFB24".."OFB64"           <p/>Padding: "NOPADDING", "PKCS5Padding", "ISO10126PADDING"</li-->            <!--li>"DSA"           <p/>Keysizes:  a multiple of 64, ranging from 512 to 1024(inclusive)</li-->            <li>"PBEWithMD5AndDES"  (PBE indicates Password Based Encryption)           <p/>Mode: "CBC"           <p/>Padding: "PKCS5Padding"</li>            <li>"PBEWithMD5AndTripleDES" (Proprietary to Sun not standardized)            (PBE indicates Password Based Encryption)           <p/>Mode: "CBC"           <p/>Padding: "PKCS5Padding"</li>            <li>"PBEWithSHA1AndDESede"  (PBE indicates Password Based Encryption)           <p/>Mode: "CBC"           <p/>Padding: "PKCS5Padding"</li>            <li>"PBEWithSHA1AndRC2_40"  (PBE indicates Password Based Encryption)           <p/>Mode: "CBC"           <p/>Padding: "PKCS5Padding"</li>           </ul>            <p/>Supported Asymmetric transformations include:            <ul>           <li>"RSA"           <p/>Mode: "ECB"           <p/>Padding: "NOPADDING", PKCS1PADDING", "OAEPWITHMD5ANDMGF1PADDING",           "OAEPWITHSHA1ANDMGF1PADDING", "OAEPWITHSHA-1ANDMGF1PADDING",           "OAEPWITHSHA-256ANDMGF1PADDING", "OAEPWITHSHA-384ANDMGF1PADDING",           "OAEPWITHSHA-512ANDMGF1PADDING"</li>            <li>"DiffieHellman"           <p/>Keysizes:  a multiple of 64, ranging from 512 to 1024(inclusive)</li>           </ul>
 * @param {String} salt - Initialization value appropriate for the algorithm, this might           be a Binary Salt or AlgorithmParameter or InitializationVector.           (As binary values cannot be passed, the equivalent Base64 String           should be passed for any binary salt value).            <p/>Should be appropriate for the algorithm being used. If this value is           null, a default initialization value will be used by the engine.           The same value used to Encrypt needs to be supplied to the           Decrypt function for many algorithms to successfully decrypt           the data, so it is best practice to specify an appropriate value.            Requirements for the size and generation of DES initialization           vectors (IV) are derived from FIPS 74 and FIPS 81 from the National           Institute of Standards and Technology. CBC mode requires an IV           with length 64 bits; CFB uses 48-64 bits; OFB uses 64 bits.           If the IV is to be used with DES in the OFB mode, then it is not           acceptable for the IV to remain fixed for multiple encryptions,           if the same key is used for those encryptions.<p/>            <p/>For Block Encryption algorithms this is the encoded Base64           String equivalent to the a random number to use as a "salt"           to use with the algorithm.           The algorithm must contain a Feedback Mode other than ECB.           This must be a binary value that is exactly the same size           as the algorithm block size.<p/>           RC2 and RC5 use an optional 8-byte initialization vector (IV),           but only in feedback mode (see CFB above).<p/>           For Password Based Encryption algorithms, the salt is the encoded           Base64 String equivalent to a random number value to transform the           password into a key. PBE derives an encryption key from a password.           In order to make the task of getting from password to key very           time-consuming for an attacker, most PBE implementations will           mix in a random number, known as a salt, to create the key. The salt           value and the iteration count are then combined into a           PBEParameterSpecification to initialize the cipher. <p/>           The PKCS#5 spec from RSA Labs defines the parameters for           password-based encryption (PBE).<p/>           The RSA algorithm requires a salt with length as defined in PKCS#1.<p/>           DSA has a specific initialization that uses three integers to           build a DSAParameterSpec (a prime, a sub-prime and a base).           To use this algorithm you should use the JCE or another           provider to supply a DSAParameterSpec and then supply the           Base64 equivalent string as the "salt". Please see the           documentation from the provider for additional restrictions.<p/>           Diffie-Hellman also needs a separately generated DHParameterSpec           for use in Diffie-Hellman key agreement. This is specified in           RSA Labs PKCS#3 as being done by a central authority. This allows           two parties, without any prior arrangements, to agree upon a           secret key that is known only to them. These keys are intended           to support protocols for establishing secure connections, such           as OSI's transport and network layers. Please have your security           staff work with your Certification Authority to arrange for D-H keys.           These are related to Internet Security Association and Key Management           Protocol (ISAKMP; see RFC 2408), and within that framework the           Internet Key Exchange (IKE) protocol (see RFC 2401).<p/>           The Sun JCE uses Blowfish in a similar way to other block cipher.           The iv is transmitted in the clear with the encrypted file.           Typically, the IV is prepended to the encrypted file.<p/>
 * @param {Number} iterations - The number of passes to make when turning a passphrase into a key.           <p/>This is only applicable for some types of algorithm.           Password Based Encryption (PBE) algorithms use this parameter,           and Block Encryption algorithms do not.           <p/>If this value is relevant to the algorithm it would be best           practice to supply it, as the same value would be needed to           decrypt the data.
 * @return {String} the encrypted message encoded as a String using base 64 encoding.
 */
dw.crypto.Cipher.prototype.encrypt_2 = function(message, key, transformation, salt, iterations) {};

/**
 * Alternative method to <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_1_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>, which allows
 to use a key in the keystore for the encryption.

 <p>
 Note: Only asymmetric (public/private key pair) algorithms can be used
 with this method, since only those keys can be added to a keystore.
 </p>
 * @memberOf dw.crypto.Cipher
 * @param {dw.util.Bytes} messageBytes - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_1_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {dw.crypto.CertificateRef} publicKey - A reference to a public key in the key store.
 * @param {String} transformation - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_1_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {String} salt - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_1_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {Number} iterations - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_1_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>)
 * @return {dw.util.Bytes} (see {@link #encryptBytes_1(Bytes, String, String, String, int)})
 */
dw.crypto.Cipher.prototype.encryptBytes_1 = function(messageBytes, publicKey, transformation, salt, iterations) {};

/**
 * Lower-level encryption API. Encrypts the passed bytes by using the
 specified key and applying the transformations described by the specified
 parameters.
 <p/>
 Typical usage:

 <pre>
 var message : String = "some_message";
 var charset : String = "UTF8"; // or "windows-1252", etc.

 // encrypt the message
 var messageBytes : Bytes = new Bytes(message, charset);
 var encryptedBytes : Bytes = Cipher.encryptBytes(messageBytes, key, transformation, salt, iterations);
 var encrypted : String = Encoding.toBase64(encryptedBytes);
 </pre>
 * @memberOf dw.crypto.Cipher
 * @param {dw.util.Bytes} messageBytes - The bytes to encrypt.
 * @param {String} key - The key to use for encryption.
 * @param {String} transformation - The transformation to apply.
 * @param {String} salt - Initialization value appropriate for the algorithm.
 * @param {Number} iterations - The number of passes to make when turning a passphrase             into a key.
 * @return {dw.util.Bytes} the encrypted bytes.
 * @see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_1_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>
 */
dw.crypto.Cipher.prototype.encryptBytes_1 = function(messageBytes, key, transformation, salt, iterations) {};

/**
 * Alternative method to <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_2_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>, which allows
 to use a key in the keystore for the encryption.

 <p>
 Note: Only asymmetric (public/private key pair) algorithms can be used
 with this method, since only those keys can be added to a keystore.
 </p>
 * @memberOf dw.crypto.Cipher
 * @param {dw.util.Bytes} messageBytes - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_2_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {dw.crypto.CertificateRef} publicKey - A reference to a public key in the key store.
 * @param {String} transformation - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_2_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {String} salt - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_2_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>)
 * @param {Number} iterations - (see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encryptBytes_2_Bytes_String_String_String_int_DetailAnchor">encryptBytes(Bytes, String, String, String, Number)</a>)
 * @return {dw.util.Bytes} (see {@link #encryptBytes_2(Bytes, String, String, String, int)})
 */
dw.crypto.Cipher.prototype.encryptBytes_2 = function(messageBytes, publicKey, transformation, salt, iterations) {};

/**
 * Lower-level encryption API. Encrypts the passed bytes by using the
 specified key and applying the transformations described by the specified
 parameters.
 <p/>
 Typical usage:

 <pre>
 var message : String = "some_message";
 var charset : String = "UTF8"; // or "windows-1252", etc.

 // encrypt the message
 var messageBytes : Bytes = new Bytes(message, charset);
 var encryptedBytes : Bytes = Cipher.encryptBytes(messageBytes, key, transformation, salt, iterations);
 var encrypted : String = Encoding.toBase64(encryptedBytes);
 </pre>
 * @memberOf dw.crypto.Cipher
 * @param {dw.util.Bytes} messageBytes - The bytes to encrypt.
 * @param {String} key - The key to use for encryption.
 * @param {String} transformation - The transformation to apply.
 * @param {String} salt - Initialization value appropriate for the algorithm.
 * @param {Number} iterations - The number of passes to make when turning a passphrase             into a key.
 * @return {dw.util.Bytes} the encrypted bytes.
 * @see <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_String_String_String_int_DetailAnchor">encrypt(String, String, String, String, Number)</a>
 */
dw.crypto.Cipher.prototype.encryptBytes_2 = function(messageBytes, key, transformation, salt, iterations) {};

/**
 * Utility class which handles several common character encodings.
 * @class
 * @extends Object
 */
dw.crypto.Encoding = function() {};
dw.crypto.Encoding.prototype = new Object();

/**
 * Decode the given string which represents a sequence of characters encoded
 in base-64 to a byte array. Characters not in the base-64 alphabet are
 ignored. An exception is thrown if a null value is passed.

 Note: This decoding operation is limited to the maximum number of bytes
 that a Bytes object can hold. See <a href="class_dw_util_Bytes.html#dw_util_Bytes_MAX_BYTES_DetailAnchor">Bytes.MAX_BYTES</a>.
 * @memberOf dw.crypto.Encoding
 * @param {String} string - A string consisting of characters in base-64 alphabet to             decode.
 * @return {dw.util.Bytes} The decoded array of bytes.
 * @static
 */
dw.crypto.Encoding.fromBase64 = function(string) {};

/**
 * Converts a String representing hexadecimal values into an array of bytes
 of those same values. The returned byte array will be half the length of
 the passed, as it takes two characters to represent any given byte. An
 exception is thrown if the passed string has an odd number of character
 or if any characters in the string are not valid hexadecimal characters.
 An exception is thrown if a null value is passed.

 Note: This decoding operation is limited to the maximum number of bytes
 that a Bytes object can hold. See <a href="class_dw_util_Bytes.html#dw_util_Bytes_MAX_BYTES_DetailAnchor">Bytes.MAX_BYTES</a>.
 * @memberOf dw.crypto.Encoding
 * @param {String} string - A string containing only hex characters to decode.
 * @return {dw.util.Bytes} The decoded array of bytes.
 * @static
 */
dw.crypto.Encoding.fromHex = function(string) {};

/**
 * Decodes a URL safe string into its original form. Escaped characters are
 converted back to their original representation. An exception is thrown
 if URL decoding is unsuccessful or if null is passed.
 * @memberOf dw.crypto.Encoding
 * @param {String} string - The string to decode.
 * @return {String} The decoded string.
 * @static
 */
dw.crypto.Encoding.fromURI = function(string) {};

/**
 * Decodes a URL safe string into its original form using the specified
 encoding. Escaped characters are converted back to their original
 representation. An exception is thrown if URL decoding is unsuccessful or
 if the specified encoding is unsupported or if null is passed for either
 argument.
 * @memberOf dw.crypto.Encoding
 * @param {String} string - The string to decode.
 * @param {String} encoding - The name of a supported encoding.
 * @return {String} The decoded string.
 * @static
 */
dw.crypto.Encoding.fromURI = function(string, encoding) {};

/**
 * Convert the given byte array to a string encoded in base-64.  This method
 does not chunk the data by adding line breaks.  An exception is thrown
 if a null value is passed.
 * @memberOf dw.crypto.Encoding
 * @param {dw.util.Bytes} bytes - The array of bytes to encode.
 * @return {String} The encoded string containing only Base64 characters.
 * @static
 */
dw.crypto.Encoding.toBase64 = function(bytes) {};

/**
 * Converts an array of bytes into a string representing the hexadecimal
 values of each byte in order. The returned string will be double the
 length of the passed array, as it takes two characters to represent any
 given byte. An exception is thrown if a null value is passed.
 * @memberOf dw.crypto.Encoding
 * @param {dw.util.Bytes} bytes - The array of bytes to encode.
 * @return {String} The encoded string containing only hex characters.
 * @static
 */
dw.crypto.Encoding.toHex = function(bytes) {};

/**
 * Encodes a string into its URL safe form according to the
 "application/x-www-form-urlencoded" encoding scheme using the default
 encoding. Unsafe characters are escaped. An exception is thrown if a null
 value is passed.
 * @memberOf dw.crypto.Encoding
 * @param {String} string - The string to encode.
 * @return {String} The encoded string.
 * @static
 */
dw.crypto.Encoding.toURI = function(string) {};

/**
 * Encodes a string into its URL safe form according to the
 "application/x-www-form-urlencoded" encoding scheme using the specified
 encoding. Unsafe characters are escaped. An exception is thrown if the
 specified encoding is unsupported. An exception is thrown if either
 argument is null.
 * @memberOf dw.crypto.Encoding
 * @param {String} string - The string to encode.
 * @param {String} encoding - The name of a supported encoding.
 * @return {String} The encoded string.
 * @static
 */
dw.crypto.Encoding.toURI = function(string, encoding) {};

/**
 * Creates a <code>KeyRef</code> from the passed alias. No check
 is made whether the alias is actually referring to a key in the keystore,
 this check is made when the <code>KeyRef</code> is used.
 * @class
 * @extends Object
 * @param {String} alias - an alias that should refer to a key in the keystore.
 */
dw.crypto.KeyRef = function(alias) {};
dw.crypto.KeyRef.prototype = new Object();

/**
 * Creates a <code>KeyRef</code> from the passed alias. No check
 is made whether the alias is actually referring to a key in the keystore,
 this check is made when the <code>KeyRef</code> is used.
 * @class
 * @extends Object
 * @param {String} alias - an alias that should refer to a key in the keystore.
 * @param {String} password - the password that should be used to get the key from the keystore.
 */
dw.crypto.KeyRef = function(alias, password) {};
dw.crypto.KeyRef.prototype = new Object();

/**
 * Returns the string representation of this KeyRef.
 * @memberOf dw.crypto.KeyRef
 * @return {String} The string representation of this KeyRef.
 */
dw.crypto.KeyRef.prototype.toString = function() {};

/**
 * Construct a Mac encryption instance with the specified algorithm name. The
 supported algorithms are:

 <ul>
 <li>MD5</li>
 <li>SHA 1</li>
 <li>SHA 256</li>
 <li>SHA 384</li>
 <li>SHA 512</li>
 </ul>
 * @class
 * @extends Object
 * @param {String} algorithm - the standard name of the digest algorithm, must not be             null.
 * @throws NullArgumentException if algorithm is null.
 * @throws IllegalArgumentException if the specified algorithm name is not
             supported.
 */
dw.crypto.Mac = function(algorithm) {};
dw.crypto.Mac.prototype = new Object();

/**
 * Constant representing the HMAC-MD5 keyed-hashing algorithm as defined in RFC 2104 "HMAC: Keyed-Hashing for Message Authentication" (February 1997).
 This algorithm uses as MD5 cryptographic hash function
 * @type String
 * @memberOf dw.crypto.Mac
 * @static
 * @const
 */
dw.crypto.Mac.HMAC_MD5 = '';

/**
 * Constant representing the HmacSHA1 algorithms as defined in RFC 2104 "HMAC: Keyed-Hashing for Message Authentication" (February 1997)
 with SHA-1 as the message digest algorithm.
 * @type String
 * @memberOf dw.crypto.Mac
 * @static
 * @const
 */
dw.crypto.Mac.HMAC_SHA_1 = '';

/**
 * Constant representing the HmacSHA256 algorithms as defined in RFC 2104 "HMAC: Keyed-Hashing for Message Authentication" (February 1997)
 with SHA-256 as the message digest algorithm.
 * @type String
 * @memberOf dw.crypto.Mac
 * @static
 * @const
 */
dw.crypto.Mac.HMAC_SHA_256 = '';

/**
 * Constant representing the HmacSHA384 algorithms as defined in RFC 2104 "HMAC: Keyed-Hashing for Message Authentication" (February 1997)
 with SHA-384 as the message digest algorithm.
 * @type String
 * @memberOf dw.crypto.Mac
 * @static
 * @const
 */
dw.crypto.Mac.HMAC_SHA_384 = '';

/**
 * Constant representing the HmacSHA512 algorithms as defined in RFC 2104 "HMAC: Keyed-Hashing for Message Authentication" (February 1997)
 with SHA-512 as the message digest algorithm.
 * @type String
 * @memberOf dw.crypto.Mac
 * @static
 * @const
 */
dw.crypto.Mac.HMAC_SHA_512 = '';

/**
 * Computes the hash value for the passed bytes input using the passed secret key.
 * @memberOf dw.crypto.Mac
 * @param {dw.util.Bytes} input - The bytes to calculate a RFC 2104 compliant HMAC hash value.
 * @param {dw.util.Bytes} key - The secret key as byte array ready for use with the algorithm.           The key's format depends on the chosen algorithm and the           keys are assumed to be correctly formulated for the algorithm           used, for example that the lengths are correct.           Keys are <em>not</em> checked for validity.           Only such keys that have no key parameters associated with them.
 * @return {dw.util.Bytes} The resulting hash value as bytes.
 * @throws IllegalArgumentException if algorithm is not null and the
             specified algorithm name is not supported.
 */
dw.crypto.Mac.prototype.digest = function(input, key) {};

/**
 * Computes the hash value for the passed string input using the passed secret key.
 Given input will be first converted with UTF-8 encoding into a byte array.
 The resulting hash is typically converted with base64 back into a string.
 * @memberOf dw.crypto.Mac
 * @param {String} input - A string to calculate a RFC 2104 compliant HMAC hash value for.
 * @param {dw.util.Bytes} key - The secret key as bytes ready for use with the algorithm.           The key's format depends on the chosen algorithm and the           keys are assumed to be correctly formulated for the algorithm           used, for example that the lengths are correct.           Keys are <em>not</em> checked for validity.           Only such keys that have no key parameters associated with them.
 * @return {dw.util.Bytes} The resulting hash value as bytes.
 * @throws IllegalArgumentException if algorithm is not null and the
             specified algorithm name is not supported.
 */
dw.crypto.Mac.prototype.digest = function(input, key) {};

/**
 * Computes the hash value for the passed string input using the passed secret key.
 Given input and the given key will be first converted with UTF-8 encoding into a byte array.
 The resulting hash is typically converted with base64 back into a string.
 * @memberOf dw.crypto.Mac
 * @param {String} input - A string to calculate a RFC 2104 compliant HMAC hash value for.
 * @param {String} key - The secret key ready for use with the algorithm.           The key's format depends on the chosen algorithm and the           keys are assumed to be correctly formulated for the algorithm           used, for example that the lengths are correct.           Keys are <em>not</em> checked for validity.           Only such keys that have no key parameters associated with them.
 * @return {dw.util.Bytes} The resulting hash value as bytes.
 * @throws IllegalArgumentException if algorithm is not null and the
             specified algorithm name is not supported.
 */
dw.crypto.Mac.prototype.digest = function(input, key) {};

/**
 * Construct a MessageDigest with the specified algorithm name. The
 supported algorithms are:

 <ul>
 <li>MD5</li>
 <li>MD2</li>
 <li>SHA</li>
 <li>SHA-1</li>
 <li>SHA-256</li>
 <li>SHA-512</li>
 </ul>
 * @class
 * @extends Object
 * @param {String} algorithm - The standard name of the digest algorithm, must not be         null and must be a supported algorithm.
 */
dw.crypto.MessageDigest = function(algorithm) {};
dw.crypto.MessageDigest.prototype = new Object();

/**
 * Constant representing the MD2 algorithm
 * @type String
 * @memberOf dw.crypto.MessageDigest
 * @static
 * @const
 */
dw.crypto.MessageDigest.DIGEST_MD2 = '';

/**
 * Constant representing the MD5 algorithm
 * @type String
 * @memberOf dw.crypto.MessageDigest
 * @static
 * @const
 */
dw.crypto.MessageDigest.DIGEST_MD5 = '';

/**
 * Constant representing the SHA algorithm
 * @type String
 * @memberOf dw.crypto.MessageDigest
 * @static
 * @const
 */
dw.crypto.MessageDigest.DIGEST_SHA = '';

/**
 * Constant representing the SHA 1 algorithm
 * @type String
 * @memberOf dw.crypto.MessageDigest
 * @static
 * @const
 */
dw.crypto.MessageDigest.DIGEST_SHA_1 = '';

/**
 * Constant representing the SHA 256 algorithm
 * @type String
 * @memberOf dw.crypto.MessageDigest
 * @static
 * @const
 */
dw.crypto.MessageDigest.DIGEST_SHA_256 = '';

/**
 * Constant representing the SHA 512 algorithm
 * @type String
 * @memberOf dw.crypto.MessageDigest
 * @static
 * @const
 */
dw.crypto.MessageDigest.DIGEST_SHA_512 = '';

/**
 * Completes the hash computation by performing final operations such as
 padding.

 The binary representation of the message is typically derived from a
 string and the resulting hash is typically converted with base64 back
 into a string. Example:

 <code>
 Encoding.toBase64( digest() );
 </code>
 * @memberOf dw.crypto.MessageDigest
 * @return {dw.util.Bytes} The resulting hash value.
 */
dw.crypto.MessageDigest.prototype.digest = function() {};

/**
 * Digests the passed string and returns a computed hash value as a string.
 The passed String is first encoded into a sequence of bytes using the
 platform's default encoding. The digest then performs any prerequisite
 padding, before computing the hash value. The hash is then converted into
 a string by converting all digits to hexadecimal.
 * @memberOf dw.crypto.MessageDigest
 * @param {String} input - The value to hash as String, must not be null.
 * @return {String} The resulting hash value as hex-encoded string.
 * @deprecated Deprecated because the conversion of the input to bytes using
             the default platform encoding and the hex-encoded return
             value are not generally appropriate.
 */
dw.crypto.MessageDigest.prototype.digest = function(input) {};

/**
 * Computes the hash value for the passed array of bytes. The algorithm
 argument is optional. If null, then the algorithm established at
 construction time is used.

 The binary representation of the message is typically derived from a
 string and the resulting hash is typically converted with base64 back
 into a string. Example:

 <code>
 Encoding.toBase64( digest( "MD5", new Bytes( "my password", "UTF-8" ) ) );
 </code>
 * @memberOf dw.crypto.MessageDigest
 * @param {String} algorithm - The standard name of the digest algorithm, or null if             the algorithm passed at construction time is to be used.             The algorithm must be a supported algorithm.
 * @param {dw.util.Bytes} input - The value to hash, must not be null.
 * @return {dw.util.Bytes} The resulting hash value.
 * @deprecated Deprecated because the digest algorithm should be the one
             set in the constructor.
 */
dw.crypto.MessageDigest.prototype.digest = function(algorithm, input) {};

/**
 * Computes the hash value for the passed <a href="class_dw_util_Bytes.html">Bytes</a>.

 The binary representation of the message is typically derived from a
 string and the resulting hash is typically converted with base64 back
 into a string. Example:

 <code>
 Encoding.toBase64( digest( new Bytes( "my password", "UTF-8" ) ) );
 </code>
 * @memberOf dw.crypto.MessageDigest
 * @param {dw.util.Bytes} input - The value to hash, must not be null.
 * @return {dw.util.Bytes} The resulting hash value.
 */
dw.crypto.MessageDigest.prototype.digestBytes = function(input) {};

/**
 * Updates the digest using the passed <a href="class_dw_util_Bytes.html">Bytes</a>.
 * @memberOf dw.crypto.MessageDigest
 * @param {dw.util.Bytes} input - The value to hash, must not be null.
 */
dw.crypto.MessageDigest.prototype.updateBytes = function(input) {};

/**
 * Instantiates a new secure random.
 * @class
 * @extends Object
 */
dw.crypto.SecureRandom = function() {};
dw.crypto.SecureRandom.prototype = new Object();

/**
 * Returns the given number of seed bytes, computed using the seed
 generation algorithm that this class uses to seed itself.  This
 call may be used to seed other random number generators.
 * @memberOf dw.crypto.SecureRandom
 * @param {Number} numBytes - the number of seed bytes to generate.
 * @return {dw.util.Bytes} the seed bytes.
 */
dw.crypto.SecureRandom.prototype.generateSeed = function(numBytes) {};

/**
 * Generates a user-specified number of random bytes.

 <p/> If a call to <code>setSeed</code> had not occurred previously,
 the first call to this method forces this SecureRandom object
 to seed itself.  This self-seeding will not occur if
 <code>setSeed</code> was previously called.
 * @memberOf dw.crypto.SecureRandom
 * @param {Number} numBits - the demanded number of bits
 * @return {dw.util.Bytes} a randomly filled {@link dw.util.Bytes}
 */
dw.crypto.SecureRandom.prototype.nextBytes = function(numBits) {};

/**
 * Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence. The general
 contract of nextInt is that one int value is pseudorandomly generated and returned. All 2<font size="-1"><sup>32
 </sup></font> possible int values are produced with (approximately) equal probability.
 * @memberOf dw.crypto.SecureRandom
 * @return {Number} the next pseudorandom, uniformly distributed int value from this random number generator's sequence
 */
dw.crypto.SecureRandom.prototype.nextInt = function() {};

/**
 * Returns a pseudorandom, uniformly distributed int value
 between 0 (inclusive) and the specified value (exclusive), drawn from
 this random number generator's sequence.
 * @memberOf dw.crypto.SecureRandom
 * @param {Number} upperBound - the bound on the random number to be returned.  Must be positive.
 * @return {Number} the next pseudorandom, uniformly distributed int value between 0 (inclusive) and upperBound (exclusive)          from this random number generator's sequence
 * @exception IllegalArgumentException if n is not positive
 */
dw.crypto.SecureRandom.prototype.nextInt = function(upperBound) {};

/**
 * Returns the next pseudorandom, uniformly distributed
 Number value between 0.0 (inclusive) and 1.0 (exclusive) from this random number generator's sequence.
 * @memberOf dw.crypto.SecureRandom
 * @return {Number} the next pseudorandom, uniformly distributed Number          value between 0.0 and 1.0 from this random number generator's sequence
 */
dw.crypto.SecureRandom.prototype.nextNumber = function() {};

/**
 * Reseeds this random object. The given seed supplements, rather than replaces, the existing seed. Thus, repeated calls are guaranteed never to reduce randomness.
 * @memberOf dw.crypto.SecureRandom
 * @param {dw.util.Bytes} seed - the seed.
 */
dw.crypto.SecureRandom.prototype.setSeed = function(seed) {};

/**
 *
 * @class
 * @extends Object
 */
dw.crypto.Signature = function() {};
dw.crypto.Signature.prototype = new Object();

/**
 * Supported digest algorithms exposed as a string array
 * @type String[]
 * @memberOf dw.crypto.Signature
 * @static
 * @const
 */
dw.crypto.Signature.SUPPORTED_DIGEST_ALGORITHMS_AS_ARRAY = {};

/**
 * Checks to see if a digest algorithm is supported
 * @memberOf dw.crypto.Signature
 * @param {String} digestAlgorithm - the digest algorithm name
 * @return {Boolean} a boolean indicating success (true) or failure (false)
 */
dw.crypto.Signature.prototype.isDigestAlgorithmSupported = function(digestAlgorithm) {};

/**
 * Signs a string and returns a string
 * @memberOf dw.crypto.Signature
 * @param {String} contentToSign - base64 encoded content to sign
 * @param {dw.crypto.KeyRef} privateKey - a reference to a private key entry in the keystore
 * @param {String} digestAlgorithm - must be one of the currently supported ones
 * @return {String} the base64 encoded signature
 */
dw.crypto.Signature.prototype.sign = function(contentToSign, privateKey, digestAlgorithm) {};

/**
 * Signs a string and returns a string
 * @memberOf dw.crypto.Signature
 * @param {String} contentToSign - base64 encoded content to sign
 * @param {String} privateKey - base64 encoded private key
 * @param {String} digestAlgorithm - must be one of the currently supported ones
 * @return {String} the base64 encoded signature
 */
dw.crypto.Signature.prototype.sign = function(contentToSign, privateKey, digestAlgorithm) {};

/**
 * Signs bytes and returns bytes
 * @memberOf dw.crypto.Signature
 * @param {dw.util.Bytes} contentToSign - transformed with UTF-8 encoding into a byte stream
 * @param {dw.crypto.KeyRef} privateKey - a reference to a private key entry in the keystore
 * @param {String} digestAlgorithm - must be one of the currently supported ones
 * @return {dw.util.Bytes} signature
 */
dw.crypto.Signature.prototype.signBytes = function(contentToSign, privateKey, digestAlgorithm) {};

/**
 * Signs bytes and returns bytes
 * @memberOf dw.crypto.Signature
 * @param {dw.util.Bytes} contentToSign - transformed with UTF-8 encoding into a byte stream
 * @param {String} privateKey - base64 encoded private key
 * @param {String} digestAlgorithm - must be one of the currently supported ones
 * @return {dw.util.Bytes} signature
 */
dw.crypto.Signature.prototype.signBytes = function(contentToSign, privateKey, digestAlgorithm) {};

/**
 * Verifies a signature supplied as bytes
 * @memberOf dw.crypto.Signature
 * @param {dw.util.Bytes} signature - signature to check as bytes
 * @param {dw.util.Bytes} contentToVerify - as bytes
 * @param {dw.crypto.CertificateRef} certificate - a reference to a trusted certificate entry in the keystore
 * @param {String} digestAlgorithm - must be one of the currently supported ones
 * @return {Boolean} a boolean indicating success (true) or failure (false)
 */
dw.crypto.Signature.prototype.verifyBytesSignature = function(signature, contentToVerify, certificate, digestAlgorithm) {};

/**
 * Verifies a signature supplied as bytes
 * @memberOf dw.crypto.Signature
 * @param {dw.util.Bytes} signature - signature to check as bytes
 * @param {dw.util.Bytes} contentToVerify - as bytes
 * @param {String} publicKey - base64 encoded public key
 * @param {String} digestAlgorithm - must be one of the currently supported ones
 * @return {Boolean} a boolean indicating success (true) or failure (false)
 */
dw.crypto.Signature.prototype.verifyBytesSignature = function(signature, contentToVerify, publicKey, digestAlgorithm) {};

/**
 * Verifies a signature supplied as string
 * @memberOf dw.crypto.Signature
 * @param {String} signature - base64 encoded signature
 * @param {String} contentToVerify - base64 encoded content to verify
 * @param {dw.crypto.CertificateRef} certificate - a reference to a trusted certificate entry in the keystore
 * @param {String} digestAlgorithm - must be one of the currently supported ones
 * @return {Boolean} a boolean indicating success (true) or failure (false)
 */
dw.crypto.Signature.prototype.verifySignature = function(signature, contentToVerify, certificate, digestAlgorithm) {};

/**
 * Verifies a signature supplied as string
 * @memberOf dw.crypto.Signature
 * @param {String} signature - base64 encoded signature
 * @param {String} contentToVerify - base64 encoded content to verify
 * @param {String} publicKey - base64 encoded public key
 * @param {String} digestAlgorithm - must be one of the currently supported ones
 * @return {Boolean} a boolean indicating success (true) or failure (false)
 */
dw.crypto.Signature.prototype.verifySignature = function(signature, contentToVerify, publicKey, digestAlgorithm) {};

/**
 * Represents a set of addresses associated with a specific customer.
 The AddressBook object gets its data from the Profile object for the customer.
 When scripting, this class allows AddressBook to be treated as a separate object
 from the Profile. However, data is only stored in the platform in the Profile object
 and there is no separate AddressBook object. For this reason, the AddressBook ID is
 always the customer profile ID.
 <p/>
 <b>Note:</b> this class allows access to sensitive personal and private information.
 Pay attention to appropriate legal and regulatory requirements when developing.
 * @class
 * @extends Object
 */
dw.customer.AddressBook = function() {};
dw.customer.AddressBook.prototype = new Object();

/**
 * Creates a new, empty address object with the specified name.
 * @memberOf dw.customer.AddressBook
 * @param {String} name - the ID of the address to create, must not be null.
 * @return {dw.customer.CustomerAddress} the new address object or null if an address with the given name          already exists in the address book.
 * @exception NullArgumentException If passed 'name' is null.
 * @exception IllegalArgumentException If passed 'name' is not null, but an
                empty string.
 */
dw.customer.AddressBook.prototype.createAddress = function(name) {};

/**
 * Returns the address with the given name from the address book. The name
 is a unique identifier of the address within the address book.
 * @memberOf dw.customer.AddressBook
 * @param {String} id - An address ID, must not be null.
 * @return {dw.customer.CustomerAddress} The Address object or null if the address does not exist.
 * @exception NullArgumentException If passed 'id' is null.
 * @exception IllegalArgumentException If passed 'id' is not null, but an
                empty string.
 */
dw.customer.AddressBook.prototype.getAddress = function(id) {};

/**
 * Returns a sorted list of addresses in the address book.  The addresses
 are sorted so that the preferred address is always sorted first.  The
 remaining addresses are sorted alphabetically by ID.
 * @memberOf dw.customer.AddressBook
 * @return {dw.util.List} Sorted List of customer addresses in the address book.
 */
dw.customer.AddressBook.prototype.getAddresses = function() {};

/**
 * Returns the address that has been defined as the customer's preferred
 address.
 * @memberOf dw.customer.AddressBook
 * @return {dw.customer.CustomerAddress} the default CustomerAddress object, or null if there is no          preferred address.
 */
dw.customer.AddressBook.prototype.getPreferredAddress = function() {};

/**
 * Removes the specified address from the address book. Because an address
 can be associated with a product list, you may want to verify if the
 address is being used by a product list. See ProductListMgr.findAddress().
 * @memberOf dw.customer.AddressBook
 * @param {dw.customer.CustomerAddress} address - the address to remove, must not be null.
 */
dw.customer.AddressBook.prototype.removeAddress = function(address) {};

/**
 * Sets the specified address as the customer's preferred address. If null
 is passed, and there is an existing preferred address, then the address
 book will have no preferred address.
 * @memberOf dw.customer.AddressBook
 * @param {dw.customer.CustomerAddress} anAddress - the address to be set as preferred, or null if the goal             is to unset the existing preferred address.
 */
dw.customer.AddressBook.prototype.setPreferredAddress = function(anAddress) {};

/**
 * Provides helper methods for handling agent user functionality (login and logout)
 Pay attention to appropriate legal and regulatory requirements related to this functionality.
 * @class
 * @extends Object
 */
dw.customer.AgentUserMgr = function() {};
dw.customer.AgentUserMgr.prototype = new Object();

/**
 * Logs in an agent user (which for example is authorized to login on-behalf of a customer for
 instance to place an order). The login is only allowed during a secure protocol
 request (https) and only in the storefront context. The user must have the permission 'Login_Agent'.

 When the login is successful, a new session will be created. Any objects that need
 to be preserved in the session need to bet set on the session afterwards.

 A Status object is returned which signals whether the login was successful or not.
 In case of a login failure the status object contains the reason for this.
 See <a href="class_dw_customer_AgentUserStatusCodes.html">AgentUserStatusCodes</a> for more information.
 * @memberOf dw.customer.AgentUserMgr
 * @param {String} login - the login name for the agent user.
 * @param {String} password - the password for the agent user.
 * @return {dw.system.Status} the login status (OK if successful, error code otherwise).
 * @static
 */
dw.customer.AgentUserMgr.loginAgentUser = function(login, password) {};

/**
 * This method logs the specified customer into the current session if the
 current agent user has the functional permission 'Login_On_Behalf' in the
 current site.

 The dwcustomer cookie will not be set.
 The login is only allowed during a secure protocol request (https).
 A Status object is returned indicating whether the login was successful or not (and indicating the
 failure reason). See <a href="class_dw_customer_AgentUserStatusCodes.html">AgentUserStatusCodes</a> for more information.
 Error conditions include:
 <ul>
   <li>if the method is not called in the storefront context</li>
   <li>if the given customer is not a registered customer (anonymous)</li>
   <li>if the given customer is not registered for the current site</li>
   <li>if the given customer is disabled</li>
   <li>if there is no agent user at the current session</li>
   <li>if the agent user is not logged in</li>
   <li>if the agent user has not the functional permission 'Login_On_Behalf'</li>
 </ul>
 * @memberOf dw.customer.AgentUserMgr
 * @param {dw.customer.Customer} customer - the customer, which should be logged in on behalf of an user agent.
 * @return {dw.system.Status} the login status (OK if successful, error code otherwise).
 * @static
 */
dw.customer.AgentUserMgr.loginOnBehalfOfCustomer = function(customer) {};

/**
 * Performs a logout of the agent user and the current customer which are attached to the current session.
 The logout is only allowed during a secure protocol request (https) and only in the storefront context.
 * @memberOf dw.customer.AgentUserMgr
 * @return {dw.system.Status} the logout status (OK if successful, error code otherwise).
 * @static
 */
dw.customer.AgentUserMgr.logoutAgentUser = function() {};

/**
 *
 * @class
 * @extends Object
 */
dw.customer.AgentUserStatusCodes = function() {};
dw.customer.AgentUserStatusCodes.prototype = new Object();

/**
 * Indicates that the agent user is not available.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.AGENT_USER_NOT_AVAILABLE = '';

/**
 * Indicates that the agent user is not logged in.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.AGENT_USER_NOT_LOGGED_IN = '';

/**
 * Indicates that the given agent user login or password was wrong.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.CREDENTIALS_INVALID = '';

/**
 * Indicates that the customer is disabled.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.CUSTOMER_DISABLED = '';

/**
 * Indicates that the customer is either not registered or not registered with the current site.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.CUSTOMER_UNREGISTERED = '';

/**
 * Indicates that the current connection is not secure (HTTP instead of HTTPS)
 and the server is configured to require a secure connection.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.INSECURE_CONNECTION = '';

/**
 * Indicates that the given agent user does not have the permission
 'Login_Agent' which is required to login to the storefront as an agent
 user.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.INSUFFICIENT_PERMISSION = '';

/**
 * Indicates that the agent user login was successful.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.LOGIN_SUCCESSFUL = '';

/**
 * Indicates that the current context is not a storefront request.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.NO_STOREFRONT = '';

/**
 * Indicates that the given agent user password has expired and needs to be
 changed in the Business Manager.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.PASSWORD_EXPIRED = '';

/**
 * Indicates that the agent user account has been disabled in the Business
 Manager.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.USER_DISABLED = '';

/**
 * Indicates that the agent user account is locked, because the maximum
 number of failed login attempts was exceeded.
 * @type String
 * @memberOf dw.customer.AgentUserStatusCodes
 * @static
 * @const
 */
dw.customer.AgentUserStatusCodes.USER_LOCKED = '';

/**
 * Represents the credentials of a customer.

 Since 13.6 it is possible to have customers who are not authenticated through a
 login and password but through an external authentication provider via the OAuth2 protocol.

 In such cases, the AuthenticationProviderID will point to an OAuth provider configured in the system
 and the ExternalID will be the unique identifier of the customer on the Authentication Provider's system.

 For example, if an authentication provider with ID "Google123" is configured pointing to Google
 and the customer has a logged in into Google in the past and has created a profile there, Google
 assigns a unique number identifier to that customer. If the storefront is configured to allow
 authentication through Google and a new customer logs into the storefront using Google,
 the AuthenticationProviderID property of his Credentials will contain "Google123" and
 the ExternalID property will contain whatever unique identifier Google has assigned to him.
 In such cases the password-related properties of the Credentials will be empty.
 <p/>
 <b>Note:</b> this class handles sensitive security-related data.
 Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 * @class
 * @extends Object
 */
dw.customer.Credentials = function() {};
dw.customer.Credentials.prototype = new Object();

/**
 * Returns the authentication provider ID.
 * @memberOf dw.customer.Credentials
 * @return {String} the authentication provider ID.
 */
dw.customer.Credentials.prototype.getAuthenticationProviderID = function() {};

/**
 * Identifies if this customer is enabled and can log in - same as isEnabled().
 * @memberOf dw.customer.Credentials
 * @return {Boolean} true if the customer is enabled and can log in, false otherwise.
 */
dw.customer.Credentials.prototype.getEnabledFlag = function() {};

/**
 * Returns the external ID of the customer.
 * @memberOf dw.customer.Credentials
 * @return {String} the external ID of the customer.
 */
dw.customer.Credentials.prototype.getExternalID = function() {};

/**
 * Returns the login of the user. It must be unique.
 * @memberOf dw.customer.Credentials
 * @return {String} the login of the user.
 */
dw.customer.Credentials.prototype.getLogin = function() {};

/**
 * Returns the answer to the password question for the customer. The answer is used
 with the password question to confirm the identity of a customer when
 they are trying to fetch their password.
 * @memberOf dw.customer.Credentials
 * @return {String} the answer to the password question for the customer.
 */
dw.customer.Credentials.prototype.getPasswordAnswer = function() {};

/**
 * Returns the password question for the customer. The password question is
 used with the password answer to confirm the identity of a customer when
 they are trying to fetch their password.
 * @memberOf dw.customer.Credentials
 * @return {String} the password question for the customer.
 */
dw.customer.Credentials.prototype.getPasswordQuestion = function() {};

/**
 * Returns the number of consecutive failed logins after which this customer
 will be temporarily locked out and prevented from logging in to the
 current site. This value is based on the number of previous invalid
 logins for this customer and customer site preferences defining the
 limits.

 If this customer is already locked out, this method will always return 0.
 If customer locking is disabled altogether, or if the system cannot
 determine the number of failed login attempts for this customer, then
 this method will return a negative number.
 * @memberOf dw.customer.Credentials
 * @return {Number} The number of consecutive failed logins after which this customer          will be locked out.
 */
dw.customer.Credentials.prototype.getRemainingLoginAttempts = function() {};

/**
 * Identifies if this customer is enabled and can log in.
 * @memberOf dw.customer.Credentials
 * @return {Boolean} true if the customer is enabled and can log in, false otherwise.
 */
dw.customer.Credentials.prototype.isEnabled = function() {};

/**
 * Identifies if this customer is temporarily locked out because of invalid
 login attempts.  If customer locking is not enabled, this method always
 returns false.
 * @memberOf dw.customer.Credentials
 * @return {Boolean} true if the customer is locked, false otherwise.
 */
dw.customer.Credentials.prototype.isLocked = function() {};

/**
 * Sets the authentication provider ID corresponding to an OAuth provider configured in the system.
 * @memberOf dw.customer.Credentials
 * @param {String} authenticationProviderID - the authentication Provider ID to set.
 */
dw.customer.Credentials.prototype.setAuthenticationProviderID = function(authenticationProviderID) {};

/**
 * Sets the enabled status of the customer.
 * @memberOf dw.customer.Credentials
 * @param {Boolean} enabledFlag - controls if a customer is enabled or not.
 */
dw.customer.Credentials.prototype.setEnabledFlag = function(enabledFlag) {};

/**
 * Sets the external ID of the customer at the authentication provider.
 The value is provided by the authentication provider during the
 OAuth authentication and is unique within that provider.
 * @memberOf dw.customer.Credentials
 * @param {String} externalID - the external ID to set.
 */
dw.customer.Credentials.prototype.setExternalID = function(externalID) {};

/**
 * Sets the login value for the customer.

 IMPORTANT: This method should no longer be used for the following
 reasons:

 <ul>
 <li>It changes the login without re-encrypting the password. (The
 customer password is stored internally using a one-way encryption scheme
 which uses the login as one of its inputs. Therefore changing the login
 requires re-encrypting the password.)</li>
 <li>It does not validate the structure of the login to ensure that it
 only uses acceptable characters.</li>
 <li>It does not correctly prevent duplicate logins. If the passed login
 matches a different customer's login exactly, then this method will throw
 an exception. However, it does not prevent the creation of inexact matches,
 where two customers have a login differing only by alphabetic case (e.g.
 "JaneDoe" and "janedoe")</li>
 </ul>
 * @memberOf dw.customer.Credentials
 * @param {String} login - The login value for the customer.
 * @deprecated Use <a href="class_dw_customer_Credentials.html#dw_customer_Credentials_setLogin_String_String_DetailAnchor">Credentials.setLogin(String, String)</a>
 */
dw.customer.Credentials.prototype.setLogin = function(login) {};

/**
 * Sets the login value for the customer, and also re-encrypt the customer
 password based on the new login. Customer login must be a sequence of
 letters, numbers, and the following characters: space, period, ampersand,
 underscore and dash.

 This method fails to set the login and returns false in the following
 cases:

 <ul>
 <li>newLogin is of an invalid form (e.g. contains invalid characters).</li>
 <li>currentPassword is not the customer's correct password.</li>
 <li>newLogin is already in use by another customer (i.e. there is another
 customer in the system with the exact same login name or a name differing
 only by alphabetic case.)</li>
 </ul>

 If newLogin is the same as the existing login, the method does nothing and
 returns true, regardless of whether currentPassword is the correct
 password.
 * @memberOf dw.customer.Credentials
 * @param {String} newLogin - The login value for the customer.
 * @param {String} currentPassword - The customer's current password in plain-text.
 * @return {Boolean} true if setting the login succeeded, false otherwise.
 */
dw.customer.Credentials.prototype.setLogin = function(newLogin, currentPassword) {};

/**
 * Sets the password of an authenticated customer.<br/>

 The method can be called for externally authenticated customers as well but
 these customers will still be externally authenticated so calling the method
 for such customers does not have an immediate practical benefit. If such customers
 are converted back to regularly authenticated (via login and password) the new password
 will be used.<br/><br/>

 Method call will fail under any of these conditions:
 <ul>
  <li>customer is not registered</li>
  <li>customer is not authenticated</li>
  <li>verifyOldPassword=true && oldPassword is empty</li>
  <li>verifyOldPassword=true and oldPassword does not match the existing password</li>
  <li>newPassword is empty</li>
  <li>newPassword does not meet acceptance criteria</li>
 </ul>
 * @memberOf dw.customer.Credentials
 * @param {String} newPassword - the new password
 * @param {String} oldPassword - the old password (optional, only needed if 'verifyOldPassword' is set to 'true'
 * @param {Boolean} verifyOldPassword - whether the oldPassword should be verified
 * @return {dw.system.Status} Status the status of the operation (OK or ERROR). If status is Error, there will be additional information in the Status message
 */
dw.customer.Credentials.prototype.setPassword = function(newPassword, oldPassword, verifyOldPassword) {};

/**
 * Sets the answer to the password question for the customer.
 * @memberOf dw.customer.Credentials
 * @param {String} answer - the answer to the password question.
 */
dw.customer.Credentials.prototype.setPasswordAnswer = function(answer) {};

/**
 * Sets the password question for the customer.
 * @memberOf dw.customer.Credentials
 * @param {String} question - the password question.
 */
dw.customer.Credentials.prototype.setPasswordQuestion = function(question) {};

/**
 * Represents a customer.
 * @class
 * @extends Object
 */
dw.customer.Customer = function() {};
dw.customer.Customer.prototype = new Object();

/**
 * Returns the active data for this customer.
 * @memberOf dw.customer.Customer
 * @return {dw.customer.CustomerActiveData} the active data for this customer.
 */
dw.customer.Customer.prototype.getActiveData = function() {};

/**
 * Returns the address book for the profile of this customer,
 or <code>null</code> if this customer has no profile, such as for an
 anonymous customer.
 * @memberOf dw.customer.Customer
 * @return {dw.customer.AddressBook}
 */
dw.customer.Customer.prototype.getAddressBook = function() {};

/**
 * Returns the customer groups this customer is member of.
 <ul>
 <li>Result contains static customer groups in storefront and job session</li>
 <li>Result contains dynamic customer groups in storefront  and job session.
 Dynamic customer groups referring session or request data are not available
 when processing the customer in a job session.
 </li>
 <li>Result contains system groups 'Everyone', 'Unregistered', 'Registered' for all customers in storefront and job sessions</li>
 </ul>
 * @memberOf dw.customer.Customer
 * @return {dw.util.Collection} Collection of customer groups of this customer
 */
dw.customer.Customer.prototype.getCustomerGroups = function() {};

/**
 * Returns the unique, system generated ID of the customer.
 * @memberOf dw.customer.Customer
 * @return {String} the ID of the customer.
 */
dw.customer.Customer.prototype.getID = function() {};

/**
 * Returns the note for this customer, or <code>null</code> if this customer has no note, such as for an anonymous
 customer or when note has 0 length.
 * @memberOf dw.customer.Customer
 * @return {String} the note for this customer.
 */
dw.customer.Customer.prototype.getNote = function() {};

/**
 * Returns the customer order history.
 * @memberOf dw.customer.Customer
 * @return {dw.customer.OrderHistory} the customer order history.
 */
dw.customer.Customer.prototype.getOrderHistory = function() {};

/**
 * Returns the product lists of the specified type.
 * @memberOf dw.customer.Customer
 * @param {Number} type - the type of product lists to return.
 * @return {dw.util.Collection} the product lists of the specified type.
 * @see <a href="class_dw_customer_ProductList.html">ProductList</a>
 */
dw.customer.Customer.prototype.getProductLists = function(type) {};

/**
 * Returns the customer profile.
 * @memberOf dw.customer.Customer
 * @return {dw.customer.Profile} the customer profile.
 */
dw.customer.Customer.prototype.getProfile = function() {};

/**
 * Identifies if the customer is anonymous. An anonymous
 customer is the opposite of a registered customer.
 * @memberOf dw.customer.Customer
 * @return {Boolean} true if the customer is anonymous, false otherwise.  <p/>  <b>Note:</b> this method handles sensitive security-related data.  Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 */
dw.customer.Customer.prototype.isAnonymous = function() {};

/**
 * Identifies if the customer is authenticated. This method checks whether
 this customer is the customer associated with the session and than checks
 whether the session in an authenticated state.

 Note: The pipeline debugger will always show 'false' for this value
 regardless of whether the customer is authenticated or not.
 * @memberOf dw.customer.Customer
 * @return {Boolean} true if the customer is authenticated, false otherwise.
 */
dw.customer.Customer.prototype.isAuthenticated = function() {};

/**
 * Identifies if the customer is externally authenticated. An externally
 authenticated customer does not have the password stored in our system
 but logs in through an external OAuth provider (Google, Facebook, LinkedIn, etc.)
 * @memberOf dw.customer.Customer
 * @return {Boolean} true if the customer is externally authenticated, false otherwise.  <p/>  <b>Note:</b> this method handles sensitive security-related data.  Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 */
dw.customer.Customer.prototype.isExternallyAuthenticated = function() {};

/**
 * Returns true if there exist <a href="class_dw_customer_CustomerGroup.html">CustomerGroup</a> for all of the given IDs and the customer is member of at least one of that groups.
 * @memberOf dw.customer.Customer
 * @param {String[]} groupIDs - A list of unique semantic customer group IDs.
 * @return {Boolean} True if customer groups exist for the given IDs and the customer is member of at least one of that existing groups.  False if none of customer groups exist or if the customer is not a member of any of that existing groups.
 * @varArgs
 */
dw.customer.Customer.prototype.isMemberOfAnyCustomerGroup = function(groupIDs) {};

/**
 * Returns true if the customer is member of the specified
 <a href="class_dw_customer_CustomerGroup.html">CustomerGroup</a>.
 * @memberOf dw.customer.Customer
 * @param {dw.customer.CustomerGroup} group - Customer group
 * @return {Boolean} True if customer is member of the group, otherwise false.
 */
dw.customer.Customer.prototype.isMemberOfCustomerGroup = function(group) {};

/**
 * Returns true if there is a <a href="class_dw_customer_CustomerGroup.html">CustomerGroup</a> with such an ID and the customer is member of that group.
 * @memberOf dw.customer.Customer
 * @param {String} groupID - The unique semantic customer group ID.
 * @return {Boolean} True if a customer group with such an ID exist and the customer is member of that group.  False if no such customer group exist or, if the group exist, the customer is not member of that group.
 */
dw.customer.Customer.prototype.isMemberOfCustomerGroup = function(groupID) {};

/**
 * Returns true if there exist <a href="class_dw_customer_CustomerGroup.html">CustomerGroup</a> for all of the given IDs and the customer is member of all that groups.
 * @memberOf dw.customer.Customer
 * @param {String[]} groupIDs - A list of unique semantic customer group IDs.
 * @return {Boolean} True if customer groups exist for all of the given IDs and the customer is member of all that groups.  False if there is at least one ID for which no customer group exist or, if all groups exist, the customer is not member of all that groups.
 * @varArgs
 */
dw.customer.Customer.prototype.isMemberOfCustomerGroups = function(groupIDs) {};

/**
 * Identifies if the customer is registered. A registered customer
 may or may not be authenticated. This method checks whether
 the user has a profile.
 * @memberOf dw.customer.Customer
 * @return {Boolean} true if the customer is registered, false otherwise.
 */
dw.customer.Customer.prototype.isRegistered = function() {};

/**
 * Sets the note for this customer. This is a no-op for an anonymous customer.
 * @memberOf dw.customer.Customer
 * @param {String} aValue - the value of the note
 */
dw.customer.Customer.prototype.setNote = function(aValue) {};

/**
 * Represents the active data for a <a href="class_dw_customer_Customer.html">Customer</a> in the Demandware framework.
 <p/>
 <b>Note:</b> this class allows access to sensitive personal and private information.
 Pay attention to appropriate legal and regulatory requirements when developing.
 * @class
 * @extends dw.object.ActiveData
 */
dw.customer.CustomerActiveData = function() {};
dw.customer.CustomerActiveData.prototype = new dw.object.ActiveData();

/**
 * Returns the average order value of the customer, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the average order size.
 */
dw.customer.CustomerActiveData.prototype.getAvgOrderValue = function() {};

/**
 * Returns the discount value resulting from coupons, that has been applied
 to orders of the customer, or <code>null</code> if none has been set or
 the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the discount value resulting from coupons.
 */
dw.customer.CustomerActiveData.prototype.getDiscountValueWithCoupon = function() {};

/**
 * Returns the discount value resulting from promotions other than coupons,
 that has been applied to orders of the customer, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the discount value resulting from promotions other than coupons.
 */
dw.customer.CustomerActiveData.prototype.getDiscountValueWithoutCoupon = function() {};

/**
 * Returns the number of orders for the Customer that contained at least
 one product unit marked as a gift, or <code>null</code> if none has been
 set or the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the number of gift orders.
 */
dw.customer.CustomerActiveData.prototype.getGiftOrders = function() {};

/**
 * Returns the number of product units in orders for the customer
 that were marked as a gift, or <code>null</code> if none has been set
 or the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the number of gift product units.
 */
dw.customer.CustomerActiveData.prototype.getGiftUnits = function() {};

/**
 * Returns the date of the last order for the customer, or <code>null</code>
 if there are no orders for the customer.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Date} the date of the last order for the customer.
 */
dw.customer.CustomerActiveData.prototype.getLastOrderDate = function() {};

/**
 * Returns the orders of the customer, or <code>null</code> if none
 has been set or the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the orders.
 */
dw.customer.CustomerActiveData.prototype.getOrders = function() {};

/**
 * Returns the lifetime order value of the customer, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the lifetime value.
 */
dw.customer.CustomerActiveData.prototype.getOrderValue = function() {};

/**
 * Returns the order value of the customer, over the most recent 30 days,
 or <code>null</code> if none has been set or the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the value over the last 30 days.
 */
dw.customer.CustomerActiveData.prototype.getOrderValueMonth = function() {};

/**
 * Returns an array containing the master product SKUs of variation products
 in orders for the customer, or an empty collection if no SKUs have been
 set or the collection of SKUs is no longer valid. There is no specific
 limit on the number of SKUs that will be returned in the collection, but
 there is also no guarantee that it will contain the SKUs for all products
 ordered by the customer.
 * @memberOf dw.customer.CustomerActiveData
 * @return {String[]} a collection containing the master product SKUs of variation          products that were ordered.
 */
dw.customer.CustomerActiveData.prototype.getProductMastersOrdered = function() {};

/**
 * Returns an array containing the SKUs of products in baskets abandoned
 by the customer in the last 30 days, or an empty collection if no SKUs
 have been set or the collection is no longer valid.  There is no specific
 limit on the number of SKUs that will be returned in the collection, but
 there is also no guarantee that it will contain the SKUs for all products
 in baskets abandoned by the customer.
 * @memberOf dw.customer.CustomerActiveData
 * @return {String[]} a collection containing the SKUs of products that were abandoned.
 */
dw.customer.CustomerActiveData.prototype.getProductsAbandonedMonth = function() {};

/**
 * Returns an array containing the SKUs of products in orders
 for the customer, or an empty collection if no SKUs have been set or the
 collection of SKUs is no longer valid.  There is no specific limit on the
 number of SKUs that will be returned in the collection, but there is also
 no guarantee that it will contain the SKUs for all products ordered by
 the customer.
 * @memberOf dw.customer.CustomerActiveData
 * @return {String[]} a collection containing the SKUs of products that were ordered.
 */
dw.customer.CustomerActiveData.prototype.getProductsOrdered = function() {};

/**
 * Returns an array containing the SKUs of products viewed by the
 customer in the last 30 days, or an empty collection if no SKUs have been
 set or the collection is no longer valid.  There is no specific limit on
 the number of SKUs that will be returned in the collection, but there is
 also no guarantee that it will contain the SKUs for all products viewed
 by the customer.
 * @memberOf dw.customer.CustomerActiveData
 * @return {String[]} a collection containing the SKUs of products that were ordered.
 */
dw.customer.CustomerActiveData.prototype.getProductsViewedMonth = function() {};

/**
 * Returns the number of returns of the customer, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the returns.
 */
dw.customer.CustomerActiveData.prototype.getReturns = function() {};

/**
 * Returns the returned revenue of the customer, or <code>null</code>
 if none has been set or the value is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the returned revenue.
 */
dw.customer.CustomerActiveData.prototype.getReturnValue = function() {};

/**
 * Returns the number of orders for the customer where a source code was
 in effect, or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the number of orders with source codes in effect.
 */
dw.customer.CustomerActiveData.prototype.getSourceCodeOrders = function() {};

/**
 * Returns an array containing the IDs of up to the top 20 categories for
 customer orders, or an empty list if no categories have been set or the
 list of categories is no longer valid. The top category is the one for
 which the most orders for the customer contained at least one product
 found in that category.
 * @memberOf dw.customer.CustomerActiveData
 * @return {String[]} a list containing the top 20 categories.
 */
dw.customer.CustomerActiveData.prototype.getTopCategoriesOrdered = function() {};

/**
 * Returns the visits of the customer, over the most recent 30 days,
 or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the visits over the last 30 days.
 */
dw.customer.CustomerActiveData.prototype.getVisitsMonth = function() {};

/**
 * Returns the visits of the customer, over the most recent 7 days,
 or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the visits over the last 7 days.
 */
dw.customer.CustomerActiveData.prototype.getVisitsWeek = function() {};

/**
 * Returns the visits of the customer, over the most recent 365 days,
 or <code>null</code> if none has been set or the value
 is no longer valid.
 * @memberOf dw.customer.CustomerActiveData
 * @return {Number} the visits over the last 365 days.
 */
dw.customer.CustomerActiveData.prototype.getVisitsYear = function() {};

/**
 * The Address class represents a customer's address.
 <p/>
 <b>Note:</b> this class allows access to sensitive personal and private information.
 Pay attention to appropriate legal and regulatory requirements.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.customer.CustomerAddress = function() {};
dw.customer.CustomerAddress.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the customer's first address.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the first address value.
 */
dw.customer.CustomerAddress.prototype.getAddress1 = function() {};

/**
 * Returns the customer's second address value.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the value of the second address.
 */
dw.customer.CustomerAddress.prototype.getAddress2 = function() {};

/**
 * Returns the customer's city.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the customer's city.
 */
dw.customer.CustomerAddress.prototype.getCity = function() {};

/**
 * Returns the customer's company name.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the company name.
 */
dw.customer.CustomerAddress.prototype.getCompanyName = function() {};

/**
 * Returns the customer's country code. Demandware supports two-character
 country codes per ISO 3166-1 alpha-2. See
 <a href="http://www.iso.org/iso/country_codes/iso_3166-faqs/iso_3166_faqs_general.htm" target="_blank">http://www.iso.org/iso/country_codes/iso_3166-faqs/iso_3166_faqs_general.htm</a>
 for additional information.
 * @memberOf dw.customer.CustomerAddress
 * @return {dw.value.EnumValue} the two-digit country code.
 */
dw.customer.CustomerAddress.prototype.getCountryCode = function() {};

/**
 * Returns the customer's first name.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the customer first name.
 */
dw.customer.CustomerAddress.prototype.getFirstName = function() {};

/**
 * Returns a concatenation of the customer's first, middle,
 and last names and its suffix.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} a concatenation of the customer's first, middle,  and last names and its suffix.
 */
dw.customer.CustomerAddress.prototype.getFullName = function() {};

/**
 * Returns the name of the address.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the address name.
 */
dw.customer.CustomerAddress.prototype.getID = function() {};

/**
 * Returns the customer's job title.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the job title.
 */
dw.customer.CustomerAddress.prototype.getJobTitle = function() {};

/**
 * Returns the customer's last name.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the last name.
 */
dw.customer.CustomerAddress.prototype.getLastName = function() {};

/**
 * Returns the customer's phone number.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the phone number.
 */
dw.customer.CustomerAddress.prototype.getPhone = function() {};

/**
 * Returns the customer's postal code.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the postal code.
 */
dw.customer.CustomerAddress.prototype.getPostalCode = function() {};

/**
 * Returns the customer's post box.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the post box.
 */
dw.customer.CustomerAddress.prototype.getPostBox = function() {};

/**
 * Returns the customer's salutation.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the salutation.
 */
dw.customer.CustomerAddress.prototype.getSalutation = function() {};

/**
 * Returns the customer's second name.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the second name.
 */
dw.customer.CustomerAddress.prototype.getSecondName = function() {};

/**
 * Returns the customer's state.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the state.
 */
dw.customer.CustomerAddress.prototype.getStateCode = function() {};

/**
 * Returns the customer's suffix.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the suffix.
 */
dw.customer.CustomerAddress.prototype.getSuffix = function() {};

/**
 * Returns the customer's suite.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the suite.
 */
dw.customer.CustomerAddress.prototype.getSuite = function() {};

/**
 * Returns the customer's title.
 * @memberOf dw.customer.CustomerAddress
 * @return {String} the title.
 */
dw.customer.CustomerAddress.prototype.getTitle = function() {};

/**
 * Returns true if the specified address is equivalent to
 this address. An equivalent address is an address whose
 core attributes contain the same values. The core attributes
 are:
 <ul>
 <li>address1</li>
 <li>address2</li>
 <li>city</li>
 <li>companyName</li>
 <li>countryCode</li>
 <li>firstName</li>
 <li>lastName</li>
 <li>postalCode</li>
 <li>postBox</li>
 <li>stateCode</li>
 </ul>
 * @memberOf dw.customer.CustomerAddress
 * @param {Object} address - the address to test.
 * @return {Boolean} true if the specified address is equivalent to  this address, false otherwise.
 */
dw.customer.CustomerAddress.prototype.isEquivalentAddress = function(address) {};

/**
 * Sets the value of the customer's first address.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} value - The value to set.
 */
dw.customer.CustomerAddress.prototype.setAddress1 = function(value) {};

/**
 * Sets the customer's second address value.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} value - The value to set.
 */
dw.customer.CustomerAddress.prototype.setAddress2 = function(value) {};

/**
 * Sets the customer's city.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} city - the customer's city to set.
 */
dw.customer.CustomerAddress.prototype.setCity = function(city) {};

/**
 * Sets the customer's company name.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} companyName - the name of the company.
 */
dw.customer.CustomerAddress.prototype.setCompanyName = function(companyName) {};

/**
 * Sets the customer's country code. Demandware supports two-character
 country codes per ISO 3166-1 alpha-2. See
 <a href="http://www.iso.org/iso/country_codes/iso_3166-faqs/iso_3166_faqs_general.htm" target="_blank">http://www.iso.org/iso/country_codes/iso_3166-faqs/iso_3166_faqs_general.htm</a>
 for additional information.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} countryCode - the country code, must be no more than 2 characters or                     will be truncated.
 */
dw.customer.CustomerAddress.prototype.setCountryCode = function(countryCode) {};

/**
 * Sets the customer's first name.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} firstName - the customer's first  name to set.
 */
dw.customer.CustomerAddress.prototype.setFirstName = function(firstName) {};

/**
 * Sets the address name.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} value - the name to use.
 */
dw.customer.CustomerAddress.prototype.setID = function(value) {};

/**
 * Sets the customer's job title.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} jobTitle - The jobTitle to set.
 */
dw.customer.CustomerAddress.prototype.setJobTitle = function(jobTitle) {};

/**
 * Sets the customer's last name.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} lastName - The last name to set.
 */
dw.customer.CustomerAddress.prototype.setLastName = function(lastName) {};

/**
 * Sets the customer's phone number. The length is restricted to 32 characters.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} phoneNumber - The phone number to set.
 */
dw.customer.CustomerAddress.prototype.setPhone = function(phoneNumber) {};

/**
 * Sets the customer's postal code.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} postalCode - The postal code to set.
 */
dw.customer.CustomerAddress.prototype.setPostalCode = function(postalCode) {};

/**
 * Sets the customer's post box.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} postBox - The post box to set.
 */
dw.customer.CustomerAddress.prototype.setPostBox = function(postBox) {};

/**
 * Sets the customer's salutation.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} value - the salutation.
 * @deprecated Use <a href="class_dw_customer_CustomerAddress.html#dw_customer_CustomerAddress_setSalutation_String_DetailAnchor">setSalutation(String)</a>
 */
dw.customer.CustomerAddress.prototype.setSaluation = function(value) {};

/**
 * Sets the customer's salutation.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} value - the salutation.
 */
dw.customer.CustomerAddress.prototype.setSalutation = function(value) {};

/**
 * Sets the customer's second name.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} secondName - The second name to set.
 */
dw.customer.CustomerAddress.prototype.setSecondName = function(secondName) {};

/**
 * Sets the customer's state.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} state - The state to set.
 */
dw.customer.CustomerAddress.prototype.setStateCode = function(state) {};

/**
 * Sets the customer's suffix.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} suffix - The suffix to set.
 */
dw.customer.CustomerAddress.prototype.setSuffix = function(suffix) {};

/**
 * Sets the customer's suite. The length is restricted to 32 characters.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} value - the suite to set.
 */
dw.customer.CustomerAddress.prototype.setSuite = function(value) {};

/**
 * Sets the customer's title.
 * @memberOf dw.customer.CustomerAddress
 * @param {String} title - The title to set.
 */
dw.customer.CustomerAddress.prototype.setTitle = function(title) {};

/**
 * CustomerGroups provide a means to segment customers by various criteria. A
 merchant can then provide different site experiences (e.g. promotions,
 prices, sorting rules) to each customer segment. Customer groups can consist
 of either an explicit list of customers or a business rule that dynamically
 determines whether a customer is a member. The former type is called
 "explicit" and the latter type is called "dynamic".

 <ul>
 <li><b>Explicit customer group:</b> Consists of an explicit list of
 customers. Only registered customers can be member of such a group.
 isRuleBased==false.</li>
 <li><b>Dynamic customer group:</b> Memberships are evaluated by a business
 rule that is attached to the customer group. Registered as well as anonymous
 customers can be member of such a group. isRuleBased==true.</li>
 </ul>
 <p/>
 <b>Note:</b> this class might allow access to sensitive personal and private
 information, depending on how you segment your customers and the names given to
 your custoemer groups. Pay attention to appropriate legal and regulatory requirements
 when developing with this data.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.customer.CustomerGroup = function() {};
dw.customer.CustomerGroup.prototype = new dw.object.ExtensibleObject();

/**
 * Assigns the specified customer to this group. <br/>
 The customer must be registered and the group must not be rule-based.
 * @memberOf dw.customer.CustomerGroup
 * @param {dw.customer.Customer} customer - Registered customer, must not be null.
 */
dw.customer.CustomerGroup.prototype.assignCustomer = function(customer) {};

/**
 * Gets the value of the description of the customer group.
 * @memberOf dw.customer.CustomerGroup
 * @return {String} the description of the customer group
 */
dw.customer.CustomerGroup.prototype.getDescription = function() {};

/**
 * Returns the unique ID of the customer group.
 * @memberOf dw.customer.CustomerGroup
 * @return {String} The unique semantic ID of the customer group.
 */
dw.customer.CustomerGroup.prototype.getID = function() {};

/**
 * Returns true if the group determines the membership of customers
 based on rules. Returns false if the group provides explicit assignement
 of customers.
 * @memberOf dw.customer.CustomerGroup
 * @return {Boolean} <code>True</code>, if the customer group is rule based.
 */
dw.customer.CustomerGroup.prototype.isRuleBased = function() {};

/**
 * Unassigns the specified customer from this group. <br/>
 The customer must be registered and the group must not be rule-based.
 * @memberOf dw.customer.CustomerGroup
 * @param {dw.customer.Customer} customer - Registered customer, must not be null.
 */
dw.customer.CustomerGroup.prototype.unassignCustomer = function(customer) {};

/**
 * Object representing the collection of customers who are registered
 for a given site. In the Demandware model, every site has exactly
 one assigned customer list but multiple sites may share a customer
 list.
 * @class
 * @extends Object
 * @author cmilley
 */
dw.customer.CustomerList = function() {};
dw.customer.CustomerList.prototype = new Object();

/**
 * Get the optional description of the customer list.
 * @memberOf dw.customer.CustomerList
 * @return {String} The optional description of the list.
 */
dw.customer.CustomerList.prototype.getDescription = function() {};

/**
 * Get the ID of the customer list.  For customer lists that were created automatically
 for a given site, this is equal to the ID of the site itself.
 * @memberOf dw.customer.CustomerList
 * @return {String} The ID of the customer list.
 */
dw.customer.CustomerList.prototype.getID = function() {};

/**
 * Provides helper methods for managing customers and customer
 profiles.
 <b>Note:</b> this class allows access to sensitive information through
 operations that retrieve the Profile object.
 Pay attention to appropriate legal and regulatory requirements related to this data.
 * @class
 * @extends Object
 */
dw.customer.CustomerMgr = function() {};
dw.customer.CustomerMgr.prototype = new Object();

/**
 * Creates a new Customer using the supplied login, password. The system automatically assigns a customer number based on
 the customer sequence numbers configured for the site and/or organization.

 <p/>The method throws an exception if any of the following conditions are encountered:
 <ul>
   <li>A Customer with the supplied Login already exists</li>
   <li>The Login is not acceptable.</li>
   <li>The Password is not acceptable.</li>
   <li>The system cannot create the Customer.</li>
 </ul>

 <p/>A valid login name is between 1 and 256 characters in length (not counting leading or trailing whitespace), and may contain only the
 following characters:
 <ul>
   <li>alphanumeric (Unicode letters or decimal digits)</li>
   <li>space</li>
   <li>period</li>
   <li>dash</li>
   <li>underscore</li>
   <li>@</li>
 </ul>

<p/>Note: a storefront can be customized to provide further constraints on characters in a login name, but it cannot remove any constraints described above.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} login - The unique login name associated with the new customer and its profile, must not be null. If login is already in use, an exception will be thrown.
 * @param {String} password - Customer plain customer password, which is encrypted before it is stored at the profile, must not be null.
 * @return {dw.customer.Customer} customer The new customer object.
 * @static
 */
dw.customer.CustomerMgr.createCustomer = function(login, password) {};

/**
 * Creates a new Customer using the supplied login, password, and a customerNo. If the customerNo is not specified,
 the system automatically assigns a customer number based on the customer sequence numbers configured for the site and/or organization.

 <p/>The method throws an exception if any of the following conditions are encountered:
 <ul>
   <li>A Customer with the supplied Login already exists</li>
   <li>A Customer with the explicitly provided or calculated customer number already exists.</li>
   <li>The Login is not acceptable.</li>
   <li>The Password is not acceptable.</li>
   <li>The system cannot create the Customer.</li>
 </ul>

 <p/>A valid login name is between 1 and 256 characters in length (not counting leading or trailing whitespace), and may contain only the
 following characters:
 <ul>
   <li>alphanumeric (Unicode letters or decimal digits)</li>
   <li>space</li>
   <li>period</li>
   <li>dash</li>
   <li>underscore</li>
   <li>@</li>
 </ul>

<p/>Note: a storefront can be customized to provide further constraints on characters in a login name, but it cannot remove any constraints described above.

<p/>A valid CustomerNo is between 1 and 100 characters in length (not counting leading or trailing whitespace). Demandware recommends that a CustomerNo only
contain characters valid for URLs.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} login - The unique login name associated with the new customer and its profile, must not be null. If login is already in use, an exception will be thrown.
 * @param {String} password - Customer plain customer password, which is encrypted before it is stored at the profile, must not be null.
 * @param {String} customerNo - The unique customerNo can be null, the system will then automatically assign a new value. If provided explicitly,  the system will make sure that no other customer uses the same value and will throw an exception otherwise.
 * @return {dw.customer.Customer} customer The new customer object.
 * @static
 */
dw.customer.CustomerMgr.createCustomer = function(login, password, customerNo) {};

/**
 * Given an authentication provider Id and an external Id: creates a Customer record in the system
 * @memberOf dw.customer.CustomerMgr
 * @param {String} authenticationProviderId - the Id of the authentication provider as configured in the Demandware system.
 * @param {String} externalId - the Id of the customer at the authentication provider.  Each authentication provider generates these in a different way, they  are unique within their system
 * @return {dw.customer.Customer} On success: the created customer. On failure - null
 * @static
 */
dw.customer.CustomerMgr.createExternallyAuthenticatedCustomer = function(authenticationProviderId, externalId) {};

/**
 * Returns the meta data for profiles.
 * @memberOf dw.customer.CustomerMgr
 * @return {dw.object.ObjectTypeDefinition} the meta data for profiles.
 * @static
 */
dw.customer.CustomerMgr.describeProfileType = function() {};

/**
 * Returns the customer with the specified customer number. If no customer with this customer number exists, null is returned.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} customerNumber - the customer number associated with the customer, must not be null.
 * @return {dw.customer.Customer} The customer if found, null otherwise
 * @static
 */
dw.customer.CustomerMgr.getCustomerByCustomerNumber = function(customerNumber) {};

/**
 * Returns the customer for the specified login name. If no customer with this login name exists, null is returned.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} login - the unique login name associated with the customer, must not be null.
 * @return {dw.customer.Customer} The customer if found, null otherwise
 * @static
 */
dw.customer.CustomerMgr.getCustomerByLogin = function(login) {};

/**
 * Returns the customer group with the specified ID or null if group
 does not exists.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} id - the customer group identifier.
 * @return {dw.customer.CustomerGroup} Customer group for ID or null
 * @static
 */
dw.customer.CustomerMgr.getCustomerGroup = function(id) {};

/**
 * Returns the customer groups of the current site.
 * @memberOf dw.customer.CustomerMgr
 * @return {dw.util.Collection} Customer groups of current site.
 * @static
 */
dw.customer.CustomerMgr.getCustomerGroups = function() {};

/**
 * Returns the customer list identified by the specified ID.
 Returns null if no customer list with the specified id exists.
 <p/>
 Note: Typically the ID of an automatically created customer
 list is equal to the ID of the site.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} id - The ID of the customer list.
 * @return {dw.customer.CustomerList} The CustomerList, or null if not found.
 * @static
 */
dw.customer.CustomerMgr.getCustomerList = function(id) {};

/**
 * Given an authentication provider Id and external Id returns the Customer Profile
 in our system.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} authenticationProviderId - the Id of the authentication provider as configured in the Demandware system.
 * @param {String} externalId - the Id of the customer at the authentication provider.  Each authentication provider generates these in a different way, they  are unique within their system
 * @return {dw.customer.Profile} The Profile of the customer if found, null otherwise
 * @static
 */
dw.customer.CustomerMgr.getExternallyAuthenticatedCustomerProfile = function(authenticationProviderId, externalId) {};

/**
 * Returns the profile with the specified customer number.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} customerNumber - the customer number of the customer of the to be retrieved profile
 * @return {dw.customer.Profile} Profile for specified customer number
 * @static
 */
dw.customer.CustomerMgr.getProfile = function(customerNumber) {};

/**
 * Returns the number of registered customers in the system. This number can be used for reporting
 purposes.
 * @memberOf dw.customer.CustomerMgr
 * @return {Number} the number of registered customers in the system.
 * @static
 */
dw.customer.CustomerMgr.getRegisteredCustomerCount = function() {};

/**
 * Returns the customer list of the current site.
 * @memberOf dw.customer.CustomerMgr
 * @return {dw.customer.CustomerList} The customer list assigned to the current site.
 * @static
 */
dw.customer.CustomerMgr.getSiteCustomerList = function() {};

/**
 * Checks if the given password matches the password constraints (for example password length) of
 the current site's assigned customerlist.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} password - the to be checked password
 * @return {Boolean} true if the given password matches all required criteria
 * @static
 */
dw.customer.CustomerMgr.isAcceptablePassword = function(password) {};

/**
 * This method authenticates the current session using the supplied login and password. If a different customer is currently authenticated in the session, then this
 customer is "logged out" and her/his privacy and form data are deleted. If the authentication with the given credentials fails, then null is returned and no changes
 to the session are made.

 </p> If the input value "RememberMe" is set to True, this method stores a cookie on the customer's machine which will be used to identify the customer when the next
 session is initiated.  The cookie is set to expire in 180 days (i.e. 6 months). Note that a customer who is remembered is not automatically authenticated and will
 have to explicitly log in to access any personal information.
 * @memberOf dw.customer.CustomerMgr
 * @param {String} login - Login name, must not be null.
 * @param {String} password - Password, must not be null.
 * @param {Boolean} rememberMe - Boolean value indicating if the customer wants to be remembered on the current computer.  If a value of True is supplied a cookie identifying  the customer is stored upon successful login.  If a value of False, or a null value, is supplied, then no cookie is stored and any existing cookie is removed.
 * @return {dw.customer.Customer} Customer authenticated for successfully authenticated customer. Null if the authentication with the given credentials fails.
 * @static
 */
dw.customer.CustomerMgr.loginCustomer = function(login, password, rememberMe) {};

/**
 * Logs in externally authenticated customer if it has already been created in the system and the profile is not disabled or locked
 * @memberOf dw.customer.CustomerMgr
 * @param {String} authenticationProviderId - the Id of the authentication provider as configured in the Demandware system.
 * @param {String} externalId - the Id of the customer at the authentication provider.
 * @param {Boolean} rememberMe - whether to drop the remember me cookie
 * @return {dw.customer.Customer} Customer if found in the system and not disabled or locked.  {@link #getExternallyAuthenticatedCustomerProfile(String, String)}
 * @static
 */
dw.customer.CustomerMgr.loginExternallyAuthenticatedCustomer = function(authenticationProviderId, externalId, rememberMe) {};

/**
 * Logs out the customer currently logged into the storefront. The boolean value "RememberMe" indicates, if the customer would like to be remembered on the current
 browser. If a value of true is supplied, the customer authentication state is set to "not logged in" and additionally the following session data is removed: the customer
 session private data, the form status data, dictionary information of interaction continue nodes, basket reference information, the secure token cookie. If the value is set
 to false or null, the complete session dictionary is cleaned up. The customer and anonymous cookie are removed and a new session cookie is set.
 * @memberOf dw.customer.CustomerMgr
 * @param {Boolean} rememberMe - Boolean value indicating if the customer wants to be remembered on the current browser. If a value of true is supplied, the customer authentication state  is set to "not logged in" and additionally the following session data is removed: the customer session private data, the form status data, dictionary information of interaction  continue nodes, basket reference information, the secure token cookie. If the value is set to false or null, the complete session dictionary is cleaned up. The customer and anonymous  cookie are removed and a new session cookie is set.
 * @return {dw.customer.Customer} the new customer identity after logout. If rememberMe is true, null is returned.
 * @static
 */
dw.customer.CustomerMgr.logoutCustomer = function(rememberMe) {};

/**
 * Executes a user-definable function on a set of customer profiles. This method is intended to be used in batch processes and jobs,
 since it allows efficient processing of large result sets (which might take a while to process).

 First, a search with the given parameters is executed. Then the given function is executed once for each profile of the search result.
 The profile is handed over as the only parameter to this function.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 For a description of this query language, see the <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_queryProfile_String_Object_DetailAnchor">queryProfile(String, Object...)</a> method.

 The callback function will be supplied with a single argument of type 'Profile'. When the callback function defines
 additional arguments, they will be undefined when the function is called. When the callback function doesn't define
 any arguments at all, it will be called anyway (no error will happen, but the function won't get a profile as parameter).

 Error during execution of the callback function will be logged, and execution will continue with the next element from the
 result set.

 This method can be used as in this example (which counts the number of men):

 <pre>
         var count=0;
         function callback(profile: Profile)
         {
             count++;
             dw.system.Logger.debug("customer found: "+profile.customerNo)
         }
        CustomerMgr.processProfiles(callback, "gender=1");
        dw.system.Logger.debug("found "+count+" men in customer list");
     </pre>
 * @memberOf dw.customer.CustomerMgr
 * @param {org.mozilla.javascript.Function} processFunction - the function to execute for each profile
 * @param {String} queryString - the query string to use when searching for a profile.
 * @param {Object[]} args - the query string arguments.
 * @static
 * @varArgs
 */
dw.customer.CustomerMgr.processProfiles = function(processFunction, queryString, args) {};

/**
 * <p/>Searches for a single profile instance.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul>

 <p/>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.


 <p/>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>


 <p/>If there is more than one object matching the specified query criteria, the
 result is not deterministic. In order to retrieve a single object from a sorted result
 set it is recommended to use the following code:
 <code>queryProfiles("", "custom.myAttr asc", null).first()</code>.
 The method <code>first()</code> returns only the next element and closes the
 iterator.

 <b>This method will be deprecated in a future release. We recommend to use methods <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfile_String_Object_DetailAnchor">searchProfile(String, Object...)</a>,
 <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfiles_Map_String_DetailAnchor">searchProfiles(Map, String)</a> and <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfiles_String_String_Object_DetailAnchor">searchProfiles(String, String, Object...)</a>
 to search for customers, and to use method <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_processProfiles_Function_String_Object_DetailAnchor">processProfiles(Function, String, Object...)</a> to search and process customers in jobs.</b>
 * @memberOf dw.customer.CustomerMgr
 * @param {String} queryString - the query string to use when searching for a profile.
 * @param {Object[]} args - the query string arguments.
 * @return {dw.customer.Profile} the profile which was found when executing the <code>queryString</code>.
 * @static
 * @varArgs
 */
dw.customer.CustomerMgr.queryProfile = function(queryString, args) {};

/**
 * <p/>Searches for profile instances.

 <p/>The search can be configured with a map, which key-value pairs are
 converted into a query expression. The key-value pairs are turned into a
 sequence of '=' or 'like' conditions, which are combined with AND
 statements.

 <p/>Example:<br/>
 A map with the key/value pairs: <i>'name'/'tom*', 'age'/66</i>
 will be converted as follows: <code>"name like 'tom*' and age = 66"</code>

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.
 See <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a></p>

 <b>This method will be deprecated in a future release. We recommend to use methods <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfile_String_Object_DetailAnchor">searchProfile(String, Object...)</a>,
 <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfiles_Map_String_DetailAnchor">searchProfiles(Map, String)</a> and <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfiles_String_String_Object_DetailAnchor">searchProfiles(String, String, Object...)</a>
 to search for customers, and to use method <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_processProfiles_Function_String_Object_DetailAnchor">processProfiles(Function, String, Object...)</a> to search and process customers in jobs.</b>
 * @memberOf dw.customer.CustomerMgr
 * @param {dw.util.Map} queryAttributes - key-value pairs that define the query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @static
 */
dw.customer.CustomerMgr.queryProfiles = function(queryAttributes, sortString) {};

/**
 * Searches for profile instances.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 For a description of this query language, see the <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_queryProfile_String_Object_DetailAnchor">queryProfile(String, Object...)</a> method.

 <b>This method will be deprecated in a future release. We recommend to use methods <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfile_String_Object_DetailAnchor">searchProfile(String, Object...)</a>,
 <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfiles_Map_String_DetailAnchor">searchProfiles(Map, String)</a> and <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfiles_String_String_Object_DetailAnchor">searchProfiles(String, String, Object...)</a>
 to search for customers, and to use method <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_processProfiles_Function_String_Object_DetailAnchor">processProfiles(Function, String, Object...)</a> to search and process customers in jobs.</b>
 * @memberOf dw.customer.CustomerMgr
 * @param {String} queryString - the actual query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @param {Object[]} args - optional parameters for the query string.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @static
 * @varArgs
 */
dw.customer.CustomerMgr.queryProfiles = function(queryString, sortString, args) {};

/**
 * Logs out the supplied customer and deletes the customer record. The customer must be a registered customer and the customer must currently be logged in. The customer must be
 logged in for security reasons to ensure that only the customer itself can remove itself from the system. While logout the customers session is reset to an anonymous session and, if present, the "Remember me" cookie of the customer is removed.
 Deleting the customer record includes the customer credentials, profile, address-book with all addresses, customer payment instruments, product lists and memberships in
 customer groups. Orders placed by this customer won't be deleted. If the supplied customer is not a registered customer or is not logged in, the API throws an exception
 * @memberOf dw.customer.CustomerMgr
 * @param {dw.customer.Customer} customer - The customer to remove, must not be null.
 * @static
 */
dw.customer.CustomerMgr.removeCustomer = function(customer) {};

/**
 * <p/>Searches for a single profile instance.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul>

 <p/>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.


 <p/>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>


 <p/>If there is more than one object matching the specified query criteria, the
 result is not deterministic. In order to retrieve a single object from a sorted result
 set it is recommended to use the following code:
 <code>queryProfiles("", "custom.myAttr asc", null).first()</code>.
 The method <code>first()</code> returns only the next element and closes the
 iterator.

 <p/>If the customer search API is configured to use the new Search Service (Beta), the following differences apply:<br/>
 <ul>
     <li>newly created customers might not be found immediately via the search service, and changes to existing
     customers might also not be in effect immediately (there is a slight delay in updating the index)</li>
     <li>wildcards will be filtered from the query (*, %, +) and replaced by spaces</li>
     <li>LIKE and ILIKE queries will be executed as fulltext queries (working on whole words), not as substring searches</li>
     <li>LIKE queries will always be case insensitive</li>
     <li>using logical operators may change the execution of LIKE/ILIKE clauses to exact string comparison, depending on how they are combined</li>
     <li>using logical operators may result in degraded performance, depending on how they are combined</li>
 </ul>
 * @memberOf dw.customer.CustomerMgr
 * @param {String} queryString - the query string to use when searching for a profile.
 * @param {Object[]} args - the query string arguments.
 * @return {dw.customer.Profile} the profile which was found when executing the <code>queryString</code>.
 * @static
 * @varArgs
 */
dw.customer.CustomerMgr.searchProfile = function(queryString, args) {};

/**
 * <p/>Searches for profile instances.

 <p/>The search can be configured with a map, which key-value pairs are
 converted into a query expression. The key-value pairs are turned into a
 sequence of '=' or 'like' conditions, which are combined with AND
 statements.

 <p/>Example:<br/>
 A map with the key/value pairs: <i>'name'/'tom*', 'age'/66</i>
 will be converted as follows: <code>"name like 'tom*' and age = 66"</code>

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>

 <p/>If the customer search API is configured to use the new Search Service (Beta), the following differences apply:<br/>
 <ul>
     <li>newly created customers might not be found immediately via the search service, and changes to existing
     customers might also not be in effect immediately (there is a slight delay in updating the index)</li>
     <li>wildcards will be filtered from the query (*, %, +) and replaced by spaces</li>
     <li>LIKE and ILIKE queries will be executed as fulltext queries (working on whole words), not as substring searches</li>
     <li>LIKE queries will always be case insensitive</li>
     <li>using logical operators may change the execution of LIKE/ILIKE clauses to exact string comparison, depending on how they are combined</li>
     <li>using logical operators may result in degraded performance, depending on how they are combined</li>
     <li>the search will return only the first 1000 hits from the search result</li>
 </ul>
 * @memberOf dw.customer.CustomerMgr
 * @param {dw.util.Map} queryAttributes - key-value pairs that define the query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @static
 */
dw.customer.CustomerMgr.searchProfiles = function(queryAttributes, sortString) {};

/**
 * Searches for profile instances.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 For a description of this query language, see the <a href="class_dw_customer_CustomerMgr.html#dw_customer_CustomerMgr_searchProfile_String_Object_DetailAnchor">searchProfile(String, Object...)</a> method.

 <p/>If the customer search API is configured to use the new Search Service (Beta), the following differences apply:<br/>
 <ul>
     <li>newly created customers might not be found immediately via the search service, and changes to existing
     customers might also not be in effect immediately (there is a slight delay in updating the index)</li>
     <li>the search will return only the first 1000 hits from the search result</li>
 </ul>
 * @memberOf dw.customer.CustomerMgr
 * @param {String} queryString - the actual query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @param {Object[]} args - optional parameters for the query string.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @static
 * @varArgs
 */
dw.customer.CustomerMgr.searchProfiles = function(queryString, sortString, args) {};

/**
 * Represents any payment instrument stored in the customers profile, such as
 credit card or bank transfer. The object defines standard methods for credit
 card payment, and can be extended by attributes appropriate for other
 payment methods.
 * @class
 * @extends dw.order.PaymentInstrument
 */
dw.customer.CustomerPaymentInstrument = function() {};
dw.customer.CustomerPaymentInstrument.prototype = new dw.order.PaymentInstrument();

/**
 * Returns the driver's license number of the bank account number
 if the calling context meets the following criteria: <br/>
 <ul>
 <li>
 If the method call happens in the context of a storefront request and
 the current customer is registered and authenticated, and the payment
 instrument is associated to the profile of the current customer, and
 the current protocol is HTTPS
 </li>
 </ul>
 Otherwise, the method returns the masked driver's license number of the bank account.
 <p/>
 <b>Note:</b> this method handles sensitive financial and card holder data.
 Pay special attention to PCI DSS v3. requirements 1, 3, 7, and 9.
 * @memberOf dw.customer.CustomerPaymentInstrument
 * @return {String}
 */
dw.customer.CustomerPaymentInstrument.prototype.getBankAccountDriversLicense = function() {};

/**
 * Returns the bank account number if the calling context meets
 the following criteria: <br/>
 <ul>
 <li>
 If the method call happens in the context of a storefront request,
 the current customer is registered and authenticated, the payment
 instrument is associated to the profile of the current customer, and
 the current protocol is HTTPS
 </li>
 </ul>
 Otherwise, the method returns the masked bank account number.
 <p/>
 <b>Note:</b> this method handles sensitive financial and card holder data.
 Pay special attention to PCI DSS v3. requirements 1, 3, 7, and 9.
 * @memberOf dw.customer.CustomerPaymentInstrument
 * @return {String}
 */
dw.customer.CustomerPaymentInstrument.prototype.getBankAccountNumber = function() {};

/**
 * Returns the decrypted credit card number if the calling context meets
 the following criteria: <br/>
 <ul>
 <li>
 If the method call happens in the context of a storefront request,
 the current customer is registered and authenticated, the payment
 instrument is associated to the profile of the current customer, and
 the current protocol is HTTPS.
 </li>
 </ul>
 Otherwise, the method returns the masked credit card number.
 <p/>
 <b>Note:</b> this method handles sensitive financial and card holder data.
 Pay special attention to PCI DSS v3. requirements 1, 3, 7, and 9.
 * @memberOf dw.customer.CustomerPaymentInstrument
 * @return {String}
 */
dw.customer.CustomerPaymentInstrument.prototype.getCreditCardNumber = function() {};

/**
 *
 * @class
 * @extends Object
 */
dw.customer.CustomerStatusCodes = function() {};
dw.customer.CustomerStatusCodes.prototype = new Object();

/**
 * Indicates that an error occurred when trying to perform
 an operation on an address that is currently associated
 with a product list.
 * @type String
 * @memberOf dw.customer.CustomerStatusCodes
 * @static
 * @const
 */
dw.customer.CustomerStatusCodes.CUSTOMER_ADDRESS_REFERENCED_BY_PRODUCT_LIST = '';

/**
 * The class provides access to past orders of the customer.
 <p/>
 <b>Note:</b> this class allows access to sensitive financial and card holder data.
 Pay special attention to PCI DSS v3. requirements 1, 3, 7, and 9.
 It also allows access to sensitive personal and private information.
 Pay attention to appropriate legal and regulatory requirements related to this data.
 * @class
 * @extends Object
 */
dw.customer.OrderHistory = function() {};
dw.customer.OrderHistory.prototype = new Object();

/**
 * Returns the number of orders the customer has placed in the store. If the
 customer is anonymous, this method always returns zero. If an active data
 record is available for this customer, the orders count will be retrieved
 from this, otherwise a real-time query will be used to get the count.
 * @memberOf dw.customer.OrderHistory
 * @return {Number} the number of orders the customer has placed in the store.
 */
dw.customer.OrderHistory.prototype.getOrderCount = function() {};

/**
 * Represents a list of products (and optionally a gift certificate) that is
 typically maintained by a customer.  This class can be used to implement
 a number of different storefront features, e.g. shopping list, wish list and gift registry.
 A product list is always owned by a customer. The owner can be anonymous or a registered customer.
 The owner can be the person for which items from that list will be purchased (wish list).
 Or it can be a person who maintains the list, for example a gift registry, on behalf of the bridal couple.
 Each product list can have a registrant and a co-registrant. A registrant is typically associated with an event related product list
 such as a gift registry. It holds information about a person associated with the
 event such as a bride or groom.
 A shipping address can be associated with this product list to ship the items,
 e.g. to an event location. A post-event shipping address can be associated to
 ship items to which could not be delivered on event date.
 The product list can also hold information about the event date and event location.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.customer.ProductList = function() {};
dw.customer.ProductList.prototype = new dw.object.ExtensibleObject();

/**
 * constant for when Export Status is Exported
 * @type Number
 * @memberOf dw.customer.ProductList
 * @static
 * @const
 */
dw.customer.ProductList.EXPORT_STATUS_EXPORTED = 0;

/**
 * constant for when Export Status is Not Exported
 * @type Number
 * @memberOf dw.customer.ProductList
 * @static
 * @const
 */
dw.customer.ProductList.EXPORT_STATUS_NOTEXPORTED = 0;

/**
 *
 * @type Number
 * @memberOf dw.customer.ProductList
 * @static
 * @const
 */
dw.customer.ProductList.TYPE_CUSTOM_1 = 0;

/**
 *
 * @type Number
 * @memberOf dw.customer.ProductList
 * @static
 * @const
 */
dw.customer.ProductList.TYPE_CUSTOM_2 = 0;

/**
 *
 * @type Number
 * @memberOf dw.customer.ProductList
 * @static
 * @const
 */
dw.customer.ProductList.TYPE_CUSTOM_3 = 0;

/**
 *
 * @type Number
 * @memberOf dw.customer.ProductList
 * @static
 * @const
 */
dw.customer.ProductList.TYPE_GIFT_REGISTRY = 0;

/**
 *
 * @type Number
 * @memberOf dw.customer.ProductList
 * @static
 * @const
 */
dw.customer.ProductList.TYPE_SHOPPING_LIST = 0;

/**
 * Constants representing the possible values for the type attribute.
 * @type Number
 * @memberOf dw.customer.ProductList
 * @static
 * @const
 */
dw.customer.ProductList.TYPE_WISH_LIST = 0;

/**
 * Create a ProductListRegistrant and assign it to the coRegistrant attribute
 of the list.  An exception is thrown if the list already has a coRegistrant
 assigned to it.
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.ProductListRegistrant} the created ProductListRegistrant instance.
 * @throws CreateException if one already exists
 */
dw.customer.ProductList.prototype.createCoRegistrant = function() {};

/**
 * Create an item in the list that represents a gift certificate.
 A list may only contain a single gift certificate, so an exception
 is thrown if one already exists in the list.
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.ProductListItem} the created item.
 * @throws CreateException if a gift certificate item already exists in the list.
 */
dw.customer.ProductList.prototype.createGiftCertificateItem = function() {};

/**
 * Create an item in the list that references the specified product.
 * @memberOf dw.customer.ProductList
 * @param {dw.catalog.Product} product - the product to use to create the list item.
 * @return {dw.customer.ProductListItem} the created item.
 */
dw.customer.ProductList.prototype.createProductItem = function(product) {};

/**
 * Create a ProductListRegistrant and assign it to the registrant attribute
 of the list.  An exception is thrown if the list already has a registrant
 assigned to it.
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.ProductListRegistrant} the created ProductListRegistrant instance.
 * @throws CreateException if one already exists
 */
dw.customer.ProductList.prototype.createRegistrant = function() {};

/**
 *
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.ProductListRegistrant} the ProductListRegistrant assigned to the coRegistrant attribute or null  if this list has no co-registrant.
 */
dw.customer.ProductList.prototype.getCoRegistrant = function() {};

/**
 * This is a helper method typically used with an event related list.
 It provides the appropriate shipping address based on the eventDate.
 If the current date is after the eventDate, then the postEventShippingAddress
 is returned, otherwise the shippingAddress is returned.  If the eventDate
 is null, then null is returned.
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.CustomerAddress} the approprate address, as described above.
 */
dw.customer.ProductList.prototype.getCurrentShippingAddress = function() {};

/**
 * Returns a description text that, for example, explains the purpose of this product list.
 * @memberOf dw.customer.ProductList
 * @return {String} a description text explaining the purpose of this product list.  Returns an empty string if the description is not set.
 */
dw.customer.ProductList.prototype.getDescription = function() {};

/**
 * For event related uses (e.g. gift registry), this holds the event city.
 * @memberOf dw.customer.ProductList
 * @return {String} the event city. The event city or an empty string if no event city is set.
 */
dw.customer.ProductList.prototype.getEventCity = function() {};

/**
 * For event related uses (e.g. gift registry), this holds the event country.
 * @memberOf dw.customer.ProductList
 * @return {String} the event country. The event country or an empty string if no event country is set.
 */
dw.customer.ProductList.prototype.getEventCountry = function() {};

/**
 * For event related uses (e.g. gift registry), this holds the date
 of the event.
 * @memberOf dw.customer.ProductList
 * @return {Date} the date of the event.
 */
dw.customer.ProductList.prototype.getEventDate = function() {};

/**
 * For event related uses (e.g. gift registry), this holds the event state.
 * @memberOf dw.customer.ProductList
 * @return {String} the event state. The event state or an empty string if no event state is set.
 */
dw.customer.ProductList.prototype.getEventState = function() {};

/**
 * For event related uses (e.g. gift registry), this holds the type
 of event, e.g. Wedding, Baby Shower.
 * @memberOf dw.customer.ProductList
 * @return {String} the type of event. Returns an empty string, if not set.
 */
dw.customer.ProductList.prototype.getEventType = function() {};

/**
 * Returns the export status of the product list.<br/>
 Possible values are: <a href="class_dw_customer_ProductList.html#dw_customer_ProductList_EXPORT_STATUS_NOTEXPORTED_DetailAnchor">EXPORT_STATUS_NOTEXPORTED</a>,
 <a href="class_dw_customer_ProductList.html#dw_customer_ProductList_EXPORT_STATUS_EXPORTED_DetailAnchor">EXPORT_STATUS_EXPORTED</a>.
 * @memberOf dw.customer.ProductList
 * @return {dw.value.EnumValue} Product list export status
 */
dw.customer.ProductList.prototype.getExportStatus = function() {};

/**
 * Returns the item in the list that represents a gift certificate.
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.ProductListItem} the gift certificate item, or null if it doesn't exist.
 */
dw.customer.ProductList.prototype.getGiftCertificateItem = function() {};

/**
 * Returns the unique system generated ID of the object.
 * @memberOf dw.customer.ProductList
 * @return {String} the ID of object.
 */
dw.customer.ProductList.prototype.getID = function() {};

/**
 * Returns the item from the list that has the specified ID.
 * @memberOf dw.customer.ProductList
 * @param {String} ID - the product list item identifier.
 * @return {dw.customer.ProductListItem} the specified item, or null if it's not found in the list.
 */
dw.customer.ProductList.prototype.getItem = function(ID) {};

/**
 * Returns a collection containing all items in the list.
 * @memberOf dw.customer.ProductList
 * @return {dw.util.Collection} all items.
 */
dw.customer.ProductList.prototype.getItems = function() {};

/**
 * Returns the date where this product list has been exported successfully
 the last time.
 * @memberOf dw.customer.ProductList
 * @return {Date} The time of the last successful export or null if this product list  was not exported yet.
 */
dw.customer.ProductList.prototype.getLastExportTime = function() {};

/**
 * Returns the name of this product list given by its owner.
 * @memberOf dw.customer.ProductList
 * @return {String} the name of this product list. Returns an empty string if the name is not set.
 */
dw.customer.ProductList.prototype.getName = function() {};

/**
 * Returns the customer that created and owns the product list.
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.Customer} Owning customer
 */
dw.customer.ProductList.prototype.getOwner = function() {};

/**
 * Returns the shipping address for purchases made after the event date.
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.CustomerAddress} the shipping address for purchases made after the event date.  Returns null if no post-event shipping address is associated.
 */
dw.customer.ProductList.prototype.getPostEventShippingAddress = function() {};

/**
 * Returns a collection containing all items in the list that reference products.
 * @memberOf dw.customer.ProductList
 * @return {dw.util.Collection} all product items.
 */
dw.customer.ProductList.prototype.getProductItems = function() {};

/**
 * Returns a collection containing all items in the list that are flagged as public.
 * @memberOf dw.customer.ProductList
 * @return {dw.util.Collection} all public items.
 */
dw.customer.ProductList.prototype.getPublicItems = function() {};

/**
 * Returns the aggregated purchases from all the individual items.
 * @memberOf dw.customer.ProductList
 * @return {dw.util.Collection} purchases
 */
dw.customer.ProductList.prototype.getPurchases = function() {};

/**
 *
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.ProductListRegistrant} the ProductListRegistrant assigned to the registrant attribute or null  if this list has no registrant.
 */
dw.customer.ProductList.prototype.getRegistrant = function() {};

/**
 * Return the address that should be used as the shipping address for purchases
 made from the list.
 * @memberOf dw.customer.ProductList
 * @return {dw.customer.CustomerAddress} the shipping address. The shipping address of this list or null  if no address is associated.
 */
dw.customer.ProductList.prototype.getShippingAddress = function() {};

/**
 * Returns an int representing the type of object (e.g. wish list,
 gift registry). This is set at object creation time.
 * @memberOf dw.customer.ProductList
 * @return {Number} the type of object.
 */
dw.customer.ProductList.prototype.getType = function() {};

/**
 * Returns true if this product list is owned by an anonymous customer.
 * @memberOf dw.customer.ProductList
 * @return {Boolean} true if the owner of this product list is anonymous, false otherwise.
 */
dw.customer.ProductList.prototype.isAnonymous = function() {};

/**
 * A flag, typically used to determine if the object is searchable
 by other customers.
 * @memberOf dw.customer.ProductList
 * @return {Boolean} true if the product list is public. False otherwise.
 */
dw.customer.ProductList.prototype.isPublic = function() {};

/**
 * Removes the ProductListRegistrant assigned to the coRegistrant attribute.
 * @memberOf dw.customer.ProductList
 */
dw.customer.ProductList.prototype.removeCoRegistrant = function() {};

/**
 * Removes the specified item from the list.  This will also cause
 all purchase information associated with that item to be removed.
 * @memberOf dw.customer.ProductList
 * @param {dw.customer.ProductListItem} item - The item to remove.
 */
dw.customer.ProductList.prototype.removeItem = function(item) {};

/**
 * Removes the ProductListRegistrant assigned to the registrant attribute.
 * @memberOf dw.customer.ProductList
 */
dw.customer.ProductList.prototype.removeRegistrant = function() {};

/**
 * Set the description of this product list.
 * @memberOf dw.customer.ProductList
 * @param {String} description - The description of this product list.  The description can have up to 256 characters, longer descriptions get truncated.  If an empty string is provided, the description gets set to null.
 */
dw.customer.ProductList.prototype.setDescription = function(description) {};

/**
 * Set the event city to which this product list is related.
 * @memberOf dw.customer.ProductList
 * @param {String} eventCity - The event city can have up to 256 characters, longer event city get truncated.  If an empty string is provided, the event city gets set to null.
 */
dw.customer.ProductList.prototype.setEventCity = function(eventCity) {};

/**
 * Set the event country to which this product list is related.
 * @memberOf dw.customer.ProductList
 * @param {String} eventCountry - The event country can have up to 256 characters, longer event country get truncated.  If an empty string is provided, the event country gets set to null.
 */
dw.customer.ProductList.prototype.setEventCountry = function(eventCountry) {};

/**
 * Set the date of the event to which this product list is related.
 * @memberOf dw.customer.ProductList
 * @param {Date} eventDate - The event date or null if no event date should be available.
 */
dw.customer.ProductList.prototype.setEventDate = function(eventDate) {};

/**
 * Set the event state to which this product list is related.
 * @memberOf dw.customer.ProductList
 * @param {String} eventState - The event state can have up to 256 characters, longer event state get truncated.  If an empty string is provided, the event state gets set to null.
 */
dw.customer.ProductList.prototype.setEventState = function(eventState) {};

/**
 * Set the event type for which this product list was created by the owner.
 * @memberOf dw.customer.ProductList
 * @param {String} eventType - The event type can have up to 256 characters, longer event type get truncated.  If an empty string is provided, the event type gets set to null.
 */
dw.customer.ProductList.prototype.setEventType = function(eventType) {};

/**
 * Set the name of this product list.
 * @memberOf dw.customer.ProductList
 * @param {String} name - The name of this product list.  The name can have up to 256 characters, longer names get truncated.  If an empty string is provided, the name gets set to null.
 */
dw.customer.ProductList.prototype.setName = function(name) {};

/**
 * This is typically used by an event related list (e.g. gift registry) to
 specify a shipping address for purchases made after the event date.
 * @memberOf dw.customer.ProductList
 * @param {dw.customer.CustomerAddress} address - The shipping address.
 */
dw.customer.ProductList.prototype.setPostEventShippingAddress = function(address) {};

/**
 * Makes this product list visible to other customers or hides it.
 * @memberOf dw.customer.ProductList
 * @param {Boolean} flag - If true, this product list becomes visible to other customers.  If false, this product list can only be seen and searched by its owner.
 */
dw.customer.ProductList.prototype.setPublic = function(flag) {};

/**
 * Associate an address, used as the shipping address for purchases
 made from the list.
 * @memberOf dw.customer.ProductList
 * @param {dw.customer.CustomerAddress} address - The shipping address.
 */
dw.customer.ProductList.prototype.setShippingAddress = function(address) {};

/**
 * An item in a product list.  Types of items are:<br/>
 <ul>
 <li>An item that references a product via the product's SKU.</li>
 <li>An item that represents a gift certificate.</li>
 </ul>
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.customer.ProductListItem = function() {};
dw.customer.ProductListItem.prototype = new dw.object.ExtensibleObject();

/**
 *
 * @type Number
 * @memberOf dw.customer.ProductListItem
 * @static
 * @const
 */
dw.customer.ProductListItem.TYPE_GIFT_CERTIFICATE = 0;

/**
 *
 * @type Number
 * @memberOf dw.customer.ProductListItem
 * @static
 * @const
 */
dw.customer.ProductListItem.TYPE_PRODUCT = 0;

/**
 * Create a purchase record for this item.
 * @memberOf dw.customer.ProductListItem
 * @param {Number} quantity - The number of items purchased.
 * @param {String} purchaserName - The name of the purchaser.
 * @return {dw.customer.ProductListItemPurchase} the purchase record.
 */
dw.customer.ProductListItem.prototype.createPurchase = function(quantity, purchaserName) {};

/**
 * Returns the unique system generated ID of the object.
 * @memberOf dw.customer.ProductListItem
 * @return {String} the ID of object.
 */
dw.customer.ProductListItem.prototype.getID = function() {};

/**
 * Returns the product list that this item belongs to.
 * @memberOf dw.customer.ProductListItem
 * @return {dw.customer.ProductList} the list.
 */
dw.customer.ProductListItem.prototype.getList = function() {};

/**
 * Specify the priority level for the item.  Typically the lower the
 number, the higher the priority. This can be used by the owner of the product list
 to express which items he/she likes to get purchased first.
 * @memberOf dw.customer.ProductListItem
 * @return {Number} the specified priority level.
 */
dw.customer.ProductListItem.prototype.getPriority = function() {};

/**
 * Returns the referenced product for this item.  The reference is made
 via the product ID attribute.  This method returns null if there is
 no such product in the system or if the product exists but is not
 assigned to the site catalog.
 * @memberOf dw.customer.ProductListItem
 * @return {dw.catalog.Product} the product referenced by this item, or null.
 */
dw.customer.ProductListItem.prototype.getProduct = function() {};

/**
 * Returns the ID of the product referenced by this item.
 This attribute is set when a product is assigned via setProduct().
 It is possible for the ID to reference a product that doesn't exist
 anymore.  In this case getProduct() would return null.
 * @memberOf dw.customer.ProductListItem
 * @return {String} the product ID, or null if none exists.
 */
dw.customer.ProductListItem.prototype.getProductID = function() {};

/**
 * Returns the ProductOptionModel for the product associated with this item,
 or null if there is no valid product associated with this item.
 * @memberOf dw.customer.ProductListItem
 * @return {dw.catalog.ProductOptionModel} the associated ProductOptionModel or null.
 */
dw.customer.ProductListItem.prototype.getProductOptionModel = function() {};

/**
 * Returns the sum of the quantities of all the individual purchase records
 for this item.
 * @memberOf dw.customer.ProductListItem
 * @return {dw.value.Quantity} the sum of the quantities of all the individual purchase records  for this item.
 */
dw.customer.ProductListItem.prototype.getPurchasedQuantity = function() {};

/**
 * Returns the value part of the underlying purchased quantity object, as distinct
 from the unit.
 * @memberOf dw.customer.ProductListItem
 * @return {Number} the value part of the underlying purchased quantity object, as distinct  from the unit.
 */
dw.customer.ProductListItem.prototype.getPurchasedQuantityValue = function() {};

/**
 * Returns all purchases made for this item.
 * @memberOf dw.customer.ProductListItem
 * @return {dw.util.Collection} the collection of purchase records for this item. Returns an empty list  if this item has not been purchased yet.
 */
dw.customer.ProductListItem.prototype.getPurchases = function() {};

/**
 * Returns the quantity of the item.
 The quantity is the number of products or gift certificates
 that get shipped when purchasing this product list item.
 * @memberOf dw.customer.ProductListItem
 * @return {dw.value.Quantity} the quantity of the item.
 */
dw.customer.ProductListItem.prototype.getQuantity = function() {};

/**
 *
 * @memberOf dw.customer.ProductListItem
 * @return {Number} the value part of the underlying quantity object, as distinct  from the unit.
 */
dw.customer.ProductListItem.prototype.getQuantityValue = function() {};

/**
 * Returns the type of this product list item.
 * @memberOf dw.customer.ProductListItem
 * @return {Number} a code that specifies the type of item (i.e. product or gift certificate).
 */
dw.customer.ProductListItem.prototype.getType = function() {};

/**
 * A flag, typically used to determine whether the item should display
 in a customer's view of the list (as opposed to the list owner's view).
 * @memberOf dw.customer.ProductListItem
 * @return {Boolean} true if the item is public.
 */
dw.customer.ProductListItem.prototype.isPublic = function() {};

/**
 * Specify the priority level for the item.  Typically the lower the
 number, the higher the priority. This can be used by the owner of the product list
 to express which items he/she likes to get purchased first.
 * @memberOf dw.customer.ProductListItem
 * @param {Number} priority - The new priority level.
 */
dw.customer.ProductListItem.prototype.setPriority = function(priority) {};

/**
 * Sets the referenced product for this item by storing the product's id.
 If null is specified, then the id is set to null.
 * @memberOf dw.customer.ProductListItem
 * @param {dw.catalog.Product} product - The referenced product for this item.
 * @deprecated Use <a href="class_dw_customer_ProductList.html#dw_customer_ProductList_createProductItem_Product_DetailAnchor">ProductList.createProductItem(Product)</a> instead.
 */
dw.customer.ProductListItem.prototype.setProduct = function(product) {};

/**
 * Store a product option model with this object.  This stores a copy
 of the specified model, rather than an assocation to the same instance.
 * @memberOf dw.customer.ProductListItem
 * @param {dw.catalog.ProductOptionModel} productOptionModel - The object to store.
 */
dw.customer.ProductListItem.prototype.setProductOptionModel = function(productOptionModel) {};

/**
 * Typically used to determine if the item is visible to other customers.
 * @memberOf dw.customer.ProductListItem
 * @param {Boolean} flag - If true, this product list becomes visible to other customers.  If false, this product list can only be seen by the owner of the product list.
 */
dw.customer.ProductListItem.prototype.setPublic = function(flag) {};

/**
 * Sets the quantity of the item.
 * @memberOf dw.customer.ProductListItem
 * @param {dw.value.Quantity} value - the new quantity of the item.
 * @deprecated Use <a href="class_dw_customer_ProductListItem.html#dw_customer_ProductListItem_setQuantityValue_Double_DetailAnchor">setQuantityValue(Number)</a> instead.
 */
dw.customer.ProductListItem.prototype.setQuantity = function(value) {};

/**
 * Set the value part of the underlying quantity object, as distinct from
 the unit.
 * @memberOf dw.customer.ProductListItem
 * @param {Number} value - the value to use.
 */
dw.customer.ProductListItem.prototype.setQuantityValue = function(value) {};

/**
 * A record of the purchase of an item contained in a product list.
 * @class
 * @extends Object
 * @author Jeff Lowe
 */
dw.customer.ProductListItemPurchase = function() {};
dw.customer.ProductListItemPurchase.prototype = new Object();

/**
 * Returns the item that was purchased.
 * @memberOf dw.customer.ProductListItemPurchase
 * @return {dw.customer.ProductListItem} the item that was purchased.
 */
dw.customer.ProductListItemPurchase.prototype.getItem = function() {};

/**
 * Returns the number of the order in which the
 product list item was purchased.
 * @memberOf dw.customer.ProductListItemPurchase
 * @return {String} the number of the order in which the  product list item was purchased.
 */
dw.customer.ProductListItemPurchase.prototype.getOrderNo = function() {};

/**
 * Returns the date on which the product list item was purchased.
 * @memberOf dw.customer.ProductListItemPurchase
 * @return {Date} the date on which the product list item was purchased.
 */
dw.customer.ProductListItemPurchase.prototype.getPurchaseDate = function() {};

/**
 * Returns the name of the purchaser of the product list item.
 * @memberOf dw.customer.ProductListItemPurchase
 * @return {String} the name of the purchaser of the product list item.
 */
dw.customer.ProductListItemPurchase.prototype.getPurchaserName = function() {};

/**
 * Returns the quantity of the product list item that was purchased.
 * @memberOf dw.customer.ProductListItemPurchase
 * @return {dw.value.Quantity} the quantity of the product list item that was purchased.
 */
dw.customer.ProductListItemPurchase.prototype.getQuantity = function() {};

/**
 * ProductListMgr provides methods for retrieving, creating, searching for, and
 removing product lists.
 * @class
 * @extends Object
 */
dw.customer.ProductListMgr = function() {};
dw.customer.ProductListMgr.prototype = new Object();

/**
 * Creates a new instance of a product list, of the specified type.
 * @memberOf dw.customer.ProductListMgr
 * @param {dw.customer.Customer} customer - The customer owning the product list, must not be null.
 * @param {Number} type - The type of list (e.g. wish list, gift registry). The types             are defined as constants within             <a href="class_dw_customer_ProductList.html">ProductList</a>.
 * @return {dw.customer.ProductList} the new list instance.
 * @static
 */
dw.customer.ProductListMgr.createProductList = function(customer, type) {};

/**
 * Returns the first product list belonging to the customer with the
 specified profile.
 * @memberOf dw.customer.ProductListMgr
 * @param {dw.customer.Profile} profile - The profile of the customer whose product list is to be retrieved.
 * @param {Number} type - The type of list (e.g. wish list, gift registry). The types             are defined as constants within             <a href="class_dw_customer_ProductList.html">ProductList</a>.
 * @return {dw.customer.ProductList} the product list, or null if none exists.
 * @deprecated Use <a href="class_dw_customer_ProductListMgr.html#dw_customer_ProductListMgr_getProductLists_Customer_int_DetailAnchor">getProductLists(Customer, Number)</a> or  <a href="class_dw_customer_ProductListMgr.html#dw_customer_ProductListMgr_getProductLists_Customer_int_String_DetailAnchor">getProductLists(Customer, Number, String)</a> instead.
 * @static
 */
dw.customer.ProductListMgr.getProductList = function(profile, type) {};

/**
 * Gets the product list by its ID.
 * @memberOf dw.customer.ProductListMgr
 * @param {String} ID - The product list ID.
 * @return {dw.customer.ProductList} the ProductList instance, or null if a list with the specified          UUID doesn't exist.
 * @static
 */
dw.customer.ProductListMgr.getProductList = function(ID) {};

/**
 * Retrieve all product lists of the specified type owned by the
 specified customer.
 * @memberOf dw.customer.ProductListMgr
 * @param {dw.customer.Customer} customer - The customer used for the query, must not be null.
 * @param {Number} type - The type of list used for the query. The types are defined as             constants within <a href="class_dw_customer_ProductList.html">ProductList</a>.
 * @return {dw.util.Collection} the unsorted collection of ProductList instances of the specified          type belonging to the specified customer.
 * @static
 */
dw.customer.ProductListMgr.getProductLists = function(customer, type) {};

/**
 * Retrieve all the product lists of the specified type and event type
 belonging to the specified customer.
 * @memberOf dw.customer.ProductListMgr
 * @param {dw.customer.Customer} customer - The customer used for the query, must not be null.
 * @param {Number} type - The type of list used for the query. The types are defined as             constants within <a href="class_dw_customer_ProductList.html">ProductList</a>.
 * @param {String} eventType - The event type used for the query, must not be null.
 * @return {dw.util.Collection} the unsorted collection of ProductList instances of the specified          type and event type belonging to the specified customer.
 * @static
 */
dw.customer.ProductListMgr.getProductLists = function(customer, type, eventType) {};

/**
 * Returns the collection of product lists that have the specified address
 as the shipping address.
 * @memberOf dw.customer.ProductListMgr
 * @param {dw.customer.CustomerAddress} customerAddress - the address to test, must not be null.
 * @return {dw.util.Collection} the unsorted collection of ProductList instances using this          address.
 * @static
 */
dw.customer.ProductListMgr.getProductLists = function(customerAddress) {};

/**
 * <p>Searches for product list instances.</p>

 <p>The search can be configured with a map, which key-value pairs are
 converted into a query expression. The key-value pairs are turned into a
 sequence of '=' or 'like' conditions, which are combined with AND
 statements.</p>

 <p>Example:<br/>
 A map with the key/value pairs: <i>'name'/'tom*', 'age'/66</i>
 will be converted as follows: <code>"name like 'tom*' and age = 66"</code></p>

 <p>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).</p>

 <p>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.
 </p>

 <p>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.</p>

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.customer.ProductListMgr
 * @param {dw.util.Map} queryAttributes - key-value pairs, which define the query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 */
dw.customer.ProductListMgr.queryProductLists = function(queryAttributes, sortString) {};

/**
 * <p>Searches for product list instances.</p>

 <p>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.</p>

 <p>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).</p>

 <p>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.
 </p>

 <p>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul></p>

 <p>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.
 </p>

 <p>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>
 </p>

 <p>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.</p>

 <p>Sometimes it is desired to get all instances with a special sorting condition.
 This can be easily done by providing the 'sortString' in combination with
 an empty 'queryString', e.g. <code>querySystemObjects("sample", "", "ID asc")</code></p>

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.customer.ProductListMgr
 * @param {String} queryString - the actual query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @param {Object[]} args - optional parameters for the queryString.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 * @varArgs
 */
dw.customer.ProductListMgr.queryProductLists = function(queryString, sortString, args) {};

/**
 * Removes the specified product list from the system.
 * @memberOf dw.customer.ProductListMgr
 * @param {dw.customer.ProductList} productList - The list to remove, must not be null.
 * @static
 */
dw.customer.ProductListMgr.removeProductList = function(productList) {};

/**
 * A ProductListRegistrant is typically associated with an event related product list
 such as a gift registry. It holds information about a person associated with the
 event such as a bride or groom.
 * @class
 * @extends dw.object.ExtensibleObject
 * @author Jeff Lowe
 */
dw.customer.ProductListRegistrant = function() {};
dw.customer.ProductListRegistrant.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the email address of the registrant or null.
 * @memberOf dw.customer.ProductListRegistrant
 * @return {String} the email address of the registrant or null.
 */
dw.customer.ProductListRegistrant.prototype.getEmail = function() {};

/**
 * Returns the first name of the registrant or null.
 * @memberOf dw.customer.ProductListRegistrant
 * @return {String} the first name of the registrant or null.
 */
dw.customer.ProductListRegistrant.prototype.getFirstName = function() {};

/**
 * Returns the last name of the registrant or null.
 * @memberOf dw.customer.ProductListRegistrant
 * @return {String} the last name of the registrant or null.
 */
dw.customer.ProductListRegistrant.prototype.getLastName = function() {};

/**
 * Returns the role of the registrant or null. The role of a registrant
 can be for example the bride of a bridal couple.
 * @memberOf dw.customer.ProductListRegistrant
 * @return {String} the role name of the registrant or null.
 */
dw.customer.ProductListRegistrant.prototype.getRole = function() {};

/**
 * Sets the email address of the registrant.
 * @memberOf dw.customer.ProductListRegistrant
 * @param {String} email - the email address of the registrant.
 */
dw.customer.ProductListRegistrant.prototype.setEmail = function(email) {};

/**
 * Sets the first name of the registrant.
 * @memberOf dw.customer.ProductListRegistrant
 * @param {String} firstName - the first name of the registrant.
 */
dw.customer.ProductListRegistrant.prototype.setFirstName = function(firstName) {};

/**
 * Sets the last name of the registrant.
 * @memberOf dw.customer.ProductListRegistrant
 * @param {String} lastName - the last name of the registrant.
 */
dw.customer.ProductListRegistrant.prototype.setLastName = function(lastName) {};

/**
 * Sets the role of the registrant.
 * @memberOf dw.customer.ProductListRegistrant
 * @param {String} role - the role of the registrant.
 */
dw.customer.ProductListRegistrant.prototype.setRole = function(role) {};

/**
 * The class represents a customer profile. It also provides access to the
 customers address book and credentials.
 <p/>
 <b>Note:</b> this class handles sensitive security-related data.
 Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 * @class
 * @extends dw.customer.EncryptedObject
 */
dw.customer.Profile = function() {};
dw.customer.Profile.prototype = new dw.customer.EncryptedObject();

/**
 * Returns the customer's address book.
 * @memberOf dw.customer.Profile
 * @return {dw.customer.AddressBook} the customer's address book.
 */
dw.customer.Profile.prototype.getAddressBook = function() {};

/**
 * Returns the customer's birthday as a date.
 * @memberOf dw.customer.Profile
 * @return {Date} the customer's birthday as a date.
 */
dw.customer.Profile.prototype.getBirthday = function() {};

/**
 * Returns the customer's company name.
 * @memberOf dw.customer.Profile
 * @return {String} the customer's company name.
 */
dw.customer.Profile.prototype.getCompanyName = function() {};

/**
 * Returns the customer's credentials.
 * @memberOf dw.customer.Profile
 * @return {dw.customer.Credentials} the customer's credentials.
 */
dw.customer.Profile.prototype.getCredentials = function() {};

/**
 * Returns the customer object related to this profile.
 * @memberOf dw.customer.Profile
 * @return {dw.customer.Customer} customer object related to profile.
 */
dw.customer.Profile.prototype.getCustomer = function() {};

/**
 * Returns the customer's number, which is a number used to identify the Customer.
 * @memberOf dw.customer.Profile
 * @return {String} the customer's number.
 */
dw.customer.Profile.prototype.getCustomerNo = function() {};

/**
 * Returns the customer's email address.
 * @memberOf dw.customer.Profile
 * @return {String} the customer's email address.
 */
dw.customer.Profile.prototype.getEmail = function() {};

/**
 * Returns the fax number to use for the customer.
 The length is restricted to 32 characters.
 * @memberOf dw.customer.Profile
 * @return {String} the fax mobile phone number to use for the customer.
 */
dw.customer.Profile.prototype.getFax = function() {};

/**
 * Returns the customer's first name.
 * @memberOf dw.customer.Profile
 * @return {String} the customer's first name.
 */
dw.customer.Profile.prototype.getFirstName = function() {};

/**
 * Returns the customer's gender.
 * @memberOf dw.customer.Profile
 * @return {dw.value.EnumValue} the customer's gender.
 */
dw.customer.Profile.prototype.getGender = function() {};

/**
 * Returns the customer's job title.
 * @memberOf dw.customer.Profile
 * @return {String} the customer's job title.
 */
dw.customer.Profile.prototype.getJobTitle = function() {};

/**
 * Returns the last login time of the customer.
 * @memberOf dw.customer.Profile
 * @return {Date} the time, when the customer was last logged in.
 */
dw.customer.Profile.prototype.getLastLoginTime = function() {};

/**
 * Returns the customer's last name.
 * @memberOf dw.customer.Profile
 * @return {String} the customer's last name.
 */
dw.customer.Profile.prototype.getLastName = function() {};

/**
 * Returns the last visit time of the customer.
 * @memberOf dw.customer.Profile
 * @return {Date} the time, when the customer has visited the storefront the          last time (with enabled rememeber me functionality).
 */
dw.customer.Profile.prototype.getLastVisitTime = function() {};

/**
 * Returns the upcoming customer's birthday as a date.
 If the customer already had birthday this year the method returns the birthday of the next year.
 Otherwise its birthday in this year.
 If the customer has not set a birthday this method returns null.
 * @memberOf dw.customer.Profile
 * @return {Date} the customer's next birthday as a date.
 */
dw.customer.Profile.prototype.getNextBirthday = function() {};

/**
 * Returns the business phone number to use for the customer.
 * @memberOf dw.customer.Profile
 * @return {String} the business phone number to use for the customer.
 */
dw.customer.Profile.prototype.getPhoneBusiness = function() {};

/**
 * Returns the phone number to use for the customer.
 * @memberOf dw.customer.Profile
 * @return {String} the phone number to use for the customer.
 */
dw.customer.Profile.prototype.getPhoneHome = function() {};

/**
 * Returns the mobile phone number to use for the customer.
 * @memberOf dw.customer.Profile
 * @return {String} the mobile phone number to use for the customer.
 */
dw.customer.Profile.prototype.getPhoneMobile = function() {};

/**
 * Returns the customer's preferred locale.
 * @memberOf dw.customer.Profile
 * @return {String} the customer's preferred locale.
 */
dw.customer.Profile.prototype.getPreferredLocale = function() {};

/**
 * Returns the time the customer logged in prior to the current login.
 * @memberOf dw.customer.Profile
 * @return {Date} the time the customer logged in prior to the current login.
 */
dw.customer.Profile.prototype.getPreviousLoginTime = function() {};

/**
 * Returns the time the customer visited the store prior to the current visit.
 * @memberOf dw.customer.Profile
 * @return {Date} the time the customer visited the store prior to the current visit.
 */
dw.customer.Profile.prototype.getPreviousVisitTime = function() {};

/**
 * Returns the salutation to use for the customer.
 * @memberOf dw.customer.Profile
 * @return {String} the salutation to use for the customer.
 */
dw.customer.Profile.prototype.getSalutation = function() {};

/**
 * Returns the customer's second name.
 * @memberOf dw.customer.Profile
 * @return {String} the customer's second name.
 */
dw.customer.Profile.prototype.getSecondName = function() {};

/**
 * Returns the customer's suffix, such as "Jr." or "Sr.".
 * @memberOf dw.customer.Profile
 * @return {String} the customer's suffix.
 */
dw.customer.Profile.prototype.getSuffix = function() {};

/**
 * Returns the tax ID value. The value is returned either plain
 text if the current context allows plain text access, or
 if it's not allowed, the ID value will be returned masked.
 The following criteria must be met in order to have plain text access:
 <p/>
 <ul>
 	<li>the method call must happen in the context of a storefront request;</li>
 	<li>the current customer must be registered and authenticated;</li>
 	<li>it is the profile of the current customer;</li>
  <li>and the current protocol is HTTPS.</li>
 </ul>
 <p/>
 * @memberOf dw.customer.Profile
 * @return {String} the tax ID value
 */
dw.customer.Profile.prototype.getTaxID = function() {};

/**
 * Returns the masked value of the tax ID.
 * @memberOf dw.customer.Profile
 * @return {String} the masked value of the tax ID
 */
dw.customer.Profile.prototype.getTaxIDMasked = function() {};

/**
 * Returns the tax ID type.
 * @memberOf dw.customer.Profile
 * @return {dw.value.EnumValue} the tax ID type
 */
dw.customer.Profile.prototype.getTaxIDType = function() {};

/**
 * Returns the customer's title, such as "Mrs" or "Mr".
 * @memberOf dw.customer.Profile
 * @return {String} the customer's title.
 */
dw.customer.Profile.prototype.getTitle = function() {};

/**
 * Returns the wallet of this customer.
 * @memberOf dw.customer.Profile
 * @return {dw.customer.Wallet} the wallet of this customer.
 */
dw.customer.Profile.prototype.getWallet = function() {};

/**
 * Indicates that the customer is female when set to true.
 * @memberOf dw.customer.Profile
 * @return {Boolean} true if the customer is a female, false otherwise.
 */
dw.customer.Profile.prototype.isFemale = function() {};

/**
 * Indicates that the customer is male when set to true.
 * @memberOf dw.customer.Profile
 * @return {Boolean} true if the customer is a male, false otherwise.
 */
dw.customer.Profile.prototype.isMale = function() {};

/**
 * Sets the customer's birthday as a date.
 * @memberOf dw.customer.Profile
 * @param {Date} aValue - the customer's birthday as a date.
 */
dw.customer.Profile.prototype.setBirthday = function(aValue) {};

/**
 * Sets the customer's company name.
 * @memberOf dw.customer.Profile
 * @param {String} aValue - the customer's company name.
 */
dw.customer.Profile.prototype.setCompanyName = function(aValue) {};

/**
 * Sets the customer's email address.
 * @memberOf dw.customer.Profile
 * @param {String} aValue - the customer's email address.
 */
dw.customer.Profile.prototype.setEmail = function(aValue) {};

/**
 * Sets the fax number to use for the customer.
 The length is restricted to 32 characters.
 * @memberOf dw.customer.Profile
 * @param {String} number - the fax number to use for the customer.
 */
dw.customer.Profile.prototype.setFax = function(number) {};

/**
 * Sets the customer's first name.
 * @memberOf dw.customer.Profile
 * @param {String} aValue - the customer's first name.
 */
dw.customer.Profile.prototype.setFirstName = function(aValue) {};

/**
 * Sets the customer's gender.
 * @memberOf dw.customer.Profile
 * @param {Number} aValue - the customer's gender.
 */
dw.customer.Profile.prototype.setGender = function(aValue) {};

/**
 * Sets the customer's job title.
 * @memberOf dw.customer.Profile
 * @param {String} aValue - the customer's job title.
 */
dw.customer.Profile.prototype.setJobTitle = function(aValue) {};

/**
 * Sets the customer's last name.
 * @memberOf dw.customer.Profile
 * @param {String} aValue - the customer's last name.
 */
dw.customer.Profile.prototype.setLastName = function(aValue) {};

/**
 * Sets the business phone number to use for the customer.
 The length is restricted to 32 characters.
 * @memberOf dw.customer.Profile
 * @param {String} number - the business phone number to use for the customer.
 */
dw.customer.Profile.prototype.setPhoneBusiness = function(number) {};

/**
 * Sets the phone number to use for the customer.
 The length is restricted to 32 characters.
 * @memberOf dw.customer.Profile
 * @param {String} number - the phone number to use for the customer.
 */
dw.customer.Profile.prototype.setPhoneHome = function(number) {};

/**
 * Sets the mobile phone number to use for the customer.
 The length is restricted to 32 characters.
 * @memberOf dw.customer.Profile
 * @param {String} number - the mobile phone number to use for the customer.
 */
dw.customer.Profile.prototype.setPhoneMobile = function(number) {};

/**
 * Sets the customer's preferred locale.
 * @memberOf dw.customer.Profile
 * @param {String} aValue - the customer's preferred locale.
 */
dw.customer.Profile.prototype.setPreferredLocale = function(aValue) {};

/**
 * Sets the salutation to use for the customer.
 * @memberOf dw.customer.Profile
 * @param {String} salutation - the salutation to use for the customer.
 * @deprecated Use <a href="class_dw_customer_Profile.html#dw_customer_Profile_setSalutation_String_DetailAnchor">setSalutation(String)</a>
 */
dw.customer.Profile.prototype.setSaluation = function(salutation) {};

/**
 * Sets the salutation to use for the customer.
 * @memberOf dw.customer.Profile
 * @param {String} salutation - the salutation to use for the customer.
 */
dw.customer.Profile.prototype.setSalutation = function(salutation) {};

/**
 * Sets the customer's second name.
 * @memberOf dw.customer.Profile
 * @param {String} aValue - the customer's second name.
 */
dw.customer.Profile.prototype.setSecondName = function(aValue) {};

/**
 * Sets the the customer's suffix.
 * @memberOf dw.customer.Profile
 * @param {String} aValue - the customer's suffix.
 */
dw.customer.Profile.prototype.setSuffix = function(aValue) {};

/**
 * Sets the tax ID value. The value can be set if the current context
 allows write access.
 The current context allows write access if the currently
 logged in user owns this profile and the connection is secured.
 * @memberOf dw.customer.Profile
 * @param {String} taxID - the tax ID value to set
 */
dw.customer.Profile.prototype.setTaxID = function(taxID) {};

/**
 * Sets the tax ID type.
 * @memberOf dw.customer.Profile
 * @param {String} taxIdType - the tax ID type to set
 */
dw.customer.Profile.prototype.setTaxIDType = function(taxIdType) {};

/**
 * Sets the customer's title.
 * @memberOf dw.customer.Profile
 * @param {String} aValue - the customer's title.
 */
dw.customer.Profile.prototype.setTitle = function(aValue) {};

/**
 * Represents a set of payment instruments associated with a registered customer.
 <p/>
 <b>Note:</b> this class allows access to sensitive personal and private
 information. Pay attention to appropriate legal and regulatory requirements
 when developing.
 * @class
 * @extends Object
 */
dw.customer.Wallet = function() {};
dw.customer.Wallet.prototype = new Object();

/**
 * Creates a new, empty payment instrument object associated with the
 related customer for the given payment method.
 * @memberOf dw.customer.Wallet
 * @param {String} paymentMethodId - the id of a payment method
 * @return {dw.customer.CustomerPaymentInstrument} the new payment instrument object.
 * @exception NullArgumentException
                If passed 'paymentMethod' is null.
 */
dw.customer.Wallet.prototype.createPaymentInstrument = function(paymentMethodId) {};

/**
 * Returns a collection of all payment instruments associated with the
 related customer.
 * @memberOf dw.customer.Wallet
 * @return {dw.util.Collection} Collection of all payment instruments.
 */
dw.customer.Wallet.prototype.getPaymentInstruments = function() {};

/**
 * Returns a collection of all payment instruments associated with the
 related customer filtered by the given payment method id. If
 <code>null</code> is passed as payment method id all payment instruments
 of the customer will be retrieved. If for the given payment method id no
 payment instrument is associated with the customer an empty collection
 will be returned.
 * @memberOf dw.customer.Wallet
 * @param {String} paymentMethodID - the paymentMethodID the payment method id to filter for
 * @return {dw.util.Collection} Collection of payment instruments for a payment method.
 */
dw.customer.Wallet.prototype.getPaymentInstruments = function(paymentMethodID) {};

/**
 * Removes a payment instrument associated with the customer.
 * @memberOf dw.customer.Wallet
 * @param {dw.customer.CustomerPaymentInstrument} instrument - the instrument associated with this customer
 * @exception NullArgumentException
                If passed 'instrument' is null.
 * @exception IllegalArgumentException
                If passed 'instrument' belongs to an other customer
 */
dw.customer.Wallet.prototype.removePaymentInstrument = function(instrument) {};

/**
 * Creates a new CSVReader with a ',' as separator character and a '"' as
 quote character. The reader doesn't skip any header lines.
 * @class
 * @extends Object
 * @param {dw.io.Reader} ioreader - the reader to use.
 */
dw.io.CSVStreamReader = function(ioreader) {};
dw.io.CSVStreamReader.prototype = new Object();

/**
 * Creates a new CSVReader with the specified separator character and a '"'
 as quote character. The reader doesn't skip any header lines.
 * @class
 * @extends Object
 * @param {dw.io.Reader} ioreader - the reader to use.
 * @param {String} separator - a string, which represents the separator character.
 */
dw.io.CSVStreamReader = function(ioreader, separator) {};
dw.io.CSVStreamReader.prototype = new Object();

/**
 * Creates a new CSVReader with the specified separator character and the
 specified quote character. The reader doesn't skip any header lines.
 * @class
 * @extends Object
 * @param {dw.io.Reader} ioreader - the reader to use.
 * @param {String} separator - a string, which represents the separator character.
 * @param {String} quote - a string, which represents the quote character.
 */
dw.io.CSVStreamReader = function(ioreader, separator, quote) {};
dw.io.CSVStreamReader.prototype = new Object();

/**
 * Creates a new CSVReader. The separator character, the quote character and
 the number of header lines can be specified in the call.
 * @class
 * @extends Object
 * @param {dw.io.Reader} ioreader - the reader to use.
 * @param {String} separator - a string, which represents the separator character.
 * @param {String} quote - a string, which represents the quote character.
 * @param {Number} skip - the number of lines to skip at the beginning of the file.
 */
dw.io.CSVStreamReader = function(ioreader, separator, quote, skip) {};
dw.io.CSVStreamReader.prototype = new Object();

/**
 * Closes the underlying reader.
 * @memberOf dw.io.CSVStreamReader
 */
dw.io.CSVStreamReader.prototype.close = function() {};

/**
 * Returns a list of lines representing the entire CSV file. Each line is a
 array of strings.
 <p/>
 Using this method on large feeds is inherently unsafe and may lead to an
 out-of-memory condition. Instead use method <a href="class_dw_io_CSVStreamReader.html#dw_io_CSVStreamReader_readNext_DetailAnchor">readNext()</a> and
 process entries line by line.
 * @memberOf dw.io.CSVStreamReader
 * @return {dw.util.List} a list of lines representing the entire CSV file.
 */
dw.io.CSVStreamReader.prototype.readAll = function() {};

/**
 * Returns the next line from the input stream. The line is returned as an
 array of strings. The method returns null if the end of the stream is
 reached.
 * @memberOf dw.io.CSVStreamReader
 * @return {String[]} the next line from the input stream as an array of strings.
 */
dw.io.CSVStreamReader.prototype.readNext = function() {};

/**
 * Create a new CSVStreamWriter with a ',' as separator and '"'
 as quote character.
 * @class
 * @extends Object
 * @param {dw.io.Writer} writer - the writer to use.
 */
dw.io.CSVStreamWriter = function(writer) {};
dw.io.CSVStreamWriter.prototype = new Object();

/**
 * Create a new CSVStreamWriter with the specified separator and '"'
 as quote character.
 * @class
 * @extends Object
 * @param {dw.io.Writer} writer - the writer to use.
 * @param {String} separator - the separator to use.
 */
dw.io.CSVStreamWriter = function(writer, separator) {};
dw.io.CSVStreamWriter.prototype = new Object();

/**
 * Create a new CSVStreamWriter with the specified separator and the
 specified quote character.
 * @class
 * @extends Object
 * @param {dw.io.Writer} writer - the writer to use.
 * @param {String} separator - the separator to use.
 * @param {String} quote - the quote to use.
 */
dw.io.CSVStreamWriter = function(writer, separator, quote) {};
dw.io.CSVStreamWriter.prototype = new Object();

/**
 * Closes the stream.
 * @memberOf dw.io.CSVStreamWriter
 */
dw.io.CSVStreamWriter.prototype.close = function() {};

/**
 * Write a single line to the CSV file.
 * @memberOf dw.io.CSVStreamWriter
 * @param {String[]} line - an array of strings.
 */
dw.io.CSVStreamWriter.prototype.writeNext = function(line) {};

/**
 * Creates a <code>File</code> from the given absolute file path in the
 file namespace.  If the specified path is not a valid accessible path,
 an exception will be thrown.

 <p/>The passed path should use the forward slash '/' as the path
 separator and begin with a leading slash.  However, if a leading slash
 is not provided, or the backslash character is used as the separator,
 these problems will be fixed.  The normalized value will then be returned
 by <a href="class_dw_io_File.html#dw_io_File_getFullPath_DetailAnchor">getFullPath()</a>.
 * @class
 * @extends Object
 * @param {String} absPath - the absolute file path  throws IOException
 */
dw.io.File = function(absPath) {};
dw.io.File.prototype = new Object();

/**
 * Creates a <code>File</code> given a root directory and a relative path.
 * @class
 * @extends Object
 * @param {dw.io.File} rootDir - File object representing root directory
 * @param {String} relPath - relative file path
 */
dw.io.File = function(rootDir, relPath) {};
dw.io.File.prototype = new Object();

/**
 * Catalogs root directory.
 * @type String
 * @memberOf dw.io.File
 * @static
 * @const
 */
dw.io.File.CATALOGS = '';

/**
 * Reserved for future use.
 * @type String
 * @memberOf dw.io.File
 * @static
 * @const
 */
dw.io.File.DYNAMIC = '';

/**
 * Import/export root directory.
 * @type String
 * @memberOf dw.io.File
 * @static
 * @const
 */
dw.io.File.IMPEX = '';

/**
 * Libraries root directory.
 * @type String
 * @memberOf dw.io.File
 * @static
 * @const
 */
dw.io.File.LIBRARIES = '';

/**
 * RealmData root directory.
 * @type String
 * @memberOf dw.io.File
 * @deprecated Folder to be removed.
 * @static
 * @const
 */
dw.io.File.REALMDATA = '';

/**
 * The UNIX style '/' path separator, which must be used for files paths.
 * @type String
 * @memberOf dw.io.File
 * @static
 * @const
 */
dw.io.File.SEPARATOR = '';

/**
 * Static content root directory.
 * @type String
 * @memberOf dw.io.File
 * @static
 * @const
 */
dw.io.File.STATIC = '';

/**
 * Temp root directory.
 * @type String
 * @memberOf dw.io.File
 * @static
 * @const
 */
dw.io.File.TEMP = '';

/**
 * Create file.
 * @memberOf dw.io.File
 * @return {Boolean} boolean, true - if file has been created, false - file already exists
 * @throws Exception
 */
dw.io.File.prototype.createNewFile = function() {};

/**
 * Indicates if the file exists.
 * @memberOf dw.io.File
 * @return {Boolean} true if file exists, false otherwise.
 */
dw.io.File.prototype.exists = function() {};

/**
 * Return the full file path denoted by this <code>File</code>.
 This value will be the same regardless of which constructor was
 used to create this <code>File</code>.
 * @memberOf dw.io.File
 * @return {String} the full file path.
 */
dw.io.File.prototype.getFullPath = function() {};

/**
 * Returns the name of the file or directory denoted by this object. This is
 just the last name in the pathname's name sequence. If the pathname's
 name sequence is empty, then the empty string is returned.
 * @memberOf dw.io.File
 * @return {String} The name of the file or directory denoted by this object.
 */
dw.io.File.prototype.getName = function() {};

/**
 * Returns the portion of the path relative to the root directory.
 * @memberOf dw.io.File
 * @return {String} the relative file path, possibly blank but not null.
 * @deprecated Use <a href="class_dw_io_File.html#dw_io_File_getFullPath_DetailAnchor">getFullPath()</a> to access the full path.
             This method does not return the correct path for files
             in the CATALOGS or LIBRARIES virtual directories.
 */
dw.io.File.prototype.getPath = function() {};

/**
 * Returns a <code>File</code> representing a directory for the specified
 root directory type. If the root directory
 type is CATALOGS or LIBRARIES, then an additional argument representing
 the specific catalog or library must be provided.  Otherwise, no
 additional arguments are needed.
 * @memberOf dw.io.File
 * @param {String} rootDir - root directory type (see the constants defined in this class)
 * @param {String[]} args - root directory specific arguments
 * @return {dw.io.File} File object representing the directory
 * @static
 * @varArgs
 */
dw.io.File.getRootDirectory = function(rootDir, args) {};

/**
 * Returns the root directory type, e.g. "IMPEX" represented by this
 <code>File</code>.
 * @memberOf dw.io.File
 * @return {String} root directory type
 */
dw.io.File.prototype.getRootDirectoryType = function() {};

/**
 * Assumes this instance is a gzip file. Unzipping it will
 explode the contents in the directory passed in (root).
 * @memberOf dw.io.File
 * @param {dw.io.File} root - a File indicating root. root must be a directory.
 * @throws Exception if the zip files contents can't be exploded.
 */
dw.io.File.prototype.gunzip = function(root) {};

/**
 * GZip this instance into a new gzip file. If you're zipping a file, then a single entry, the instance,
 is included in the output gzip file. Note that a new File is created. GZipping directories is not suppported.
 This file is never modified.
 * @memberOf dw.io.File
 * @param {dw.io.File} outputZipFile - the zip file created.
 * @throws IOException if the zip file can't be created.
 */
dw.io.File.prototype.gzip = function(outputZipFile) {};

/**
 * Indicates that this file is a directory.
 * @memberOf dw.io.File
 * @return {Boolean} true if the file is a directory, false otherwise.
 */
dw.io.File.prototype.isDirectory = function() {};

/**
 * Indicates if this file is a file.
 * @memberOf dw.io.File
 * @return {Boolean} true if the file is a file, false otherwise.
 */
dw.io.File.prototype.isFile = function() {};

/**
 * Return the time, in milliseconds, that this file was last modified.
 * @memberOf dw.io.File
 * @return {Number} the time, in milliseconds, that this file was last modified.
 */
dw.io.File.prototype.lastModified = function() {};

/**
 * Return the length of the file in bytes.
 * @memberOf dw.io.File
 * @return {Number} the file length in bytes.
 */
dw.io.File.prototype.length = function() {};

/**
 * Returns an array of strings naming the files and directories in the
 directory denoted by this object.

 <p/>
 If this object does not denote a directory, then this method returns
 <code>null</code>. Otherwise an array of strings is returned, one for
 each file or directory in the directory. Names denoting the directory
 itself and the directory's parent directory are not included in the
 result. Each string is a file name rather than a complete path.

 <p/>
 There is no guarantee that the name strings in the resulting array will
 appear in any specific order; they are not, in particular, guaranteed to
 appear in alphabetical order.
 * @memberOf dw.io.File
 * @return {String[]} An array of strings naming the files and directories in the          directory denoted by this <code>File</code>. The array will be          empty if the directory is empty. Returns <code>null</code> if          this <code>File</code> does not denote a directory.
 */
dw.io.File.prototype.list = function() {};

/**
 * Returns an array of <code>File</code> objects in the directory denoted
 by this <code>File</code>.

 <p/>
 If this <code>File</code> does not denote a directory, then this method
 returns <code>null</code>. Otherwise an array of <code>File</code>
 objects is returned, one for each file or directory in the directory.
 Files denoting the directory itself and the directory's parent directory
 are not included in the result.

 <p/>
 There is no guarantee that the files in the resulting array will appear
 in any specific order; they are not, in particular, guaranteed to appear
 in alphabetical order. Example usage:
 <p/>

 <code>
 // Assume "foo" is an accessible directory.<br/>
 var this_directory : dw.io.File = new File("foo");<br/>
 <br/>
 // Find all files in directory foo, one level "down".<br/>
 // listFiles() will <em>not</em> traverse subdirectories.<br/>
 var folder : dw.util.List = this_directory.listFiles();<br/>
 var first_element : dw.io.File = folder[0];<br/>
 <br/>
 function modification_comparison(lhs : File, rhs : File) <br/>
 {<br/>
 &nbsp;&nbsp;return lhs.lastModified() &lt; rhs.lastModified();<br/>
 }<br/>
 <br/>
 function lexigraphic_comparison(lhs: File, rhs : File)<br/>
 {<br/>
 &nbsp;&nbsp;return lhs.getName() &lt; rhs.getName();<br/>
 }<br/>
 <br/>
 var time_ordered_folder : dw.util.ArrayList = folder.sort(modification_comparison);<br/>
 var alphabetic_folder : dw.util.ArrayList = folder.sort(lexigraphic_comparison); <br/>
 </code>
 * @memberOf dw.io.File
 * @return {dw.util.List} a list of <code>File</code> objects or <code>null</code> if          this is not a directory.
 */
dw.io.File.prototype.listFiles = function() {};

/**
 * Returns an array of <code>File</code> objects denoting the files and
 directories in the directory denoted by this object that satisfy the
 specified filter. The behavior of this method is the same as that of the
 <code><a href="class_dw_io_File.html#dw_io_File_listFiles_DetailAnchor">listFiles()</a></code> method, except that the files in the
 returned array must satisfy the filter. The filter is a Javascript
 function which accepts one argument, a <code>File</code>, and returns
 true or false depending on whether the file meets the filter conditions.
 If the given <code>filter</code> is <code>null</code> then all files
 are accepted. Otherwise, a file satisfies the filter if and only if the
 filter returns <code>true</code>. Example usage:
 <p/>

 <code>
 // Assume "foo" is an accessible directory.<br/>
 var this_directory : dw.io.File = new File("foo");<br/>
 <br/>
 function longer_than_3(candidate : dw.io.File)<br/>
 {<br/>
 &nbsp;&nbsp;return candidate.getName().length > 3;<br/>
 }<br/>
 <br/>
 // Find all files in directory foo, one level "down",<br/>
 // such that the filename is longer than 3 characters.<br/>
 var folder_long_names : dw.util.List = this_directory.listFiles(longer_than_3);<br/>
 </code>
 * @memberOf dw.io.File
 * @param {Object} filter - a Javascript function which accepts a <code>File</code>             argument and returns <code>true</code> or <code>false</code>.
 * @return {dw.util.List} list of <code>File</code> objects or <code>null</code> if          this is not a directory
 */
dw.io.File.prototype.listFiles = function(filter) {};

/**
 * Returns an MD5 hash of the content of the file of this instance.
 * @memberOf dw.io.File
 * @return {String} The MD5 hash of the file's content.
 * @throws Exception if the file could not be read or is a directory.
 */
dw.io.File.prototype.md5 = function() {};

/**
 * Creates a directory.
 * @memberOf dw.io.File
 * @return {Boolean} true if file creation succeeded, false otherwise.
 */
dw.io.File.prototype.mkdir = function() {};

/**
 * Creates a directory, including, its parent directories, as needed.
 * @memberOf dw.io.File
 * @return {Boolean} true if file creation succeeded, false otherwise.
 */
dw.io.File.prototype.mkdirs = function() {};

/**
 * Deletes the file or directory denoted by this object. If this File
 represents a directory, then the directory must be empty in order to be
 deleted.
 * @memberOf dw.io.File
 * @return {Boolean} true if file deletion succeeded, false otherwise
 */
dw.io.File.prototype.remove = function() {};

/**
 * Rename file.
 * @memberOf dw.io.File
 * @param {dw.io.File} file - the File object to rename to
 * @return {Boolean} boolean, true - if file rename succeeded, false - failed
 */
dw.io.File.prototype.renameTo = function(file) {};

/**
 * Assumes this instance is a zip file. Unzipping it will
 explode the contents in the directory passed in (root).
 * @memberOf dw.io.File
 * @param {dw.io.File} root - a File indicating root. root must be a directory.
 * @throws Exception if the zip files contents can't be exploded.
 */
dw.io.File.prototype.unzip = function(root) {};

/**
 * Zip this instance into a new zip file. If you're zipping a directory,
 the directory itself and all its children files to any level (any number of subdirectories)
 are included in the zip file. The directory will be the only entry in the archive (single root).
 If you're zipping a file, then a single entry, the instance,
 is included in the output zip file. Note that a new File is created.
 This file is never modified.
 * @memberOf dw.io.File
 * @param {dw.io.File} outputZipFile - the zip file created.
 * @throws IOException if the zip file can't be created.
 */
dw.io.File.prototype.zip = function(outputZipFile) {};

/**
 * Constructs the reader.
 * @class
 * @extends dw.io.Reader
 * @param {dw.io.File} file - the file object to read.
 */
dw.io.FileReader = function(file) {};
dw.io.FileReader.prototype = new dw.io.Reader();

/**
 * Constructs the reader.
 * @class
 * @extends dw.io.Reader
 * @param {dw.io.File} file - the file object to read.
 * @param {String} encoding - the character encoding to use.
 */
dw.io.FileReader = function(file, encoding) {};
dw.io.FileReader.prototype = new dw.io.Reader();

/**
 * Constructs the writer for the specified file. Uses "UTF-8" as encoding.
 * @class
 * @extends dw.io.Writer
 * @param {dw.io.File} file - the file object to write to.
 */
dw.io.FileWriter = function(file) {};
dw.io.FileWriter.prototype = new dw.io.Writer();

/**
 * Constructs the writer for the specified file. Optional file append mode
 is supported. Uses "UTF-8" as encoding.
 * @class
 * @extends dw.io.Writer
 * @param {dw.io.File} file - the file object to write to.
 * @param {Boolean} append - flag, whether the file should be written in append mode
 */
dw.io.FileWriter = function(file, append) {};
dw.io.FileWriter.prototype = new dw.io.Writer();

/**
 * Constructs the writer for the specified file with the specified encoding.
 * @class
 * @extends dw.io.Writer
 * @param {dw.io.File} file - the file object to write to.
 * @param {String} encoding - the character encoding to use.
 */
dw.io.FileWriter = function(file, encoding) {};
dw.io.FileWriter.prototype = new dw.io.Writer();

/**
 * Constructs the writer for the specified file with the specified encoding.
 Optional file append mode is supported.
 * @class
 * @extends dw.io.Writer
 * @param {dw.io.File} file - the file object to write to.
 * @param {String} encoding - the character encoding to use.
 * @param {Boolean} append - flag indicating whether the file should be written in append mode.
 */
dw.io.FileWriter = function(file, encoding, append) {};
dw.io.FileWriter.prototype = new dw.io.Writer();

/**
 * Writes the specified line.
 * @memberOf dw.io.FileWriter
 * @param {String} str - the line to write to the file.
 */
dw.io.FileWriter.prototype.writeLine = function(str) {};

/**
 * The class represent a stream of bytes that can be read from the
 application. The InputStream itself doesn't provide any methods
 to read the data. Instead the InputStream can be chained with
 other classes like a XMLStreamReader to read data.
 * @class
 * @extends Object
 */
dw.io.InputStream = function() {};
dw.io.InputStream.prototype = new Object();

/**
 * Closes the input stream.
 * @memberOf dw.io.InputStream
 */
dw.io.InputStream.prototype.close = function() {};

/**
 * The class represent a stream of bytes that can be written from the
 application. The OutputStream itself doesn't provide any methods
 to write the data. Instead the OutputStream can be chained with
 other classes like a XMLStreamWriter to write data.
 <p/>
 <b>Note:</b> when this class is used with sensitive data, be careful in persisting sensitive information to disk.
 * @class
 * @extends Object
 */
dw.io.OutputStream = function() {};
dw.io.OutputStream.prototype = new Object();

/**
 * Closes the output stream.
 * @memberOf dw.io.OutputStream
 */
dw.io.OutputStream.prototype.close = function() {};

/**
 * Template output stream writer.

 Printwriter is available in the template scripting context and is used
 to write data into the template output stream. You cannot instantiate this class
 directly. Instead, the system assigns the object to variable named 'out' in the script context
 to be used by the template scripts.
 <p/>
 <b>Note:</b> when this class is used with sensitive data, be careful in persisting sensitive information to disk.
 * @class
 * @extends dw.io.Writer
 */
dw.io.PrintWriter = function() {};
dw.io.PrintWriter.prototype = new dw.io.Writer();

/**
 * Prints the given string into the output stream.
 * @memberOf dw.io.PrintWriter
 * @param {String} str - the String object
 */
dw.io.PrintWriter.prototype.print = function(str) {};

/**
 * Prints a line break into the output stream.
 * @memberOf dw.io.PrintWriter
 */
dw.io.PrintWriter.prototype.println = function() {};

/**
 * Print the given string followed by a line break into the output stream.
 * @memberOf dw.io.PrintWriter
 * @param {String} str - the String object
 */
dw.io.PrintWriter.prototype.println = function(str) {};

/**
 * Construct a reader for random read access to the provided file.
 * @class
 * @extends Object
 * @param {dw.io.File} file - The file to be read. Must not be null.
 * @throws IOException If the given file object does not denote an existing
             regular file
 */
dw.io.RandomAccessFileReader = function(file) {};
dw.io.RandomAccessFileReader.prototype = new Object();

/**
 * Closes this random access file reader and releases any system resources
 associated with the stream.
 * @memberOf dw.io.RandomAccessFileReader
 * @throws IOException if an I/O error occurs.
 */
dw.io.RandomAccessFileReader.prototype.close = function() {};

/**
 * Returns the current offset in this file.
 * @memberOf dw.io.RandomAccessFileReader
 * @return {Number} the offset from the beginning of the file, in bytes, at which the          next read occurs.
 * @throws IOException if an I/O error occurs.
 */
dw.io.RandomAccessFileReader.prototype.getPosition = function() {};

/**
 * Returns the length of this file.
 * @memberOf dw.io.RandomAccessFileReader
 * @return {Number} the length of this file, measured in bytes.
 * @throws IOException if an I/O error occurs.
 */
dw.io.RandomAccessFileReader.prototype.length = function() {};

/**
 * Reads a signed eight-bit value from the file starting from the current
 file pointer. Since the byte is interpreted as signed, the value returned
 will always be between -128 and +127.
 * @memberOf dw.io.RandomAccessFileReader
 * @return {Number} the next byte of this file as a signed eight-bit byte.
 * @throws IOException if an I/O error occurs or if this file has reached
             the end.
 */
dw.io.RandomAccessFileReader.prototype.readByte = function() {};

/**
 * Reads up to n bytes from the file starting at the current file pointer.
 If there are fewer than n bytes remaining in the file, then as many bytes
 as possible are read. If no bytes remain in the file, then null is
 returned.
 * @memberOf dw.io.RandomAccessFileReader
 * @param {Number} numBytes - The number of bytes to read. Must be non-negative and             smaller than <a href="class_dw_util_Bytes.html#dw_util_Bytes_MAX_BYTES_DetailAnchor">Bytes.MAX_BYTES</a> or an exception             will be thrown.
 * @return {dw.util.Bytes} A Bytes object representing the read bytes or null if no bytes          were read.
 * @throws IOException if an I/O error occurs.
 * @throws IllegalArgumentException if numBytes< 0 or numBytes > Bytes.MAX_BYTES.
 */
dw.io.RandomAccessFileReader.prototype.readBytes = function(numBytes) {};

/**
 * Sets the file-pointer offset, measured from the beginning of this file,
 at which the next read occurs. The offset may be set beyond the end of
 the file.
 * @memberOf dw.io.RandomAccessFileReader
 * @param {Number} position - the offset position, measured in bytes from the beginning             of the file, at which to set the file pointer
 * @throws IOException if position is less than 0 or if an I/O error occurs.
 */
dw.io.RandomAccessFileReader.prototype.setPosition = function(position) {};

/**
 * Closes the reader.
 * @memberOf dw.io.Reader
 */
dw.io.Reader.prototype.close = function() {};

/**
 * The method reads the whole input stream, parses it and returns a list of
 strings.
 <p/>
 Using this method on large feeds is inherently unsafe and may lead to an
 out-of-memory condition. Instead use method <a href="class_dw_io_Reader.html#dw_io_Reader_readLine_DetailAnchor">readLine()</a> and
 process one line at a time.
 * @memberOf dw.io.Reader
 * @return {dw.util.List} a list of strings
 */
dw.io.Reader.prototype.getLines = function() {};

/**
 * The method reads the whole input stream as one string and returns it.
 <p/>
 Using this method is unsafe if the length of the input stream is not
 known and may lead to an out-of-memory condition. Instead use method
 <a href="class_dw_io_Reader.html#dw_io_Reader_read_int_DetailAnchor">read(Number)</a>.
 * @memberOf dw.io.Reader
 * @return {String} a string, which represents the whole content of the InputStream
 * @throws IOException if something went wrong while reading from the
             underlying stream
 */
dw.io.Reader.prototype.getString = function() {};

/**
 * Reads a single character from the stream. The method returns null if the
 end of the stream is reached.
 * @memberOf dw.io.Reader
 * @return {String} a single character in a string.
 */
dw.io.Reader.prototype.read = function() {};

/**
 * Reads multiple characters from the stream as string. The actual number of
 characters that were read can be determined from the length of the
 returned string.
 * @memberOf dw.io.Reader
 * @param {Number} length - the number of characters to read.
 * @return {String} a string whose length is controlled by the length parameter. The          actual number of characters that were read can be determined from          the length of the returned string.
 */
dw.io.Reader.prototype.read = function(length) {};

/**
 * Reads the next line.
 * @memberOf dw.io.Reader
 * @return {String} A String containing the contents of the line, not including any          line termination characters, or null if the end of the stream has          been reached.
 */
dw.io.Reader.prototype.readLine = function() {};

/**
 * Identifies if this stream is ready to be read.
 * @memberOf dw.io.Reader
 * @return {Boolean} true if the stream is ready to be read, false otherwise.
 */
dw.io.Reader.prototype.ready = function() {};

/**
 * Skips the specified number of characters in the stream.
 * @memberOf dw.io.Reader
 * @param {Number} n - the number of characters to skip.
 */
dw.io.Reader.prototype.skip = function(n) {};

/**
 * Creates a new StringWriter.
 * @class
 * @extends dw.io.Writer
 */
dw.io.StringWriter = function() {};
dw.io.StringWriter.prototype = new dw.io.Writer();

/**
 * Returns a string representation of this writer.
 * @memberOf dw.io.StringWriter
 * @return {String} a string representation of this writer.
 */
dw.io.StringWriter.prototype.toString = function() {};

/**
 * Write the given string to the stream.
 * @memberOf dw.io.StringWriter
 * @param {String} str - the string to write to the stream.
 */
dw.io.StringWriter.prototype.write = function(str) {};

/**
 * Write the given string to the stream.
 * @memberOf dw.io.StringWriter
 * @param {String} str - the string to write to the stream.
 * @param {Number} off - the offset from which to start writing characters to the             stream.
 * @param {Number} len - the number of characters to write from the stream.
 */
dw.io.StringWriter.prototype.write = function(str, off, len) {};

/**
 * Closes the writer.
 * @memberOf dw.io.Writer
 */
dw.io.Writer.prototype.close = function() {};

/**
 * Flushes the buffer.
 * @memberOf dw.io.Writer
 */
dw.io.Writer.prototype.flush = function() {};

/**
 * Write the given string to the stream.
 * @memberOf dw.io.Writer
 * @param {String} str - the string to write to the stream.
 */
dw.io.Writer.prototype.write = function(str) {};

/**
 * Write the given string to the stream.
 * @memberOf dw.io.Writer
 * @param {String} str - the string to write to the stream.
 * @param {Number} off - the offset from which to start writing characters to the stream.
 * @param {Number} len - the number of characters to write from the stream.
 */
dw.io.Writer.prototype.write = function(str, off, len) {};

/**
 * Constructs the writer for the specified writer.
 * @class
 * @extends dw.io.XMLStreamWriter
 * @param {dw.io.Writer} writer - the writer to use.
 */
dw.io.XMLIndentingStreamWriter = function(writer) {};
dw.io.XMLIndentingStreamWriter.prototype = new dw.io.XMLStreamWriter();

/**
 * Returns the indent.
 * @memberOf dw.io.XMLIndentingStreamWriter
 * @return {String} Returns the indent.
 */
dw.io.XMLIndentingStreamWriter.prototype.getIndent = function() {};

/**
 * Returns the string that is used for a new line character. The
 default is the normal new line character.
 * @memberOf dw.io.XMLIndentingStreamWriter
 * @return {String} the new line.
 */
dw.io.XMLIndentingStreamWriter.prototype.getNewLine = function() {};

/**
 * Specifies a string that will be used as identing characters. The
 default are two space characters.
 * @memberOf dw.io.XMLIndentingStreamWriter
 * @param {String} indent - The indent to set.
 */
dw.io.XMLIndentingStreamWriter.prototype.setIndent = function(indent) {};

/**
 * Sets the string that is used for a new line character.
 * @memberOf dw.io.XMLIndentingStreamWriter
 * @param {String} newLine - The newLine to set.
 */
dw.io.XMLIndentingStreamWriter.prototype.setNewLine = function(newLine) {};

/**
 *
 * @class
 * @extends Object
 */
dw.io.XMLStreamConstants = function() {};
dw.io.XMLStreamConstants.prototype = new Object();

/**
 * Represents an attribute in an element.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.ATTRIBUTE = 0;

/**
 * Represents a CDATA section in an element.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.CDATA = 0;

/**
 * Represents the character data in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.CHARACTERS = 0;

/**
 * Represents a comment in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.COMMENT = 0;

/**
 * Represents the document type definition.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.DTD = 0;

/**
 * Represents the end of an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.END_DOCUMENT = 0;

/**
 * Represents the end of an element in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.END_ELEMENT = 0;

/**
 * Represents the entity declaration in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.ENTITY_DECLARATION = 0;

/**
 * Represents an entity reference in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.ENTITY_REFERENCE = 0;

/**
 * Represents a namespace declaration in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.NAMESPACE = 0;

/**
 * Represents the notation declaration in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.NOTATION_DECLARATION = 0;

/**
 * Represents processing instruction in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.PROCESSING_INSTRUCTION = 0;

/**
 * Represents a space in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.SPACE = 0;

/**
 * Represents the start of an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.START_DOCUMENT = 0;

/**
 * Represents the start of an element in an XML document.
 * @type Number
 * @memberOf dw.io.XMLStreamConstants
 * @static
 * @const
 */
dw.io.XMLStreamConstants.START_ELEMENT = 0;

/**
 * Constructs the stream readon on behalf of the reader.
 * @class
 * @extends Object
 * @param {dw.io.Reader} reader - the reader to use.
 */
dw.io.XMLStreamReader = function(reader) {};
dw.io.XMLStreamReader.prototype = new Object();

/**
 * Frees any resources associated with this Reader.  This method does not close the
 underlying input source.
 * @memberOf dw.io.XMLStreamReader
 */
dw.io.XMLStreamReader.prototype.close = function() {};

/**
 * Returns the count of attributes on this START_ELEMENT,
 this method is only valid on a START_ELEMENT or ATTRIBUTE.  This
 count excludes namespace definitions.  Attribute indices are
 zero-based.
 * @memberOf dw.io.XMLStreamReader
 * @return {Number} returns the number of attributes.
 */
dw.io.XMLStreamReader.prototype.getAttributeCount = function() {};

/**
 * Returns the localName of the attribute at the provided
 index.
 * @memberOf dw.io.XMLStreamReader
 * @param {Number} index - the position of the attribute.
 * @return {String} the local name of the attribute.
 */
dw.io.XMLStreamReader.prototype.getAttributeLocalName = function(index) {};

/**
 * Returns the namespace of the attribute at the provided
 index.
 * @memberOf dw.io.XMLStreamReader
 * @param {Number} index - the position of the attribute
 * @return {String} the namespace URI (can be null)
 */
dw.io.XMLStreamReader.prototype.getAttributeNamespace = function(index) {};

/**
 * Returns the prefix of this attribute at the
 provided index.
 * @memberOf dw.io.XMLStreamReader
 * @param {Number} index - the position of the attribute.
 * @return {String} the prefix of the attribute.
 */
dw.io.XMLStreamReader.prototype.getAttributePrefix = function(index) {};

/**
 * Returns the XML type of the attribute at the provided
 index.
 * @memberOf dw.io.XMLStreamReader
 * @param {Number} index - the position of the attribute.
 * @return {String} the XML type of the attribute.
 */
dw.io.XMLStreamReader.prototype.getAttributeType = function(index) {};

/**
 * Returns the value of the attribute at the
 index.
 * @memberOf dw.io.XMLStreamReader
 * @param {Number} index - the position of the attribute.
 * @return {String} the attribute value.
 */
dw.io.XMLStreamReader.prototype.getAttributeValue = function(index) {};

/**
 * Returns the normalized attribute value of the
 attribute with the namespace and localName
 If the namespaceURI is null the namespace
 is not checked for equality
 * @memberOf dw.io.XMLStreamReader
 * @param {String} namespaceURI - the namespace of the attribute
 * @param {String} localName - the local name of the attribute, cannot be null
 * @return {String} returns the value of the attribute or null if not found.
 */
dw.io.XMLStreamReader.prototype.getAttributeValue = function(namespaceURI, localName) {};

/**
 * Returns the character encoding declared on the XML declaration
 Returns null if none was declared.
 * @memberOf dw.io.XMLStreamReader
 * @return {String} the encoding declared in the document or null.
 */
dw.io.XMLStreamReader.prototype.getCharacterEncodingScheme = function() {};

/**
 * Returns the column number where the current event ends or -1 if none is
 available.
 * @memberOf dw.io.XMLStreamReader
 * @return {Number} the column number or -1.
 */
dw.io.XMLStreamReader.prototype.getColumnNumber = function() {};

/**
 * Reads the content of a text-only element, an exception is thrown if this is
 not a text-only element.
 Regardless of value of javax.xml.stream.isCoalescing this method always returns coalesced content.
 <br /> Precondition: the current event is START_ELEMENT.
 <br /> Postcondition: the current event is the corresponding END_ELEMENT.

 <br />The method does the following (implementations are free to optimized
 but must do equivalent processing):
 <pre>
 if(getEventType() != XMLStreamConstants.START_ELEMENT) {
 throw new XMLStreamException(
 "parser must be on START_ELEMENT to read next text", getLocation());
 }
 int eventType = next();
 StringBuffer content = new StringBuffer();
 while(eventType != XMLStreamConstants.END_ELEMENT ) {
 if(eventType == XMLStreamConstants.CHARACTERS
 || eventType == XMLStreamConstants.CDATA
 || eventType == XMLStreamConstants.SPACE
 || eventType == XMLStreamConstants.ENTITY_REFERENCE) {
 buf.append(getText());
 } else if(eventType == XMLStreamConstants.PROCESSING_INSTRUCTION
 || eventType == XMLStreamConstants.COMMENT) {
 // skipping
 } else if(eventType == XMLStreamConstants.END_DOCUMENT) {
 throw new XMLStreamException(
 "unexpected end of document when reading element text content", this);
 } else if(eventType == XMLStreamConstants.START_ELEMENT) {
 throw new XMLStreamException(
 "element text content may not contain START_ELEMENT", getLocation());
 } else {
 throw new XMLStreamException(
 "Unexpected event type "+eventType, getLocation());
 }
 eventType = next();
 }
 return buf.toString();
 </pre>
 * @memberOf dw.io.XMLStreamReader
 * @return {String}
 */
dw.io.XMLStreamReader.prototype.getElementText = function() {};

/**
 * Return input encoding if known or null if unknown.
 * @memberOf dw.io.XMLStreamReader
 * @return {String} the encoding of this instance or null
 */
dw.io.XMLStreamReader.prototype.getEncoding = function() {};

/**
 * Returns an integer code that indicates the type
 of the event the cursor is pointing to.
 * @memberOf dw.io.XMLStreamReader
 * @return {Number} an integer code that indicates the type  of the event the cursor is pointing to.
 */
dw.io.XMLStreamReader.prototype.getEventType = function() {};

/**
 * Returns the line number where the current event ends or -1 if none is
 available.
 * @memberOf dw.io.XMLStreamReader
 * @return {Number} the line number or -1.
 */
dw.io.XMLStreamReader.prototype.getLineNumber = function() {};

/**
 * Returns the (local) name of the current event.
 For START_ELEMENT or END_ELEMENT returns the (local) name of the current element.
 For ENTITY_REFERENCE it returns entity name.
 The current event must be START_ELEMENT or END_ELEMENT,
 or ENTITY_REFERENCE.
 * @memberOf dw.io.XMLStreamReader
 * @return {String} the local name.
 */
dw.io.XMLStreamReader.prototype.getLocalName = function() {};

/**
 * Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT,
 this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE. On
 an END_ELEMENT the count is of the namespaces that are about to go
 out of scope.  This is the equivalent of the information reported
 by SAX callback for an end element event.
 * @memberOf dw.io.XMLStreamReader
 * @return {Number} returns the number of namespace declarations on this specific element.
 */
dw.io.XMLStreamReader.prototype.getNamespaceCount = function() {};

/**
 * Returns the prefix for the namespace declared at the
 index.  Returns null if this is the default namespace
 declaration.
 * @memberOf dw.io.XMLStreamReader
 * @param {Number} index - the position of the namespace declaration.
 * @return {String} returns the namespace prefix.
 */
dw.io.XMLStreamReader.prototype.getNamespacePrefix = function(index) {};

/**
 * If the current event is a START_ELEMENT or END_ELEMENT  this method
 returns the URI of the prefix or the default namespace.
 Returns null if the event does not have a prefix.
 * @memberOf dw.io.XMLStreamReader
 * @return {String} the URI bound to this elements prefix, the default namespace, or null.
 */
dw.io.XMLStreamReader.prototype.getNamespaceURI = function() {};

/**
 * Returns the uri for the namespace declared at the
 index.
 * @memberOf dw.io.XMLStreamReader
 * @param {Number} index - the position of the namespace declaration.
 * @return {String} returns the namespace uri.
 */
dw.io.XMLStreamReader.prototype.getNamespaceURI = function(index) {};

/**
 * Return the uri for the given prefix.
 The uri returned depends on the current state of the processor.

 <p/><strong>NOTE:</strong>The 'xml' prefix is bound as defined in
 <a href="http://www.w3.org/TR/REC-xml-names/#ns-using">Namespaces in XML</a>
 specification to "http://www.w3.org/XML/1998/namespace".

 <p/><strong>NOTE:</strong> The 'xmlns' prefix must be resolved to following namespace
 <a href="http://www.w3.org/2000/xmlns/">http://www.w3.org/2000/xmlns/</a>
 * @memberOf dw.io.XMLStreamReader
 * @param {String} prefix - The prefix to lookup, may not be null
 * @return {String} the uri bound to the given prefix or null if it is not bound
 */
dw.io.XMLStreamReader.prototype.getNamespaceURI = function(prefix) {};

/**
 * Get the data section of a processing instruction.
 * @memberOf dw.io.XMLStreamReader
 * @return {String} the data or null.
 */
dw.io.XMLStreamReader.prototype.getPIData = function() {};

/**
 * Get the target of a processing instruction.
 * @memberOf dw.io.XMLStreamReader
 * @return {String} the target or null.
 */
dw.io.XMLStreamReader.prototype.getPITarget = function() {};

/**
 * Returns the prefix of the current event or null if the event does not have a prefix
 * @memberOf dw.io.XMLStreamReader
 * @return {String} the prefix or null.
 */
dw.io.XMLStreamReader.prototype.getPrefix = function() {};

/**
 * Returns the current value of the parse event as a string,
 this returns the string value of a CHARACTERS event,
 returns the value of a COMMENT, the replacement value
 for an ENTITY_REFERENCE, the string value of a CDATA section,
 the string value for a SPACE event,
 or the String value of the internal subset of the DTD.
 If an ENTITY_REFERENCE has been resolved, any character data
 will be reported as CHARACTERS events.
 * @memberOf dw.io.XMLStreamReader
 * @return {String} the current text or null.
 */
dw.io.XMLStreamReader.prototype.getText = function() {};

/**
 * Returns the length of the sequence of characters for this
 Text event within the text character array.
 * @memberOf dw.io.XMLStreamReader
 * @return {Number} the length of the sequence of characters for this  Text event within the text character array.
 */
dw.io.XMLStreamReader.prototype.getTextLength = function() {};

/**
 * Returns the offset into the text character array where the first
 character (of this text event) is stored.
 * @memberOf dw.io.XMLStreamReader
 * @return {Number} the offset into the text character array where the first  character (of this text event) is stored.
 */
dw.io.XMLStreamReader.prototype.getTextStart = function() {};

/**
 * Get the xml version declared on the xml declaration.
 Returns null if none was declared.
 * @memberOf dw.io.XMLStreamReader
 * @return {String} the XML version or null.
 */
dw.io.XMLStreamReader.prototype.getVersion = function() {};

/**
 * Reads a sub-tree of the XML document and parses it as XML object.
 <p/>
 The stream must be positioned on a START_ELEMENT. Do not call the method
 when the stream is positioned at document's root element. This would
 cause the whole document to be parsed into a single XML what may lead to
 an out-of-memory condition. Instead use #next() to navigate to
 sub-elements and invoke getXMLObject() there. Do not keep references to
 more than the currently processed XML to keep memory consumption low. The
 method reads the stream up to the matching END_ELEMENT. When the method
 returns the current event is the END_ELEMENT event.
 * @memberOf dw.io.XMLStreamReader
 * @return {Object}
 */
dw.io.XMLStreamReader.prototype.getXMLObject = function() {};

/**
 * Identifies if the current event has a name (is a START_ELEMENT or END_ELEMENT)
 * @memberOf dw.io.XMLStreamReader
 * @return {Boolean} true if the current event has a name, false otherwise.
 */
dw.io.XMLStreamReader.prototype.hasName = function() {};

/**
 * Returns true if there are more parsing events and false
 if there are no more events.  This method will return
 false if the current state of the XMLStreamReader is
 END_DOCUMENT
 * @memberOf dw.io.XMLStreamReader
 * @return {Boolean} true if there are more events, false otherwise
 */
dw.io.XMLStreamReader.prototype.hasNext = function() {};

/**
 * Indicates if the current event has text.
 The following events have text:
 CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT, SPACE.
 * @memberOf dw.io.XMLStreamReader
 * @return {Boolean} true if the current event has text, false otherwise.
 */
dw.io.XMLStreamReader.prototype.hasText = function() {};

/**
 * Identifies if this
 attribute was created by default.
 * @memberOf dw.io.XMLStreamReader
 * @param {Number} index - the position of the attribute.
 * @return {Boolean} true if this is a default attribute, false otherwise.
 */
dw.io.XMLStreamReader.prototype.isAttributeSpecified = function(index) {};

/**
 * Identifies if the cursor points to a character data event.
 * @memberOf dw.io.XMLStreamReader
 * @return {Boolean} true if the cursor points to character data, false otherwise.
 */
dw.io.XMLStreamReader.prototype.isCharacters = function() {};

/**
 * Identifies if the cursor points to an end tag.
 * @memberOf dw.io.XMLStreamReader
 * @return {Boolean} true if the cursor points to an end tag, false otherwise.
 */
dw.io.XMLStreamReader.prototype.isEndElement = function() {};

/**
 * Get the standalone declaration from the xml declaration.
 * @memberOf dw.io.XMLStreamReader
 * @return {Boolean} true if this is standalone, or false otherwise.
 */
dw.io.XMLStreamReader.prototype.isStandalone = function() {};

/**
 * Identifies if the cursor points to a start tag.
 * @memberOf dw.io.XMLStreamReader
 * @return {Boolean} true if the cursor points to a start tag, false otherwise.
 */
dw.io.XMLStreamReader.prototype.isStartElement = function() {};

/**
 * Identifies if the cursor points to a character data event
 that consists of all whitespace.
 * @memberOf dw.io.XMLStreamReader
 * @return {Boolean} true if the cursor points to all whitespace, false otherwise.
 */
dw.io.XMLStreamReader.prototype.isWhiteSpace = function() {};

/**
 * Get next parsing event - a processor may return all contiguous
 character data in a single chunk, or it may split it into several chunks.
 If the property javax.xml.stream.isCoalescing is set to true
 element content must be coalesced and only one CHARACTERS event
 must be returned for contiguous element content or
 CDATA Sections.

 By default entity references must be
 expanded and reported transparently to the application.
 An exception will be thrown if an entity reference cannot be expanded.
 If element content is empty (i.e. content is "") then no CHARACTERS event will be reported.

 <p/>Given the following XML:<br/>
 &lt;foo&gt;&lt;!--description--&gt;content text&lt;!&#91;CDATA&#91;&lt;greeting&gt;Hello&lt;/greeting&gt;&#93;&#93;&gt;other content&lt;/foo&gt;<br/>
 The behavior of calling next() when being on foo will be:<br/>
 1- the comment (COMMENT)<br/>
 2- then the characters section (CHARACTERS)<br/>
 3- then the CDATA section (another CHARACTERS)<br/>
 4- then the next characters section (another CHARACTERS)<br/>
 5- then the END_ELEMENT<br/>

 <p/><b>NOTE:</b> empty element (such as &lt;tag/>) will be reported
  with  two separate events: START_ELEMENT, END_ELEMENT - This preserves
   parsing equivalency of empty element to &lt;tag&gt;&lt;/tag&gt;.

 This method will throw an IllegalStateException if it is called after hasNext() returns false.
 * @memberOf dw.io.XMLStreamReader
 * @return {Number} the integer code corresponding to the current parse event
 */
dw.io.XMLStreamReader.prototype.next = function() {};

/**
 * Skips any white space (isWhiteSpace() returns true), COMMENT,
 or PROCESSING_INSTRUCTION,
 until a START_ELEMENT or END_ELEMENT is reached.
 If other than white space characters, COMMENT, PROCESSING_INSTRUCTION, START_ELEMENT, END_ELEMENT
 are encountered, an exception is thrown. This method should
 be used when processing element-only content seperated by white space.

 <br /> Precondition: none
 <br /> Postcondition: the current event is START_ELEMENT or END_ELEMENT
 and cursor may have moved over any whitespace event.

 <br />Essentially it does the following (implementations are free to optimized
 but must do equivalent processing):
 <pre>
 int eventType = next();
 while((eventType == XMLStreamConstants.CHARACTERS &amp;&amp; isWhiteSpace()) // skip whitespace
 || (eventType == XMLStreamConstants.CDATA &amp;&amp; isWhiteSpace())
 // skip whitespace
 || eventType == XMLStreamConstants.SPACE
 || eventType == XMLStreamConstants.PROCESSING_INSTRUCTION
 || eventType == XMLStreamConstants.COMMENT
 ) {
 eventType = next();
 }
 if (eventType != XMLStreamConstants.START_ELEMENT &amp;&amp; eventType != XMLStreamConstants.END_ELEMENT) {
 throw new String XMLStreamException("expected start or end tag", getLocation());
 }
 return eventType;
 </pre>
 * @memberOf dw.io.XMLStreamReader
 * @return {Number} the event type of the element read (START_ELEMENT or END_ELEMENT)
 */
dw.io.XMLStreamReader.prototype.nextTag = function() {};

/**
 * Test if the current event is of the given type and if the namespace and name match the current
 namespace and name of the current event.  If the namespaceURI is null it is not checked for equality,
 if the localName is null it is not checked for equality.
 * @memberOf dw.io.XMLStreamReader
 * @param {Number} type - the event type
 * @param {String} namespaceURI - the uri of the event, may be null
 * @param {String} localName - the localName of the event, may be null
 */
dw.io.XMLStreamReader.prototype.require = function(type, namespaceURI, localName) {};

/**
 * Identifies if standalone was set in the document.
 * @memberOf dw.io.XMLStreamReader
 * @return {Boolean} true if standalone was set in the document, false otherwise.
 */
dw.io.XMLStreamReader.prototype.standaloneSet = function() {};

/**
 * Close this writer and free any resources associated with the
 writer.  This must not close the underlying output stream.
 * @memberOf dw.io.XMLStreamWriter
 */
dw.io.XMLStreamWriter.prototype.close = function() {};

/**
 * Write any cached data to the underlying output mechanism.
 * @memberOf dw.io.XMLStreamWriter
 */
dw.io.XMLStreamWriter.prototype.flush = function() {};

/**
 * Returns the current default name space.
 * @memberOf dw.io.XMLStreamWriter
 * @return {String} the current default name space.
 */
dw.io.XMLStreamWriter.prototype.getDefaultNamespace = function() {};

/**
 * Gets the prefix the URI is bound to.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} uri - the URI to use.
 * @return {String} the prefix or null.
 */
dw.io.XMLStreamWriter.prototype.getPrefix = function(uri) {};

/**
 * Binds a URI to the default namespace.
 This URI is bound
 in the scope of the current START_ELEMENT / END_ELEMENT pair.
 If this method is called before a START_ELEMENT has been written
 the uri is bound in the root scope.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} uri - the uri to bind to the default namespace, may be null.
 */
dw.io.XMLStreamWriter.prototype.setDefaultNamespace = function(uri) {};

/**
 * Sets the prefix the uri is bound to.  This prefix is bound
 in the scope of the current START_ELEMENT / END_ELEMENT pair.
 If this method is called before a START_ELEMENT has been written
 the prefix is bound in the root scope.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} prefix - the prefix to bind to the uri, may not be null.
 * @param {String} uri - the uri to bind to the prefix, may be null.
 */
dw.io.XMLStreamWriter.prototype.setPrefix = function(prefix, uri) {};

/**
 * Writes an attribute to the output stream without
 a prefix.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} localName - the local name of the attribute.
 * @param {String} value - the value of the attribute.
 */
dw.io.XMLStreamWriter.prototype.writeAttribute = function(localName, value) {};

/**
 * Writes an attribute to the output stream.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} namespaceURI - the uri of the prefix for this attribute.
 * @param {String} localName - the local name of the attribute.
 * @param {String} value - the value of the attribute.
 */
dw.io.XMLStreamWriter.prototype.writeAttribute = function(namespaceURI, localName, value) {};

/**
 * Writes an attribute to the output stream.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} prefix - the prefix for this attribute.
 * @param {String} namespaceURI - the uri of the prefix for this attribute.
 * @param {String} localName - the local name of the attribute.
 * @param {String} value - the value of the attribute.
 */
dw.io.XMLStreamWriter.prototype.writeAttribute = function(prefix, namespaceURI, localName, value) {};

/**
 * Writes a CData section.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} data - the data contained in the CData Section, may not be null.
 */
dw.io.XMLStreamWriter.prototype.writeCData = function(data) {};

/**
 * Write text to the output.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} text - the value to write.
 */
dw.io.XMLStreamWriter.prototype.writeCharacters = function(text) {};

/**
 * Writes an XML comment with the data enclosed.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} data - the data contained in the comment, may be null.
 */
dw.io.XMLStreamWriter.prototype.writeComment = function(data) {};

/**
 * Writes the default namespace to the stream.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} namespaceURI - the uri to bind the default namespace to.
 */
dw.io.XMLStreamWriter.prototype.writeDefaultNamespace = function(namespaceURI) {};

/**
 * Write a DTD section.  This string represents the entire doctypedecl production
 from the XML 1.0 specification.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} dtd - the DTD to be written.
 */
dw.io.XMLStreamWriter.prototype.writeDTD = function(dtd) {};

/**
 * Writes an empty element tag to the output.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} localName - local name of the tag, may not be null.
 */
dw.io.XMLStreamWriter.prototype.writeEmptyElement = function(localName) {};

/**
 * Writes an empty element tag to the output.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} namespaceURI - the uri to bind the tag to, may not be null.
 * @param {String} localName - local name of the tag, may not be null.
 */
dw.io.XMLStreamWriter.prototype.writeEmptyElement = function(namespaceURI, localName) {};

/**
 * Writes an empty element tag to the output.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} prefix - the prefix of the tag, may not be null.
 * @param {String} localName - local name of the tag, may not be null.
 * @param {String} namespaceURI - the uri to bind the tag to, may not be null.
 */
dw.io.XMLStreamWriter.prototype.writeEmptyElement = function(prefix, localName, namespaceURI) {};

/**
 * Closes any start tags and writes corresponding end tags.
 * @memberOf dw.io.XMLStreamWriter
 */
dw.io.XMLStreamWriter.prototype.writeEndDocument = function() {};

/**
 * Writes an end tag to the output relying on the internal
 state of the writer to determine the prefix and local name
 of the event.
 * @memberOf dw.io.XMLStreamWriter
 */
dw.io.XMLStreamWriter.prototype.writeEndElement = function() {};

/**
 * Writes an entity reference.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} name - the name of the entity.
 */
dw.io.XMLStreamWriter.prototype.writeEntityRef = function(name) {};

/**
 * Writes a namespace to the output stream.
 If the prefix argument to this method is the empty string,
 "xmlns", or null this method will delegate to writeDefaultNamespace.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} prefix - the prefix to bind this namespace to.
 * @param {String} namespaceURI - the uri to bind the prefix to.
 */
dw.io.XMLStreamWriter.prototype.writeNamespace = function(prefix, namespaceURI) {};

/**
 * Writes a processing instruction.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} target - the target of the processing instruction, may not be null.
 */
dw.io.XMLStreamWriter.prototype.writeProcessingInstruction = function(target) {};

/**
 * Writes a processing instruction.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} target - the target of the processing instruction, may not be null.
 * @param {String} data - the data contained in the processing instruction, may not be null.
 */
dw.io.XMLStreamWriter.prototype.writeProcessingInstruction = function(target, data) {};

/**
 * Writes the given string directly into the output stream. No checks
 regarding the correctness of the XML are done. The caller must ensure
 that the final result is a correct XML.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} raw - the string to write to the output stream.
 */
dw.io.XMLStreamWriter.prototype.writeRaw = function(raw) {};

/**
 * Write the XML Declaration. Defaults the XML version to 1.0, and the encoding to utf-8
 * @memberOf dw.io.XMLStreamWriter
 */
dw.io.XMLStreamWriter.prototype.writeStartDocument = function() {};

/**
 * Write the XML Declaration. Defaults the XML version to 1.0
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} version - version of the xml document.
 */
dw.io.XMLStreamWriter.prototype.writeStartDocument = function(version) {};

/**
 * Write the XML Declaration.  Note that the encoding parameter does
 not set the actual encoding of the underlying output.  That must
 be set when the instance of the XMLStreamWriter is created using the
 XMLOutputFactory.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} encoding - encoding of the xml declaration.
 * @param {String} version - version of the xml document.
 */
dw.io.XMLStreamWriter.prototype.writeStartDocument = function(encoding, version) {};

/**
 * Writes a start tag to the output.  All writeStartElement methods
 open a new scope in the internal namespace context.  Writing the
 corresponding EndElement causes the scope to be closed.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} localName - local name of the tag, may not be null.
 */
dw.io.XMLStreamWriter.prototype.writeStartElement = function(localName) {};

/**
 * Writes a start tag to the output.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} namespaceURI - the namespaceURI of the prefix to use, may not be null.
 * @param {String} localName - local name of the tag, may not be null.
 */
dw.io.XMLStreamWriter.prototype.writeStartElement = function(namespaceURI, localName) {};

/**
 * Writes a start tag to the output.
 * @memberOf dw.io.XMLStreamWriter
 * @param {String} prefix - the prefix of the tag, may not be null.
 * @param {String} localName - local name of the tag, may not be null.
 * @param {String} namespaceURI - the uri to bind the prefix to, may not be null.
 */
dw.io.XMLStreamWriter.prototype.writeStartElement = function(prefix, localName, namespaceURI) {};

/**
 * Constructs the FTPClient instance.
 * @class
 * @extends Object
 */
dw.net.FTPClient = function() {};
dw.net.FTPClient.prototype = new Object();

/**
 * The default size for <code>get()</code> returning a File is 5MB
 * @type Number
 * @memberOf dw.net.FTPClient
 * @deprecated The default size is not supported any more. The <code>get()</code> methods returning a file will
             always try to return <a href="class_dw_net_FTPClient.html#dw_net_FTPClient_MAX_GET_FILE_SIZE_DetailAnchor">MAX_GET_FILE_SIZE</a> bytes instead.
 * @static
 * @const
 */
dw.net.FTPClient.DEFAULT_GET_FILE_SIZE = 0;

/**
 * The default size for <code>get()</code> returning a String is 2MB
 * @type Number
 * @memberOf dw.net.FTPClient
 * @deprecated The default size is not supported any more. The <code>get()</code> methods returning a String will
             always try to return <a href="class_dw_net_FTPClient.html#dw_net_FTPClient_MAX_GET_STRING_SIZE_DetailAnchor">MAX_GET_STRING_SIZE</a> bytes instead.
 * @static
 * @const
 */
dw.net.FTPClient.DEFAULT_GET_STRING_SIZE = 0;

/**
 * The maximum size for <code>get()</code> returning a File is forty times the default size for getting a file. The
 largest file allowed is 200MB.
 * @type Number
 * @memberOf dw.net.FTPClient
 * @static
 * @const
 */
dw.net.FTPClient.MAX_GET_FILE_SIZE = 0;

/**
 * The maximum size for <code>get()</code> returning a String is five times the default size for getting a String.
 The largest String allowed is 10MB.
 * @type Number
 * @memberOf dw.net.FTPClient
 * @static
 * @const
 */
dw.net.FTPClient.MAX_GET_STRING_SIZE = 0;

/**
 * Changes the current directory on the remote server to the given path.
 * @memberOf dw.net.FTPClient
 * @param {String} path - the new current directory
 * @return {Boolean} true if the directory change was okay
 */
dw.net.FTPClient.prototype.cd = function(path) {};

/**
 * Connects and logs on to an FTP Server as "anonymous" and returns a boolean indicating success or failure.
 * @memberOf dw.net.FTPClient
 * @param {String} host - Name of the FTP sever
 * @return {Boolean} true when connection is successful, false otherwise.
 */
dw.net.FTPClient.prototype.connect = function(host) {};

/**
 * Connects and logs on to an FTP Server as "anonymous" and returns a boolean indicating success or failure.
 * @memberOf dw.net.FTPClient
 * @param {String} host - Name of the FTP sever
 * @param {Number} port - Port for FTP server
 * @return {Boolean} true when connection is successful, false otherwise.
 */
dw.net.FTPClient.prototype.connect = function(host, port) {};

/**
 * Connects and logs on to an FTP server and returns a boolean indicating success or failure.
 * @memberOf dw.net.FTPClient
 * @param {String} host - Name of the FTP sever
 * @param {Number} port - Port for FTP server
 * @param {String} user - User name for the login
 * @param {String} password - Password for the login
 * @return {Boolean} true when connection is successful, false otherwise.
 */
dw.net.FTPClient.prototype.connect = function(host, port, user, password) {};

/**
 * Connects and logs on to an FTP server and returns a boolean indicating success or failure.
 * @memberOf dw.net.FTPClient
 * @param {String} host - Name of the FTP sever
 * @param {String} user - User name for the login
 * @param {String} password - Password for the login
 * @return {Boolean} true when connection is successful, false otherwise.
 */
dw.net.FTPClient.prototype.connect = function(host, user, password) {};

/**
 * Deletes the remote file on the server identified by the path parameter.
 * @memberOf dw.net.FTPClient
 * @param {String} path - the path to the file.
 * @return {Boolean} true if the file was successfully deleted, false otherwise.
 */
dw.net.FTPClient.prototype.del = function(path) {};

/**
 * The method first logs the current user out from the server and then disconnects from the server.
 * @memberOf dw.net.FTPClient
 */
dw.net.FTPClient.prototype.disconnect = function() {};

/**
 * Reads the content of a remote file and returns it as a string using "ISO-8859-1" encoding to read it. Read at
 most MAX_GET_STRING_SIZE bytes.
 * @memberOf dw.net.FTPClient
 * @param {String} path - remote path of the file to be read.
 * @return {String} the contents of the file or null if an error occured while reading the file.
 */
dw.net.FTPClient.prototype.get = function(path) {};

/**
 * Reads the content of a remote file and returns it as a string using "ISO-8859-1" encoding to read it. Read at
 most maxGetSize characters.
 * @memberOf dw.net.FTPClient
 * @param {String} path - remote path of the file to be read.
 * @param {Number} maxGetSize - the maximum bytes fetched from the remote file.
 * @return {String} the contents of the file or null if an error occurred while reading the file.
 * @deprecated The maxGetSize attribute is not supported anymore. Use the method <a href="class_dw_net_FTPClient.html#dw_net_FTPClient_get_String_DetailAnchor">get(String)</a> instead.
 */
dw.net.FTPClient.prototype.get = function(path, maxGetSize) {};

/**
 * Reads the content of a remote file and returns it as string using the passed encoding. Read at most
 MAX_GET_STRING_SIZE characters.
 * @memberOf dw.net.FTPClient
 * @param {String} path - remote path of the file to be read.
 * @param {String} encoding - an ISO 8859 character encoding labeled as a string, e.g. "ISO-8859-1"
 * @return {String} the contents of the file or null if an error occurred while reading the file.
 */
dw.net.FTPClient.prototype.get = function(path, encoding) {};

/**
 * Reads the content of a remote file and creates a local copy in the given file using the passed string encoding to
 read the file content and using the system standard encoding "UTF-8" to write the file. Copies at most
 MAX_GET_FILE_SIZE bytes.
 * @memberOf dw.net.FTPClient
 * @param {String} path - remote path of the file to be read.
 * @param {String} encoding - the encoding to use.
 * @param {dw.io.File} file - the local file name
 * @return {Boolean} true if remote file is fetched and copied into local file.
 */
dw.net.FTPClient.prototype.get = function(path, encoding, file) {};

/**
 * Reads the content of a remote file and creates a local copy in the given file using the passed string encoding to
 read the file content and using the system standard encoding "UTF-8" to write the file. Copies at most maxGetSize
 bytes.
 * @memberOf dw.net.FTPClient
 * @param {String} path - remote path of the file to be read.
 * @param {String} encoding - the encoding to use.
 * @param {dw.io.File} file - the local file name
 * @param {Number} maxGetSize - the maximum number of bytes to fetch
 * @return {Boolean} true if remote file is fetched and copied into local file.
 * @deprecated The maxGetSize attribute is not supported anymore. Use the method <a href="class_dw_net_FTPClient.html#dw_net_FTPClient_get_String_String_File_DetailAnchor">get(String, String, File)</a>
             instead.
 */
dw.net.FTPClient.prototype.get = function(path, encoding, file, maxGetSize) {};

/**
 * Reads the content of a remote file and returns it as a string using the specified encoding. Returns at most
 maxGetSize characters.
 * @memberOf dw.net.FTPClient
 * @param {String} path - remote path of the file to be read.
 * @param {String} encoding - the encoding to use.
 * @param {Number} maxGetSize - the maximum bytes fetched from the remote file.
 * @return {String} the contents of the file or null if an error occurred while reading the file.
 * @deprecated The maxGetSize attribute is not supported anymore. Use the method <a href="class_dw_net_FTPClient.html#dw_net_FTPClient_get_String_String_DetailAnchor">get(String, String)</a>
             instead.
 */
dw.net.FTPClient.prototype.get = function(path, encoding, maxGetSize) {};

/**
 * Reads the content of a remote file and creates a local copy in the given file. Copies at most MAX_GET_FILE_SIZE
 bytes. The FTP transfer is done in Binary mode.
 * @memberOf dw.net.FTPClient
 * @param {String} path - remote path of the file to be read.
 * @param {dw.io.File} file - the local file name
 * @return {Boolean} true if remote file is fetched and copied into local file.
 */
dw.net.FTPClient.prototype.getBinary = function(path, file) {};

/**
 * Reads the content of a remote file and creates a local copy in the given file. Copies at most maxGetSize bytes.
 The FTP transfer is done in Binary mode.
 * @memberOf dw.net.FTPClient
 * @param {String} path - remote path of the file to be read.
 * @param {dw.io.File} file - the local file name
 * @param {Number} maxGetSize - the maximum number of bytes to fetch
 * @return {Boolean} true if remote file is fetched and copied into local file.
 * @deprecated The maxGetSize attribute is not supported anymore. Use the method <a href="class_dw_net_FTPClient.html#dw_net_FTPClient_getBinary_String_File_DetailAnchor">getBinary(String, File)</a>
             instead.
 */
dw.net.FTPClient.prototype.getBinary = function(path, file, maxGetSize) {};

/**
 * Identifies if the FTP client is currently connected to the FTP server.
 * @memberOf dw.net.FTPClient
 * @return {Boolean} true if the client is currently connected.
 */
dw.net.FTPClient.prototype.getConnected = function() {};

/**
 * Returns the reply code from the last FTP action.
 * @memberOf dw.net.FTPClient
 * @return {Number} the reply code from the last FTP action.
 */
dw.net.FTPClient.prototype.getReplyCode = function() {};

/**
 * Returns the string message from the last FTP action.
 * @memberOf dw.net.FTPClient
 * @return {String} the string message from the last FTP action.
 */
dw.net.FTPClient.prototype.getReplyMessage = function() {};

/**
 * Returns the timeout for this client, in milliseconds.
 * @memberOf dw.net.FTPClient
 * @return {Number} the timeout in milliseconds
 */
dw.net.FTPClient.prototype.getTimeout = function() {};

/**
 * Returns a list of FTPFileInfo objects containing information about the files in the current directory.
 * @memberOf dw.net.FTPClient
 * @return {dw.net.FTPFileInfo[]} list of objects with remote file information.
 */
dw.net.FTPClient.prototype.list = function() {};

/**
 * Returns a list of FTPFileInfo objects containing information about the files in the remote directory defined by
 the given path.
 * @memberOf dw.net.FTPClient
 * @param {String} path - the remote path from which the file info is listed.
 * @return {dw.net.FTPFileInfo[]} list of objects with remote file information.
 */
dw.net.FTPClient.prototype.list = function(path) {};

/**
 * Creates a directory
 * @memberOf dw.net.FTPClient
 * @param {String} path - the path to the directory to create.
 * @return {Boolean} true if the directory was successfully created, false otherwise.
 */
dw.net.FTPClient.prototype.mkdir = function(path) {};

/**
 * Puts the specified content to the specified full path using "ISO-8859-1" encoding. The full path must include the
 path and the file name. If the content of a local file is to be uploaded, please use method
 <a href="class_dw_net_FTPClient.html#dw_net_FTPClient_putBinary_String_File_DetailAnchor">putBinary(String, File)</a> instead.
 * @memberOf dw.net.FTPClient
 * @param {String} path - full path on the remote FTP server where the file will be stored.
 * @param {String} content - the content to put.
 * @return {Boolean} true or false indicating success or failure.
 */
dw.net.FTPClient.prototype.put = function(path, content) {};

/**
 * Put the given content to a file on the given full path on the FTP server. The full path must include the path and
 the file name. The transformation from String into binary data is done via the encoding provided with the method
 call. If the content of a local file is to be uploaded, please use method <a href="class_dw_net_FTPClient.html#dw_net_FTPClient_putBinary_String_File_DetailAnchor">putBinary(String, File)</a>
 instead.
 * @memberOf dw.net.FTPClient
 * @param {String} path - the full path on the remote FTP server where the file will be stored.
 * @param {String} content - the content to put.
 * @param {String} encoding - the encoding to use.
 * @return {Boolean} true or false indicating success or failure.
 */
dw.net.FTPClient.prototype.put = function(path, content, encoding) {};

/**
 * Put the content of the given file into a file on the remote FTP server with the given full path. The full path
 must include the path and the file name.
 * @memberOf dw.net.FTPClient
 * @param {String} path - the full path on the remote FTP server where the file will be stored.
 * @param {dw.io.File} file - the file on the local system, which content is send to the remote FTP server.
 * @return {Boolean} true or false indicating success or failure.
 */
dw.net.FTPClient.prototype.putBinary = function(path, file) {};

/**
 * Deletes the remote directory on the server identified by the path parameter. In order to delete the directory
 successfully the directory needs to be empty, otherwise the removeDirectory() method will return false.
 * @memberOf dw.net.FTPClient
 * @param {String} path - the path to the directory.
 * @return {Boolean} true if the directory was successfully deleted, false otherwise.
 */
dw.net.FTPClient.prototype.removeDirectory = function(path) {};

/**
 * Renames an existing file.
 * @memberOf dw.net.FTPClient
 * @param {String} from - the file that will be renamed.
 * @param {String} to - the name of the new file.
 * @return {Boolean} true if the file was successfully renamed, false otherwise.
 */
dw.net.FTPClient.prototype.rename = function(from, to) {};

/**
 * Sets the timeout for connections made with the FTP client to the given number of milliseconds. If the given
 timeout is less than or equal to zero, the timeout is set to the same value as the script context timeout but
 will only be set to a maximum of 30 seconds.
 <p/>
 The maximum and default timeout depend on the script context timeout. The maximum timeout is set to a maximum of
 2 minutes. The default timeout for a new client is set to a maximum of 30 seconds.
 <p/>
 This method can be called at any time, and will affect the next connection made with this client. It is not
 possible to set the timeout for an open connection.
 * @memberOf dw.net.FTPClient
 * @param {Number} timeoutMillis - timeout, in milliseconds, up to a maximum of 2 minutes.
 */
dw.net.FTPClient.prototype.setTimeout = function(timeoutMillis) {};

/**
 * Constructs the FTPFileInfo instance.
 * @class
 * @extends Object
 * @param {String} name - the name of the file.
 * @param {Number} size - the size of the file.
 * @param {Boolean} directory - controls if the file is a directory.
 * @param {Date} timestamp - the timestamp of the file.
 */
dw.net.FTPFileInfo = function(name, size, directory, timestamp) {};
dw.net.FTPFileInfo.prototype = new Object();

/**
 * Identifies if the file is a directory.
 * @memberOf dw.net.FTPFileInfo
 * @return {Boolean} true if the file is a directory, false otherwise.
 */
dw.net.FTPFileInfo.prototype.getDirectory = function() {};

/**
 * Returns the name of the file.
 * @memberOf dw.net.FTPFileInfo
 * @return {String} the name of the file.
 */
dw.net.FTPFileInfo.prototype.getName = function() {};

/**
 * Returns the size of the file.
 * @memberOf dw.net.FTPFileInfo
 * @return {Number} the size of the file.
 */
dw.net.FTPFileInfo.prototype.getSize = function() {};

/**
 * Returns the timestamp of the file.
 * @memberOf dw.net.FTPFileInfo
 * @return {Date} the timestamp of the file.
 */
dw.net.FTPFileInfo.prototype.getTimestamp = function() {};

/**
 *
 * @class
 * @extends Object
 */
dw.net.HTTPClient = function() {};
dw.net.HTTPClient.prototype = new Object();

/**
 * The default size for <code>sendAndReceiveToFile()</code> returning a File is 5MB
 deprecated in favor of MAX_GET_FILE_SIZE
 * @type Number
 * @memberOf dw.net.HTTPClient
 * @deprecated Use <a href="class_dw_net_HTTPClient.html#dw_net_HTTPClient_MAX_GET_FILE_SIZE_DetailAnchor">MAX_GET_FILE_SIZE</a> instead.
 * @static
 * @const
 */
dw.net.HTTPClient.DEFAULT_GET_FILE_SIZE = 0;

/**
 * The maximum permitted size (in bytes) of an HTTP response when calling
 operations which write the response to file. (200MB)
 * @type Number
 * @memberOf dw.net.HTTPClient
 * @static
 * @const
 */
dw.net.HTTPClient.MAX_GET_FILE_SIZE = 0;

/**
 * The maximum permitted size (in bytes) of an HTTP response when calling
 operations which store the response in memory. (10MB)
 * @type Number
 * @memberOf dw.net.HTTPClient
 * @static
 * @const
 */
dw.net.HTTPClient.MAX_GET_MEM_SIZE = 0;

/**
 * Calling this method enables caching for GET requests.
 <p>
 It basically means that
 a response is cached, and before making a request the HTTP client looks into
 the cache to determine whether the response is already available. Only responses with
 a status code of 2xx, with a content length, with a size less then 50k, and which are
 not intended to be immediately written to a file are cached.
 <p>
 The provided parameter defines the TTL (time to live) for the cached content.
 A value of 0 disables caching. The URL and the user name are used as cache
 keys. The total size of the cacheable content and the number of cached items
 is limited and automatically managed by the system.
 Cache control information send by the remote server is ignored.
 Caching HTTP responses should be done very carefully. It is important to
 ensure that the response really depends only on the URL and
 doesn't contain any remote state information or time information which is
 independent of the URL. It is also important to verify that the application
 sends exactly the same URL multiple times.
 * @memberOf dw.net.HTTPClient
 * @param {Number} ttl - the TTL for the cached content in secs
 */
dw.net.HTTPClient.prototype.enableCaching = function(ttl) {};

/**
 * Returns all response headers as a map containing the name and value
 of the response header.
 * @memberOf dw.net.HTTPClient
 * @return {dw.util.HashMap} a map containing the names and corresponding values  of the response headers.
 * @deprecated Use <a href="class_dw_net_HTTPClient.html#dw_net_HTTPClient_getResponseHeaders_DetailAnchor">getResponseHeaders()</a> instead.
 */
dw.net.HTTPClient.prototype.getAllResponseHeaders = function() {};

/**
 * Returns the returned message body as text for HTTP status code greater
 or equal to 400. Error messages are not written to the response file.
 * @memberOf dw.net.HTTPClient
 * @return {String} the returned message body as text.
 */
dw.net.HTTPClient.prototype.getErrorText = function() {};

/**
 * Returns the returned message body as text for HTTP status code greater
 or equal to 400. Error messages are not written to the response file.
 * @memberOf dw.net.HTTPClient
 * @param {String} encoding - the character encoding to use.
 * @return {String} String the encoded String.
 */
dw.net.HTTPClient.prototype.getErrorText = function(encoding) {};

/**
 * Returns a specific response header from the last HTTP operation. The
 method returns null if the specific header was not returned.
 * @memberOf dw.net.HTTPClient
 * @param {String} header - the name of the response header to locate.
 * @return {String} the value of the specified header or null if the header  cannot be found.
 */
dw.net.HTTPClient.prototype.getResponseHeader = function(header) {};

/**
 * Returns all response headers as a map in which each entry represents an individual
 header. The key of the entry holds the header name and the entry value holds a list
 of all header values.
 * @memberOf dw.net.HTTPClient
 * @return {dw.util.Map} A map containing the names and corresponding values  of the response headers.
 */
dw.net.HTTPClient.prototype.getResponseHeaders = function() {};

/**
 * Returns all the values of a response header from the last HTTP operation as a list of strings.
 This reflects the fact that a specific header, e.g. <code>"Set-Cookie"</code>, may be set multiple times.
 In case there is no such header, the method returns an empty list.
 * @memberOf dw.net.HTTPClient
 * @param {String} name - The name of the response header to locate.
 * @return {dw.util.List} The values of the specified header as a list of strings or an empty list if the header  cannot be found.
 */
dw.net.HTTPClient.prototype.getResponseHeaders = function(name) {};

/**
 * Returns the status code of the last HTTP operation.
 * @memberOf dw.net.HTTPClient
 * @return {Number} the status code of the last HTTP operation.
 */
dw.net.HTTPClient.prototype.getStatusCode = function() {};

/**
 * Returns the message text of the last HTTP operation.
 * @memberOf dw.net.HTTPClient
 * @return {String} the message text of the last HTTP operation.
 */
dw.net.HTTPClient.prototype.getStatusMessage = function() {};

/**
 * Returns the returned message body as text for HTTP status codes
 between 200 and 299.
 * @memberOf dw.net.HTTPClient
 * @return {String} the returned message body as text.
 */
dw.net.HTTPClient.prototype.getText = function() {};

/**
 * Returns the returned message body as text for HTTP status codes
 between 200 and 299.
 * @memberOf dw.net.HTTPClient
 * @param {String} encoding - the character encoding to use.
 * @return {String} String the encoded String.
 */
dw.net.HTTPClient.prototype.getText = function(encoding) {};

/**
 * Returns the timeout for this client, in milliseconds.
 * @memberOf dw.net.HTTPClient
 * @return {Number} the timeout in milliseconds
 */
dw.net.HTTPClient.prototype.getTimeout = function() {};

/**
 * Opens the specified URL using the specified method.
 The following methods are supported:
 GET, POST, HEAD, PUT, and DELETE
 * @memberOf dw.net.HTTPClient
 * @param {String} method - the method to use for opening the URL.
 * @param {String} url - the url to open.
 */
dw.net.HTTPClient.prototype.open = function(method, url) {};

/**
 * Deprecated method.
 * @memberOf dw.net.HTTPClient
 * @param {String} method - the method to use for opening the URL.
 * @param {String} url - the url to open.
 * @param {Boolean} async - true if asynchronous.
 * @param {String} user - name of the user.
 * @param {String} password - password.
 * @deprecated Use <a href="class_dw_net_HTTPClient.html#dw_net_HTTPClient_open_String_String_String_String_DetailAnchor">open(String, String, String, String)</a> instead.
 */
dw.net.HTTPClient.prototype.open = function(method, url, async, user, password) {};

/**
 * Opens the specified URL with the in parameter method specified
 Http method with given credentials [user, password] using HTTP
 basic authentication. The following methods are supported:
 GET, POST, HEAD, PUT, and DELETE
 * @memberOf dw.net.HTTPClient
 * @param {String} method - HTTP method
 * @param {String} url - the url
 * @param {String} user - name of the user
 * @param {String} password - password
 */
dw.net.HTTPClient.prototype.open = function(method, url, user, password) {};

/**
 * Sends an HTTP request.
 * @memberOf dw.net.HTTPClient
 */
dw.net.HTTPClient.prototype.send = function() {};

/**
 * This method performs the actual HTTP communication. Sends the file
 to the HTTP server.  The file content is sent as a request body and is sent
 "as-is" (text or binary).
 * @memberOf dw.net.HTTPClient
 * @param {dw.io.File} file - File to be sent.
 */
dw.net.HTTPClient.prototype.send = function(file) {};

/**
 * This method performs the actual HTTP communication.
 The text is sent as a request body. If the text
 is null no data will be send to the HTTP server.
 * @memberOf dw.net.HTTPClient
 * @param {String} text - text String to be sent as request body.
 */
dw.net.HTTPClient.prototype.send = function(text) {};

/**
 * This method performs the actual HTTP communication.
 The text is sent as a request body. If the text
 is null no data will be send to the HTTP server.
 * @memberOf dw.net.HTTPClient
 * @param {String} text - text String to be sent as request body.
 * @param {String} encoding - character encoding name.
 */
dw.net.HTTPClient.prototype.send = function(text, encoding) {};

/**
 * This method performs the actual HTTP communication. If the file
 is null no data will be send to the HTTP server.  If this method is used
 with a GET then the file parameter will contain the contents retrieved.
 When using this method with a PUT/POST then the contents of the file parameter
 will be sent to the server.
 * @memberOf dw.net.HTTPClient
 * @param {dw.io.File} file - local file used to read from or write to, depending on the method used.
 * @return {Boolean} true if the returned code was a positive status code
 */
dw.net.HTTPClient.prototype.sendAndReceiveToFile = function(file) {};

/**
 * This method performs the actual HTTP communication. If the text
 is null no data will be send to the HTTP server.
 * @memberOf dw.net.HTTPClient
 * @param {String} text - text String to be sent.
 * @param {dw.io.File} outFile - local file to write to.
 * @return {Boolean} true if the returned code was a positive status code
 */
dw.net.HTTPClient.prototype.sendAndReceiveToFile = function(text, outFile) {};

/**
 * This method performs the actual HTTP communication. If the text
 is null no data will be send to the HTTP server.
 * @memberOf dw.net.HTTPClient
 * @param {String} text - text String to be sent.
 * @param {String} encoding - character encoding name.
 * @param {dw.io.File} outFile - local file to write to.
 * @return {Boolean} true if the returned code was a positive status code
 */
dw.net.HTTPClient.prototype.sendAndReceiveToFile = function(text, encoding, outFile) {};

/**
 * Sends a multipart HTTP request. This method should only be called if the
 connection to the remote URL was opened with a POST method. All other
 methods will result in an exception being thrown. The request is
 constructed from the passed array of parts.
 * @memberOf dw.net.HTTPClient
 * @param {dw.net.HTTPRequestPart[]} parts - List of part objects representing either string or file               parts.
 * @return {Boolean} true if the returned code was a positive status code.
 */
dw.net.HTTPClient.prototype.sendMultiPart = function(parts) {};

/**
 * Sets a request header for the next HTTP operation.
 * @memberOf dw.net.HTTPClient
 * @param {String} key - the request header.
 * @param {String} value - the request headers' value.
 */
dw.net.HTTPClient.prototype.setRequestHeader = function(key, value) {};

/**
 * Sets the timeout for connections made with this client to the given
 number of milliseconds.  If the given timeout is less than or equal to zero,
 the timeout is set to a maximum value of 2 or 15 minutes, depending on
 the context.
 <p/>This timeout value controls both the "connection timeout" (how long
 it takes to connect to the remote host) and the "socket timeout" (how
 long, after connecting, it will wait without any data being read).
 Therefore, in the worst case scenario, the total time of inactivity could
 be twice as long as the specified value.
 <p/>The maximum timeout is 15 minutes when the client is used in a job,
 and 2 minutes otherwise. The default timeout for a new client is the
 maximum timeout value.
 <p/>This method can be called at any time, and will affect the next connection
 made with this client. It is not possible to set the timeout for an open
 connection.
 * @memberOf dw.net.HTTPClient
 * @param {Number} timeoutMillis - timeout, in milliseconds, up to a maximum of 2 or 15                       minutes, depending on the context.
 */
dw.net.HTTPClient.prototype.setTimeout = function(timeoutMillis) {};

/**
 * Construct a part representing a simple string name/value pair. The HTTP
 message uses "US-ASCII" as the default character set for the part.
 * @class
 * @extends Object
 * @param {String} name - The name of the part.
 * @param {String} value - The string to post.
 */
dw.net.HTTPRequestPart = function(name, value) {};
dw.net.HTTPRequestPart.prototype = new Object();

/**
 * Construct a part representing a simple string name/value pair. The HTTP
 message uses the specified encoding or "US-ASCII" if null is passed
 for the part.
 * @class
 * @extends Object
 * @param {String} name - The name of the part.
 * @param {String} value - The string to post.
 * @param {String} encoding - The charset to be used to encode the string, if null the             default is used.
 */
dw.net.HTTPRequestPart = function(name, value, encoding) {};
dw.net.HTTPRequestPart.prototype = new Object();

/**
 * Construct a part representing a name/File pair. The HTTP message will use
 "text/plain" as default content type and "US-ASCII" as default character
 set for the part.
 * @class
 * @extends Object
 * @param {String} name - The name of the file part
 * @param {dw.io.File} file - The file to post
 */
dw.net.HTTPRequestPart = function(name, file) {};
dw.net.HTTPRequestPart.prototype = new Object();

/**
 * Construct a part representing a name/File pair. The HTTP message will use
 the specified content type or "text/plain" if null is passed and the
 specified encoding or "US-ASCII" if null is passed for the part.
 * @class
 * @extends Object
 * @param {String} name - The name of the file part
 * @param {dw.io.File} file - The file to post
 * @param {String} contentType - The content type for this part, if null the default is             used.
 * @param {String} encoding - the charset encoding for this part, if null the default             is used
 */
dw.net.HTTPRequestPart = function(name, file, contentType, encoding) {};
dw.net.HTTPRequestPart.prototype = new Object();

/**
 * Returns the content type of this part.
 * @memberOf dw.net.HTTPRequestPart
 * @return {String} The content type, or null if content type was not specified.
 */
dw.net.HTTPRequestPart.prototype.getContentType = function() {};

/**
 * Get the charset to be used to encode the string.
 * @memberOf dw.net.HTTPRequestPart
 * @return {String} The charset, or null if charset was not specified.
 */
dw.net.HTTPRequestPart.prototype.getEncoding = function() {};

/**
 * Get the file value of the part.
 * @memberOf dw.net.HTTPRequestPart
 * @return {dw.io.File} The file value, or null if this part is not a file part.
 */
dw.net.HTTPRequestPart.prototype.getFileValue = function() {};

/**
 * Get the name of the part.
 * @memberOf dw.net.HTTPRequestPart
 * @return {String} The part name, never null.
 */
dw.net.HTTPRequestPart.prototype.getName = function() {};

/**
 * Get the string value of the part.
 * @memberOf dw.net.HTTPRequestPart
 * @return {String} The string value, or null if this part is is not a string part.
 */
dw.net.HTTPRequestPart.prototype.getStringValue = function() {};

/**
 *
 * @class
 * @extends Object
 */
dw.net.Mail = function() {};
dw.net.Mail.prototype = new Object();

/**
 * Adds an address to the <code>bcc</code> List. Address must conform to the RFC822 standard.
 * @memberOf dw.net.Mail
 * @param {String} bcc - new bcc address to add to <code>bcc</code> address List.
 * @return {dw.net.Mail} this Mail object.
 */
dw.net.Mail.prototype.addBcc = function(bcc) {};

/**
 * Adds an address to the <code>cc</code> List. The address must conform to RFC822 standard.
 * @memberOf dw.net.Mail
 * @param {String} cc - new cc address to be added to <code>cc</code> address List.
 * @return {dw.net.Mail} this Mail object.
 */
dw.net.Mail.prototype.addCc = function(cc) {};

/**
 * Adds an address to the <code>to</code> address List. The address must conform to the RFC822 standard.
 * @memberOf dw.net.Mail
 * @param {String} to - email address to add to the <code>to</code> address List.
 * @return {dw.net.Mail} this Mail object.
 */
dw.net.Mail.prototype.addTo = function(to) {};

/**
 * Gets the <code>bcc</code> address List.
 * @memberOf dw.net.Mail
 * @return {dw.util.List} <code>bcc</code> address List or empty List if no <code>bcc</code>          addresses are set.
 */
dw.net.Mail.prototype.getBcc = function() {};

/**
 * Gets the <code>cc</code> address List.
 * @memberOf dw.net.Mail
 * @return {dw.util.List} <code>cc</code> address List or empty List if no <code>cc</code>          addresses are set.
 */
dw.net.Mail.prototype.getCc = function() {};

/**
 * Gets the email address to use as the <code>from</code> address for the
 email.
 * @memberOf dw.net.Mail
 * @return {String} the <code>from</code> address for this mail or null if no <code>from</code>          address is set yet.
 */
dw.net.Mail.prototype.getFrom = function() {};

/**
 * Gets the <code>subject</code> of the email.
 * @memberOf dw.net.Mail
 * @return {String} <code>subject</code> or null if no <code>subject</code> is set yet.
 */
dw.net.Mail.prototype.getSubject = function() {};

/**
 * Gets the <code>to</code> address List where the email is sent.
 * @memberOf dw.net.Mail
 * @return {dw.util.List} <code>to</code> address List or empty List if no <code>to</code>          addresses are set.
 */
dw.net.Mail.prototype.getTo = function() {};

/**
 * prepares an email that is queued to the internal mail system for
 delivery.
 * @memberOf dw.net.Mail
 * @return {dw.system.Status} {@link dw.system.Status} which tells if the mail could be          successfully queued ( {@link dw.system.Status#OK}) or not (          {@link dw.system.Status#ERROR}). If an error is raised, more          information about the reason for the failure can be found within the          log files. If the mandatory fields <code>from</code>,          <code>content</code>, and <code>subject</code> are          empty an IllegalArgumentException is raised. An          IllegalArgumentException is raised if neither <code>to</code>, <code>cc</code>          nor <code>bcc</code> are set.
 */
dw.net.Mail.prototype.send = function() {};

/**
 * Sets the <code>bcc</code> address List. If there
 are already <code>bcc</code> addresses they are overwritten.
 * @memberOf dw.net.Mail
 * @param {dw.util.List} bcc - list of Strings representing RFC822 compliant email             addresses. List replaces any previously set list of             addresses. Throws an exception if the given list is null.
 * @return {dw.net.Mail} this Mail object.
 */
dw.net.Mail.prototype.setBcc = function(bcc) {};

/**
 * Sets the <code>cc</code> address List where the email is sent. If there are
 already <code>cc</code> addresses set, they are overwritten. The address(es) must
 conform to the RFC822 standard.
 * @memberOf dw.net.Mail
 * @param {dw.util.List} cc - List of Strings representing RFC822 compliant email             addresses. This List replaces any previously set List of             addresses. Throws an exception if the given List is null.
 * @return {dw.net.Mail} this Mail object
 */
dw.net.Mail.prototype.setCc = function(cc) {};

/**
 * <b>Mandatory</b> Uses <a href="class_dw_value_MimeEncodedText.html">MimeEncodedText</a> to set the
 content, MIME type and encoding.
 * @memberOf dw.net.Mail
 * @param {dw.value.MimeEncodedText} mimeEncodedText - MimeEncodedText from which the content, MIME type, and encoding             information is extracted.
 * @return {dw.net.Mail} this Mail object.
 */
dw.net.Mail.prototype.setContent = function(mimeEncodedText) {};

/**
 * <b>Mandatory</b> Sets the email content. The MIME type is set to
 "text/plain;charset=UTF-8" and encoding set to "UTF-8".
 * @memberOf dw.net.Mail
 * @param {String} content - String containing the content of the email.
 * @return {dw.net.Mail} this Mail object.
 */
dw.net.Mail.prototype.setContent = function(content) {};

/**
 * <b>Mandatory</b> Sets the email content, MIME type, and encoding. No
 validation of MIME type and encoding is done. It is the responsibility of
 the caller to specify a valid MIME type and encoding.
 * @memberOf dw.net.Mail
 * @param {String} content - String containing the content of the mail
 * @param {String} mimeType - mime type of the content. For example             "text/plain;charset=UTF-8" or "text/html"
 * @param {String} encoding - character encoding of the email content. For example UTF-8-8
 * @return {dw.net.Mail} this Mail object.
 */
dw.net.Mail.prototype.setContent = function(content, mimeType, encoding) {};

/**
 * <b>Mandatory</b> Sets the sender address for this email. The address must
 conform to the RFC822 standard.
 * @memberOf dw.net.Mail
 * @param {String} from - String containing a RFC822 compliant email address
 * @return {dw.net.Mail} this Mail object.
 */
dw.net.Mail.prototype.setFrom = function(from) {};

/**
 * <b>Mandatory</b> sets the <code>subject</code> for the email. If the <code>subject</code> is not set
 or set to null at the time <a href="class_dw_net_Mail.html#dw_net_Mail_send_DetailAnchor">Mail.send()</a> is invoked and
 IllegalArgumentException is thrown.
 * @memberOf dw.net.Mail
 * @param {String} subject - <code>subject</code> of the mail to send.
 * @return {dw.net.Mail} this Mail object.
 */
dw.net.Mail.prototype.setSubject = function(subject) {};

/**
 * Sets the <code>to</code> address List where the email is sent. If there are
 already <code>to</code> addresses, they are overwritten.
 * @memberOf dw.net.Mail
 * @param {dw.util.List} to - list of Strings representing RFC822 compliant email addresses.             List replaces any previously set List of addresses. Throws             an exception if the given List is null.
 * @return {dw.net.Mail} this Mail object
 */
dw.net.Mail.prototype.setTo = function(to) {};

/**
 * Constructor.
 * @class
 * @extends Object
 */
dw.net.SFTPClient = function() {};
dw.net.SFTPClient.prototype = new Object();

/**
 * The maximum size for get() methods returning a File is 200 MB.
 * @type Number
 * @memberOf dw.net.SFTPClient
 * @static
 * @const
 */
dw.net.SFTPClient.MAX_GET_FILE_SIZE = 0;

/**
 * The maximum size for get() methods returning a String is 10 MB.
 * @type Number
 * @memberOf dw.net.SFTPClient
 * @static
 * @const
 */
dw.net.SFTPClient.MAX_GET_STRING_SIZE = 0;

/**
 * Changes the current directory on the remote server to the given path.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the new current directory
 * @return {Boolean} true if the directory change was okay
 */
dw.net.SFTPClient.prototype.cd = function(path) {};

/**
 * Connects and logs on to a SFTP server and returns a boolean indicating success or failure.
 * @memberOf dw.net.SFTPClient
 * @param {String} host - Name of the SFTP sever
 * @param {Number} port - Port for SFTP server
 * @param {String} user - User name for the login
 * @param {String} password - Password for the login
 * @return {Boolean} true when connection is successful, false otherwise.
 */
dw.net.SFTPClient.prototype.connect = function(host, port, user, password) {};

/**
 * Connects and logs on to a SFTP server and returns a boolean indicating success or failure.
 * @memberOf dw.net.SFTPClient
 * @param {String} host - Name of the SFTP sever
 * @param {String} user - User name for the login
 * @param {String} password - Password for the login
 * @return {Boolean} true when connection is successful, false otherwise.
 */
dw.net.SFTPClient.prototype.connect = function(host, user, password) {};

/**
 * Deletes the remote file on the server identified by the path parameter.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the path to the file.
 * @return {Boolean} true if the file was successfully deleted, false otherwise.
 */
dw.net.SFTPClient.prototype.del = function(path) {};

/**
 * The method first logs the current user out from the server and then disconnects from the server.
 * @memberOf dw.net.SFTPClient
 */
dw.net.SFTPClient.prototype.disconnect = function() {};

/**
 * Reads the content of a remote file and returns it as a string using "ISO-8859-1" encoding to read it. Files with
 at most MAX_GET_STRING_SIZE bytes are read.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - remote path of the file to be read.
 * @return {String} the contents of the file or null if an error occurred while reading the file.
 */
dw.net.SFTPClient.prototype.get = function(path) {};

/**
 * Reads the content of a remote file and returns it as a string using the specified encoding. Files with at most
 MAX_GET_STRING_SIZE bytes are read.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the remote path of the file to be read.
 * @param {String} encoding - the encoding to use.
 * @return {String} the contents of the file or null if an error occurred while reading the file.
 */
dw.net.SFTPClient.prototype.get = function(path, encoding) {};

/**
 * Reads the content of a remote file and creates a local copy in the given file using the passed string encoding to
 read the file content and using the system standard encoding "UTF-8" to write the file. Copies at most
 MAX_GET_FILE_SIZE bytes.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the remote path of the file to be read.
 * @param {String} encoding - the encoding to use.
 * @param {dw.io.File} file - the local file name
 * @return {Boolean} true if complete remote file is fetched and copied into local file. false, otherwise.
 */
dw.net.SFTPClient.prototype.get = function(path, encoding, file) {};

/**
 * Reads the content of a remote file and creates a local copy in the given file. Copies at most "MAX_GET_FILE_SIZE
 bytes. The SFTP transfer is done in binary mode.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the remote path of the file to be read.
 * @param {dw.io.File} file - the local file name
 * @return {Boolean} true if complete remote file is fetched and copied into local file. false otherwise
 */
dw.net.SFTPClient.prototype.getBinary = function(path, file) {};

/**
 * Identifies if the SFTP client is currently connected to the SFTP server.
 * @memberOf dw.net.SFTPClient
 * @return {Boolean} true if the client is currently connected.
 */
dw.net.SFTPClient.prototype.getConnected = function() {};

/**
 * Returns the error message from the last SFTP action.
 * @memberOf dw.net.SFTPClient
 * @return {String} the error message from the last SFTP action
 */
dw.net.SFTPClient.prototype.getErrorMessage = function() {};

/**
 * Returns a SFTPFileInfo objects containing information about the given file/directory path.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the remote path from which the file info should be listed.
 * @return {dw.net.SFTPFileInfo} the remote file information or <code>null</code> if not present.
 */
dw.net.SFTPClient.prototype.getFileInfo = function(path) {};

/**
 * Returns the timeout for this client, in milliseconds.
 * @memberOf dw.net.SFTPClient
 * @return {Number} the timeout in milliseconds
 */
dw.net.SFTPClient.prototype.getTimeout = function() {};

/**
 * Returns a list of SFTPFileInfo objects containing information about the files in the current directory.
 * @memberOf dw.net.SFTPClient
 * @return {dw.net.SFTPFileInfo[]} list of objects with remote file information or <code>null</code> if not present.
 */
dw.net.SFTPClient.prototype.list = function() {};

/**
 * Returns a list of SFTPFileInfo objects containing information about the files in the remote directory defined by
 the given path.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the remote path from which the file info should be listed.
 * @return {dw.net.SFTPFileInfo[]} list of objects with remote file information or <code>null</code> if not present.
 */
dw.net.SFTPClient.prototype.list = function(path) {};

/**
 * Creates a directory
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the path to the directory to create.
 * @return {Boolean} true if the directory was successfully created, false otherwise.
 */
dw.net.SFTPClient.prototype.mkdir = function(path) {};

/**
 * Puts the specified content to the specified path using "ISO-8859-1" encoding. If the content of a local file is
 to be uploaded, please use method putBinary(String,File) instead.
 <p/>
 NOTE: If the remote file already exists, it is overwritten.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the path on the remote SFTP server, where the file will be stored.
 * @param {String} content - the content to put.
 * @return {Boolean} true or false indicating success or failure.
 */
dw.net.SFTPClient.prototype.put = function(path, content) {};

/**
 * Put the given content to a file on the given path on the SFTP server. The transformation from String into binary
 data is done via the encoding provided with the method call. If the content of a local file is to be uploaded,
 please use method putBinary(String,File) instead.
 <p/>
 NOTE: If the remote file already exists, it is overwritten.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the the path on the remote SFTP server, where the file will be stored.
 * @param {String} content - the content to put.
 * @param {String} encoding - the encoding to use.
 * @return {Boolean} true or false indicating success or failure.
 */
dw.net.SFTPClient.prototype.put = function(path, content, encoding) {};

/**
 * Put the content of the given file into a file on the remote SFTP server with the given absolute path. NOTE: If
 the remote file already exists, it is overwritten.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the path on the remote SFTP server where the file will be stored.
 * @param {dw.io.File} file - the file on the local system, which content is send to the remote SFTP server.
 * @return {Boolean} true or false indicating success or failure.
 */
dw.net.SFTPClient.prototype.putBinary = function(path, file) {};

/**
 * Deletes the remote directory on the server identified by the path parameter. In order to delete the directory
 successfully the directory needs to be empty, otherwise the removeDirectory() method will return false.
 * @memberOf dw.net.SFTPClient
 * @param {String} path - the path to the directory.
 * @return {Boolean} true if the directory was successfully deleted, false otherwise.
 */
dw.net.SFTPClient.prototype.removeDirectory = function(path) {};

/**
 * Renames an existing file.
 * @memberOf dw.net.SFTPClient
 * @param {String} from - the file that will be renamed.
 * @param {String} to - the name of the new file.
 * @return {Boolean} true if the file was successfully renamed, false otherwise.
 */
dw.net.SFTPClient.prototype.rename = function(from, to) {};

/**
 * Sets the timeout for connections made with the SFTP client to the given number of milliseconds. If the given
 timeout is less than or equal to zero, the timeout is set to the same value as the script context timeout but
 will only be set to a maximum of 30 seconds.
 <p/>
 The maximum and default timeout depend on the script context timeout. The maximum timeout is set to a maximum of
 2 minutes. The default timeout for a new client is set to a maximum of 30 seconds.
 <p/>
 This method can be called at any time, and will affect the next connection made with this client. It is not
 possible to set the timeout for an open connection.
 * @memberOf dw.net.SFTPClient
 * @param {Number} timeoutMillis - timeout, in milliseconds, up to a maximum of 2 minutes.
 */
dw.net.SFTPClient.prototype.setTimeout = function(timeoutMillis) {};

/**
 * Constructs the SFTPFileInfo instance.
 * @class
 * @extends Object
 * @param {String} name - the name of the file.
 * @param {Number} size - the size of the file.
 * @param {Boolean} directory - controls if the file is a directory.
 * @param {Number} mtime - last modification time.
 */
dw.net.SFTPFileInfo = function(name, size, directory, mtime) {};
dw.net.SFTPFileInfo.prototype = new Object();

/**
 * Identifies if the file is a directory.
 * @memberOf dw.net.SFTPFileInfo
 * @return {Boolean} true if the file is a directory, false otherwise.
 */
dw.net.SFTPFileInfo.prototype.getDirectory = function() {};

/**
 * Returns the last modification time of the file/directory.
 * @memberOf dw.net.SFTPFileInfo
 * @return {Date} the last modification time.
 */
dw.net.SFTPFileInfo.prototype.getModificationTime = function() {};

/**
 * Returns the name of the file/directory.
 * @memberOf dw.net.SFTPFileInfo
 * @return {String} the name.
 */
dw.net.SFTPFileInfo.prototype.getName = function() {};

/**
 * Returns the size of the file/directory.
 * @memberOf dw.net.SFTPFileInfo
 * @return {Number} the size.
 */
dw.net.SFTPFileInfo.prototype.getSize = function() {};

/**
 * Creates a new client for the use at a server which requires
 authentication.
 The client supports the following authentication schemes:
      - Basic authentication scheme
      - Digest authentication scheme
 * @class
 * @extends Object
 * @param {String} rootUrl - the url of the server one wants to connect to. All commands             will be executed by the client relative to that url.
 * @param {String} username - username of the user for server authentication.
 * @param {String} password - password of the user for server authentication.
 */
dw.net.WebDAVClient = function(rootUrl, username, password) {};
dw.net.WebDAVClient.prototype = new Object();

/**
 * Creates a new client for the use at a server which does not require
 authentication.
 * @class
 * @extends Object
 * @param {String} rootUrl - the url of the server one wants to connect to. All commands             will be executed by the client relative to that url.
 */
dw.net.WebDAVClient = function(rootUrl) {};
dw.net.WebDAVClient.prototype = new Object();

/**
 * The default encoding character set.
 * @type String
 * @memberOf dw.net.WebDAVClient
 * @static
 * @const
 */
dw.net.WebDAVClient.DEFAULT_ENCODING = '';

/**
 * The default size for <code>get()</code> returning a File is 5MB.
 * @type Number
 * @memberOf dw.net.WebDAVClient
 * @static
 * @const
 */
dw.net.WebDAVClient.DEFAULT_GET_FILE_SIZE = 0;

/**
 * The default size for <code>get()</code> returning a String is 2MB.
 * @type Number
 * @memberOf dw.net.WebDAVClient
 * @static
 * @const
 */
dw.net.WebDAVClient.DEFAULT_GET_STRING_SIZE = 0;

/**
 * The depth of searching a WebDAV destination using the PROPFIND method -
 if that depth is given to the PROPFIND method as an input parameter the
 destination will be searched only on the level of the given path and a
 list of all containing files on that level will be returned [is not
 supported by every server].
 * @type Number
 * @memberOf dw.net.WebDAVClient
 * @static
 * @const
 */
dw.net.WebDAVClient.DEPTH_0 = 0;

/**
 * The depth of searching a WebDAV destination using the PROPFIND method -
 if that depth is given to the PROPFIND method as an input parameter the
 destination will be searched until one level under the given path and a
 list of all containing files in that two levels [/path and one level
 underneath] will be returned [is not supported by every server].
 * @type Number
 * @memberOf dw.net.WebDAVClient
 * @static
 * @const
 */
dw.net.WebDAVClient.DEPTH_1 = 0;

/**
 * The depth of searching a WebDAV destination using the PROPFIND method -
 if that depth is given to the PROPFIND method as an input parameter the
 destination will be fully searched and a list of all containing files
 will be returned [is not supported by every server].
 * @type Number
 * @memberOf dw.net.WebDAVClient
 * @static
 * @const
 */
dw.net.WebDAVClient.DEPTH_INIFINITY = 0;

/**
 * The maximum size for <code>get()</code> returning a File is forty times
 the default size for getting a file. The largest file allowed is 200MB.
 * @type Number
 * @memberOf dw.net.WebDAVClient
 * @static
 * @const
 */
dw.net.WebDAVClient.MAX_GET_FILE_SIZE = 0;

/**
 * The maximum size for <code>get()</code> returning a String is five
 times the default size for getting a String. The largest String allowed
 is 10MB.
 * @type Number
 * @memberOf dw.net.WebDAVClient
 * @static
 * @const
 */
dw.net.WebDAVClient.MAX_GET_STRING_SIZE = 0;

/**
 * Adds a request header to the next WebDAV call.
 * @memberOf dw.net.WebDAVClient
 * @param {String} headerName - name of the header.
 * @param {String} headerValue - value of the header.
 */
dw.net.WebDAVClient.prototype.addRequestHeader = function(headerName, headerValue) {};

/**
 * Closes the current connection to the server.
 * @memberOf dw.net.WebDAVClient
 */
dw.net.WebDAVClient.prototype.close = function() {};

/**
 * Copies a file on the server from one place <code>rootUrl</code>/<code>origin</code>
 to the other <code>rootUrl</code>/<code>destination</code>. If
 <code>destination</code> already exists it gets overwritten. Returns
 true if succeeded, otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} origin - The origin where a file is located, relative to the             <code>rootUrl</code> stated when instantiating the client.
 * @param {String} destination - The destination where the file should be copied to, relative             to the <code>rootUrl</code> stated when instantiating the             client.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.copy = function(origin, destination) {};

/**
 * Copies a file on the server from one place <code>rootUrl</code>/<code>origin</code>
 to the other <code>rootUrl</code>/<code>destination</code>. If
 the passed parameter <code>overwrite</code> is true and
 <code>destination</code> already exists it gets overwritten. Returns
 true if succeeded, otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} origin - The origin where a file is located, relative to the             <code>rootUrl</code> stated when instantiating the client.
 * @param {String} destination - The destination where the file should be copied to, relative             to the <code>rootUrl</code> stated when instantiating the             client.
 * @param {Boolean} overwrite - A flag which determines whether the destination gets             overwritten if it exists before copying.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.copy = function(origin, destination, overwrite) {};

/**
 * Copies a file on the server from one place <code>rootUrl</code>/<code>origin</code>
 to the other <code>rootUrl</code>/<code>destination</code>. If
 the passed parameter <code>overwrite</code> is true and
 <code>destination</code> already exists it gets overwritten. If the
 passed parameter <code>shallow</code> is true a flat copy mechanism is
 used.

 Returns true if succeeded, otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} origin - The origin where a file is located, relative to the             <code>rootUrl</code> stated when instantiating the client.
 * @param {String} destination - The destination where the file should be copied to, relative             to the <code>rootUrl</code> stated when instantiating the             client.
 * @param {Boolean} overwrite - A flag which determines whether the destination gets             overwritten if it exits before copying
 * @param {Boolean} shallow - A flag which determines how to copy the given data.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.copy = function(origin, destination, overwrite, shallow) {};

/**
 * Deletes a file or directory from the remote server that can be found
 under <code>rootUrl</code>/<code>path</code>. Returns true if
 succeeded, otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path of the file or collection to delete, relative to the             <code>rootUrl</code> stated when instantiating the client.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.del = function(path) {};

/**
 * Reads the content of a remote file or directory that can be found under
 <code>rootUrl</code>/<code>path</code> and returns a string
 representation of the data found in the DEFAULT_ENCODING encoding. If the
 remote location is a directory the result depends on the server
 configuration, some return an HTML formatted directory listing. Returns
 at most DEFAULT_GET_STRING_SIZE bytes.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path of the collection or file one wants to get, relative             to the <code>rootUrl</code> stated when instantiating the             client.
 * @return {String} returns the String representation of the data found on the given          path.
 */
dw.net.WebDAVClient.prototype.get = function(path) {};

/**
 * Reads the content of a remote file or directory that can be found under
 <code>rootUrl</code>/<code>path</code> in DEFAULT_ENCODING
 encoding and writes a <a href="class_dw_io_File.html">File</a> in the system's standard
 encoding, which is "UTF-8". If the remote location is a directory the
 result depends on the server configuration, some return an HTML formatted
 directory listing. Receives at most DEFAULT_GET_FILE_SIZE bytes which
 determines the file size of the local file. Returns true if succeeded
 otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path of the collection or file one wants to get -             relative to the <code>rootUrl</code> stated when instantiating             the client.
 * @param {dw.io.File} file - The file to save the received data in.
 * @return {Boolean} returns true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.get = function(path, file) {};

/**
 * Reads the content of a remote file or directory that can be found under
 <code>rootUrl</code>/<code>path</code> in DEFAULT_ENCODING
 encoding and writes a <a href="class_dw_io_File.html">File</a> in the system's standard
 encoding, which is "UTF-8". If the remote location is a directory the
 result depends on the server configuration, some return an HTML formatted
 directory listing. Receives at most maxFileSize bytes which determines
 the file size of the local file. Returns true if succeeded, otherwise
 false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path of the collection or file one wants to get -             relative to the <code>rootUrl</code> stated when instantiating             the client.
 * @param {dw.io.File} file - The file to save the received data in.
 * @param {Number} maxFileSize - The maximum size of bytes to stream into the file. Not             to exceed MAX_GET_FILE_SIZE.
 * @return {Boolean} returns true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.get = function(path, file, maxFileSize) {};

/**
 * Reads the content of a remote file or directory that can be found under
 <code>rootUrl</code>/<code>path</code> in the passed encoding and
 writes a <a href="class_dw_io_File.html">File</a> in the system standard encoding, which is
 "UTF-8". If the remote location is a directory the result depends on the
 server configuration, some return an HTML formatted directory listing.
 Receives at most maxFileSize bytes which determines the file size of the
 local file. Returns true if succeeded, otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path of the collection or file one wants to get -             relative to the <code>rootUrl</code> stated when instantiating             the client.
 * @param {dw.io.File} file - The file to save the received data in.
 * @param {String} encoding - The encoding to use when reading the remote file.
 * @param {Number} maxFileSize - The maximum number of bytes to stream into the file.             Not to exceed MAX_GET_FILE_SIZE.
 * @return {Boolean} returns true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.get = function(path, file, encoding, maxFileSize) {};

/**
 * Reads the content of a remote file or directory that can be found under
 <code>rootUrl</code>/<code>path</code> and returns a string
 representation of the data found in the given <code>encoding</code>. If
 the remote location is a directory the result depends on the server
 configuration, some return an HTML formatted directory listing. Returns
 at most DEFAULT_GET_STRING_SIZE bytes.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path of the collection or file one wants to get -             relative to the <code>rootUrl</code> stated when instantiating             the client.
 * @param {String} encoding - The encoding of the resulting String.
 * @return {String} returns the String representation of the data found on the given          path in the given encoding.
 */
dw.net.WebDAVClient.prototype.get = function(path, encoding) {};

/**
 * Reads the content of a remote file or directory that can be found under
 <code>rootUrl</code>/<code>path</code> and returns a string
 representation of the data found in the given <code>encoding</code>. If
 the remote location is a directory the result depends on the server
 configuration, some return an HTML formatted directory listing. Returns
 at most maxGetSize bytes.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path of the collection or file one wants to get -             relative to the <code>rootUrl</code> stated when instantiating             the client.
 * @param {String} encoding - The encoding of the resulting String.
 * @param {Number} maxGetSize - The maximum size of data in bytes. Not to exceed             MAX_GET_STRING_SIZE.
 * @return {String} returns the String representation of the data found on the given          path in the given encoding.
 */
dw.net.WebDAVClient.prototype.get = function(path, encoding, maxGetSize) {};

/**
 * Returns a <a href="class_dw_util_HashMap.html">HashMap</a> of all response headers.
 * @memberOf dw.net.WebDAVClient
 * @return {dw.util.HashMap} all headers in a {@link dw.util.HashMap}.
 */
dw.net.WebDAVClient.prototype.getAllResponseHeaders = function() {};

/**
 * Reads the content of a remote binary file that can be found under
 <code>rootUrl</code>/<code>path</code> and creates a local copy
 in <a href="class_dw_io_File.html">File</a>. If the remote location is a directory the result
 depends on the server configuration, some return an HTML formatted
 directory listing. Copies at most DEFAULT_GET_FILE_SIZE bytes. Returns
 true if succeeded, otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path relative to <code>rootUrl</code> on the remote             server including the file name.
 * @param {dw.io.File} file - The local file where the received binary data should be             stored.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.getBinary = function(path, file) {};

/**
 * Reads the content of a remote binary file that can be found under
 <code>rootUrl</code>/<code>path</code> and creates a local copy
 in <a href="class_dw_io_File.html">File</a>. If the remote location is a directory the result
 depends on the server configuration, some return an HTML formatted
 directory listing. Copies at most maxFileSize bytes. Returns true if
 succeeded, otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path relative to <code>rootUrl</code> on the remote             server including the file name.
 * @param {dw.io.File} file - The file local file where the received binary data should be             stored.
 * @param {Number} maxFileSize - The maximum number of bytes to stream into the file.             Not to exceed MAX_GET_FILE_SIZE.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.getBinary = function(path, file, maxFileSize) {};

/**
 * Returns a specified response header - multiple headers are separated by
 CRLF.
 * @memberOf dw.net.WebDAVClient
 * @param {String} header - The name of the header.
 * @return {String} The header - in case of multiple headers separated by CRLF.
 */
dw.net.WebDAVClient.prototype.getResponseHeader = function(header) {};

/**
 * Returns the status code after the execution of a method.
 * @memberOf dw.net.WebDAVClient
 * @return {Number} the <code>statusCode</code>.
 */
dw.net.WebDAVClient.prototype.getStatusCode = function() {};

/**
 * Returns the status text after the execution of a method.
 * @memberOf dw.net.WebDAVClient
 * @return {String} the <code>statusText</code>.
 */
dw.net.WebDAVClient.prototype.getStatusText = function() {};

/**
 * Creates a directory on the remote server on the location
 <code>rootUrl</code>/<code>path</code>.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path relative to the <code>rootUrl</code> stated when             instantiating the client where the new collection should be             created.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.mkcol = function(path) {};

/**
 * Moves a file on the server from one place <code>rootUrl</code> + "/" +<code>origin</code>
 to the other <code>rootUrl</code>/<code>destination</code>. If
 <code>destination</code> already exists it gets overwritten. Can also
 be used to rename a remote file. Returns true if succeeded, otherwise
 false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} origin - The origin where a file is located, relative to the             <code>rootUrl</code> stated when instantiating the client.
 * @param {String} destination - The destination where the file should be moved to, relative             to the <code>rootUrl</code> stated when instantiating the             client.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.move = function(origin, destination) {};

/**
 * Moves a file on the server from one place <code>rootUrl</code>/<code>origin</code>
 to the other <code>rootUrl</code>/<code>destination</code> Can
 also be used to rename a remote file. If <code>overwrite</code> is true
 and <code>destination</code> already exists it gets overwritten.
 Returns true if succeeded, otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} origin - The origin where a file is located, relative to the             <code>rootUrl</code> stated when instantiating the client.
 * @param {String} destination - The destination where the file should be moved to, relative             to the <code>rootUrl</code> stated when instantiating the             client.
 * @param {Boolean} overwrite - A flag which determines whether the destination gets             overwritten if it exists before moving.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.move = function(origin, destination, overwrite) {};

/**
 * Returns a list of methods which can be executed on the server location
 <code>rootUrl</code>/<code>path</code>.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path relative to the <code>rootUrl</code> stated when             instantiating the client one wants to get the options for.
 * @return {String[]} list of WebDav methods which can be executed on the given path.
 */
dw.net.WebDAVClient.prototype.options = function(path) {};

/**
 * Get file listing of a remote location.

 Returns a list of <a href="class_dw_net_WebDAVFileInfo.html">WebDAVFileInfo</a> objects which contain
 information about the files and directories located on
 <code>rootUrl</code>/<code>path</code> and DEPTH_1 (1) level
 underneath.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path relative to the <code>rootUrl</code> stated when             instantiating the client where to get information about the             containing files from.
 * @return {dw.net.WebDAVFileInfo[]} an Array of {@link dw.net.WebDAVFileInfo} objects which hold          information about the files located on the server at the          location.
 */
dw.net.WebDAVClient.prototype.propfind = function(path) {};

/**
 * Get file listing of a remote location.

 Returns a list of <a href="class_dw_net_WebDAVFileInfo.html">WebDAVFileInfo</a> objects which contain
 information about the files and directories located on
 <code>rootUrl</code>/<code>path</code> and the passed depth
 underneath.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path relative to the <code>rootUrl</code> stated when             instantiating the client where to get information about the             containing files from.
 * @param {Number} depth - The level starting from <code>rootUrl</code> down to which             the file information gets collected.
 * @return {dw.net.WebDAVFileInfo[]} an Array of {@link dw.net.WebDAVFileInfo} objects which hold          information about the files located on the server at the          location.
 */
dw.net.WebDAVClient.prototype.propfind = function(path, depth) {};

/**
 * Puts content out of a passed local file into a remote located file
 at <code>rootUrl</code>/<code>path</code>. This method performs
 a binary file transfer. Returns true if succeeded, otherwise false.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path to put given content up to, relative to the             <code>rootUrl</code> stated when instantiating the client.
 * @param {dw.io.File} file - The file to push up to the server.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.put = function(path, file) {};

/**
 * Puts content encoded with DEFAULT_ENCODING into a remote located file at
 <code>rootUrl</code>/<code>path</code>. Returns true if
 succeeded, otherwise false.
 <p/>
 If the content of a local file is to be uploaded, please use method
 <a href="class_dw_net_WebDAVClient.html#dw_net_WebDAVClient_put_String_File_DetailAnchor">put(String, File)</a> instead.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path to put given content up to, relative to the             <code>rootUrl</code> stated when instantiating the client.
 * @param {String} content - The content that has to be pushed on to the server.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.put = function(path, content) {};

/**
 * Puts content encoded with the passed encoding into a remote located file
 at <code>rootUrl</code>/<code>path</code>. Returns true if
 succeeded, otherwise false.
 <p/>
 If the content of a local file is to be uploaded, please use method
 <a href="class_dw_net_WebDAVClient.html#dw_net_WebDAVClient_put_String_File_DetailAnchor">put(String, File)</a> instead.
 * @memberOf dw.net.WebDAVClient
 * @param {String} path - The path to put a given content up to, relative to the             <code>rootUrl</code> stated when instantiating the client.
 * @param {String} content - The content that has to be pushed on to a remote location.
 * @param {String} encoding - The encoding in which the data should be stored on the             server.
 * @return {Boolean} true if succeeded, otherwise false.
 */
dw.net.WebDAVClient.prototype.put = function(path, content, encoding) {};

/**
 * Returns true if the last executed WebDAV method was executed successfully - otherwise false.
 See the code snippet above for an example how to use the succeed() method.
 * @memberOf dw.net.WebDAVClient
 * @return {Boolean} true if the last executed WebDAV method was successful - otherwise false.
 * @see <a href="class_dw_net_WebDAVClient.html">WebDAVClient</a>
 */
dw.net.WebDAVClient.prototype.succeeded = function() {};

/**
 * Simple class representing a file on a remote WebDAV location.  The class
 possesses only read-only attributes of the file and does not permit any
 manipulation of the file itself.  Instances of this class are returned
 by <a href="class_dw_net_WebDAVClient.html#dw_net_WebDAVClient_propfind_String_DetailAnchor">WebDAVClient.propfind(String)</a> which is used to get a
 listing of files in a WebDAV directory.
 <p/>
 <b>Note:</b> when this class is used with sensitive data, be careful in persisting sensitive information to disk.
 * @class
 * @extends Object
 */
dw.net.WebDAVFileInfo = function() {};
dw.net.WebDAVFileInfo.prototype = new Object();

/**
 * Returns the content type of the file.
 * @memberOf dw.net.WebDAVFileInfo
 * @return {String} the content type of the file.
 */
dw.net.WebDAVFileInfo.prototype.getContentType = function() {};

/**
 * Returns the creationDate of the file.
 * @memberOf dw.net.WebDAVFileInfo
 * @return {Date} the creationDate of the file.
 */
dw.net.WebDAVFileInfo.prototype.getCreationDate = function() {};

/**
 * Returns the name of the file.
 * @memberOf dw.net.WebDAVFileInfo
 * @return {String} the name of the file.
 */
dw.net.WebDAVFileInfo.prototype.getName = function() {};

/**
 * Returns the path of the file.
 * @memberOf dw.net.WebDAVFileInfo
 * @return {String} the path of the file.
 */
dw.net.WebDAVFileInfo.prototype.getPath = function() {};

/**
 * Returns the size of the file.
 * @memberOf dw.net.WebDAVFileInfo
 * @return {Number} the size of the file.
 */
dw.net.WebDAVFileInfo.prototype.getSize = function() {};

/**
 * Identifies if the file is a directory.
 * @memberOf dw.net.WebDAVFileInfo
 * @return {Boolean} true if the file is a directory, false otherwise.
 */
dw.net.WebDAVFileInfo.prototype.isDirectory = function() {};

/**
 * Returns the lastModified date of the file.
 * @memberOf dw.net.WebDAVFileInfo
 * @return {Date} the lastModified date of the file.
 */
dw.net.WebDAVFileInfo.prototype.lastModified = function() {};

/**
 * Returns the custom attributes for this object. The returned object can
 only be used for retrieving attribute values, not storing them. See
 <a href="class_dw_object_CustomAttributes.html">CustomAttributes</a> for a detailed example of the syntax for
 working with custom attributes.
 * @memberOf dw.object.ActiveData
 * @return {dw.object.CustomAttributes} the custom attributes for this object.
 * @synchronized
 */
dw.object.ActiveData.prototype.getCustom = function() {};

/**
 * This class is used together with other classes that contain custom attributes
 and is used to read and write these attributes. The actual attributes are
 accessible as ECMA properties. The syntax for setting and retrieving the
 value of a custom attribute depends upon the type of the attribute. If the
 wrong syntax is used to set an individual attribute than an exception will be
 thrown.

 <p/>

 The following script examples demonstrate how to work with custom attributes.
 Suppose we have an ExtensibleObject named "eo" possessing attributes of all
 the different types supported by the Demandware metadata system. The
 following script snippet shows that setting single-valued attributes is
 simply a matter of using the assignment operator and standard ECMA primitives
 and built-in types:

 <p/>

 <pre>
 // attribute of value type 'Boolean'
 eo.custom.bvalue = true;
 var b : Boolean = eo.custom.bvalue;

 // attribute of value type 'Integer'
 eo.custom.ivalue = 10;
 var i : Number = eo.custom.ivalue;

 // attribute of value type 'Number'
 eo.custom.dvalue = 99.99;
 var d : Number = eo.custom.dvalue;

 // attribute of value type 'String'
 eo.custom.svalue = &quot;String1&quot;;
 var s : String = eo.custom.svalue;

 // attribute of value type 'Email'
 eo.custom.emailvalue = &quot;email@demandware.com&quot;;
 var e : String = eo.custom.emailvalue;

 // attribute of value type 'Text'
 eo.custom.tvalue = &quot;laaaaaaaaaaaarge text&quot;;
 var t : String = eo.custom.tvalue;

 // attribute of value type 'Date'
 eo.custom.dtvalue = new Date;
 var date : Date = eo.custom.dtvalue;
 </pre>

 <p/>

 Setting and retrieving the values for multi-value attributes is also
 straightforward and uses ECMA arrays to represent the multiple values. Set-of
 attributes and enum-of attributes are handled in a very similar manner. The
 chief difference is that enum-of attributes are limited to a prescribed set
 of value definitions whereas set-of attributes are open-ended. Furthermore,
 each value in an enum-of attribute has a value and a display name which
 affects the retrieval logic.

 Multi-value attributes are returned as an array. This array is read-only and
 can't be used to update the multi-value attribute. To update the multi-value
 attribute an array with new values must be assigned to the attribute.

 <p/>

 <pre>
 // attribute of value type 'Set of String'
 // set the attribute value only if it hasn't been already set
 if( !('setofstringvalue' in eo.custom) )
 {
     eo.custom.setofstringvalue = new Array(&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;);
 }

 // returns an Array of String instances
 var setofstring : Array = eo.custom.setofstringvalue;
 var s1 : String = setofstring[0];
 var s2 : String = setofstring[1];
 var s3 : String = setofstring[2];

 // attribute of value type 'Enum of Integer' with multi-value handling
 eo.custom.enumofintmultivalue = new Array(1, 2, 3);

 // returns an Array of EnumValue instances
 var enumofintmulti : Array = eo.custom.enumofintmultivalue;
 var value1 : Number = enumofintmulti[0].getValue();
 var displayvalue1 : String = enumofintmulti[0].getDisplayValue();
 var value2 : Number = enumofintmulti[1].getValue();
 var displayvalue2 : String = enumofintmulti[1].getDisplayValue();
 var value3 : Number = enumofintmulti[2].getValue();
 var displayvalue3 : String = enumofintmulti[2].getDisplayValue();
 </pre>

 <p/>

 For further details on the Demandware attribute system, see core
 Demandware documentation.
 * @class
 * @extends Object
 * @abstract
 */
dw.object.CustomAttributes = function() {};
dw.object.CustomAttributes.prototype = new Object();

/**
 * Represents a custom object and its corresponding attributes.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.object.CustomObject = function() {};
dw.object.CustomObject.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the custom attributes of this
 object.
 * @memberOf dw.object.CustomObject
 * @return {dw.object.CustomAttributes} the custom attributes of this  object.
 * @synchronized
 */
dw.object.CustomObject.prototype.getCustom = function() {};

/**
 * Returns the type of the CustomObject.
 * @memberOf dw.object.CustomObject
 * @return {String} the type of the CustomObject.
 */
dw.object.CustomObject.prototype.getType = function() {};

/**
 * Manager class which provides methods for creating, retrieving, deleting,
 and searching for custom objects.
 <p/>
 To search for system objects, use <a href="class_dw_object_SystemObjectMgr.html">SystemObjectMgr</a>.
 * @class
 * @extends Object
 */
dw.object.CustomObjectMgr = function() {};
dw.object.CustomObjectMgr.prototype = new Object();

/**
 * Returns a new custom object instance of the specified type, using the
 given key value. Custom object keys need to be unique for custom object
 type.
 * @memberOf dw.object.CustomObjectMgr
 * @param {String} type - The unique name of the custom object type.
 * @param {Number} keyValue - The unique key value for the instance.
 * @return {dw.object.CustomObject} The newly created custom object instance.
 * @throws IllegalArgumentException if the given type is invalid
 * @static
 */
dw.object.CustomObjectMgr.createCustomObject = function(type, keyValue) {};

/**
 * Returns a new custom object instance of the specified type, using the
 given key value. Custom object keys need to be unique for custom object
 type.
 * @memberOf dw.object.CustomObjectMgr
 * @param {String} type - The unique name of the custom object type.
 * @param {String} keyValue - The unique key value for the instance.
 * @return {dw.object.CustomObject} The newly created custom object instance.
 * @throws IllegalArgumentException if the given type is invalid
 * @static
 */
dw.object.CustomObjectMgr.createCustomObject = function(type, keyValue) {};

/**
 * Returns the meta data for the given type.
 * @memberOf dw.object.CustomObjectMgr
 * @param {String} type - the type whose meta data is returned.
 * @return {dw.object.ObjectTypeDefinition} the meta data for the given type.
 * @throws IllegalArgumentException if the given type is invalid
 * @static
 */
dw.object.CustomObjectMgr.describe = function(type) {};

/**
 * Returns all custom objects of a specific type.

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.object.CustomObjectMgr
 * @param {String} type - The name of the custom object type.
 * @return {dw.util.SeekableIterator}
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @throws IllegalArgumentException if the given type is invalid
 * @static
 */
dw.object.CustomObjectMgr.getAllCustomObjects = function(type) {};

/**
 * Returns a custom object based on it's type and unique key.
 * @memberOf dw.object.CustomObjectMgr
 * @param {String} type - The name of the custom object type.
 * @param {Number} keyValue - The unique key value.
 * @return {dw.object.CustomObject} The matching custom object instance or <code>null</code> in case           no matching custom object instance could be found.
 * @throws IllegalArgumentException if the given type is invalid
 * @static
 */
dw.object.CustomObjectMgr.getCustomObject = function(type, keyValue) {};

/**
 * Returns a custom object based on it's type and unique key.
 * @memberOf dw.object.CustomObjectMgr
 * @param {String} type - The name of the custom object type.
 * @param {String} keyValue - The unique key value.
 * @return {dw.object.CustomObject} The matching custom object instance or <code>null</code> in case           no matching custom object instance could be found.
 * @throws IllegalArgumentException if the given type is invalid
 * @static
 */
dw.object.CustomObjectMgr.getCustomObject = function(type, keyValue) {};

/**
 * <p/>Searches for a single custom object instance.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul>

 <p/>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.


 <p/>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>


 <p/>If there is more than one object matching the specified query criteria, the
 result is not deterministic. In order to retrieve a single object from a sorted result
 set it is recommended to use the following code:
 <code>queryCustomObjects("", "custom.myAttr asc", null).first()</code>.
 The method <code>first()</code> returns only the next element and closes the
 iterator.
 * @memberOf dw.object.CustomObjectMgr
 * @param {String} type - the custom object type for the query.
 * @param {String} queryString - the actual query.
 * @param {Object[]} args - optional parameters for the queryString.
 * @return {dw.object.CustomObject} the custom object defined by <code>type</code> which was found                when executing the <code>queryString</code>.
 * @throws IllegalArgumentException if the given type is invalid
 * @static
 * @varArgs
 */
dw.object.CustomObjectMgr.queryCustomObject = function(type, queryString, args) {};

/**
 * <p/>Searches for custom object instances.

 <p/>The search can be configured with a map, which key-value pairs are
 converted into a query expression. The key-value pairs are turned into a
 sequence of '=' or 'like' conditions, which are combined with AND
 statements.

 <p/>Example:<br/>
 A map with the key/value pairs: <i>'name'/'tom*', 'age'/66</i>
 will be converted as follows: <code>"name like 'tom*' and age = 66"</code>

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.object.CustomObjectMgr
 * @param {String} type - the custom object type for the query.
 * @param {dw.util.Map} queryAttributes - key-value pairs, which define the query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @throws IllegalArgumentException if the given type is invalid
 * @static
 */
dw.object.CustomObjectMgr.queryCustomObjects = function(type, queryAttributes, sortString) {};

/**
 * Searches for custom object instances.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul>

 <p/>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.


 <p/>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>


 <p/>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.

 <p/>Sometimes it is desired to get all instances of specified type with a special sorting condition.
 This can be easily done by providing the 'type' of the custom object and the 'sortString' in combination with
 an empty 'queryString', e.g. <code>queryCustomObjects("sample", "", "custom.myAttr asc")</code>

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.object.CustomObjectMgr
 * @param {String} type - the custom object type for the query.
 * @param {String} queryString - the actual query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @param {Object[]} args - optional parameters for the queryString.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @throws IllegalArgumentException if the given type is invalid
 * @static
 * @varArgs
 */
dw.object.CustomObjectMgr.queryCustomObjects = function(type, queryString, sortString, args) {};

/**
 * Removes a given custom object.
 * @memberOf dw.object.CustomObjectMgr
 * @param {dw.object.CustomObject} object - the custom object to remove, must not be null.
 * @static
 */
dw.object.CustomObjectMgr.remove = function(object) {};

/**
 * Base class alternative to ExtensibleObject for objects customizable through the metadata system.
 Similar to ExtensibleObject: the <a href="class_dw_object_Extensible.html#dw_object_Extensible_describe_DetailAnchor">describe()</a> method provides access to the related object-type metadata.
 The <a href="class_dw_object_Extensible.html#dw_object_Extensible_getCustom_DetailAnchor">getCustom()</a> method is the central point to retrieve and store the objects attribute
 values themselves.
 * @class
 * @extends Object
 * @abstract
 */
dw.object.Extensible = function() {};
dw.object.Extensible.prototype = new Object();

/**
 * Returns the meta data of this object. If no meta data is available the
 method returns null. The returned ObjectTypeDefinition can be used to
 retrieve the metadata for any of the custom attributes.
 * @memberOf dw.object.Extensible
 * @return {dw.object.ObjectTypeDefinition} the meta data of this object. If no meta data is available the          method returns null.
 */
dw.object.Extensible.prototype.describe = function() {};

/**
 *
 * @memberOf dw.object.Extensible
 * @return {dw.object.CustomAttributes}
 * @synchronized
 */
dw.object.Extensible.prototype.getCustom = function() {};

/**
 * Returns the meta data of this object. If no meta data is available the
 method returns null. The returned ObjectTypeDefinition can be used to
 retrieve the metadata for any of the custom attributes.
 * @memberOf dw.object.ExtensibleObject
 * @return {dw.object.ObjectTypeDefinition} the meta data of this object. If no meta data is available the          method returns null.
 */
dw.object.ExtensibleObject.prototype.describe = function() {};

/**
 * Returns the custom attributes for this object. The returned object is
 used for retrieving and storing attribute values. See
 <a href="class_dw_object_CustomAttributes.html">CustomAttributes</a> for a detailed example of the syntax for
 working with custom attributes.
 * @memberOf dw.object.ExtensibleObject
 * @return {dw.object.CustomAttributes} the custom attributes for this object.
 * @synchronized
 */
dw.object.ExtensibleObject.prototype.getCustom = function() {};

/**
 * Represents a note that can be attached to any persistent object
 that supports this feature.
 * @class
 * @extends Object
 */
dw.object.Note = function() {};
dw.object.Note.prototype = new Object();

/**
 * Return the login ID of user that is stored in the session at the time
 the note is created.
 * @memberOf dw.object.Note
 * @return {String} the username.
 */
dw.object.Note.prototype.getCreatedBy = function() {};

/**
 * Return the date and time that the note was created.  This is usually
 set by the system, but may be specified if the note is generated
 via an import.
 * @memberOf dw.object.Note
 * @return {Date} the creation date.
 */
dw.object.Note.prototype.getCreationDate = function() {};

/**
 * Return the subject of the note.
 * @memberOf dw.object.Note
 * @return {String} the subject.
 */
dw.object.Note.prototype.getSubject = function() {};

/**
 * Return the text of the note.
 * @memberOf dw.object.Note
 * @return {String} the text.
 */
dw.object.Note.prototype.getText = function() {};

/**
 * Represents the definition of an object's attribute.
 * @class
 * @extends Object
 */
dw.object.ObjectAttributeDefinition = function() {};
dw.object.ObjectAttributeDefinition.prototype = new Object();

/**
 * Boolean value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_BOOLEAN = 0;

/**
 * Date value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_DATE = 0;

/**
 * Date and Time value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_DATETIME = 0;

/**
 * Email value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_EMAIL = 0;

/**
 * Enum of int value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_ENUM_OF_INT = 0;

/**
 * Enum of String value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_ENUM_OF_STRING = 0;

/**
 * HTML value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_HTML = 0;

/**
 * Image value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_IMAGE = 0;

/**
 * int value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_INT = 0;

/**
 * Money value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_MONEY = 0;

/**
 * Number value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_NUMBER = 0;

/**
 * Password value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_PASSWORD = 0;

/**
 * Quantity value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_QUANTITY = 0;

/**
 * Set of int value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_SET_OF_INT = 0;

/**
 * Set of Number value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_SET_OF_NUMBER = 0;

/**
 * Set of String value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_SET_OF_STRING = 0;

/**
 * String value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_STRING = 0;

/**
 * Text value type.
 * @type Number
 * @memberOf dw.object.ObjectAttributeDefinition
 * @static
 * @const
 */
dw.object.ObjectAttributeDefinition.VALUE_TYPE_TEXT = 0;

/**
 * Returns all attribute groups the attribute is assigned to.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {dw.util.Collection} all attribute groups the attribute is assigned to.
 */
dw.object.ObjectAttributeDefinition.prototype.getAttributeGroups = function() {};

/**
 * Return the default value for the attribute or null if none is defined.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {dw.object.ObjectAttributeValueDefinition} the default value for the attribute or null if none is defined.
 */
dw.object.ObjectAttributeDefinition.prototype.getDefaultValue = function() {};

/**
 * Returns the display name for the attribute, which can be used in the
 user interface.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {String} the display name for the attribute, which can be used in the  user interface.
 */
dw.object.ObjectAttributeDefinition.prototype.getDisplayName = function() {};

/**
 * Returns the ID of the attribute definition.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {String} the ID of the attribute definition.
 */
dw.object.ObjectAttributeDefinition.prototype.getID = function() {};

/**
 * Returns the object type definition in which this attribute is defined.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {dw.object.ObjectTypeDefinition} the object type definition in which this attribute is defined.
 */
dw.object.ObjectAttributeDefinition.prototype.getObjectTypeDefinition = function() {};

/**
 * Returns the attribute's unit representation such as
 inches for length or pounds for weight. The value returned by
 this method is based on the attribute itself.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {String} the attribute's unit representation such as  inches for length or pounds for weight.
 */
dw.object.ObjectAttributeDefinition.prototype.getUnit = function() {};

/**
 * Returns the list of attribute values. In the user interface only the
 values specified in this list should be offered as valid input values.

 The collection contains instances of ObjectAttributeValueDefinition.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {dw.util.Collection} a collection of ObjectAttributeValueDefinition instances representing  the list of attribute values, or null if no values are specified.
 */
dw.object.ObjectAttributeDefinition.prototype.getValues = function() {};

/**
 * Returns a code for the data type stored in the attribute. See constants
 defined in this class.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {Number} a code for the data type stored in the attribute. See constants  defined in this class.
 */
dw.object.ObjectAttributeDefinition.prototype.getValueTypeCode = function() {};

/**
 * Identifies if the attribute represents the primary key of the object.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {Boolean} true if the attribute represents the primary key, false otherwise.
 */
dw.object.ObjectAttributeDefinition.prototype.isKey = function() {};

/**
 * Checks if this attribute is mandatory.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {Boolean} true, if this attribute is mandatory
 */
dw.object.ObjectAttributeDefinition.prototype.isMandatory = function() {};

/**
 * Returns <code>true</code> if the attribute can have multiple values. <br/>
 Attributes of the following types are multi-value capable: <br/>
 <ul>
 <li><a href="class_dw_object_ObjectAttributeDefinition.html#dw_object_ObjectAttributeDefinition_VALUE_TYPE_SET_OF_INT_DetailAnchor">VALUE_TYPE_SET_OF_INT</a></li>
 <li><a href="class_dw_object_ObjectAttributeDefinition.html#dw_object_ObjectAttributeDefinition_VALUE_TYPE_SET_OF_NUMBER_DetailAnchor">VALUE_TYPE_SET_OF_NUMBER</a></li>
 <li><a href="class_dw_object_ObjectAttributeDefinition.html#dw_object_ObjectAttributeDefinition_VALUE_TYPE_SET_OF_STRING_DetailAnchor">VALUE_TYPE_SET_OF_STRING</a></li>
 </ul>
 Additionally, attributes of the following types can be multi-value
 enabled: <br/>
 <ul>
 <li><a href="class_dw_object_ObjectAttributeDefinition.html#dw_object_ObjectAttributeDefinition_VALUE_TYPE_ENUM_OF_INT_DetailAnchor">VALUE_TYPE_ENUM_OF_INT</a></li>
 <li><a href="class_dw_object_ObjectAttributeDefinition.html#dw_object_ObjectAttributeDefinition_VALUE_TYPE_ENUM_OF_STRING_DetailAnchor">VALUE_TYPE_ENUM_OF_STRING</a></li>
 </ul>
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {Boolean} <code>true</code> if attributes can have multiple values,  otherwise <code>false</code>
 */
dw.object.ObjectAttributeDefinition.prototype.isMultiValueType = function() {};

/**
 * Returns <code>true</code> if the attribute is of type 'Set of'.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {Boolean}
 * @deprecated Use <a href="class_dw_object_ObjectAttributeDefinition.html#dw_object_ObjectAttributeDefinition_isMultiValueType_DetailAnchor">isMultiValueType()</a> instead.
 */
dw.object.ObjectAttributeDefinition.prototype.isSetValueType = function() {};

/**
 * Indicates if the attribute is a pre-defined system attribute
 or a custom attribute.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {Boolean} true if the the attribute is a pre-defined system attribute,  false if it is a custom attribute.
 */
dw.object.ObjectAttributeDefinition.prototype.isSystem = function() {};

/**
 * Returns a boolean flag indicating whether or not values of this attribute
 definition should be encoded using the encoding="off" flag in ISML
 templates.
 * @memberOf dw.object.ObjectAttributeDefinition
 * @return {Boolean} a boolean flag indicating whether or not values of this attribute  definition should be encoded using the encoding="off" flag in ISML  templates.
 */
dw.object.ObjectAttributeDefinition.prototype.requiresEncoding = function() {};

/**
 * Represents a group of object attributes.
 * @class
 * @extends Object
 */
dw.object.ObjectAttributeGroup = function() {};
dw.object.ObjectAttributeGroup.prototype = new Object();

/**
 * Returns all attribute definitions for this group. The collection
 may contain both system attribute definition as well as custom
 attribute definitions.
 * @memberOf dw.object.ObjectAttributeGroup
 * @return {dw.util.Collection} all attribute definitions for this group.
 */
dw.object.ObjectAttributeGroup.prototype.getAttributeDefinitions = function() {};

/**
 * Returns the description of this group in the current locale.
 * @memberOf dw.object.ObjectAttributeGroup
 * @return {String} the display name of this group.
 */
dw.object.ObjectAttributeGroup.prototype.getDescription = function() {};

/**
 * Returns the display name of this group.
 * @memberOf dw.object.ObjectAttributeGroup
 * @return {String} the display name of this group.
 */
dw.object.ObjectAttributeGroup.prototype.getDisplayName = function() {};

/**
 * Returns the ID of this group.
 * @memberOf dw.object.ObjectAttributeGroup
 * @return {String} the ID of this group.
 */
dw.object.ObjectAttributeGroup.prototype.getID = function() {};

/**
 * Returns the object type definition to which this attribute group
 belongs.
 * @memberOf dw.object.ObjectAttributeGroup
 * @return {dw.object.ObjectTypeDefinition} the object type definition to which this attribute group  belongs.
 */
dw.object.ObjectAttributeGroup.prototype.getObjectTypeDefinition = function() {};

/**
 * Identifies if this is an sytem or a custom attribute group. A system
 attribute group is pre-defined and can not be deleted.
 * @memberOf dw.object.ObjectAttributeGroup
 * @return {Boolean} true if this is a system attribute group, false otherwise.
 */
dw.object.ObjectAttributeGroup.prototype.isSystem = function() {};

/**
 * Represents the value definition associated with an
 object attribute.
 * @class
 * @extends Object
 */
dw.object.ObjectAttributeValueDefinition = function() {};
dw.object.ObjectAttributeValueDefinition.prototype = new Object();

/**
 * Returns a display name that can be used to present this value in
 the user interface. For example, the value might be '1' but the display
 name might be 'Order Exported'.
 * @memberOf dw.object.ObjectAttributeValueDefinition
 * @return {String} a display name that can be used to present this value in  the user interface.
 */
dw.object.ObjectAttributeValueDefinition.prototype.getDisplayValue = function() {};

/**
 * Returns the actual value for the attribute.
 * @memberOf dw.object.ObjectAttributeValueDefinition
 * @return {Object} the actual value for the attribute.
 */
dw.object.ObjectAttributeValueDefinition.prototype.getValue = function() {};

/**
 * The class provides access to the meta data of a system object or custom
 object.  A short example should suffice to demonstrate how this metadata can
 be used in a script:

 <pre>
 var co : CustomObject = CustomObjectMgr.getCustomObject("sample", "MyCustomObject");

 // get the object type definition
 var typeDef : ObjectTypeDefinition = co.describe();
 // get the custom object attribute definition for name "enumIntValue"
 var attrDef : ObjectAttributeDefinition = typeDef.getCustomAttributeDefinition( "enumIntValue" );
 // get the collection of object attribute value definitions
 var valueDefs : Collection = attrDef.getValues();

 // return function if there are no object attribute value definitions
 if(valueDefs.isEmpty())
 {
     return;
 }

 var displayValue : String;
 // loop over object attribute value definitions collection
 for each ( var valueDef : ObjectAttributeValueDefinition in valueDefs )
 {
     if( valueDef.getValue() == co.custom.intValue )
     {
         displayValue = valueDef.getDisplayValue();
         break;
     }
 }
 </pre>
 * @class
 * @extends Object
 */
dw.object.ObjectTypeDefinition = function() {};
dw.object.ObjectTypeDefinition.prototype = new Object();

/**
 * Returns a collection of all declared attributes for the object.
 The collection contains both system and custom attributes. There might
 be system and custom attribute with identical names. So the name of the
 attribute is not a uniqueness criteria. Additional the isCustom() flag
 must be checked.
 * @memberOf dw.object.ObjectTypeDefinition
 * @return {dw.util.Collection} a collection of all declared attributes for the object.
 */
dw.object.ObjectTypeDefinition.prototype.getAttributeDefinitions = function() {};

/**
 * Returns the attribute group with the given name within this object
 type definition.
 * @memberOf dw.object.ObjectTypeDefinition
 * @param {String} name - The name of the attribute scope to return.
 * @return {dw.object.ObjectAttributeGroup} The matching attribute scope or <code>null</code> if no such  scope exists.
 */
dw.object.ObjectTypeDefinition.prototype.getAttributeGroup = function(name) {};

/**
 * Returns a collection of all declared attribute groups. A attribute group
 is a collection of attribute, which are typically displayed together as
 a visual group.
 * @memberOf dw.object.ObjectTypeDefinition
 * @return {dw.util.Collection} a collection of all declared attribute groups.
 */
dw.object.ObjectTypeDefinition.prototype.getAttributeGroups = function() {};

/**
 * Returns the custom attribute definition with the given name. The method
 returns null if no custom attribute is defined with that name.
 * @memberOf dw.object.ObjectTypeDefinition
 * @param {String} name - The unique name of the custom attribute definition within the  object type.
 * @return {dw.object.ObjectAttributeDefinition} The matching attribute definition or <code>null</code> in  case no such definition exists.
 */
dw.object.ObjectTypeDefinition.prototype.getCustomAttributeDefinition = function(name) {};

/**
 * Returns the display name of the definition, which can be used in the
 user interface.
 * @memberOf dw.object.ObjectTypeDefinition
 * @return {String} the display name of the definition, which can be used in the  user interface.
 */
dw.object.ObjectTypeDefinition.prototype.getDisplayName = function() {};

/**
 * Returns the type id of the business objects.
 * @memberOf dw.object.ObjectTypeDefinition
 * @return {String} the type id of the business objects.
 */
dw.object.ObjectTypeDefinition.prototype.getID = function() {};

/**
 * Returns the system attribute definition with the given name. The method
 returns null if no system attribute is defined with that name. Only
 system objects have system attributes. A CustomObject has no system attributes
 and so the method will always return null for a CustomObject.
 * @memberOf dw.object.ObjectTypeDefinition
 * @param {String} name - The unique name of the custom attribute definition within the  object type.
 * @return {dw.object.ObjectAttributeDefinition} The matching attribute definition or <code>null</code> in  case no such definition exists.
 */
dw.object.ObjectTypeDefinition.prototype.getSystemAttributeDefinition = function(name) {};

/**
 * Identifies if this object definition is for a system type or a custom
 type.
 * @memberOf dw.object.ObjectTypeDefinition
 * @return {Boolean} true if this object definition is for a system type, false otherwise.
 */
dw.object.ObjectTypeDefinition.prototype.isSystem = function() {};

/**
 * Returns the date that this object was created.
 * @memberOf dw.object.PersistentObject
 * @return {Date} the date that this object was created.
 */
dw.object.PersistentObject.prototype.getCreationDate = function() {};

/**
 * Returns the date that this object was last modified.
 * @memberOf dw.object.PersistentObject
 * @return {Date} the date that this object was last modified.
 */
dw.object.PersistentObject.prototype.getLastModified = function() {};

/**
 * Returns the unique universal identifier for this object.
 * @memberOf dw.object.PersistentObject
 * @return {String} the unique universal identifier for this object.
 */
dw.object.PersistentObject.prototype.getUUID = function() {};

/**
 * Manager class which provides methods for querying for system objects with
 meta data using the Demandware query language. See individual API methods for
 details on the query language.
 <p/>
 Note: Other manager classes such as <a href="class_dw_customer_CustomerMgr.html">CustomerMgr</a>,
 <a href="class_dw_catalog_ProductMgr.html">ProductMgr</a>, etc provide more specific and fine-grained
 querying methods that can not be achieved using the general query language.
 <p/>
 To search for custom objects, use <a href="class_dw_object_CustomObjectMgr.html">CustomObjectMgr</a>.
 <b>Note:</b> this class allows access to sensitive information through
 operations that retrieve the Profile and Order objects.
 Pay attention to appropriate legal and regulatory requirements related to this data.
 * @class
 * @extends Object
 */
dw.object.SystemObjectMgr = function() {};
dw.object.SystemObjectMgr.prototype = new Object();

/**
 * Returns the object type definition for the given system object type.

 This method can be used for all system object types that are derived from ExtensibleObject.
 * @memberOf dw.object.SystemObjectMgr
 * @param {String} type - system object type whose type definition should be returned
 * @return {dw.object.ObjectTypeDefinition} the matching object type definition or <code>null</code> in case no           such type definition exists.
 * @static
 */
dw.object.SystemObjectMgr.describe = function(type) {};

/**
 * Returns all system objects of a specific type.
 The following system object types are supported:<br/><ul>
 <li>GiftCertificate</li>
 <li>Order</li>
 <li>Profile</li>
 <li>SourceCodeGroup</li>
 <li>Store</li>
 <li>ProductList</li></ul>

 <p>The method throws an exception in case of another system type.</p>

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.object.SystemObjectMgr
 * @param {String} type - The name of the system object type.                If a matching type definition cannot be found for the given type a                MetaDataException will be thrown.
 * @return {dw.util.SeekableIterator} SeekableIterator containing all system objects of a specific type.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 */
dw.object.SystemObjectMgr.getAllSystemObjects = function(type) {};

/**
 * <p>Searches for a single system object instance. The following system
 object types are supported:<br/><ul>
 <li>GiftCertificate</li>
 <li>Order</li>
 <li>Profile</li>
 <li>SourceCodeGroup</li>
 <li>Store</li>
 <li>ProductList</li></ul></p>

 <p>The method throws an exception in case of another system type.</p>

 <p>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.</p>

 <p>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).</p>

 <p>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.
 </p>

 <p>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul></p>

 <p>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.
 </p>

 <p>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>
 </p>

 <p>If there is more than one object matching the specified query criteria, the
 result is not deterministic. In order to retrieve a single object from a sorted result
 set it is recommended to use the following code:
 <code>querySystemObjects("", "custom.myAttr asc", null).first()</code>.
 The method <code>first()</code> returns only the next element and closes the
 iterator.</p>

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being processed. This will enable the cleanup of system resources.</p>
 * @memberOf dw.object.SystemObjectMgr
 * @param {String} type - the system object type for the query.
 * @param {String} queryString - the actual query.
 * @param {Object[]} args - optional parameters for the queryString.
 * @return {dw.object.PersistentObject} the system object defined by <code>type</code> which was found                when executing the <code>queryString</code>.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 * @varArgs
 */
dw.object.SystemObjectMgr.querySystemObject = function(type, queryString, args) {};

/**
 * <p>Searches for system object instances. The following system object types
 are supported:<br/><ul>
 <li>GiftCertificate</li>
 <li>Order</li>
 <li>Profile</li>
 <li>SourceCodeGroup</li>
 <li>Store</li>
 <li>ProductList</li></ul></p>

 <p>The method throws an exception in case of another system type.</p>

 <p>The search can be configured with a map, which key-value pairs are
 converted into a query expression. The key-value pairs are turned into a
 sequence of '=' or 'like' conditions, which are combined with AND
 statements.</p>

 <p>Example:<br/>
 A map with the key/value pairs: <i>'name'/'tom*', 'age'/66</i>
 will be converted as follows: <code>"name like 'tom*' and age = 66"</code></p>

 <p>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).</p>

 <p>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.
 </p>

 <p>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.</p>

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.object.SystemObjectMgr
 * @param {String} type - the system object type for the query.
 * @param {dw.util.Map} queryAttributes - key-value pairs, which define the query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 */
dw.object.SystemObjectMgr.querySystemObjects = function(type, queryAttributes, sortString) {};

/**
 * <p>Searches for system object instances. The following system object types
 are supported:<br/><ul>
 <li>GiftCertificate</li>
 <li>Order</li>
 <li>Profile</li>
 <li>SourceCodeGroup</li>
 <li>Store</li>
 <li>ProductList</li></ul></p>

 <p>The method throws an exception in case of another system type.</p>

 <p>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.</p>

 <p>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).</p>

 <p>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.
 </p>

 <p>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul></p>

 <p>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.
 </p>

 <p>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>
 </p>

 <p>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.</p>

 <p>Sometimes it is desired to get all instances of specified type with a special sorting condition.
 This can be easily done by providing the 'type' of the system object and the 'sortString' in combination with
 an empty 'queryString', e.g. <code>querySystemObjects("sample", "", "ID asc")</code></p>

 <p>It is strongly recommended to call <code>close()</code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>
 * @memberOf dw.object.SystemObjectMgr
 * @param {String} type - the system object type for the query.
 * @param {String} queryString - the actual query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @param {Object[]} args - optional parameters for the queryString.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 * @varArgs
 */
dw.object.SystemObjectMgr.querySystemObjects = function(type, queryString, sortString, args) {};

/**
 * This class represents all script hooks that can be registered to customizing
 the OCAPI Data API content asset resources. It contains the extension points
 (hook names), and the functions that are called by each extension point. A
 function must be defined inside a JavaScript source and must be exported. The
 script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.data.content.content.afterUpdate", "script": "./script.js"},
      {"name": "dw.ocapi.data.content.content.beforeUpdate", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the
 exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.data.content.ContentAssetHooks = function() {};
dw.ocapi.data.content.ContentAssetHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.data.content.content.afterCreate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentAssetHooks.extensionPointAfterCreate = '';

/**
 * The extension point name dw.ocapi.data.content.content.afterCreate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentAssetHooks.extensionPointAfterDelete = '';

/**
 * The extension point name dw.ocapi.data.content.content.afterUpdate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentAssetHooks.extensionPointAfterUpdate = '';

/**
 * The extension point name dw.ocapi.data.content.content.beforeCreate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentAssetHooks.extensionPointBeforeCreate = '';

/**
 * The extension point name dw.ocapi.data.content.content.beforeDelete.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentAssetHooks.extensionPointBeforeDelete = '';

/**
 * The extension point name dw.ocapi.data.content.content.beforeUpdate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentAssetHooks.extensionPointBeforeUpdate = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentAssetHooks.html#dw_ocapi_data_content_ContentAssetHooks_extensionPointAfterCreate_DetailAnchor">extensionPointAfterCreate</a>.
 It is called after the new content asset was created.
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {dw.content.Content} content - the new content asset.
 * @param {com.demandware.wapi.document.data.libraries.content.ContentAsset} create - the content asset create document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentAssetHooks.prototype.afterCreate = function(library, content, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentAssetHooks.html#dw_ocapi_data_content_ContentAssetHooks_extensionPointAfterDelete_DetailAnchor">extensionPointAfterDelete</a>.
 It is called after the content asset was deleted.
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentAssetHooks.prototype.afterDelete = function(library) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentAssetHooks.html#dw_ocapi_data_content_ContentAssetHooks_extensionPointAfterUpdate_DetailAnchor">extensionPointAfterUpdate</a>.
 It is called after the content asset is updated with update document.
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {dw.content.Content} content - the content asset to update.
 * @param {com.demandware.wapi.document.data.libraries.content.ContentAsset} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentAssetHooks.prototype.afterUpdate = function(library, content, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentAssetHooks.html#dw_ocapi_data_content_ContentAssetHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before the content asset is created with the given document.
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {com.demandware.wapi.document.data.libraries.content.ContentAsset} create - the content asset create document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentAssetHooks.prototype.beforeCreate = function(library, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentAssetHooks.html#dw_ocapi_data_content_ContentAssetHooks_extensionPointBeforeDelete_DetailAnchor">extensionPointBeforeDelete</a>.
 It is called before the content asset is deleted.
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {dw.content.Content} content - the content asset to be deleted.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentAssetHooks.prototype.beforeDelete = function(library, content) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentAssetHooks.html#dw_ocapi_data_content_ContentAssetHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before the content asset is updated with update document.
 * @memberOf dw.ocapi.data.content.ContentAssetHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {dw.content.Content} content - the content asset to update.
 * @param {com.demandware.wapi.document.data.libraries.content.ContentAsset} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentAssetHooks.prototype.beforeUpdate = function(library, content, update) {};

/**
 * This class represents all script hooks that can be registered to customizing
 the OCAPI Data API content folder resources. It contains the extension points
 (hook names), and the functions that are called by each extension point. A
 function must be defined inside a JavaScript source and must be exported. The
 script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.data.content.folder.afterUpdate", "script": "./script.js"},
      {"name": "dw.ocapi.data.content.folder.beforeUpdate", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the
 exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.data.content.ContentFolderHooks = function() {};
dw.ocapi.data.content.ContentFolderHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.data.content.folder.afterCreate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentFolderHooks.extensionPointAfterCreate = '';

/**
 * The extension point name dw.ocapi.data.content.folder.afterCreate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentFolderHooks.extensionPointAfterDelete = '';

/**
 * The extension point name dw.ocapi.data.content.folder.afterUpdate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentFolderHooks.extensionPointAfterUpdate = '';

/**
 * The extension point name dw.ocapi.data.content.folder.beforeCreate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentFolderHooks.extensionPointBeforeCreate = '';

/**
 * The extension point name dw.ocapi.data.content.folder.beforeDelete.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentFolderHooks.extensionPointBeforeDelete = '';

/**
 * The extension point name dw.ocapi.data.content.folder.beforeUpdate.
 * @type String
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @static
 * @const
 */
dw.ocapi.data.content.ContentFolderHooks.extensionPointBeforeUpdate = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentFolderHooks.html#dw_ocapi_data_content_ContentFolderHooks_extensionPointAfterCreate_DetailAnchor">extensionPointAfterCreate</a>.
 It is called after the new content folder was created.
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {dw.content.Folder} folder - the new content folder.
 * @param {com.demandware.wapi.document.data.libraries.content.ContentFolder} create - the content folder create document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentFolderHooks.prototype.afterCreate = function(library, folder, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentFolderHooks.html#dw_ocapi_data_content_ContentFolderHooks_extensionPointAfterDelete_DetailAnchor">extensionPointAfterDelete</a>.
 It is called after the content folder was deleted.
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentFolderHooks.prototype.afterDelete = function(library) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentFolderHooks.html#dw_ocapi_data_content_ContentFolderHooks_extensionPointAfterUpdate_DetailAnchor">extensionPointAfterUpdate</a>.
 It is called after the content folder is updated with update document.
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {dw.content.Folder} folder - the content folder to update.
 * @param {com.demandware.wapi.document.data.libraries.content.ContentFolder} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentFolderHooks.prototype.afterUpdate = function(library, folder, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentFolderHooks.html#dw_ocapi_data_content_ContentFolderHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before the content folder is created with the given document.
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {com.demandware.wapi.document.data.libraries.content.ContentFolder} create
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentFolderHooks.prototype.beforeCreate = function(library, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentFolderHooks.html#dw_ocapi_data_content_ContentFolderHooks_extensionPointBeforeDelete_DetailAnchor">extensionPointBeforeDelete</a>.
 It is called before the content folder is deleted.
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {dw.content.Folder} folder - the content folder to be deleted.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentFolderHooks.prototype.beforeDelete = function(library, folder) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_content_ContentFolderHooks.html#dw_ocapi_data_content_ContentFolderHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before the content folder is updated with update document.
 * @memberOf dw.ocapi.data.content.ContentFolderHooks
 * @param {dw.content.Library} library - the library in the actual context
 * @param {dw.content.Folder} folder - the content folder to update.
 * @param {com.demandware.wapi.document.data.libraries.content.ContentFolder} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.content.ContentFolderHooks.prototype.beforeUpdate = function(library, folder, update) {};

/**
 * This class represents all script hooks that can be registered to customizing the OCAPI Data API customer address resources.
 It contains the extension points (hook names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported.
 The script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.data.customer.address.afterUpdate", "script": "./script.js"},
      {"name": "dw.ocapi.data.customer.address.beforeUpdate", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.data.customer.CustomerAddressHooks = function() {};
dw.ocapi.data.customer.CustomerAddressHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.data.customer.address.afterCreate.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerAddressHooks.extensionPointAfterCreate = '';

/**
 * The extension point name dw.ocapi.data.customer.address.afterCreate.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerAddressHooks.extensionPointAfterDelete = '';

/**
 * The extension point name dw.ocapi.data.customer.address.afterUpdate.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerAddressHooks.extensionPointAfterUpdate = '';

/**
 * The extension point name dw.ocapi.data.customer.address.beforeCreate.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerAddressHooks.extensionPointBeforeCreate = '';

/**
 * The extension point name dw.ocapi.data.customer.address.beforeDelete.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerAddressHooks.extensionPointBeforeDelete = '';

/**
 * The extension point name dw.ocapi.data.customer.address.beforeUpdate.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerAddressHooks.extensionPointBeforeUpdate = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerAddressHooks.html#dw_ocapi_data_customer_CustomerAddressHooks_extensionPointAfterCreate_DetailAnchor">extensionPointAfterCreate</a>.
 It is called after the new customer address was created.
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be created for.
 * @param {dw.customer.CustomerAddress} customerAddress - the new customer address.
 * @param {com.demandware.wapi.document.data.customer.CustomerAddress} create - the customer address create document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerAddressHooks.prototype.afterCreate = function(customer, customerAddress, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerAddressHooks.html#dw_ocapi_data_customer_CustomerAddressHooks_extensionPointAfterDelete_DetailAnchor">extensionPointAfterDelete</a>.
 It is called after the customer address was deleted.
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be deleted for.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerAddressHooks.prototype.afterDelete = function(customer) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerAddressHooks.html#dw_ocapi_data_customer_CustomerAddressHooks_extensionPointAfterUpdate_DetailAnchor">extensionPointAfterUpdate</a>.
 It is called after the customer address is updated with update document.
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be updated for.
 * @param {dw.customer.CustomerAddress} customerAddress
 * @param {com.demandware.wapi.document.data.customer.CustomerAddress} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerAddressHooks.prototype.afterUpdate = function(customer, customerAddress, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerAddressHooks.html#dw_ocapi_data_customer_CustomerAddressHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before a customer address is created with the given document.
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be created for.
 * @param {com.demandware.wapi.document.data.customer.CustomerAddress} create - the customer address create document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerAddressHooks.prototype.beforeCreate = function(customer, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerAddressHooks.html#dw_ocapi_data_customer_CustomerAddressHooks_extensionPointBeforeDelete_DetailAnchor">extensionPointBeforeDelete</a>.
 It is called before the customer is deleted.
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be deleted for.
 * @param {dw.customer.CustomerAddress} customerAddress - the customer address to be deleted.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerAddressHooks.prototype.beforeDelete = function(customer, customerAddress) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerAddressHooks.html#dw_ocapi_data_customer_CustomerAddressHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before the customer address is updated with update document.
 * @memberOf dw.ocapi.data.customer.CustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be updated for.
 * @param {dw.customer.CustomerAddress} customerAddress - the customer address to update.
 * @param {com.demandware.wapi.document.data.customer.CustomerAddress} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerAddressHooks.prototype.beforeUpdate = function(customer, customerAddress, update) {};

/**
 * This class represents all script hooks that can be registered to customizing the OCAPI Data API customer resources.
 It contains the extension points (hook names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported.
 The script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.data.customer.afterUpdate", "script": "./script.js"},
      {"name": "dw.ocapi.data.customer.beforeUpdate", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.data.customer.CustomerHooks = function() {};
dw.ocapi.data.customer.CustomerHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.data.customer.afterCreate.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerHooks.extensionPointAfterCreate = '';

/**
 * The extension point name dw.ocapi.data.customer.afterDelete.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerHooks.extensionPointAfterDelete = '';

/**
 * The extension point name dw.ocapi.data.customer.afterUpdate.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerHooks.extensionPointAfterUpdate = '';

/**
 * The extension point name dw.ocapi.data.customer.beforeCreate.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerHooks.extensionPointBeforeCreate = '';

/**
 * The extension point name dw.ocapi.data.customer.beforeDelete.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerHooks.extensionPointBeforeDelete = '';

/**
 * The extension point name dw.ocapi.data.customer.beforeUpdate.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerHooks.extensionPointBeforeUpdate = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerHooks.html#dw_ocapi_data_customer_CustomerHooks_extensionPointAfterCreate_DetailAnchor">extensionPointAfterCreate</a>.
 It is called after the new customer was created.
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @param {dw.customer.Customer} customer - the new customer.
 * @param {com.demandware.wapi.document.data.customer.Customer} create - the customer create document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerHooks.prototype.afterCreate = function(customer, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerHooks.html#dw_ocapi_data_customer_CustomerHooks_extensionPointAfterDelete_DetailAnchor">extensionPointAfterDelete</a>.
 It is called after the customer was deleted.
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerHooks.prototype.afterDelete = function() {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerHooks.html#dw_ocapi_data_customer_CustomerHooks_extensionPointAfterUpdate_DetailAnchor">extensionPointAfterUpdate</a>.
 It is called after the customer is updated with update document.
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer to update.
 * @param {com.demandware.wapi.document.data.customer.Customer} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerHooks.prototype.afterUpdate = function(customer, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerHooks.html#dw_ocapi_data_customer_CustomerHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before the customer is created with the given document.
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @param {com.demandware.wapi.document.data.customer.Customer} create - the customer create document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerHooks.prototype.beforeCreate = function(create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerHooks.html#dw_ocapi_data_customer_CustomerHooks_extensionPointBeforeDelete_DetailAnchor">extensionPointBeforeDelete</a>.
 It is called before the customer is deleted.
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer to be deleted.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerHooks.prototype.beforeDelete = function(customer) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerHooks.html#dw_ocapi_data_customer_CustomerHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before the customer is updated with update document.
 * @memberOf dw.ocapi.data.customer.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer to update.
 * @param {com.demandware.wapi.document.data.customer.Customer} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerHooks.prototype.beforeUpdate = function(customer, update) {};

/**
 * This class represents all script hooks that can be registered to customizing the OCAPI Data API customer address resources.
 It contains the extension points (hook names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported.
 The script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.data.customer_list.customer.address.afterPATCH", "script": "./script.js"},
      {"name": "dw.ocapi.data.customer_list.customer.address.beforePATCH", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks = function() {};
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.data.customer_list.customer.address.afterDELETE.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.extensionPointAfterDelete = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customer.address.afterPATCH.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.extensionPointAfterPatch = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customer.addresses.afterPOST.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.extensionPointAfterPost = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customer.address.beforeDELETE.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.extensionPointBeforeDelete = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customer.address.beforePATCH.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.extensionPointBeforePatch = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customer.addresses.beforePOST.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.extensionPointBeforePost = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerAddressHooks.html#dw_ocapi_data_customer_CustomerListCustomerAddressHooks_extensionPointAfterDelete_DetailAnchor">extensionPointAfterDelete</a>.
 It is called after the customer address was deleted.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be deleted for.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.prototype.afterDelete = function(customer, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerAddressHooks.html#dw_ocapi_data_customer_CustomerListCustomerAddressHooks_extensionPointAfterPatch_DetailAnchor">extensionPointAfterPatch</a>.
 It is called after the customer address is updated with update document.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be updated for.
 * @param {dw.customer.CustomerAddress} customerAddress
 * @param {com.demandware.wapi.document.data.customer.CustomerAddress} update - the update document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.prototype.afterPatch = function(customer, customerAddress, update, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerAddressHooks.html#dw_ocapi_data_customer_CustomerListCustomerAddressHooks_extensionPointAfterPost_DetailAnchor">extensionPointAfterPost</a>.
 It is called after the new customer address was created.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be created for.
 * @param {dw.customer.CustomerAddress} customerAddress - the new customer address.
 * @param {com.demandware.wapi.document.data.customer.CustomerAddress} create - the customer address create document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.prototype.afterPost = function(customer, customerAddress, create, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerAddressHooks.html#dw_ocapi_data_customer_CustomerListCustomerAddressHooks_extensionPointBeforeDelete_DetailAnchor">extensionPointBeforeDelete</a>.
 It is called before the customer is deleted.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be deleted for.
 * @param {dw.customer.CustomerAddress} customerAddress - the customer address to be deleted.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.prototype.beforeDelete = function(customer, customerAddress, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerAddressHooks.html#dw_ocapi_data_customer_CustomerListCustomerAddressHooks_extensionPointBeforePatch_DetailAnchor">extensionPointBeforePatch</a>.
 It is called before the customer address is updated with update document.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be updated for.
 * @param {dw.customer.CustomerAddress} customerAddress - the customer address to update.
 * @param {com.demandware.wapi.document.data.customer.CustomerAddress} update - the update document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.prototype.beforePatch = function(customer, customerAddress, update, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerAddressHooks.html#dw_ocapi_data_customer_CustomerListCustomerAddressHooks_extensionPointBeforePatch_DetailAnchor">extensionPointBeforePatch</a>.
 It is called before a customer address is created with the given document.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerAddressHooks
 * @param {dw.customer.Customer} customer - the customer the address should be created for.
 * @param {com.demandware.wapi.document.data.customer.CustomerAddress} create - the customer address create document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerAddressHooks.prototype.beforePost = function(customer, create, customerListId) {};

/**
 * This class represents all script hooks that can be registered to customizing the OCAPI Data API customer resources.
 It contains the extension points (hook names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported.
 The script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.data.customer_list.customer.afterPATCH", "script": "./script.js"},
      {"name": "dw.ocapi.data.customer_list.customer.beforePATCH", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.data.customer.CustomerListCustomerHooks = function() {};
dw.ocapi.data.customer.CustomerListCustomerHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.data.customer_list.customer.afterDELETE.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.extensionPointAfterDelete = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customer.afterPATCH.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.extensionPointAfterPatch = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customers.afterPOST.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.extensionPointAfterPost = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customers.afterPUT.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.extensionPointAfterPut = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customer.beforeDELETE.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.extensionPointBeforeDelete = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customer.beforePATCH.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.extensionPointBeforePatch = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customers.beforePOST.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.extensionPointBeforePost = '';

/**
 * The extension point name dw.ocapi.data.customer_list.customers.beforePUT.
 * @type String
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @static
 * @const
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.extensionPointBeforePut = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerHooks.html#dw_ocapi_data_customer_CustomerListCustomerHooks_extensionPointAfterDelete_DetailAnchor">extensionPointAfterDelete</a>.
 It is called after the customer was deleted.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.prototype.afterDelete = function(customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerHooks.html#dw_ocapi_data_customer_CustomerListCustomerHooks_extensionPointAfterPatch_DetailAnchor">extensionPointAfterPatch</a>.
 It is called after the customer is updated with update document.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @param {dw.customer.Customer} customer - the customer to update.
 * @param {com.demandware.wapi.document.data.customer.Customer} update - the update document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.prototype.afterPatch = function(customer, update, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerHooks.html#dw_ocapi_data_customer_CustomerListCustomerHooks_extensionPointAfterPost_DetailAnchor">extensionPointAfterPost</a>.
 It is called after the new customer was created.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @param {dw.customer.Customer} customer - the new customer.
 * @param {com.demandware.wapi.document.data.customer.Customer} create - the customer create document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.prototype.afterPost = function(customer, create, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerHooks.html#dw_ocapi_data_customer_CustomerListCustomerHooks_extensionPointAfterPut_DetailAnchor">extensionPointAfterPut</a>.
 It is called after the new customer was created.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @param {dw.customer.Customer} customer - the new customer.
 * @param {com.demandware.wapi.document.data.customer.Customer} create - the customer create document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.prototype.afterPut = function(customer, create, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerHooks.html#dw_ocapi_data_customer_CustomerListCustomerHooks_extensionPointBeforeDelete_DetailAnchor">extensionPointBeforeDelete</a>.
 It is called before the customer is deleted.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @param {dw.customer.Customer} customer - the customer to be deleted.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.prototype.beforeDelete = function(customer, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerHooks.html#dw_ocapi_data_customer_CustomerListCustomerHooks_extensionPointBeforePatch_DetailAnchor">extensionPointBeforePatch</a>.
 It is called before the customer is updated with update document.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @param {dw.customer.Customer} customer - the customer to update.
 * @param {com.demandware.wapi.document.data.customer.Customer} update - the update document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.prototype.beforePatch = function(customer, update, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerHooks.html#dw_ocapi_data_customer_CustomerListCustomerHooks_extensionPointBeforePatch_DetailAnchor">extensionPointBeforePatch</a>.
 It is called before the customer is created with the given document.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @param {com.demandware.wapi.document.data.customer.Customer} create - the customer create document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.prototype.beforePost = function(create, customerListId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_customer_CustomerListCustomerHooks.html#dw_ocapi_data_customer_CustomerListCustomerHooks_extensionPointBeforePatch_DetailAnchor">extensionPointBeforePatch</a>.
 It is called before the customer is created with the given document.
 * @memberOf dw.ocapi.data.customer.CustomerListCustomerHooks
 * @param {com.demandware.wapi.document.data.customer.Customer} create - the customer create document.
 * @param {String} customerListId - the id of the customerlist the customer is assigned to
 * @return {dw.system.Status} <ul><li>Status.OK in case of everything is fine.</li><li>Status.ERROR in case of something went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.data.customer.CustomerListCustomerHooks.prototype.beforePut = function(create, customerListId) {};

/**
 * This class represents all script hooks that can be registered to customize the
 OCAPI Data API custom objects resources. It contains the extension points (hook
 names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported. The
 script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.data.object.afterPatch", "script": "./script.js"},
      {"name": "dw.ocapi.data.object.beforePatch", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the
 exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.data.object.CustomObjectsHooks = function() {};
dw.ocapi.data.object.CustomObjectsHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.data.object.afterDelete.
 * @type String
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @static
 * @const
 */
dw.ocapi.data.object.CustomObjectsHooks.extensionPointAfterDelete = '';

/**
 * The extension point name dw.ocapi.data.object.afterPatch.
 * @type String
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @static
 * @const
 */
dw.ocapi.data.object.CustomObjectsHooks.extensionPointAfterPatch = '';

/**
 * The extension point name dw.ocapi.data.object.afterPut.
 * @type String
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @static
 * @const
 */
dw.ocapi.data.object.CustomObjectsHooks.extensionPointAfterPut = '';

/**
 * The extension point name dw.ocapi.data.object.beforeDelete.
 * @type String
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @static
 * @const
 */
dw.ocapi.data.object.CustomObjectsHooks.extensionPointBeforeDelete = '';

/**
 * The extension point name dw.ocapi.data.object.beforePut.
 * @type String
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @static
 * @const
 */
dw.ocapi.data.object.CustomObjectsHooks.extensionPointBeforePatch = '';

/**
 * The extension point name dw.ocapi.data.object.beforePut.
 * @type String
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @static
 * @const
 */
dw.ocapi.data.object.CustomObjectsHooks.extensionPointBeforePut = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_object_CustomObjectsHooks.html#dw_ocapi_data_object_CustomObjectsHooks_extensionPointAfterDelete_DetailAnchor">extensionPointAfterDelete</a>.
 It is called after the custom object was deleted.
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.object.CustomObjectsHooks.prototype.afterDelete = function() {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_object_CustomObjectsHooks.html#dw_ocapi_data_object_CustomObjectsHooks_extensionPointAfterPatch_DetailAnchor">extensionPointAfterPatch</a>.
 It is called after the custom object was updated with update document.
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @param {dw.object.CustomObject} customObject - the updated custom object
 * @param {com.demandware.wapi.document.data.custom_objects.CustomObject} create
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.object.CustomObjectsHooks.prototype.afterPatch = function(customObject, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_object_CustomObjectsHooks.html#dw_ocapi_data_object_CustomObjectsHooks_extensionPointAfterPut_DetailAnchor">extensionPointAfterPut</a>.
 It is called after the custom object was created with create document.
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @param {dw.object.CustomObject} customObject - the created custom object
 * @param {com.demandware.wapi.document.data.custom_objects.CustomObject} create - the create document, may be <code>null</code>
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.object.CustomObjectsHooks.prototype.afterPut = function(customObject, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_object_CustomObjectsHooks.html#dw_ocapi_data_object_CustomObjectsHooks_extensionPointBeforeDelete_DetailAnchor">extensionPointBeforeDelete</a>.
 It is called before the custom object is removed.
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @param {dw.object.CustomObject} customObject
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.object.CustomObjectsHooks.prototype.beforeDelete = function(customObject) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_object_CustomObjectsHooks.html#dw_ocapi_data_object_CustomObjectsHooks_extensionPointBeforePatch_DetailAnchor">extensionPointBeforePatch</a>.
 It is called before the custom object is updated with update document.
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @param {dw.object.CustomObject} customObject
 * @param {com.demandware.wapi.document.data.custom_objects.CustomObject} update - the update document
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.object.CustomObjectsHooks.prototype.beforePatch = function(customObject, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_data_object_CustomObjectsHooks.html#dw_ocapi_data_object_CustomObjectsHooks_extensionPointBeforePut_DetailAnchor">extensionPointBeforePut</a>.
 It is called before the custom object is created with create document.
 * @memberOf dw.ocapi.data.object.CustomObjectsHooks
 * @param {com.demandware.wapi.document.data.custom_objects.CustomObject} create - the create document, may be <code>null</code>
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li>          <li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.data.object.CustomObjectsHooks.prototype.beforePut = function(create) {};

/**
 * This class represents all script hooks that can be registered to customizing the OCAPI Data API account address resources.
 It contains the extension points (hook names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported.
 The script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.shop.account.address.beforeDelete", "script": "./script.js"},
      {"name": "dw.ocapi.shop.account.address.afterDelete", "script": "./script.js"},
      {"name": "dw.ocapi.shop.account.address.beforeCreate", "script": "./script.js"},
      {"name": "dw.ocapi.shop.account.address.afterCreate", "script": "./script.js"}
      {"name": "dw.ocapi.shop.account.address.beforeUpdate", "script": "./script.js"},
      {"name": "dw.ocapi.shop.account.address.afterUpdate", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.shop.account.AccountAddressHooks = function() {};
dw.ocapi.shop.account.AccountAddressHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.shop.account.address.afterCreate.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountAddressHooks.extensionPointAfterCreate = '';

/**
 * The extension point name dw.ocapi.shop.account.address.afterDelete.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountAddressHooks.extensionPointAfterDelete = '';

/**
 * The extension point name dw.ocapi.shop.account.address.afterUpdate.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountAddressHooks.extensionPointAfterUpdate = '';

/**
 * The extension point name dw.ocapi.shop.account.address.beforeCreate.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountAddressHooks.extensionPointBeforeCreate = '';

/**
 * The extension point name dw.ocapi.shop.account.address.beforeDelete.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountAddressHooks.extensionPointBeforeDelete = '';

/**
 * The extension point name dw.ocapi.shop.account.address.beforeUpdate.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountAddressHooks.extensionPointBeforeUpdate = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountAddressHooks.html#dw_ocapi_shop_account_AccountAddressHooks_extensionPointAfterCreate_DetailAnchor">extensionPointAfterCreate</a>.
 It is called after the new account address was created.
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @param {dw.customer.Profile} profile - the profile, the address should be created for.
 * @param {dw.customer.CustomerAddress} customerAddress - the new account address.
 * @param {com.demandware.wapi.document.shop.account.CustomerAddress} create - the account address create document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountAddressHooks.prototype.afterCreate = function(profile, customerAddress, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountAddressHooks.html#dw_ocapi_shop_account_AccountAddressHooks_extensionPointAfterDelete_DetailAnchor">extensionPointAfterDelete</a>.
 It is called after an account address was deleted.
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @param {dw.customer.Profile} profile - the profile, the address was deleted for.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountAddressHooks.prototype.afterDelete = function(profile) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountAddressHooks.html#dw_ocapi_shop_account_AccountAddressHooks_extensionPointAfterUpdate_DetailAnchor">extensionPointAfterUpdate</a>.
 It is called after an account address was updated.
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @param {dw.customer.Profile} profile - the profile, the address should be updated for.
 * @param {dw.customer.CustomerAddress} customerAddress - the account address to update.
 * @param {com.demandware.wapi.document.shop.account.CustomerAddress} update - the account address update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountAddressHooks.prototype.afterUpdate = function(profile, customerAddress, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountAddressHooks.html#dw_ocapi_shop_account_AccountAddressHooks_extensionPointBeforeCreate_DetailAnchor">extensionPointBeforeCreate</a>.
 It is called before an account address is created with the given document.
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @param {dw.customer.Profile} profile - the profile, the address should be created for.
 * @param {com.demandware.wapi.document.shop.account.CustomerAddress} create - the account address create document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountAddressHooks.prototype.beforeCreate = function(profile, create) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountAddressHooks.html#dw_ocapi_shop_account_AccountAddressHooks_extensionPointBeforeDelete_DetailAnchor">extensionPointBeforeDelete</a>.
 It is called before an account address is deleted with the given document.
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @param {dw.customer.Profile} profile - the profile, the address should be deleted from.
 * @param {dw.customer.CustomerAddress} address - the account address delete document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountAddressHooks.prototype.beforeDelete = function(profile, address) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountAddressHooks.html#dw_ocapi_shop_account_AccountAddressHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before an account address is updated with the given document.
 * @memberOf dw.ocapi.shop.account.AccountAddressHooks
 * @param {dw.customer.Profile} profile - the profile, the address should be updated for.
 * @param {dw.customer.CustomerAddress} customerAddress - the account address to update.
 * @param {com.demandware.wapi.document.shop.account.CustomerAddress} update - the account address update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountAddressHooks.prototype.beforeUpdate = function(profile, customerAddress, update) {};

/**
 * This class represents all script hooks that can be registered to customizing the OCAPI account resources.
 It contains the extension points (hook names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported.
 The script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.shop.account.afterUpdate", "script": "./script.js"},
      {"name": "dw.ocapi.shop.account.beforeUpdate", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.shop.account.AccountHooks = function() {};
dw.ocapi.shop.account.AccountHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.shop.account.afterLogin.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountHooks.extensionPointAfterLogin = '';

/**
 * The extension point name dw.ocapi.shop.account.afterRegister.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountHooks.extensionPointAfterRegister = '';

/**
 * The extension point name dw.ocapi.shop.account.afterUpdate.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountHooks.extensionPointAfterUpdate = '';

/**
 * The extension point name dw.ocapi.shop.account.beforeLogin.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountHooks.extensionPointBeforeLogin = '';

/**
 * The extension point name dw.ocapi.shop.account.beforeRegister.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountHooks.extensionPointBeforeRegister = '';

/**
 * The extension point name dw.ocapi.shop.account.beforeUpdate.
 * @type String
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.AccountHooks.extensionPointBeforeUpdate = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountHooks.html#dw_ocapi_shop_account_AccountHooks_extensionPointAfterLogin_DetailAnchor">extensionPointAfterLogin</a>.
 It is called after the customer was logged in and their basket was retrieved and recalculated.
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @param {dw.customer.Profile} profile - the profile of the customer, null if the login failed.
 * @param {com.demandware.wapi.document.shop.account.Credentials} credentials - the credentials document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountHooks.prototype.afterLogin = function(profile, credentials) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountHooks.html#dw_ocapi_shop_account_AccountHooks_extensionPointAfterRegister_DetailAnchor">extensionPointAfterRegister</a>.
 It is called after the new profile was created.
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @param {dw.customer.Profile} profile - the new profile.
 * @param {com.demandware.wapi.document.shop.account.Registration} registration - the registration document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountHooks.prototype.afterRegister = function(profile, registration) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountHooks.html#dw_ocapi_shop_account_AccountHooks_extensionPointAfterUpdate_DetailAnchor">extensionPointAfterUpdate</a>.
 It is called after the profile was updated with update document.
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @param {dw.customer.Profile} profile - the updated profile.
 * @param {com.demandware.wapi.document.shop.account.Profile} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountHooks.prototype.afterUpdate = function(profile, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountHooks.html#dw_ocapi_shop_account_AccountHooks_extensionPointBeforeLogin_DetailAnchor">extensionPointBeforeLogin</a>.
 It is called before the credentials are checked.
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @param {com.demandware.wapi.document.shop.account.Credentials} credentials - the credentials document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountHooks.prototype.beforeLogin = function(credentials) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountHooks.html#dw_ocapi_shop_account_AccountHooks_extensionPointAfterUpdate_DetailAnchor">extensionPointAfterUpdate</a>.
 It is called before the new profile is created.
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @param {com.demandware.wapi.document.shop.account.Registration} registration - the registration document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountHooks.prototype.beforeRegister = function(registration) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_account_AccountHooks.html#dw_ocapi_shop_account_AccountHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before the profile is updated with update document.
 * @memberOf dw.ocapi.shop.account.AccountHooks
 * @param {dw.customer.Profile} profile - the profile to update.
 * @param {com.demandware.wapi.document.shop.account.Profile} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.account.AccountHooks.prototype.beforeUpdate = function(profile, update) {};

/**
 * CustomerHooks interface containing extension points for managing a
 <a href="class_dw_customer_Customer.html">Customer</a> payment instruments via REST APIs.
 <p/>
 Any changes applied by a script implementing before- and after- hooks are
 committed in the same database transaction as the update itself. Arguments
 are passed by reference, so the before- hook can be used to update the values
 passed as arguments to the update.
 <p/>
 The extension points (hook names), and the functions that are called by each
 extension point. A function must be defined inside a JavaScript source and
 must be exported. The script with the exported hook function must be located
 inside a site cartridge. Inside the site cartridge a 'package.json' file with
 a 'hooks' entry must exist.
 <p/>

 <pre>
 "hooks": "./hooks.json"
 </pre>

 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p/>

 <pre>
 "hooks": [
      {"name": "dw.ocapi.shop.customer.afterDeletePaymentInstrument", "script": "./customerHooks.ds"}
 ]
 </pre>

 <p/>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the
 exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.shop.account.CustomerHooks = function() {};
dw.ocapi.shop.account.CustomerHooks.prototype = new Object();

/**
 * Extension point dw.ocapi.shop.customer.afterDeleteAddress.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointAfterDeleteAddress = '';

/**
 * Extension point dw.ocapi.shop.customer.afterDeletePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointAfterDeletePaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.customer.afterPatchAddress.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointAfterPatchAddress = '';

/**
 * Extension point dw.ocapi.shop.customer.afterPatchCustomer.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointAfterPatchCustomer = '';

/**
 * Extension point dw.ocapi.shop.customer.afterPostAddress.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointAfterPostAddress = '';

/**
 * Extension point dw.ocapi.shop.customer.afterPostPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointAfterPostPaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.customer.beforeDeleteAddress.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointBeforeDeleteAddress = '';

/**
 * Extension point dw.ocapi.shop.customer.beforeDeletePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointBeforeDeletePaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.customer.beforePatchAddress.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointBeforePatchAddress = '';

/**
 * Extension point dw.ocapi.shop.customer.beforePatchCustomer.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointBeforePatchCustomer = '';

/**
 * Extension point dw.ocapi.shop.customer.beforePostAddress.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointBeforePostAddress = '';

/**
 * Extension point dw.ocapi.shop.customer.beforePostPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.extensionPointBeforePostPaymentInstrument = '';

/**
 * Prefix used for extension names: dw.ocapi.shop.customer
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomerHooks.prefix = '';

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointAfterDeleteAddress_DetailAnchor">extensionPointAfterDeleteAddress</a>.
 Called after removing an address of a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom the address was deleted
 * @param {String} addressName - the name of the address which was deleted
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.afterDeleteAddress = function(customer, addressName) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointAfterDeletePaymentInstrument_DetailAnchor">extensionPointAfterDeletePaymentInstrument</a>.
 Called after removing a payment instrument of a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom to delete the payment instrument
 * @param {String} paymentInstrumentId - the id of the payment instrument which was deleted
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.afterDeletePaymentInstrument = function(customer, paymentInstrumentId) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointAfterPatchAddress_DetailAnchor">extensionPointAfterPatchAddress</a>.
 Called after updating an address of a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom the address was updated
 * @param {String} addressName - the name of the address which was updated
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.afterPatchAddress = function(customer, addressName) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointAfterPatchCustomer_DetailAnchor">extensionPointAfterPatchCustomer</a>. It is called after a
 customer is updated.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer to be updated
 * @param {com.demandware.wapi.document.shop.account2.Customer} customerInput - the input customer containing the patch changes
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.afterPatchCustomer = function(customer, customerInput) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointAfterPostAddress_DetailAnchor">extensionPointAfterPostAddress</a>.
 Called after adding an address to a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom the address was added
 * @param {String} addressName - the name of the address which was added
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.afterPostAddress = function(customer, addressName) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointAfterPostPaymentInstrument_DetailAnchor">extensionPointAfterPostPaymentInstrument</a>. It is called after a
 payment instrument was added to a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom to add the payment instrument
 * @param {com.demandware.wapi.document.shop.account2.CustomerPaymentInstrumentRequest} paymentInstrument - the payment instrument which was added
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.afterPostPaymentInstrument = function(customer, paymentInstrument) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointBeforeDeleteAddress_DetailAnchor">extensionPointBeforeDeleteAddress</a>.
 Called before removing an address of a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom to delete the address
 * @param {String} addressName - the name of the address to be deleted
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.beforeDeleteAddress = function(customer, addressName) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointBeforeDeletePaymentInstrument_DetailAnchor">extensionPointBeforeDeletePaymentInstrument</a>.
 Called before removing a payment instrument of a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom to delete the payment instrument
 * @param {String} paymentInstrumentId - the id of the payment instrument to be deleted
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.beforeDeletePaymentInstrument = function(customer, paymentInstrumentId) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointBeforePatchAddress_DetailAnchor">extensionPointBeforePatchAddress</a>.
 Called before updating an address of a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom to update the address
 * @param {String} addressName - the name of the address to be updated
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.beforePatchAddress = function(customer, addressName) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointBeforePatchCustomer_DetailAnchor">extensionPointBeforePatchCustomer</a>. It is called before a
 customer is updated.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer to be updated
 * @param {com.demandware.wapi.document.shop.account2.Customer} customerInput - the input customer containing the patch changes
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.beforePatchCustomer = function(customer, customerInput) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointBeforePostAddress_DetailAnchor">extensionPointBeforePostAddress</a>.
 Called before adding an address to a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom to add the address
 * @param {String} addressName - the name of the address to be added
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.beforePostAddress = function(customer, addressName) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomerHooks.html#dw_ocapi_shop_account_CustomerHooks_extensionPointBeforePostPaymentInstrument_DetailAnchor">extensionPointBeforePostPaymentInstrument</a>. It is called before a
 payment instrument is added to a customer.
 * @memberOf dw.ocapi.shop.account.CustomerHooks
 * @param {dw.customer.Customer} customer - the customer for whom to add the payment instrument
 * @param {com.demandware.wapi.document.shop.account2.CustomerPaymentInstrumentRequest} paymentInstrument - the payment instrument to be added
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.account.CustomerHooks.prototype.beforePostPaymentInstrument = function(customer, paymentInstrument) {};

/**
 * This class represents all script hooks that can be registered to customizing
 the OCAPI basket resources. It contains the extension points (hook names),
 and the functions that are called by each extension point. A function must be
 defined inside a JavaScript source and must be exported. The script with the
 exported hook function must be located inside a site cartridge. Inside the
 site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>

 <pre>
 "hooks": "./hooks.json"
 </pre>

 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>

 <pre>
 "hooks": [
      {"name": "dw.ocapi.shop.basket.afterAdd", "script": "./myhooks.js"}
 ]
 </pre>

 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the
 exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.shop.account.CustomersAuthHooks = function() {};
dw.ocapi.shop.account.CustomersAuthHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.shop.auth.afterAuth.
 * @type String
 * @memberOf dw.ocapi.shop.account.CustomersAuthHooks
 * @static
 * @const
 */
dw.ocapi.shop.account.CustomersAuthHooks.extensionPointAfterAuth = '';

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_account_CustomersAuthHooks.html#dw_ocapi_shop_account_CustomersAuthHooks_extensionPointAfterAuth_DetailAnchor">extensionPointAfterAuth</a>.
 * @memberOf dw.ocapi.shop.account.CustomersAuthHooks
 * @param {dw.value.EnumValue} authRequestType - does the request specify a guest, login or refresh             authentication
 * @param {dw.customer.Customer} customer - the customer that was authenticated, may be a guest or             registered customer
 * @return {dw.system.Status} <ul>          <li>Status.OK for success.</li>          <li>Status.ERROR for error.</li>          </ul>
 * @abstract
 */
dw.ocapi.shop.account.CustomersAuthHooks.prototype.afterAuth = function(authRequestType, customer) {};

/**
 * This class represents all script hooks that can be registered to customizing the OCAPI basket resources.
 It contains the extension points (hook names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported.
 The script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.shop.basket.afterAdd", "script": "./myhooks.js"},
      {"name": "dw.ocapi.shop.basket.beforeUpdate", "script": "./myhooks.js"}
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.shop.basket.BasketHooks = function() {};
dw.ocapi.shop.basket.BasketHooks.prototype = new Object();

/**
 * The extension point name dw.ocapi.shop.basket.afterAdd.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterAdd = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterCreatePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterCreatePaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.basket.afterDelete.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterDelete = '';

/**
 * Extension point dw.ocapi.shop.basket.afterDeleteCoupon.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterDeleteCoupon = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterDeleteItem.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterDeleteItem = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterDeletePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterDeletePaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.basket.afterDeletePriceAdjustment.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterDeletePriceAdjustment = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPatch.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPatch = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPatchItem.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPatchItem = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPatchPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPatchPaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPatchShipment.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPatchShipment = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPost.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPost = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPostCoupon.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPostCoupon = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPostGiftCertificateItem.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPostGiftCertificateItem = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPostItem.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPostItem = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPostPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPostPaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPostPriceAdjustment.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPostPriceAdjustment = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPostShipment.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPostShipment = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPostSubmit.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPostSubmit = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPutBillingAddress.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPutBillingAddress = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPutCustomer.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPutCustomer = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPutShippingAddress.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPutShippingAddress = '';

/**
 * Extension point dw.ocapi.shop.basket.afterPutShippingMethod.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterPutShippingMethod = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterSetBillingAddress.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterSetBillingAddress = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterSetCustomerInfo.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterSetCustomerInfo = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterSetPaymentMethod.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterSetPaymentMethod = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterSetShippingAddress.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterSetShippingAddress = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterSetShippingMethod.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterSetShippingMethod = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterSubmit.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterSubmit = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterUpdate.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterUpdate = '';

/**
 * The extension point name dw.ocapi.shop.basket.afterUpdatePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointAfterUpdatePaymentInstrument = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeAdd.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeAdd = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeCreatePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeCreatePaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.basket.beforeDelete.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeDelete = '';

/**
 * Extension point dw.ocapi.shop.basket.beforeDeleteCoupon.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeDeleteCoupon = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeDeleteItem.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeDeleteItem = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeDeletePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeDeletePaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.basket.beforeDeletePriceAdjustment.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeDeletePriceAdjustment = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePatch.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePatch = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePatchItem.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePatchItem = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePatchPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePatchPaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePatchShipment.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePatchShipment = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePostCoupon.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePostCoupon = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePostGiftCertificateItem.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePostGiftCertificateItem = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePostItem.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePostItem = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePostPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePostPaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePostPriceAdjustment.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePostPriceAdjustment = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePostShipment.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePostShipment = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePostSubmit.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePostSubmit = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePutBillingAddress.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePutBillingAddress = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePutCustomer.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePutCustomer = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePutShippingAddress.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePutShippingAddress = '';

/**
 * Extension point dw.ocapi.shop.basket.beforePutShippingMethod.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforePutShippingMethod = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeSetBillingAddress.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeSetBillingAddress = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeSetCustomerInfo.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeSetCustomerInfo = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeSetPaymentMethod.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeSetPaymentMethod = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeSetShippingAddress.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeSetShippingAddress = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeSetShippingMethod.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeSetShippingMethod = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeSubmit.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeSubmit = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeUpdate.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeUpdate = '';

/**
 * The extension point name dw.ocapi.shop.basket.beforeUpdatePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointBeforeUpdatePaymentInstrument = '';

/**
 * The extension point name dw.ocapi.shop.basket.calculate.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointCalculate = '';

/**
 * Extension point dw.ocapi.shop.basket.validateBasket.
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.extensionPointValidateBasket = '';

/**
 * Prefix used for extension names: dw.ocapi.shop.basket
 * @type String
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @static
 * @const
 */
dw.ocapi.shop.basket.BasketHooks.prefix = '';

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterAdd_DetailAnchor">extensionPointAfterAdd</a>.
 It is called after the <i>productItem</i> was added to the basket. The default implementation of this hook calls
 the <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_calculate_Basket_DetailAnchor">calculate(Basket)</a> hook.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the updated basket, must be (re)calculated.
 * @param {com.demandware.wapi.document.shop.basket.ProductItem} productItem - the productItem document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterAdd = function(basket, productItem) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterCreatePaymentInstrument_DetailAnchor">extensionPointAfterCreatePaymentInstrument</a>.
 It is called after the payment instrument was applied to the basket. The default implementation of this hook calls
 the <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_calculate_Basket_DetailAnchor">calculate(Basket)</a> hook.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the updated basket, must be (re)calculated.
 * @param {dw.order.OrderPaymentInstrument} orderPaymentInstrument - the order payment instrument
 * @param {com.demandware.wapi.document.shop.order.OrderPaymentInstrumentRequest} add - the payment instrument document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterCreatePaymentInstrument = function(basket, orderPaymentInstrument, add) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterDelete_DetailAnchor">extensionPointAfterDelete</a>. Called after removing a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {String} basketId - the identifier of the removed basket
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterDelete = function(basketId) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterDeleteCoupon_DetailAnchor">extensionPointAfterDeleteCoupon</a>. Called after removing a coupon
 from a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} ctor
 * @param {String} couponID
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterDeleteCoupon = function(ctor, couponID) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterDeleteItem_DetailAnchor">extensionPointAfterDeleteItem</a>. Called after a basket item is
 removed.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {String} productItemId - the id of the removed product item
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterDeleteItem = function(basket, productItemId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterDeletePaymentInstrument_DetailAnchor">extensionPointAfterDeletePaymentInstrument</a>.
 It is called after the <i>order payment instrument</i> is removed from the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket the payment instrument was removed from
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterDeletePaymentInstrument = function(basket) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterDeletePriceAdjustment_DetailAnchor">extensionPointAfterDeletePriceAdjustment</a>. Called after a
 custom price adjustment was removed.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket
 * @param {String} priceAdjustmentId - the id of the deleted price adjustment
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterDeletePriceAdjustment = function(basket, priceAdjustmentId) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPatch_DetailAnchor">extensionPointAfterPatch</a>. Called after updating of the
 basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket which was updated
 * @param {com.demandware.wapi.document.shop.order2.Basket} basketInput - the basket delta containing the desired changes
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPatch = function(basket, basketInput) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPatchItem_DetailAnchor">extensionPointAfterPatchItem</a>. Called after updating of the
 basket's item.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.ProductItem} item - the product item delta containing the desired changes to the             product item
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPatchItem = function(basket, item) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPatchPaymentInstrument_DetailAnchor">extensionPointAfterPatchPaymentInstrument</a>. Called after
 updating a payment instrument of a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {dw.order.OrderPaymentInstrument} paymentInstrument - the updated payment instrument
 * @param {com.demandware.wapi.document.shop.order2.BasketPaymentInstrumentRequest} paymentInstrumentRequest - the new payment instrument data
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPatchPaymentInstrument = function(basket, paymentInstrument, paymentInstrumentRequest) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPatchShipment_DetailAnchor">extensionPointAfterPatchShipment</a>. Called after patching of
 a shipment for a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the shipment was changed
 * @param {dw.order.Shipment} shipment - the shipment which has been updated
 * @param {com.demandware.wapi.document.shop.order2.Shipment} shipmentInfo - the shipment information for the shipment update
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPatchShipment = function(basket, shipment, shipmentInfo) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPost_DetailAnchor">extensionPointAfterPost</a>. It is called after the basket was
 created.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the created basket
 * @return {dw.system.Status} <ul>          <li>Status.OK for success.</li>          <li>Status.ERROR for error.</li>          </ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPost = function(basket) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPostCoupon_DetailAnchor">extensionPointAfterPostCoupon</a>. Called after adding a coupon to
 a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} ctor
 * @param {com.demandware.wapi.document.shop.basket.CouponItem} couponItem - the coupon information
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPostCoupon = function(ctor, couponItem) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPostGiftCertificateItem_DetailAnchor">extensionPointAfterPostGiftCertificateItem</a>. Called after adding a gift certificate item to a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.GiftCertificateItem} item - the gift certificate item to add
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPostGiftCertificateItem = function(basket, item) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPostItem_DetailAnchor">extensionPointAfterPostItem</a>. Called after adding of the item to
 a shipment of the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.ProductItem} item - the product item that was added to the basket
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPostItem = function(basket, item) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPostPaymentInstrument_DetailAnchor">extensionPointAfterPostPaymentInstrument</a>. Called after payment
 instrument adding to a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.BasketPaymentInstrumentRequest} paymentInstrument - the payment instrument added to the basket
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPostPaymentInstrument = function(basket, paymentInstrument) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPostPriceAdjustment_DetailAnchor">extensionPointAfterPostPriceAdjustment</a>. Called after a custom
 price adjustment was added.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket
 * @param {com.demandware.wapi.document.shop.order2.PriceAdjustmentRequest} request - The request for the price adjustment
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPostPriceAdjustment = function(basket, request) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPostShipment_DetailAnchor">extensionPointAfterPostShipment</a>. Called after the creation of
 a shipment for a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the shipment was created
 * @param {com.demandware.wapi.document.shop.order2.Shipment} shipment - the shipment information for the shipment creation
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPostShipment = function(basket, shipment) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPostSubmit_DetailAnchor">extensionPointAfterPostSubmit</a>. Called after a basket is
 submitted.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Order} order - the order that was created with the submit
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPostSubmit = function(order) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPutBillingAddress_DetailAnchor">extensionPointAfterPutBillingAddress</a>. Called after setting of
 the billing address to the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.basket.OrderAddress} billingAddress - the billing address that was set to the basket
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPutBillingAddress = function(basket, billingAddress) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPutCustomer_DetailAnchor">extensionPointAfterPutCustomer</a>. Called after setting of
 customer information for the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.CustomerInfo} customerInfo - the customer information that were set to the basket
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPutCustomer = function(basket, customerInfo) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPutShippingAddress_DetailAnchor">extensionPointAfterPutShippingAddress</a>. Called after setting of
 the shipping address to a certain shipment of the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {dw.order.Shipment} shipment - the shipment information for the shipment creation
 * @param {com.demandware.wapi.document.shop.basket.OrderAddress} shippingAddress - the shipping address that was set to the shipment
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPutShippingAddress = function(basket, shipment, shippingAddress) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterPutShippingMethod_DetailAnchor">extensionPointAfterPutShippingMethod</a>. Called after setting of
 the shipping method to a certain shipment of the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {dw.order.Shipment} shipment - the shipment information for the shipment creation
 * @param {com.demandware.wapi.document.shop.order2.ShippingMethod} shippingMethod - the shipping method that was set to the shipment
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterPutShippingMethod = function(basket, shipment, shippingMethod) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterSetBillingAddress_DetailAnchor">extensionPointAfterSetBillingAddress</a>.
 It is called after the billing address was applied to the basket. The default implementation of this hook calls
 the <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_calculate_Basket_DetailAnchor">calculate(Basket)</a> hook.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the updated basket, must be (re)calculated.
 * @param {com.demandware.wapi.document.shop.basket.OrderAddress} orderAddress - the orderAddress document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterSetBillingAddress = function(basket, orderAddress) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterSetCustomerInfo_DetailAnchor">extensionPointAfterSetCustomerInfo</a>.
 It is called after the customer info was applied to the basket. The default implementation of this hook calls
 the <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_calculate_Basket_DetailAnchor">calculate(Basket)</a> hook.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the updated basket, must be (re)calculated.
 * @param {com.demandware.wapi.document.shop.basket.CustomerInfo} customerInfo - the customerInfo document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterSetCustomerInfo = function(basket, customerInfo) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterSetPaymentMethod_DetailAnchor">extensionPointAfterSetPaymentMethod</a>.
 It is called after the payment method was applied to the basket. The default implementation of this hook calls
 the <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_calculate_Basket_DetailAnchor">calculate(Basket)</a> hook.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the updated basket, must be (re)calculated.
 * @param {com.demandware.wapi.document.shop.basket.PaymentMethod} paymentMethod - the paymentMethod document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterSetPaymentMethod = function(basket, paymentMethod) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterSetShippingAddress_DetailAnchor">extensionPointAfterSetShippingAddress</a>.
 It is called after the shipping address was applied to the basket. The default implementation of this hook calls
 the <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_calculate_Basket_DetailAnchor">calculate(Basket)</a> hook.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the updated basket, must be (re)calculated.
 * @param {com.demandware.wapi.document.shop.basket.OrderAddress} orderAddress - the orderAddress document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterSetShippingAddress = function(basket, orderAddress) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterSetShippingMethod_DetailAnchor">extensionPointAfterSetShippingMethod</a>.
 It is called after the shipping method was applied to the basket. The default implementation of this hook calls
 the <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_calculate_Basket_DetailAnchor">calculate(Basket)</a> hook.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the updated basket, must be (re)calculated.
 * @param {com.demandware.wapi.document.shop.basket.ShippingMethod} shippingMethod - the shippingMethod document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterSetShippingMethod = function(basket, shippingMethod) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterSubmit_DetailAnchor">extensionPointAfterSubmit</a>.
 It is called after the new order was created.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Order} order - the new created order.
 * @param {dw.order.Basket} basket - the original basket
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterSubmit = function(order, basket) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterUpdate_DetailAnchor">extensionPointAfterUpdate</a>.
 It is called after the basket was updated with update document.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the updated basket, must be (re)calculated.
 * @param {com.demandware.wapi.document.shop.basket.Basket} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterUpdate = function(basket, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointAfterUpdatePaymentInstrument_DetailAnchor">extensionPointAfterUpdatePaymentInstrument</a>.
 It is called after the payment instrument was updated in the basket. The default implementation
 of this hook calls the <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_calculate_Basket_DetailAnchor">calculate(Basket)</a> hook.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the updated basket, must be (re)calculated.
 * @param {dw.order.OrderPaymentInstrument} orderPaymentInstrument - the order payment instrument
 * @param {com.demandware.wapi.document.shop.order.OrderPaymentInstrumentRequest} update - the payment instrument update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.afterUpdatePaymentInstrument = function(basket, orderPaymentInstrument, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeAdd_DetailAnchor">extensionPointBeforeAdd</a>.
 It is called before the <i>productItem</i> is added to the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to add the productItem.
 * @param {com.demandware.wapi.document.shop.basket.ProductItem} productItem - the productItem document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeAdd = function(basket, productItem) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeCreatePaymentInstrument_DetailAnchor">extensionPointBeforeCreatePaymentInstrument</a>.
 It is called before an order payment instrument is set to the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to set the payment instrument.
 * @param {com.demandware.wapi.document.shop.order.OrderPaymentInstrumentRequest} add - the payment instrument document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeCreatePaymentInstrument = function(basket, add) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeDelete_DetailAnchor">extensionPointBeforeDelete</a>. Called before removing a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to be removed
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeDelete = function(basket) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeDeleteCoupon_DetailAnchor">extensionPointBeforeDeleteCoupon</a>. Called before removing a
 coupon from a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} ctor
 * @param {String} couponID
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeDeleteCoupon = function(ctor, couponID) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeDeleteItem_DetailAnchor">extensionPointBeforeDeleteItem</a>. Called before a basket item is
 removed.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {String} productItemId - the id of the product item to be removed
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeDeleteItem = function(basket, productItemId) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeDeletePaymentInstrument_DetailAnchor">extensionPointBeforeDeletePaymentInstrument</a>.
 It is called before the <i>order payment instrument</i> is removed from the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to remove the payment instrument from
 * @param {dw.order.OrderPaymentInstrument} toDelete - the order payment instrument document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeDeletePaymentInstrument = function(basket, toDelete) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeDeletePriceAdjustment_DetailAnchor">extensionPointBeforeDeletePriceAdjustment</a>. Called before a
 custom price adjustment is removed.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket
 * @param {String} priceAdjustmentId - the id of the price adjustment to be deleted
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeDeletePriceAdjustment = function(basket, priceAdjustmentId) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePatch_DetailAnchor">extensionPointBeforePatch</a>. Called before updating of the
 basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to be updated
 * @param {com.demandware.wapi.document.shop.order2.Basket} basketInput - the basket delta containing the desired changes
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePatch = function(basket, basketInput) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePatchItem_DetailAnchor">extensionPointBeforePatchItem</a>. Called before updating of the
 basket's item.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.ProductItem} item - the product item delta containing the desired changes to the             product item
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePatchItem = function(basket, item) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePatchPaymentInstrument_DetailAnchor">extensionPointBeforePatchPaymentInstrument</a>. Called before
 updating a payment instrument of a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {dw.order.OrderPaymentInstrument} paymentInstrument - the payment instrument to be updated
 * @param {com.demandware.wapi.document.shop.order2.BasketPaymentInstrumentRequest} newPaymentInstrument - the new payment instrument data
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePatchPaymentInstrument = function(basket, paymentInstrument, newPaymentInstrument) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePatchShipment_DetailAnchor">extensionPointBeforePatchShipment</a>. Called before changing of
 a shipment for a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the shipment will be updated
 * @param {dw.order.Shipment} shipment - the current shipment to be updated
 * @param {com.demandware.wapi.document.shop.order2.Shipment} shipmentInfo - the shipment information for the shipment update (update data)
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePatchShipment = function(basket, shipment, shipmentInfo) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePostCoupon_DetailAnchor">extensionPointBeforePostCoupon</a>. Called before adding a coupon
 to a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} ctor
 * @param {com.demandware.wapi.document.shop.basket.CouponItem} couponItem - the coupon information
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePostCoupon = function(ctor, couponItem) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePostGiftCertificateItem_DetailAnchor">extensionPointBeforePostGiftCertificateItem</a>. Called before adding a gift certificate item to a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.GiftCertificateItem} item - the gift certificate item to add
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePostGiftCertificateItem = function(basket, item) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePostItem_DetailAnchor">extensionPointBeforePostItem</a>. Called before adding of the item
 to a shipment of the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.ProductItem} item - the product item to add
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePostItem = function(basket, item) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePostPaymentInstrument_DetailAnchor">extensionPointBeforePostPaymentInstrument</a>. Called before payment
 instrument adding to a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.BasketPaymentInstrumentRequest} paymentInstrument - the payment instrument to be added to the basket
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePostPaymentInstrument = function(basket, paymentInstrument) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePostPriceAdjustment_DetailAnchor">extensionPointBeforePostPriceAdjustment</a>. Called before a custom
 price adjustment is added.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket
 * @param {com.demandware.wapi.document.shop.order2.PriceAdjustmentRequest} request - The request for the price adjustment
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePostPriceAdjustment = function(basket, request) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePostShipment_DetailAnchor">extensionPointBeforePostShipment</a>. Called before the creation of
 a shipment for a basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the shipment will be created
 * @param {com.demandware.wapi.document.shop.order2.Shipment} shipment - the shipment information for the shipment creation
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePostShipment = function(basket, shipment) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePostSubmit_DetailAnchor">extensionPointBeforePostSubmit</a>. Called before a basket is
 submitted.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePostSubmit = function(basket) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePutBillingAddress_DetailAnchor">extensionPointBeforePutBillingAddress</a>. Called before setting of
 the billing address to the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.basket.OrderAddress} billingAddress - the billing address to be set to the basket
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePutBillingAddress = function(basket, billingAddress) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePutCustomer_DetailAnchor">extensionPointBeforePutCustomer</a>. Called before setting of
 customer information for the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {com.demandware.wapi.document.shop.order2.CustomerInfo} customerInfo - the customer information to be set to the basket
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePutCustomer = function(basket, customerInfo) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePutShippingAddress_DetailAnchor">extensionPointBeforePutShippingAddress</a>. Called before setting
 of the shipping address to a certain shipment of the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {dw.order.Shipment} shipment - the shipment information for the shipment creation
 * @param {com.demandware.wapi.document.shop.basket.OrderAddress} shippingAddress - the shipping address to be set to the shipment
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePutShippingAddress = function(basket, shipment, shippingAddress) {};

/**
 * Register an implementation of this hook using extension point
 <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforePutShippingMethod_DetailAnchor">extensionPointBeforePutShippingMethod</a>. Called before setting of
 the shipping method to a certain shipment of the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket based on which the order is created
 * @param {dw.order.Shipment} shipment - the shipment information for the shipment creation
 * @param {com.demandware.wapi.document.shop.order2.ShippingMethod} shippingMethod - the shipping method to be set to the shipment
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforePutShippingMethod = function(basket, shipment, shippingMethod) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeSetBillingAddress_DetailAnchor">extensionPointBeforeSetBillingAddress</a>.
 It is called before the billing address is applied to the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to set the billing address.
 * @param {com.demandware.wapi.document.shop.basket.OrderAddress} orderAddress - the orderAddress document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeSetBillingAddress = function(basket, orderAddress) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeSetCustomerInfo_DetailAnchor">extensionPointBeforeSetCustomerInfo</a>.
 It is called before the customer info is applied to the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to set the customer information.
 * @param {com.demandware.wapi.document.shop.basket.CustomerInfo} customerInfo - the customerInfo document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeSetCustomerInfo = function(basket, customerInfo) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeSetPaymentMethod_DetailAnchor">extensionPointBeforeSetPaymentMethod</a>.
 It is called before the payment method is applied to the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to set the payment method.
 * @param {com.demandware.wapi.document.shop.basket.PaymentMethod} paymentMethod - the paymentMethod document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeSetPaymentMethod = function(basket, paymentMethod) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeSetShippingAddress_DetailAnchor">extensionPointBeforeSetShippingAddress</a>.
 It is called before the shipping address is applied to the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to set the shipping address.
 * @param {com.demandware.wapi.document.shop.basket.OrderAddress} orderAddress - the oderAddress document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeSetShippingAddress = function(basket, orderAddress) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeSetShippingMethod_DetailAnchor">extensionPointBeforeSetShippingMethod</a>.
 It is called before the shipping method is applied to the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to set the shipping method.
 * @param {com.demandware.wapi.document.shop.basket.ShippingMethod} shippingMethod - the shippingMethod document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeSetShippingMethod = function(basket, shippingMethod) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeSubmit_DetailAnchor">extensionPointBeforeSubmit</a>.
 It is called before the new order is created. The default implementation of this hook calls
 the <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_calculate_Basket_DetailAnchor">calculate(Basket)</a> hook.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to create an order from, must be (re)calculated.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeSubmit = function(basket) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeUpdate_DetailAnchor">extensionPointBeforeUpdate</a>.
 It is called before the basket is updated with update document.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to update.
 * @param {com.demandware.wapi.document.shop.basket.Basket} update - the update document.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeUpdate = function(basket, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointBeforeUpdatePaymentInstrument_DetailAnchor">extensionPointBeforeUpdatePaymentInstrument</a>.
 It is called before an order payment instrument is updated in the basket.
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to update the payment instrument in
 * @param {dw.order.OrderPaymentInstrument} orderPaymentInstrument - the actual order payment instrument
 * @param {com.demandware.wapi.document.shop.order.OrderPaymentInstrumentRequest} update - the payment instrument update document
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.beforeUpdatePaymentInstrument = function(basket, orderPaymentInstrument, update) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_extensionPointCalculate_DetailAnchor">extensionPointCalculate</a>.
 It is thought as the single place of the basket calculation. The hook provides a default implementation,
 which can be overridden at any time. The hook is implicitly called by the default logic of the following hooks:<ul>
 <li> <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_afterAdd_Basket_ProductItemWO_DetailAnchor">afterAdd(Basket, ProductItemWO)</a> </li>
 <li> <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_afterSetBillingAddress_Basket_OrderAddressWO_DetailAnchor">afterSetBillingAddress(Basket, OrderAddressWO)</a> </li>
 <li> <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_afterSetCustomerInfo_Basket_CustomerInfoWO_DetailAnchor">afterSetCustomerInfo(Basket, CustomerInfoWO)</a> </li>
 <li> <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_afterSetPaymentMethod_Basket_PaymentMethodWO_DetailAnchor">afterSetPaymentMethod(Basket, PaymentMethodWO)</a> </li>
 <li> <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_afterSetShippingAddress_Basket_OrderAddressWO_DetailAnchor">afterSetShippingAddress(Basket, OrderAddressWO)</a> </li>
 <li> <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_afterSetShippingMethod_Basket_ShippingMethodWO_DetailAnchor">afterSetShippingMethod(Basket, ShippingMethodWO)</a> </li>
 <li> <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_afterUpdate_Basket_BasketWO_DetailAnchor">afterUpdate(Basket, BasketWO)</a> </li>
 <li> <a href="class_dw_ocapi_shop_basket_BasketHooks.html#dw_ocapi_shop_basket_BasketHooks_beforeSubmit_Basket_DetailAnchor">beforeSubmit(Basket)</a> </li></ul>
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {dw.order.Basket} basket - the basket to be (re)calculated.
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.calculate = function(basket) {};

/**
 * Allows the addition of custom flashes or removal of internal flashes. The
 presence of a flash indicates that the basket cannot yet be submitted.
 Parameter <code>duringSubmit</code> indicates the current call is during
 the basket submit process. Default implementation returns ERROR if
 duringSubmit and any flash exists.
 <p/>
 Example showing addition, listing and removal of flashes: <br/>
 <code>
       exports.validateBasket = function(basketResponse, duringSubmit) {
         basketResponse.addFlash(   {type:"MyType",
                     message:"My message",
                        path:"my_path",
                     details:{ "k1":"v1", "k2":"v2"}});
         var flashToRemove;
         for each(f in basketResponse.flashes) {
           if (f.type=="SomeOtherType") {
             flashToRemove = f;
           }
         }
         if (flashToRemove!=null) {
           basketResponse.removeFlash(flashToRemove);
         }
       </code>
 * @memberOf dw.ocapi.shop.basket.BasketHooks
 * @param {com.demandware.wapi.document.shop.order2.Basket} basketResponse - the basket response to be validated
 * @param {Boolean} duringSubmit - should the basket be checked for submit
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.basket.BasketHooks.prototype.validateBasket = function(basketResponse, duringSubmit) {};

/**
 * This class represents all script hooks that can be registered to customizing the OCAPI order resources.
 It contains the extension points (hook names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported.
 The script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.ocapi.shop.order.beforePaymentAuthorize", "script": "./myhooks.js"},
      {"name": "dw.ocapi.shop.order.afterPaymentAuthorize", "script": "./myhooks.js"}
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.ocapi.shop.order.OrderHooks = function() {};
dw.ocapi.shop.order.OrderHooks.prototype = new Object();

/**
 * Extension point dw.ocapi.shop.order.afterDeletePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.extensionPointAfterDeletePaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.order.afterPatchPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.extensionPointAfterPatchPaymentInstrument = '';

/**
 * The extension point name dw.ocapi.shop.order.afterPaymentAuthorize.
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.extensionPointAfterPaymentAuthorize = '';

/**
 * The extension point name
 dw.ocapi.shop.order.afterPostPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.extensionPointAfterPostPaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.order.beforeDeletePaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.extensionPointBeforeDeletePaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.order.beforePatchPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.extensionPointBeforePatchPaymentInstrument = '';

/**
 * The extension point name dw.ocapi.shop.order.beforePaymentAuthorize.
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.extensionPointBeforePaymentAuthorize = '';

/**
 * The extension point name
 dw.ocapi.shop.order.beforePostPaymentInstrument.
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.extensionPointBeforePostPaymentInstrument = '';

/**
 * Extension point dw.ocapi.shop.order.validateOrder.
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.extensionPointValidateOrder = '';

/**
 * Prefix used for extension names: dw.ocapi.shop.order
 * @type String
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @static
 * @const
 */
dw.ocapi.shop.order.OrderHooks.prefix = '';

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_order_OrderHooks.html#dw_ocapi_shop_order_OrderHooks_extensionPointAfterDeletePaymentInstrument_DetailAnchor">extensionPointAfterDeletePaymentInstrument</a>.
 Called after removing a payment instrument of an order.
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @param {dw.order.Order} order - the modified order
 * @param {dw.order.OrderPaymentInstrument} paymentInstrument - the removed payment instrument
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.order.OrderHooks.prototype.afterDeletePaymentInstrument = function(order, paymentInstrument) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_order_OrderHooks.html#dw_ocapi_shop_order_OrderHooks_extensionPointAfterPatchPaymentInstrument_DetailAnchor">extensionPointAfterPatchPaymentInstrument</a>.
 Called after updating a payment instrument of an order.
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @param {dw.order.Order} order - the modified order
 * @param {dw.order.OrderPaymentInstrument} paymentInstrument - the updated payment instrument
 * @param {com.demandware.wapi.document.shop.order2.OrderPaymentInstrumentRequest} newPaymentInstrument - the new payment instrument data
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.order.OrderHooks.prototype.afterPatchPaymentInstrument = function(order, paymentInstrument, newPaymentInstrument) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_order_OrderHooks.html#dw_ocapi_shop_order_OrderHooks_extensionPointAfterPaymentAuthorize_DetailAnchor">extensionPointAfterPaymentAuthorize</a>.
 It is called at last step with in the payment authorization process with the order and a payment
 instrument, which is optional (so may be null).
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @param {dw.order.Order} order - the order
 * @param {com.demandware.wapi.document.shop.order.OrderPaymentInstrumentRequest} paymentInstrument - the optional payment instrument
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR in case something          went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.shop.order.OrderHooks.prototype.afterPaymentAuthorize = function(order, paymentInstrument) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_order_OrderHooks.html#dw_ocapi_shop_order_OrderHooks_extensionPointAfterPostPaymentInstrument_DetailAnchor">extensionPointAfterPostPaymentInstrument</a>. Called after a payment
 instrument was added to the order.
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @param {dw.order.Order} order - the modified order
 * @param {com.demandware.wapi.document.shop.order2.OrderPaymentInstrumentRequest} paymentInstrument - the payment instrument which was added to the order
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.order.OrderHooks.prototype.afterPostPaymentInstrument = function(order, paymentInstrument) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_order_OrderHooks.html#dw_ocapi_shop_order_OrderHooks_extensionPointBeforeDeletePaymentInstrument_DetailAnchor">extensionPointBeforeDeletePaymentInstrument</a>.
 Called before removing a payment instrument of an order.
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @param {dw.order.Order} order - the modified order
 * @param {dw.order.OrderPaymentInstrument} paymentInstrument - the payment instrument to be removed
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.order.OrderHooks.prototype.beforeDeletePaymentInstrument = function(order, paymentInstrument) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_order_OrderHooks.html#dw_ocapi_shop_order_OrderHooks_extensionPointBeforePatchPaymentInstrument_DetailAnchor">extensionPointBeforePatchPaymentInstrument</a>.
 Called before updating a payment instrument of an order.
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @param {dw.order.Order} order - the modified order
 * @param {dw.order.OrderPaymentInstrument} paymentInstrument - the payment instrument to be updated
 * @param {com.demandware.wapi.document.shop.order2.OrderPaymentInstrumentRequest} newPaymentInstrument - the new payment instrument data
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.order.OrderHooks.prototype.beforePatchPaymentInstrument = function(order, paymentInstrument, newPaymentInstrument) {};

/**
 * The function is called by extension point <a href="class_dw_ocapi_shop_order_OrderHooks.html#dw_ocapi_shop_order_OrderHooks_extensionPointBeforePaymentAuthorize_DetailAnchor">extensionPointBeforePaymentAuthorize</a>.
 It is called at first step with in the payment authorization process with the order and a payment
 instrument, which is optional (so may be null).
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @param {dw.order.Order} order - the order
 * @param {com.demandware.wapi.document.shop.order.OrderPaymentInstrumentRequest} paymentInstrument - the optional payment instrument
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR in case something          went wrong.</li></ul>
 * @abstract
 */
dw.ocapi.shop.order.OrderHooks.prototype.beforePaymentAuthorize = function(order, paymentInstrument) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_order_OrderHooks.html#dw_ocapi_shop_order_OrderHooks_extensionPointBeforePostPaymentInstrument_DetailAnchor">extensionPointBeforePostPaymentInstrument</a>. Called before a
 payment instrument is added to the order.
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @param {dw.order.Order} order - the modified order
 * @param {com.demandware.wapi.document.shop.order2.OrderPaymentInstrumentRequest} paymentInstrument - the payment instrument to be added to the order
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.order.OrderHooks.prototype.beforePostPaymentInstrument = function(order, paymentInstrument) {};

/**
 * The function is called by extension point
 <a href="class_dw_ocapi_shop_order_OrderHooks.html#dw_ocapi_shop_order_OrderHooks_extensionPointValidateOrder_DetailAnchor">extensionPointValidateOrder</a>.
 Validate an order after the order has been updated.
 The hook is called outside a database transaction, so modifications to the order are not possible.
 Allows the addition of custom flashes to convey information to the client.
 <p/>
 Example showing addition of flashes: <br/>
 <code>
       exports.validateBasket = function() {
         order.addFlash(   {type:"PaymentAuthorizationFailure",
                     message:"Order was not successfully authorized.",
                        path:"authorizations",
                     details:{ "result":"reject", "reason":"invalid_credit_card"}});
       </code>
 * @memberOf dw.ocapi.shop.order.OrderHooks
 * @param {com.demandware.wapi.document.shop.order2.Order} order - the modified order
 * @return {dw.system.Status} a non-null Status ends the hook execution
 * @abstract
 */
dw.ocapi.shop.order.OrderHooks.prototype.validateOrder = function(order) {};

/**
 *
 * @class
 * @extends Object
 */
dw.oms.OMS = function() {};
dw.oms.OMS.prototype = new Object();

/**
 * Method used to assign a new customer profile to an existing salesorder,
 typically used in unregistered checkout after asking the storefront customer
 whether he wants to register with the store after the order has been created.

 <p/>The arguments must be valid, otherwise exceptions are thrown.
 * @memberOf dw.oms.OMS
 * @param {String} salesOrderNo - the sales order number
 * @param {dw.customer.Customer} customer - the customer to assign this order to
 * @return {Object} the updated sales order as JS object
 * @exception NullPointerException Thrown if the salesOrderNo arg does not reference a valid sales order or the customer is null
 * @exception IllegalArgumentException Thrown if the customer arg is an anonymous customer
 * @static
 */
dw.oms.OMS.assignCustomer = function(salesOrderNo, customer) {};

/**
 * Method allows the access to a sales order, used in order history
 usecases. The method returns a JSON salesorder object or null if none
 found for the arg. Returns null or a JSON salesorder object.

 <p/>Note when using this method the client script is responsible for handling an
 additional security check, for example to check that the email address
 or postcode provided by the customer matches that stored in the sales order.
 * @memberOf dw.oms.OMS
 * @param {String} salesOrderNo - the sales order number
 * @return {Object} the sales order as JS object
 * @exception NullPointerException Thrown if the salesOrderNo arg is null
 * @static
 */
dw.oms.OMS.getSalesOrder = function(salesOrderNo) {};

/**
 * Method allows the access to a customers sales orders, used in order history
 usecases. The method returns a JSON array of salesorder objects belonging to the
 given customer, which _must_ be a registered customer. The number of
 salesorder objects returned in the list is limited.

 <p/>Exceptions are thrown if the customer is either null or anonymous.
 * @memberOf dw.oms.OMS
 * @param {dw.customer.Customer} customer - the customer
 * @return {Object} the sales orders as JS array
 * @exception IllegalArgumentException Thrown if the customer is anonymous
 * @exception NullPointerException Thrown if the customer arg is null
 * @static
 */
dw.oms.OMS.getSalesOrders = function(customer) {};

/**
 * Method allows the access to the shipping orders which belong to a
 given sales order and is used in order history usecases for presenting the
 shipping and return status of a customers sales orders.
 The method returns a JSON array of shipping orders belonging to the
 given salesorder.

 <p/>Exception thrown if the salesOrderNo is null.
 * @memberOf dw.oms.OMS
 * @param {String} salesOrderNo - the sales order number
 * @return {Object} the shipping orders as JS array
 * @exception NullPointerException Thrown if the salesOrderNo arg is null
 * @static
 */
dw.oms.OMS.getShippingOrders = function(salesOrderNo) {};

/**
 * An item which references, or in other words is based upon, an <a href="class_dw_order_OrderItem.html">OrderItem</a>. Provides methods to access the
 OrderItem, the order <a href="class_dw_order_LineItem.html">LineItem</a> which has been extended, and the <a href="class_dw_order_Order.html">Order</a>. In addition it defines
 methods to access item level prices and the item id. Supports custom-properties.
 * @class
 * @extends dw.object.Extensible
 * @abstract
 */
dw.order.AbstractItem = function() {};
dw.order.AbstractItem.prototype = new dw.object.Extensible();

/**
 * Gross price of item.
 * @memberOf dw.order.AbstractItem
 * @return {dw.value.Money} Gross price of item.
 */
dw.order.AbstractItem.prototype.getGrossPrice = function() {};

/**
 * The item-id used for referencing between items
 * @memberOf dw.order.AbstractItem
 * @return {String} the item-id used for referencing between items
 */
dw.order.AbstractItem.prototype.getItemID = function() {};

/**
 * Returns the Order Product- or Shipping- LineItem associated with this item. Should never return null.
 * @memberOf dw.order.AbstractItem
 * @return {dw.order.LineItem} the Order Product- or Shipping- LineItem associated with this item
 */
dw.order.AbstractItem.prototype.getLineItem = function() {};

/**
 * Net price of item.
 * @memberOf dw.order.AbstractItem
 * @return {dw.value.Money} Net price of item.
 */
dw.order.AbstractItem.prototype.getNetPrice = function() {};

/**
 * Returns the order item extensions related to this item. Should never return null.
 * @memberOf dw.order.AbstractItem
 * @return {dw.order.OrderItem} the order item extensions related to this item
 */
dw.order.AbstractItem.prototype.getOrderItem = function() {};

/**
 * The order-item-id used for referencing the <a href="class_dw_order_OrderItem.html">OrderItem</a>
 * @memberOf dw.order.AbstractItem
 * @return {String} the order-item-id used for referencing the OrderItem
 */
dw.order.AbstractItem.prototype.getOrderItemID = function() {};

/**
 * Total tax for item.
 * @memberOf dw.order.AbstractItem
 * @return {dw.value.Money} Total tax for item.
 */
dw.order.AbstractItem.prototype.getTax = function() {};

/**
 * Price of entire item on which tax calculation is based. Same as <a href="class_dw_order_AbstractItem.html#dw_order_AbstractItem_getNetPrice_DetailAnchor">getNetPrice()</a>
 or <a href="class_dw_order_AbstractItem.html#dw_order_AbstractItem_getGrossPrice_DetailAnchor">getGrossPrice()</a> depending on whether the order is based on net or gross prices.
 * @memberOf dw.order.AbstractItem
 * @return {dw.value.Money} Price of entire item on which tax calculation is based
 */
dw.order.AbstractItem.prototype.getTaxBasis = function() {};

/**
 * Tax items representing a tax breakdown
 * @memberOf dw.order.AbstractItem
 * @return {dw.util.Collection} tax items representing a tax breakdown
 * @see <a href="class_dw_order_TaxItem.html">TaxItem</a>
 */
dw.order.AbstractItem.prototype.getTaxItems = function() {};

/**
 * Basis for item-based objects stemming from a single <a href="class_dw_order_Order.html">Order</a>, with these common
 properties (Invoice is used as an example):

 <ul>
 <li>
 The object has been created from an Order accessible using <a href="class_dw_order_AbstractItemCtnr.html#dw_order_AbstractItemCtnr_getOrder_DetailAnchor">getOrder()</a></li>
 <li>Contains a collection of <a href="class_dw_order_AbstractItemCtnr.html#dw_order_AbstractItemCtnr_getItems_DetailAnchor"> items</a>, each item related to exactly one <a href="class_dw_order_OrderItem.html">OrderItem</a> which in turn represents
 an extension to one of the order <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a> or one <a href="class_dw_order_ShippingLineItem.html">ShippingLineItem</a>.
 Example: an <a href="class_dw_order_Invoice.html">Invoice</a> has <a href="class_dw_order_InvoiceItem.html">InvoiceItem</a>s</li>
 <li>
 The items hold various prices which are summed, resulting in a
 <a href="class_dw_order_AbstractItemCtnr.html#dw_order_AbstractItemCtnr_getProductSubtotal_DetailAnchor"> product-subtotal</a>, a
 <a href="class_dw_order_AbstractItemCtnr.html#dw_order_AbstractItemCtnr_getServiceSubtotal_DetailAnchor"> service-subtotal</a> and a <a href="class_dw_order_AbstractItemCtnr.html#dw_order_AbstractItemCtnr_getGrandTotal_DetailAnchor"> grand-total</a>, each represented by a <a href="class_dw_order_SumItem.html">SumItem</a>.</li>
 <li>The object is customizable using custom properties</li>
 </ul>
 * @class
 * @extends dw.object.Extensible
 * @abstract
 */
dw.order.AbstractItemCtnr = function() {};
dw.order.AbstractItemCtnr.prototype = new dw.object.Extensible();

/**
 * Created by this user.
 * @memberOf dw.order.AbstractItemCtnr
 * @return {String} Created by this user
 */
dw.order.AbstractItemCtnr.prototype.getCreatedBy = function() {};

/**
 * The time of creation.
 * @memberOf dw.order.AbstractItemCtnr
 * @return {Date} time of creation.
 */
dw.order.AbstractItemCtnr.prototype.getCreationDate = function() {};

/**
 * Returns the sum-item representing the grandtotal for all items.
 * @memberOf dw.order.AbstractItemCtnr
 * @return {dw.order.SumItem} sum-item for all items
 */
dw.order.AbstractItemCtnr.prototype.getGrandTotal = function() {};

/**
 * Returns the unsorted collection of items
 * @memberOf dw.order.AbstractItemCtnr
 * @return {dw.util.FilteringCollection} the unsorted collection of items
 * @abstract
 */
dw.order.AbstractItemCtnr.prototype.getItems = function() {};

/**
 * The last modification time.
 * @memberOf dw.order.AbstractItemCtnr
 * @return {Date} last modification time..
 */
dw.order.AbstractItemCtnr.prototype.getLastModified = function() {};

/**
 * Last modified by this user.
 * @memberOf dw.order.AbstractItemCtnr
 * @return {String} Last modified by this user
 */
dw.order.AbstractItemCtnr.prototype.getModifiedBy = function() {};

/**
 * Returns the <a href="class_dw_order_Order.html">Order</a> this object was created for.
 * @memberOf dw.order.AbstractItemCtnr
 * @return {dw.order.Order} the Order this object was created for.
 */
dw.order.AbstractItemCtnr.prototype.getOrder = function() {};

/**
 * Returns the sum-item representing the subtotal for product items.
 * @memberOf dw.order.AbstractItemCtnr
 * @return {dw.order.SumItem} sum-item for product items
 */
dw.order.AbstractItemCtnr.prototype.getProductSubtotal = function() {};

/**
 * Returns the sum-item representing the subtotal for service items such as
 shipping.
 * @memberOf dw.order.AbstractItemCtnr
 * @return {dw.order.SumItem} sum-item for service items such as shipping
 */
dw.order.AbstractItemCtnr.prototype.getServiceSubtotal = function() {};

/**
 * The Appeasement represents a shopper request for an order credit.<br/>
 Example: The buyer finds any problem with the products but he agrees to preserve them, if he would be compensated,
 rather than return them.<br/>
 <br/>
 The Appeasement contains 1..n appeasement items.
 Each appeasement item is associated with one <a href="class_dw_order_OrderItem.html">OrderItem</a> usually representing an <a href="class_dw_order_Order.html">Order</a>
 <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a>. <br/>
 <br/>
 An Appeasement can have one of these status values:
 <ul>
 <li>OPEN - the appeasement is open and appeasement items could be added to it</li>
 <li>COMPLETED - the appeasement is complete and it is not allowed to add new items to it, this is a precondition
 for refunding the customer for an appeasement.</li>
 </ul>
 * @class
 * @extends dw.order.AbstractItemCtnr
 * @deprecated Support for Appeasements and related objects will be removed in an upcoming release
 */
dw.order.Appeasement = function() {};
dw.order.Appeasement.prototype = new dw.order.AbstractItemCtnr();

/**
 * Sorting by item id. Use with method <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Appeasement
 * @static
 * @const
 */
dw.order.Appeasement.ORDERBY_ITEMID = {};

/**
 * Sorting by the position of the related order item. Use with method <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Appeasement
 * @static
 * @const
 */
dw.order.Appeasement.ORDERBY_ITEMPOSITION = {};

/**
 * Unsorted, as it is. Use with method <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Appeasement
 * @static
 * @const
 */
dw.order.Appeasement.ORDERBY_UNSORTED = {};

/**
 * Selects the product items. Use with method <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.Appeasement
 * @static
 * @const
 */
dw.order.Appeasement.QUALIFIER_PRODUCTITEMS = {};

/**
 * Selects the service items. Use with method <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.Appeasement
 * @static
 * @const
 */
dw.order.Appeasement.QUALIFIER_SERVICEITEMS = {};

/**
 * Constant for Appeasement Status COMPLETED
 * @type String
 * @memberOf dw.order.Appeasement
 * @static
 * @const
 */
dw.order.Appeasement.STATUS_COMPLETED = '';

/**
 * Constant for Appeasement Status OPEN
 * @type String
 * @memberOf dw.order.Appeasement
 * @static
 * @const
 */
dw.order.Appeasement.STATUS_OPEN = '';

/**
 * Creates appeasement items corresponding to certain order items and adds them to the appeasement.
 * @memberOf dw.order.Appeasement
 * @param {dw.value.Money} totalAmount - the appeasement amount corresponding to the provided order items; this amount is the net price                     when the order is net based and respectively - gross price when the order is gross based
 * @param {dw.util.List} orderItems - the order items for which appeasement items should be created
 */
dw.order.Appeasement.prototype.addItems = function(totalAmount, orderItems) {};

/**
 * Creates a new <a href="class_dw_order_Invoice.html">Invoice</a> based on this Appeasement. The appeasement-number
 will be used as the invoice-number.
 <p/>
 The method must not be called more than once for an Appeasement,
 nor may 2 invoices exist with the same invoice-number.
 <p/>
 The new Invoice is a credit-invoice with a <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">Invoice.STATUS_NOT_PAID</a> status, and
 should be passed to the refund payment-hook in a separate database transaction for processing.
 * @memberOf dw.order.Appeasement
 * @return {dw.order.Invoice} the created invoice
 */
dw.order.Appeasement.prototype.createInvoice = function() {};

/**
 * Creates a new <a href="class_dw_order_Invoice.html">Invoice</a> based on this Appeasement. The
 invoice-number must be specified as an argument.
 <p/>
 The method must not be called more than once for an Appeasement,
 nor may 2 invoices exist with the same invoice-number.
 <p/>
 The new Invoice is a credit-invoice with a <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">Invoice.STATUS_NOT_PAID</a> status, and
 should be passed to the refund payment-hook in a separate database transaction for processing.
 * @memberOf dw.order.Appeasement
 * @param {String} invoiceNumber - the invoice-number to be used in the appeasement creation process
 * @return {dw.order.Invoice} the created invoice
 */
dw.order.Appeasement.prototype.createInvoice = function(invoiceNumber) {};

/**
 * Returns the appeasement number.
 * @memberOf dw.order.Appeasement
 * @return {String} the appeasement number
 */
dw.order.Appeasement.prototype.getAppeasementNumber = function() {};

/**
 * Returns null or the previously created <a href="class_dw_order_Invoice.html">Invoice</a>.
 * @memberOf dw.order.Appeasement
 * @return {dw.order.Invoice} null or the previously created invoice
 * @see <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_createInvoice_String_DetailAnchor">createInvoice(String)</a>
 */
dw.order.Appeasement.prototype.getInvoice = function() {};

/**
 * Returns <code>null</code> or the invoice-number.
 * @memberOf dw.order.Appeasement
 * @return {String} <code>null</code> or the number of the previously created invoice
 * @see <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_createInvoice_String_DetailAnchor">createInvoice(String)</a>
 */
dw.order.Appeasement.prototype.getInvoiceNumber = function() {};

/**
 * Returns a filtering collection of the appeasement items belonging to the appeasement.
 <p/>
 This <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> could be sorted / filtered using:
 <ul>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_ORDERBY_ITEMID_DetailAnchor">ORDERBY_ITEMID</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_ORDERBY_ITEMPOSITION_DetailAnchor">ORDERBY_ITEMPOSITION</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_ORDERBY_UNSORTED_DetailAnchor">ORDERBY_UNSORTED</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_QUALIFIER_PRODUCTITEMS_DetailAnchor">QUALIFIER_PRODUCTITEMS</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_QUALIFIER_SERVICEITEMS_DetailAnchor">QUALIFIER_SERVICEITEMS</a>
 </ul>
 * @memberOf dw.order.Appeasement
 * @return {dw.util.FilteringCollection} the filtering collection of the appeasement items
 */
dw.order.Appeasement.prototype.getItems = function() {};

/**
 * Returns the reason code for the appeasement. The list of reason codes can be updated
 by updating meta-data for Appeasement.
 * @memberOf dw.order.Appeasement
 * @return {dw.value.EnumValue} the appeasement reason code
 */
dw.order.Appeasement.prototype.getReasonCode = function() {};

/**
 * Returns the reason note for the appeasement.
 * @memberOf dw.order.Appeasement
 * @return {String} the reason note or <code>null</code>
 */
dw.order.Appeasement.prototype.getReasonNote = function() {};

/**
 * Gets the status of this appeasement.<br>
 The possible values are <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_STATUS_OPEN_DetailAnchor">STATUS_OPEN</a>, <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_STATUS_COMPLETED_DetailAnchor">STATUS_COMPLETED</a>.
 * @memberOf dw.order.Appeasement
 * @return {dw.value.EnumValue} the status
 */
dw.order.Appeasement.prototype.getStatus = function() {};

/**
 * Set the reason code for the appeasement. The list of reason codes can be updated
 by updating meta-data for Appeasement.
 * @memberOf dw.order.Appeasement
 * @param {String} reasonCode - the reason code to set
 */
dw.order.Appeasement.prototype.setReasonCode = function(reasonCode) {};

/**
 * Sets the reason note for the appeasement.
 * @memberOf dw.order.Appeasement
 * @param {String} reasonNote - the reason note for the appeasement to set
 */
dw.order.Appeasement.prototype.setReasonNote = function(reasonNote) {};

/**
 * Sets the appeasement status.
 <p>
 The possible values are <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_STATUS_OPEN_DetailAnchor">STATUS_OPEN</a>, <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_STATUS_COMPLETED_DetailAnchor">STATUS_COMPLETED</a>.
 <p>
 When set to status COMPLETED, only the the custom attributes of its appeasement items can be changed.
 * @memberOf dw.order.Appeasement
 * @param {String} appeasementStatus - the appeasement status to set.
 */
dw.order.Appeasement.prototype.setStatus = function(appeasementStatus) {};

/**
 * Represents an item of an <a href="class_dw_order_Appeasement.html">Appeasement</a> which is associated with one <a href="class_dw_order_OrderItem.html">OrderItem</a> usually representing an <a href="class_dw_order_Order.html">Order</a>
 <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a>. Items are created using method <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_addItems_Money_List_DetailAnchor">Appeasement.addItems(Money,List)</a>
 <br>
 When the related Appeasement were set to status COMPLETED, only the the custom attributes of the appeasement item can be changed.
 * @class
 * @extends dw.order.AbstractItem
 * @deprecated Support for Appeasements and related objects will be removed in an upcoming release
 */
dw.order.AppeasementItem = function() {};
dw.order.AppeasementItem.prototype = new dw.order.AbstractItem();

/**
 * Returns the number of the <a href="class_dw_order_Appeasement.html">Appeasement</a> to which this item belongs.
 * @memberOf dw.order.AppeasementItem
 * @return {String} the number of the Appeasement to which this item belongs
 */
dw.order.AppeasementItem.prototype.getAppeasementNumber = function() {};

/**
 * Returns null or the parent item.
 * @memberOf dw.order.AppeasementItem
 * @return {dw.order.AppeasementItem} null or the parent item.
 */
dw.order.AppeasementItem.prototype.getParentItem = function() {};

/**
 * Set a parent item. The parent item must belong to the same
 <a href="class_dw_order_Appeasement.html">Appeasement</a>. An infinite parent-child loop is disallowed
 as is a parent-child depth greater than 10. Setting a parent item
 indicates a dependency of the child item on the parent item, and can be
 used to form a parallel structure to that accessed using
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getParent_DetailAnchor">ProductLineItem.getParent()</a>.
 * @memberOf dw.order.AppeasementItem
 * @param {dw.order.AppeasementItem} parentItem - The parent item, null is allowed
 */
dw.order.AppeasementItem.prototype.setParentItem = function(parentItem) {};

/**
 * The Basket class represents a shopping cart.
 * @class
 * @extends dw.order.LineItemCtnr
 */
dw.order.Basket = function() {};
dw.order.Basket.prototype = new dw.order.LineItemCtnr();

/**
 * Returns the order that this basket represents if the basket is being
 used to edit an order, otherwise this method returns null.
 * @memberOf dw.order.Basket
 * @return {dw.order.Order} the order that this basket represents if the basket is being  used to edit an order, otherwise this method returns null.
 */
dw.order.Basket.prototype.getOrderBeingEdited = function() {};

/**
 * Returns the number of the order that this basket represents if the
 basket is being used to edit an order, otherwise this method returns null.
 * @memberOf dw.order.Basket
 * @return {String} the number of the order that this basket represents if the basket  is being used to edit an order, otherwise this method returns null.
 */
dw.order.Basket.prototype.getOrderNoBeingEdited = function() {};

/**
 * Set the type of the business this order has been placed in.<br/>
 Possible values are <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_BUSINESS_TYPE_B2C_DetailAnchor">LineItemCtnr.BUSINESS_TYPE_B2C</a> or <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_BUSINESS_TYPE_B2B_DetailAnchor">LineItemCtnr.BUSINESS_TYPE_B2B</a>.
 <p/>
 * @memberOf dw.order.Basket
 * @param {Number} aType - the business type to set for this basket
 */
dw.order.Basket.prototype.setBusinessType = function(aType) {};

/**
 * Set the channel type in which sales channel this order has been created.
 This can be used to distinguish order placed through e.g. Storefront, Call Center or Marketplace.<br/>
 Possible values are <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_STOREFRONT_DetailAnchor">LineItemCtnr.CHANNEL_TYPE_STOREFRONT</a>, <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_CALLCENTER_DetailAnchor">LineItemCtnr.CHANNEL_TYPE_CALLCENTER</a>,
 <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_MARKETPLACE_DetailAnchor">LineItemCtnr.CHANNEL_TYPE_MARKETPLACE</a>, <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_DSS_DetailAnchor">LineItemCtnr.CHANNEL_TYPE_DSS</a>, <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_STORE_DetailAnchor">LineItemCtnr.CHANNEL_TYPE_STORE</a>,
 <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_PINTEREST_DetailAnchor">LineItemCtnr.CHANNEL_TYPE_PINTEREST</a> or <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_TWITTER_DetailAnchor">LineItemCtnr.CHANNEL_TYPE_TWITTER</a>.
 <p/>
 * @memberOf dw.order.Basket
 * @param {Number} aType - the channel type to set for this basket
 */
dw.order.Basket.prototype.setChannelType = function(aType) {};

/**
 * Line item representing an applied <a href="class_dw_campaign_BonusChoiceDiscount.html">BonusChoiceDiscount</a> in
 a LineItemCtnr. This type of line item can only be created by the Demandware
 promotions engine when applying a BonusChoiceDiscount. A
 BonusDiscountLineItem is basically a placeholder in the cart which entitles a
 customer to add one or more bonus products to his basket from a configured
 list of products. Merchants typically display this type of line item in the
 cart by showing the corresponding promotion callout message. They typically
 provide links to the bonus products that the customer can choose from. This
 line item can be removed from the cart but will be re-added each time the
 promotions engine re-applies discounts. Merchants may however add custom
 logic to show/hide this line item since it just a placeholder and not an
 actual product line item.
 <p/>
 The number of products that a customer is allowed to choose from is
 determined by <a href="class_dw_order_BonusDiscountLineItem.html#dw_order_BonusDiscountLineItem_getMaxBonusItems_DetailAnchor">getMaxBonusItems()</a>. The collection of products the
 customer can choose from is determined by <a href="class_dw_order_BonusDiscountLineItem.html#dw_order_BonusDiscountLineItem_getBonusProducts_DetailAnchor">getBonusProducts()</a>. When a
 customer chooses a bonus product in the storefront, it is necessary to use
 the <code>AddBonusProductToBasket</code> pipelet instead of the usual
 <code>AddProductToBasket</code> pipelet, in order to associate this
 BonusDiscountLineItem with the newly created bonus ProductLineItem.
 Alternatively, the API method
 <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_createBonusProductLineItem_BonusDiscountLineItem_Product_ProductOptionModel_Shipment_DetailAnchor">LineItemCtnr.createBonusProductLineItem(BonusDiscountLineItem, Product, ProductOptionModel, Shipment)</a>
 can be used instead. The system does proper validations in order to prevent
 incorrect or too many bonus products from being associated with this
 BonusDiscountLineItem. Once a customer has selected bonus products, the
 product line items representing the chosen bonus products can be retrieved
 with <a href="class_dw_order_BonusDiscountLineItem.html#dw_order_BonusDiscountLineItem_getBonusProductLineItems_DetailAnchor">getBonusProductLineItems()</a>.
 * @class
 * @extends dw.object.ExtensibleObject
 * @see <a href="class_dw_campaign_BonusChoiceDiscount.html">BonusChoiceDiscount</a>
 */
dw.order.BonusDiscountLineItem = function() {};
dw.order.BonusDiscountLineItem.prototype = new dw.object.ExtensibleObject();

/**
 * Get the product line items in the current LineItemCtnr representing the
 bonus products that the customer has selected for this discount.
 * @memberOf dw.order.BonusDiscountLineItem
 * @return {dw.util.List} The selected product line items, never null.
 * @see <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_createBonusProductLineItem_BonusDiscountLineItem_Product_ProductOptionModel_Shipment_DetailAnchor">LineItemCtnr.createBonusProductLineItem(BonusDiscountLineItem, Product, ProductOptionModel, Shipment)</a>
 */
dw.order.BonusDiscountLineItem.prototype.getBonusProductLineItems = function() {};

/**
 * Get the effective price for the passed bonus product. This is expected to
 be one of the products returned by <a href="class_dw_order_BonusDiscountLineItem.html#dw_order_BonusDiscountLineItem_getBonusProducts_DetailAnchor">getBonusProducts()</a> with one
 exception: If a master product is configured as a bonus product, this
 implies that a customer may choose from any of its variants. In this
 case, it is allowed to pass in a variant to this method and a price will
 be returned. If the passed product is not a valid bonus product, this
 method throws an exception.
 * @memberOf dw.order.BonusDiscountLineItem
 * @param {dw.catalog.Product} product - The bonus product to retrieve a price for, must not be             null.
 * @return {dw.value.Money} The price of the passed bonus product as a Number.
 */
dw.order.BonusDiscountLineItem.prototype.getBonusProductPrice = function(product) {};

/**
 * Get the list of bonus products which the customer is allowed to choose
 from for this discount. This list is configured by a merchant entering a
 list of SKUs for the discount. Products which do not exist in the system,
 or are offline, or are not assigned to a category in the site catalog are
 filtered out. Unavailable (i.e. out-of-stock) products are NOT filtered
 out. This allows merchants to display out-of-stock bonus products with
 appropriate messaging.
 <p/>
 If the promotion which triggered this discount does not exist, then this
 method returns an empty list.
 <p/>
 If a returned product is a master product, the customer is entitled to
 choose from any variant. If the product is an option product, the
 customer is entitled to choose any value for each option. Since the
 promotions engine does not touch the value of the product option line
 items, it is the responsibility of custom code to set option prices.
 * @memberOf dw.order.BonusDiscountLineItem
 * @return {dw.util.List} An ordered list of bonus products that the customer may choose          from for this discount.
 */
dw.order.BonusDiscountLineItem.prototype.getBonusProducts = function() {};

/**
 * Get the maximum number of bonus items that the customer is permitted to
 select for this bonus discount.
 <p/>
 If the promotion which triggered this discount does not exist, then this
 method returns 0.
 * @memberOf dw.order.BonusDiscountLineItem
 * @return {Number} The maximum number of bonus items that the customer is permitted          to select for this bonus discount, or 0 if the promotion no          longer exists.
 */
dw.order.BonusDiscountLineItem.prototype.getMaxBonusItems = function() {};

/**
 * Get the promotion associated with this discount.
 * @memberOf dw.order.BonusDiscountLineItem
 * @return {dw.campaign.Promotion} The promotion associated with this discount, or null if it no          longer exists.
 */
dw.order.BonusDiscountLineItem.prototype.getPromotion = function() {};

/**
 * Get the promotion ID associated with this discount.
 * @memberOf dw.order.BonusDiscountLineItem
 * @return {String} The promotion ID associated with this discount, never null.
 */
dw.order.BonusDiscountLineItem.prototype.getPromotionID = function() {};

/**
 * The CouponLineItem class is used to store redeemed coupons in the Basket.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.CouponLineItem = function() {};
dw.order.CouponLineItem.prototype = new dw.object.ExtensibleObject();

/**
 * Associates the specified price adjustment with the coupon line item.
 This method is only applicable if used for price adjustments and
 coupon line items NOT based on Demandware campaigns.
 * @memberOf dw.order.CouponLineItem
 * @param {dw.order.PriceAdjustment} priceAdjustment - Price adjustment to be associated with coupon line item.
 */
dw.order.CouponLineItem.prototype.associatePriceAdjustment = function(priceAdjustment) {};

/**
 * Returns the coupon code.
 * @memberOf dw.order.CouponLineItem
 * @return {String} Coupon code
 */
dw.order.CouponLineItem.prototype.getCouponCode = function() {};

/**
 * Returns a price adjustments of the line item container triggered
 by this coupon.
 * @memberOf dw.order.CouponLineItem
 * @return {dw.util.Collection} Price adjustments triggered by the coupon
 */
dw.order.CouponLineItem.prototype.getPriceAdjustments = function() {};

/**
 * Returns the promotion related to the coupon line item.
 * @memberOf dw.order.CouponLineItem
 * @return {dw.campaign.Promotion} Promotion related to coupon represented by line item
 * @deprecated A coupon code and its coupon can be associated with
             multiple promotions. Therefore, this method is not
             appropriate anymore. For backward-compatibility, the method
             returns one of the promotions associated with the coupon
             code.
 */
dw.order.CouponLineItem.prototype.getPromotion = function() {};

/**
 * Returns the id of the related promotion.
 * @memberOf dw.order.CouponLineItem
 * @return {String} the id of the related promotion.
 * @deprecated A coupon code and it's coupon can be associated with
             multiple promotions. Therefore, this method is not
             appropriate anymore. For backward-compatibility, the method
             returns the ID of one of the promotions associated with
             the coupon code.
 */
dw.order.CouponLineItem.prototype.getPromotionID = function() {};

/**
 * This method provides a detailed error status in case the coupon code of
 this coupon line item instance became invalid.
 * @memberOf dw.order.CouponLineItem
 * @return {String} Returns APPLIED if coupon is applied, and otherwise one of the  codes defined in {@link dw.campaign.CouponStatusCodes}
 */
dw.order.CouponLineItem.prototype.getStatusCode = function() {};

/**
 * Identifies if the coupon is currently applied in the basket. A coupon
 line is applied if there exists at least one price adjustment related
 to the coupon line item.
 * @memberOf dw.order.CouponLineItem
 * @return {Boolean} true if the coupon is currently applied in the basket.
 */
dw.order.CouponLineItem.prototype.isApplied = function() {};

/**
 * Returns true the line item represents a coupon of a Demandware
 campaign. If the coupon line item represents a custom coupon code,
 the method returns false.
 * @memberOf dw.order.CouponLineItem
 * @return {Boolean}
 */
dw.order.CouponLineItem.prototype.isBasedOnCampaign = function() {};

/**
 * Allows to check whether the coupon code of this coupon line item instance
 is valid. Coupon line item is valid, if status code is one of the following:
 <ul>
 <li><a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_APPLIED_DetailAnchor">CouponStatusCodes.APPLIED</a></li>
 <li><a href="class_dw_campaign_CouponStatusCodes.html#dw_campaign_CouponStatusCodes_NO_APPLICABLE_PROMOTION_DetailAnchor">CouponStatusCodes.NO_APPLICABLE_PROMOTION</a></li>
 </ul>
 * @memberOf dw.order.CouponLineItem
 * @return {Boolean} true if the coupon code is valid, false otherwise.
 */
dw.order.CouponLineItem.prototype.isValid = function() {};

/**
 * Represents a Gift Certificate that can be used to purchase
 products.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.GiftCertificate = function() {};
dw.order.GiftCertificate.prototype = new dw.object.ExtensibleObject();

/**
 * Represents a status of 'issued', which indicates that the Gift Certificate
 has been created and that it can be used to purchase products.
 * @type Number
 * @memberOf dw.order.GiftCertificate
 * @static
 * @const
 */
dw.order.GiftCertificate.STATUS_ISSUED = 0;

/**
 * Represents a status of 'partially redeemed', which indicates that the Gift Certificate
 has been used to purchase products, but that there is still a balance on
 the gift certificate.
 * @type Number
 * @memberOf dw.order.GiftCertificate
 * @static
 * @const
 */
dw.order.GiftCertificate.STATUS_PARTIALLY_REDEEMED = 0;

/**
 * Represents a status of 'pending', which indicates that the Gift Certificate
 has been created but that it cannot be used yet.
 * @type Number
 * @memberOf dw.order.GiftCertificate
 * @static
 * @const
 */
dw.order.GiftCertificate.STATUS_PENDING = 0;

/**
 * Represents a status of 'redeemed', which indicates that the Gift Certificate
 has been used and no longer contains a balance.
 * @type Number
 * @memberOf dw.order.GiftCertificate
 * @static
 * @const
 */
dw.order.GiftCertificate.STATUS_REDEEMED = 0;

/**
 * Returns the original amount on the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @return {dw.value.Money} the original amount on the gift certificate.
 */
dw.order.GiftCertificate.prototype.getAmount = function() {};

/**
 * Returns the balance on the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @return {dw.value.Money} the balance on the gift certificate.
 */
dw.order.GiftCertificate.prototype.getBalance = function() {};

/**
 * Returns the description string.
 * @memberOf dw.order.GiftCertificate
 * @return {String} the description.
 */
dw.order.GiftCertificate.prototype.getDescription = function() {};

/**
 * Returns the code of the gift certificate. This redemption code is send to
 gift certificate recipient.
 * @memberOf dw.order.GiftCertificate
 * @return {String} the code of the gift certificate.
 */
dw.order.GiftCertificate.prototype.getGiftCertificateCode = function() {};

/**
 * Returns the code of the gift certificate. This redemption code is send to
 gift certificate recipient.
 * @memberOf dw.order.GiftCertificate
 * @return {String} the code of the gift certificate.
 * @deprecated Use <a href="class_dw_order_GiftCertificate.html#dw_order_GiftCertificate_getGiftCertificateCode_DetailAnchor">getGiftCertificateCode()</a>
 */
dw.order.GiftCertificate.prototype.getID = function() {};

/**
 * Returns the masked gift certificate code with
 all but the last 4 characters replaced with a '*' character.
 * @memberOf dw.order.GiftCertificate
 * @return {String} the masked gift certificate code.
 */
dw.order.GiftCertificate.prototype.getMaskedGiftCertificateCode = function() {};

/**
 * Returns the masked gift certificate code with
 all but the specified number of characters replaced with a '*' character.
 * @memberOf dw.order.GiftCertificate
 * @param {Number} ignore - the number of characters to leave unmasked.
 * @return {String} the masked gift certificate code.
 * @throws IllegalArgumentException if ignore is negative.
 */
dw.order.GiftCertificate.prototype.getMaskedGiftCertificateCode = function(ignore) {};

/**
 * Returns the merchant ID of the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @return {String} the merchant ID of the gift certificate.
 */
dw.order.GiftCertificate.prototype.getMerchantID = function() {};

/**
 * Returns the message to include in the email of the person receiving
 the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @return {String} the message to include in the email of the person receiving  the gift certificate.
 */
dw.order.GiftCertificate.prototype.getMessage = function() {};

/**
 * Returns the email address of the person receiving
 the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @return {String} the email address of the person receiving  the gift certificate.
 */
dw.order.GiftCertificate.prototype.getRecipientEmail = function() {};

/**
 * Returns the name of the person receiving
 the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @return {String} the name of the person receiving  the gift certificate.
 */
dw.order.GiftCertificate.prototype.getRecipientName = function() {};

/**
 * Returns the name of the person or organization that
 sent the gift certificate or null if undefined.
 * @memberOf dw.order.GiftCertificate
 * @return {String} the name of the person or organization that  sent the gift certificate or null if undefined.
 */
dw.order.GiftCertificate.prototype.getSenderName = function() {};

/**
 * Returns the status where the possible values are
 STATUS_PENDING, STATUS_ISSUED, STATUS_PARTIALLY_REDEEMED
 or STATUS_REDEEMED.
 * @memberOf dw.order.GiftCertificate
 * @return {Number} the status.
 */
dw.order.GiftCertificate.prototype.getStatus = function() {};

/**
 * Returns true if the Gift Certificate is enabled, false otherwise.
 * @memberOf dw.order.GiftCertificate
 * @return {Boolean} true if the Gift Certificate is enabled, false otherwise.
 */
dw.order.GiftCertificate.prototype.isEnabled = function() {};

/**
 * An optional description that you can use to categorize the
 gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @param {String} description - additional description.
 */
dw.order.GiftCertificate.prototype.setDescription = function(description) {};

/**
 * Controls if the Gift Certificate is enabled.
 * @memberOf dw.order.GiftCertificate
 * @param {Boolean} enabled - if true, enables the Gift Certificate.
 */
dw.order.GiftCertificate.prototype.setEnabled = function(enabled) {};

/**
 * Sets the message to include in the email of the person receiving
 the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @param {String} message - the message to include in the email of the person receiving  the gift certificate.
 */
dw.order.GiftCertificate.prototype.setMessage = function(message) {};

/**
 * Sets the email address of the person receiving
 the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @param {String} recipientEmail - the email address of the person receiving  the gift certificate.
 */
dw.order.GiftCertificate.prototype.setRecipientEmail = function(recipientEmail) {};

/**
 * Sets the name of the person receiving
 the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @param {String} recipient - the name of the person receiving  the gift certificate.
 */
dw.order.GiftCertificate.prototype.setRecipientName = function(recipient) {};

/**
 * Sets the name of the person or organization that
 sent the gift certificate.
 * @memberOf dw.order.GiftCertificate
 * @param {String} sender - the name of the person or organization that  sent the gift certificate.
 */
dw.order.GiftCertificate.prototype.setSenderName = function(sender) {};

/**
 * Sets the status of the gift certificate. <br/>
 Possible values are: <a href="class_dw_order_GiftCertificate.html#dw_order_GiftCertificate_STATUS_ISSUED_DetailAnchor">STATUS_ISSUED</a>,
 <a href="class_dw_order_GiftCertificate.html#dw_order_GiftCertificate_STATUS_PENDING_DetailAnchor">STATUS_PENDING</a>, <a href="class_dw_order_GiftCertificate.html#dw_order_GiftCertificate_STATUS_PARTIALLY_REDEEMED_DetailAnchor">STATUS_PARTIALLY_REDEEMED</a>
 and <a href="class_dw_order_GiftCertificate.html#dw_order_GiftCertificate_STATUS_REDEEMED_DetailAnchor">STATUS_REDEEMED</a>.
 * @memberOf dw.order.GiftCertificate
 * @param {Number} status - Gift certificate status
 */
dw.order.GiftCertificate.prototype.setStatus = function(status) {};

/**
 * Represents a Gift Certificate line item in the cart. When an order is
 processed, a Gift Certificate is created based on the information in
 the Gift Certificate line item.
 * @class
 * @extends dw.order.LineItem
 */
dw.order.GiftCertificateLineItem = function() {};
dw.order.GiftCertificateLineItem.prototype = new dw.order.LineItem();

/**
 * Returns the ID of the gift certificate that this line item
 was used to create. If this line item has not been used to create
 a Gift Certificate, this method returns null.
 * @memberOf dw.order.GiftCertificateLineItem
 * @return {String} the ID of the gift certificate or null if undefined.
 */
dw.order.GiftCertificateLineItem.prototype.getGiftCertificateID = function() {};

/**
 * Returns the message to include in the email of the person receiving
 the gift certificate line item.
 * @memberOf dw.order.GiftCertificateLineItem
 * @return {String} the message to include in the email of the person receiving  the gift certificate line item.
 */
dw.order.GiftCertificateLineItem.prototype.getMessage = function() {};

/**
 * Returns the associated ProductListItem.
 * @memberOf dw.order.GiftCertificateLineItem
 * @return {dw.customer.ProductListItem} item or null.
 */
dw.order.GiftCertificateLineItem.prototype.getProductListItem = function() {};

/**
 * Returns the email address of the person receiving
 the gift certificate line item.
 * @memberOf dw.order.GiftCertificateLineItem
 * @return {String} the email address of the person receiving  the gift certificate line item.
 */
dw.order.GiftCertificateLineItem.prototype.getRecipientEmail = function() {};

/**
 * Returns the name of the person receiving
 the gift certificate line item.
 * @memberOf dw.order.GiftCertificateLineItem
 * @return {String} the name of the person receiving  the gift certificate line item.
 */
dw.order.GiftCertificateLineItem.prototype.getRecipientName = function() {};

/**
 * Returns the name of the person or organization that
 sent the gift certificate line item or null if undefined.
 * @memberOf dw.order.GiftCertificateLineItem
 * @return {String} the name of the person or organization that  sent the gift certificate line item or null if undefined.
 */
dw.order.GiftCertificateLineItem.prototype.getSenderName = function() {};

/**
 * Returns the associated Shipment.
 * @memberOf dw.order.GiftCertificateLineItem
 * @return {dw.order.Shipment} The shipment of the gift certificate line item
 */
dw.order.GiftCertificateLineItem.prototype.getShipment = function() {};

/**
 * Sets the ID of the gift certificate associated with this line item.
 * @memberOf dw.order.GiftCertificateLineItem
 * @param {String} id - the ID of the gift certificate associated with this line item.
 */
dw.order.GiftCertificateLineItem.prototype.setGiftCertificateID = function(id) {};

/**
 * Sets the message to include in the email of the person receiving
 the gift certificate line item.
 * @memberOf dw.order.GiftCertificateLineItem
 * @param {String} message - the message to include in the email of the person receiving  the gift certificate line item.
 */
dw.order.GiftCertificateLineItem.prototype.setMessage = function(message) {};

/**
 * Sets the email address of the person receiving
 the gift certificate line item.
 * @memberOf dw.order.GiftCertificateLineItem
 * @param {String} recipientEmail - the email address of the person receiving  the gift certificate line item.
 */
dw.order.GiftCertificateLineItem.prototype.setRecipientEmail = function(recipientEmail) {};

/**
 * Sets the name of the person receiving
 the gift certificate line item.
 * @memberOf dw.order.GiftCertificateLineItem
 * @param {String} recipient - the name of the person receiving  the gift certificate line item.
 */
dw.order.GiftCertificateLineItem.prototype.setRecipientName = function(recipient) {};

/**
 * Sets the name of the person or organization that
 sent the gift certificate line item.
 * @memberOf dw.order.GiftCertificateLineItem
 * @param {String} sender - the name of the person or organization that  sent the gift certificate line item.
 */
dw.order.GiftCertificateLineItem.prototype.setSenderName = function(sender) {};

/**
 * Associates the gift certificate line item with the specified shipment. <br/>
  Gift certificate line item and shipment must belong to the same line item ctnr.
 * @memberOf dw.order.GiftCertificateLineItem
 * @param {dw.order.Shipment} shipment - The new shipment of the gift certificate line item
 */
dw.order.GiftCertificateLineItem.prototype.setShipment = function(shipment) {};

/**
 * The GiftCertificateMgr class contains a set of static methods for
 interacting with GiftCertificates.
 * @class
 * @extends Object
 */
dw.order.GiftCertificateMgr = function() {};
dw.order.GiftCertificateMgr.prototype = new Object();

/**
 * Indicates that an error occurred because the Gift Certificate
 is currently disabled.
 * @type String
 * @memberOf dw.order.GiftCertificateMgr
 * @deprecated Use <a href="class_dw_order_GiftCertificateStatusCodes.html">GiftCertificateStatusCodes</a> instead.
 * @static
 * @const
 */
dw.order.GiftCertificateMgr.GC_ERROR_DISABLED = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 does not have a sufficient balance to perform the requested
 operation.
 * @type String
 * @memberOf dw.order.GiftCertificateMgr
 * @deprecated Use <a href="class_dw_order_GiftCertificateStatusCodes.html">GiftCertificateStatusCodes</a> instead.
 * @static
 * @const
 */
dw.order.GiftCertificateMgr.GC_ERROR_INSUFFICIENT_BALANCE = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 Amount was not valid.
 * @type String
 * @memberOf dw.order.GiftCertificateMgr
 * @deprecated Use <a href="class_dw_order_GiftCertificateStatusCodes.html">GiftCertificateStatusCodes</a> instead.
 * @static
 * @const
 */
dw.order.GiftCertificateMgr.GC_ERROR_INVALID_AMOUNT = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 ID was not valid.
 * @type String
 * @memberOf dw.order.GiftCertificateMgr
 * @deprecated Use <a href="class_dw_order_GiftCertificateStatusCodes.html">GiftCertificateStatusCodes</a> instead.
 * @static
 * @const
 */
dw.order.GiftCertificateMgr.GC_ERROR_INVALID_CODE = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 has been fully redeemed.
 * @type String
 * @memberOf dw.order.GiftCertificateMgr
 * @deprecated Use <a href="class_dw_order_GiftCertificateStatusCodes.html">GiftCertificateStatusCodes</a> instead.
 * @static
 * @const
 */
dw.order.GiftCertificateMgr.GC_ERROR_PENDING = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 has been fully redeemed.
 * @type String
 * @memberOf dw.order.GiftCertificateMgr
 * @deprecated Use   <a href="class_dw_order_GiftCertificateStatusCodes.html">GiftCertificateStatusCodes</a> instead.
 * @static
 * @const
 */
dw.order.GiftCertificateMgr.GC_ERROR_REDEEMED = '';

/**
 * Returns the Gift Certificate identified by the specified
 gift certificate code.
 * @memberOf dw.order.GiftCertificateMgr
 * @param {String} giftCertificateCode - to identify the Gift Certificate.
 * @return {dw.order.GiftCertificate} the Gift Certificate identified by the specified code or null.
 * @deprecated Use <a href="class_dw_order_GiftCertificateMgr.html#dw_order_GiftCertificateMgr_getGiftCertificateByCode_String_DetailAnchor">getGiftCertificateByCode(String)</a>
 * @static
 */
dw.order.GiftCertificateMgr.getGiftCertificate = function(giftCertificateCode) {};

/**
 * Returns the Gift Certificate identified by the specified
 gift certificate code.
 * @memberOf dw.order.GiftCertificateMgr
 * @param {String} giftCertificateCode - to identify the Gift Certificate.
 * @return {dw.order.GiftCertificate} the Gift Certificate identified by the specified code or null.
 * @static
 */
dw.order.GiftCertificateMgr.getGiftCertificateByCode = function(giftCertificateCode) {};

/**
 * Returns the Gift Certificate identified by the specified merchant ID.
 * @memberOf dw.order.GiftCertificateMgr
 * @param {String} merchantID - to identify the Gift Certificate.
 * @return {dw.order.GiftCertificate} the Gift Certificate identified by the specified merchant ID or  null.
 * @static
 */
dw.order.GiftCertificateMgr.getGiftCertificateByMerchantID = function(merchantID) {};

/**
 * Redeems an amount from a Gift Certificate. The Gift Certificate ID
 is specified in the OrderPaymentInstrument and the amount
 specified in the PaymentTransaction associated with the
 OrderPaymentInstrument. If the PaymentTransaction.getTransactionID()
 is not null, the value returned by this method is used as the
 'Order Number' for the redemption transaction. The 'Order Number' is
 visible via the Business Manager.
 * @memberOf dw.order.GiftCertificateMgr
 * @param {dw.order.OrderPaymentInstrument} paymentInstrument - the OrderPaymentInstrument containing the ID of  the Gift Certificate to redeem, and the amount of the redemption.
 * @return {dw.system.Status} the status of the redemption operation.
 * @static
 */
dw.order.GiftCertificateMgr.redeemGiftCertificate = function(paymentInstrument) {};

/**
 *
 * @class
 * @extends Object
 */
dw.order.GiftCertificateStatusCodes = function() {};
dw.order.GiftCertificateStatusCodes.prototype = new Object();

/**
 * Indicates that an error occurred because the Gift Certificate
 was in a different currency than the Basket.
 * @type String
 * @memberOf dw.order.GiftCertificateStatusCodes
 * @static
 * @const
 */
dw.order.GiftCertificateStatusCodes.GIFTCERTIFICATE_CURRENCY_MISMATCH = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 is currently disabled.
 * @type String
 * @memberOf dw.order.GiftCertificateStatusCodes
 * @static
 * @const
 */
dw.order.GiftCertificateStatusCodes.GIFTCERTIFICATE_DISABLED = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 does not have a sufficient balance to perform the requested
 operation.
 * @type String
 * @memberOf dw.order.GiftCertificateStatusCodes
 * @static
 * @const
 */
dw.order.GiftCertificateStatusCodes.GIFTCERTIFICATE_INSUFFICIENT_BALANCE = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 was not found.
 * @type String
 * @memberOf dw.order.GiftCertificateStatusCodes
 * @static
 * @const
 */
dw.order.GiftCertificateStatusCodes.GIFTCERTIFICATE_NOT_FOUND = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 is pending and is not available for use.
 * @type String
 * @memberOf dw.order.GiftCertificateStatusCodes
 * @static
 * @const
 */
dw.order.GiftCertificateStatusCodes.GIFTCERTIFICATE_PENDING = '';

/**
 * Indicates that an error occurred because the Gift Certificate
 has been fully redeemed.
 * @type String
 * @memberOf dw.order.GiftCertificateStatusCodes
 * @static
 * @const
 */
dw.order.GiftCertificateStatusCodes.GIFTCERTIFICATE_REDEEMED = '';

/**
 * This interface represents all script hooks that can be registered to
 customize the order center payment functionality. It contains the extension
 points (hook names), and the functions that are called by each extension
 point. A function must be defined inside a JavaScript source and must be
 exported. The script with the exported hook function must be located inside a
 site cartridge. Inside the site cartridge a 'package.json' file with a
 'hooks' entry must exist.
 <p>
 "hooks": "./hooks.json"
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>

 <pre>
 "hooks": [
      {"name": "dw.order.payment.authorize", "script": "./authorize.js"},
      {"name": "dw.order.payment.validateAuthorization", "script": "./validateAuthorization.js"},
 ]
 </pre>

 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the
 exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.order.hooks.PaymentHooks = function() {};
dw.order.hooks.PaymentHooks.prototype = new Object();

/**
 * The extension point name dw.order.payment.authorize.
 <br/> This hook is optional.
 * @type String
 * @memberOf dw.order.hooks.PaymentHooks
 * @static
 * @const
 */
dw.order.hooks.PaymentHooks.extensionPointAuthorize = '';

/**
 * The extension point name dw.order.payment.authorizeCreditCard.
 <br/> This hook is optional.
 * @type String
 * @memberOf dw.order.hooks.PaymentHooks
 * @static
 * @const
 */
dw.order.hooks.PaymentHooks.extensionPointAuthorizeCreditCard = '';

/**
 * The extension point name dw.order.payment.capture.
 * @type String
 * @memberOf dw.order.hooks.PaymentHooks
 * @static
 * @const
 */
dw.order.hooks.PaymentHooks.extensionPointCapture = '';

/**
 * The extension point name dw.order.payment.reauthorize.
 * @type String
 * @memberOf dw.order.hooks.PaymentHooks
 * @static
 * @const
 */
dw.order.hooks.PaymentHooks.extensionPointReauthorize = '';

/**
 * The extension point name dw.order.payment.refund.
 * @type String
 * @memberOf dw.order.hooks.PaymentHooks
 * @static
 * @const
 */
dw.order.hooks.PaymentHooks.extensionPointRefund = '';

/**
 * The extension point name dw.order.payment.releaseAuthorization.
 * @type String
 * @memberOf dw.order.hooks.PaymentHooks
 * @static
 * @const
 */
dw.order.hooks.PaymentHooks.extensionPointReleaseAuthorization = '';

/**
 * The extension point name dw.order.payment.validateAuthorization.
 * @type String
 * @memberOf dw.order.hooks.PaymentHooks
 * @static
 * @const
 */
dw.order.hooks.PaymentHooks.extensionPointValidateAuthorization = '';

/**
 * Prefix used for extension point names: dw.order.payment.
 * @type String
 * @memberOf dw.order.hooks.PaymentHooks
 * @static
 * @const
 */
dw.order.hooks.PaymentHooks.prefix = '';

/**
 * The function is called by extension point <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_extensionPointAuthorize_DetailAnchor">extensionPointAuthorize</a>. Custom payment authorization - modify the
 order as needed.

 <p/><ul>
 <li>Prerequisite: An order has been created using the data api or via the storefront.</li>
 <li>Return Status.OK: Corresponding payment transaction is marked as authorized (usually a custom property is used for this).</li>
 <li>Return Status.ERROR: Order is held, authorization needs to be repeated.</li>
 </ul>
 * @memberOf dw.order.hooks.PaymentHooks
 * @param {dw.order.Order} order - the order
 * @param {dw.order.OrderPaymentInstrument} paymentDetails - specified payment details
 * @return {dw.system.Status} <ul>          <li>Status.OK successful authorization.</li>          <li>Status.ERROR authorization failed.</li>          </ul>
 * @abstract
 */
dw.order.hooks.PaymentHooks.prototype.authorize = function(order, paymentDetails) {};

/**
 * The function is called by extension point
 <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_extensionPointAuthorizeCreditCard_DetailAnchor">extensionPointAuthorizeCreditCard</a>. Custom payment authorization
 of a credit card - modify the order as needed.

 <p/>
 <ul>
 <li>Prerequisite: An order has been created using the data api or via the
 storefront.</li>
 <li>Return Status.OK: Corresponding payment transaction is marked as
 authorized (usually a custom property is used for this).</li>
 <li>Return Status.ERROR: Order is held, authorization needs to be
 repeated.</li>
 </ul>
 * @memberOf dw.order.hooks.PaymentHooks
 * @param {dw.order.Order} order - the order
 * @param {dw.order.OrderPaymentInstrument} paymentDetails - specified payment details
 * @param {String} cvn - the credit card verification number
 * @return {dw.system.Status} <ul>          <li>Status.OK successful authorization.</li> <li>Status.ERROR          authorization failed.</li>          </ul>
 * @abstract
 */
dw.order.hooks.PaymentHooks.prototype.authorizeCreditCard = function(order, paymentDetails, cvn) {};

/**
 * The function is called by extension point <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_extensionPointCapture_DetailAnchor">extensionPointCapture</a>. Custom payment capture - modify the order as needed.

 <p/><ul><li>Prerequisite:
 <br/>[ either ] As a result of shipping (or part-shipping) a shipping -order the warehouse updates the status of the shipping-order
 resulting in the creation of an unpaid debit invoice (the creation of the invoice is usually handled in
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_changeStatus_ShippingOrder_ShippingOrderWO_DetailAnchor">ShippingOrderHooks.changeStatus(ShippingOrder, ShippingOrderWO)</a>).
 <br/>[ or ] A unpaid debit invoice has been created using the data api. </li>
 <li>Context: An unpaid debit invoice is passed to the payment system for capture. The capture attempt can either succeed (complete
 invoice amount captured) or fail. As a result the invoice status is updated by ordercenter for further processing. See <a href="class_dw_order_Invoice.html">Invoice</a>.</li>
 <li>Hook responsibility: The hook should attempt to capture the amount located in invoice.grandTotal.grossPrice. When successful,
 the capture hook should also update the invoice by calling
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_addCaptureTransaction_OrderPaymentInstrument_Money_DetailAnchor">Invoice.addCaptureTransaction(OrderPaymentInstrument, Money)</a>
 which serves to record the capturedAmount and associate the invoice with the payment-transaction.</li>
 <li>Return Status.OK: Indicates capture succeeded: Order Center sets the Invoice status to <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_PAID_DetailAnchor">Invoice.STATUS_PAID</a>.</li>
 <li>Return Status.ERROR: Indicates capture failed: Order Center sets the Invoice status to <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_FAILED_DetailAnchor">Invoice.STATUS_FAILED</a> for
 further processing.</li>
 <li>Post processing:  When the capture hook returns with success, order center not only sets the relevant invoice status, but also
 sets the relevant capturedAmount values on the invoice item. Returning success means the entire invoice total has been captured, so each item
 within the invoice can also be marked as completely captured. Note the script implementing the hook can take responsibility for this if desired
 order center will not overwrite existing values, but normally the standard implementation fits. As a result each invoice item and the related
 order item can return a capturedAmount, useful for calculating possible refunds. </li>
 </ul>
 * @memberOf dw.order.hooks.PaymentHooks
 * @param {dw.order.Invoice} invoice - the invoice
 * @return {dw.system.Status} <ul>          <li>Status.OK for successful capture of entire invoice amount.</li>          <li>Status.ERROR capture failed</li>          </ul>
 * @abstract
 */
dw.order.hooks.PaymentHooks.prototype.capture = function(invoice) {};

/**
 * The function is called by extension point <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_extensionPointReauthorize_DetailAnchor">extensionPointReauthorize</a>. Custom payment authorization - modify the
 order as needed.

 <p/><ul>
 <li>Prerequisite:
 <br/>[ either ] Based on a selected <a href="class_dw_order_Order.html">Order</a>, a <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a> (which represents the whole or part of the order which can be shipped)
 is to be created ready for export to the warehouse system.
 <br/>[ or ] A <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a> is to be directly created using the data api.</li>
 <li>Context: The related order is passed to the payment hook to check its authorization has not become invalid. Two hooks are called:
 <br/>a. <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_validateAuthorization_Order_DetailAnchor">validateAuthorization(Order)</a> is used to check the orders authorization is still valid
 <br/>b. <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_reauthorize_Order_DetailAnchor">reauthorize(Order)</a> is called if step a. returns Error
 </li>
 <li>Return Status.OK: Corresponding payment transaction is marked as authorized (usually a custom property is used for this).
 If the order had been previously authorized, the custom property values may be overwritten during reauthorization.</li>
 <li>Return Status.ERROR: Order is held, authorization needs to be repeated.</li>
 </ul>
 * @memberOf dw.order.hooks.PaymentHooks
 * @param {dw.order.Order} order - the order
 * @return {dw.system.Status} <ul>          <li>Status.OK successful authorization.</li>          <li>Status.ERROR authorization failed</li>          </ul>
 * @abstract
 */
dw.order.hooks.PaymentHooks.prototype.reauthorize = function(order) {};

/**
 * The function is called by extension point <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_extensionPointRefund_DetailAnchor">extensionPointRefund</a>. Custom payment refund - modify the order as needed.

 <p/><ul><li>Prerequisite:
 <br/>[ either ] Goods returned by the customer result in the creation of one or more return documents, resulting in the creation of an
 unpaid customer credit invoice (the creation of the invoice is usually handled in <a href="class_dw_order_hooks_ReturnHooks.html#dw_order_hooks_ReturnHooks_changeStatus_Return_ReturnWO_DetailAnchor">ReturnHooks.changeStatus(Return, ReturnWO)</a>).
 <br/>[ or ] An unpaid customer credit invoice is created using the data api (perhaps as a result of the creation of a customer appeasement).</li>
 <li>Context: An unpaid credit invoice is passed to the payment system for refund. The refund attempt can either succeed (complete
 invoice amount refunded) or fail. As a result the invoice status is updated by ordercenter for further processing. See <a href="class_dw_order_Invoice.html">Invoice</a>.</li>
 <li>Hook responsibility: The hook should attempt to refund the amount located in invoice.grandTotal.grossPrice. When successful,
 the refund hook should also update the invoice by calling
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_addRefundTransaction_OrderPaymentInstrument_Money_DetailAnchor">Invoice.addRefundTransaction(OrderPaymentInstrument, Money)</a>
 which serves to record the refundedAmount and associate the invoice with the payment-transaction.</li>
 <li>Return Status.OK: Indicates refund succeeded: Order Center sets the Invoice status to <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_PAID_DetailAnchor">Invoice.STATUS_PAID</a>.</li>
 <li>Return Status.ERROR: Indicates refund failed: Order Center sets the Invoice status to <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_FAILED_DetailAnchor">Invoice.STATUS_FAILED</a> for
 further processing.</li>
 <li>Post processing:  When the refund hook returns with success, order center not only sets the relevant invoice status, but also
 sets the relevant refundAmount values on the invoice item. Returning success means the entire invoice total has been refunded, so each item
 within the invoice can also be marked as completely refunded. Note the script implementing the hook can take responsibility for this if desired
 order center will not overwrite existing values, but normally the standard implementation fits. As a result each invoice item and the related
 order item can return a refundedAmount, useful for calculating further possible refunds. </li>
 </ul>
 * @memberOf dw.order.hooks.PaymentHooks
 * @param {dw.order.Invoice} invoice - the invoice
 * @return {dw.system.Status} <ul>          <li>Status.OK for successful refund of entire invoice amount.</li>          <li>Status.ERROR refund failed</li>          </ul>
 * @abstract
 */
dw.order.hooks.PaymentHooks.prototype.refund = function(invoice) {};

/**
 * The function is called by extension point <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_extensionPointReleaseAuthorization_DetailAnchor">extensionPointReleaseAuthorization</a>.
 Custom payment release authorization - modify the order as needed.

 <p/><ul><li>Prerequisite: an authorized order is updated resulting in a need to release the remaining authorization. This happens when:
 <br/>- order is cancelled
 <br/>- order is complete after remaining order items are cancelled.</li>
 <li>Return Status.OK - successful release authorization </li>
 <li>Return Status.ERROR - failed release authorization </li>
 </ul>
 * @memberOf dw.order.hooks.PaymentHooks
 * @param {dw.order.Order} order - the order
 * @return {dw.system.Status} <ul>          <li>Status.OK for successful release authorization.</li>          <li>Status.ERROR failed release authorization</li>          </ul>
 * @abstract
 */
dw.order.hooks.PaymentHooks.prototype.releaseAuthorization = function(order) {};

/**
 * The function is called by extension point <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_extensionPointValidateAuthorization_DetailAnchor">extensionPointValidateAuthorization</a>. Custom payment authorization - modify the
 order as needed.

 <p/><ul><li>Context: This hook is called to validate whether a payment authorization exists for the order. It should usually check:
 <br/>- Whether the authorize or reauthorize hook was previously successfully executed for the order, e.g. by checking whether custom property has been previously set.
 <br/>- Whether an existing authorization has expired e.g. by comparing a timestamp set on authorization with the current time.</li>
 <li>Return Status.OK: indicates the order has a valid payment authorization.</li>
 <li>Return Status.ERROR: indicates <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_reauthorize_Order_DetailAnchor">reauthorize(Order)</a> should be called.</li>
 </ul>See <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_reauthorize_Order_DetailAnchor">reauthorize(Order)</a> for more details.
 * @memberOf dw.order.hooks.PaymentHooks
 * @param {dw.order.Order} order - the order
 * @return {dw.system.Status} <ul>          <li>Status.OK order has a valid payment authorization.</li>          <li>Status.ERROR order has no valid payment authorization, {@link #reauthorize(Order)} should be called</li>          </ul>
 * @abstract
 */
dw.order.hooks.PaymentHooks.prototype.validateAuthorization = function(order) {};

/**
 * This interface represents all script hooks that can be registered to
 customizing the order center return resource. It contains the extension
 points (hook names), and the functions that are called by each extension
 point. A function must be defined inside a JavaScript source and must be
 exported. The script with the exported hook function must be located inside a
 site cartridge. Inside the site cartridge a 'package.json' file with a
 'hooks' entry must exist.
 <p>
 "hooks": "./hooks.json"
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>

 <pre>
 "hooks": [
    {"name": "dw.order.return.createReturn",           "script": "./returns.ds"},
    {"name": "dw.order.return.addReturnItem",          "script": "./returns.ds"},
    {"name": "dw.order.return.changeStatus",           "script": "./returns.ds"},
 ]
 </pre>

 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the
 exported hook function.</li>
 </ul>

 <h2>Overview Return Functionality</h2> <h3>Business objects</h3> <h4>
 <a href="class_dw_order_ReturnCase.html">ReturnCase</a></h4> All returns exist in the context of a
 <a href="class_dw_order_ReturnCase.html">ReturnCase</a>, each <a href="class_dw_order_Order.html">Order</a> can have any number
 of <a href="class_dw_order_ReturnCase.html">ReturnCase</a>s. <br/>
 A <a href="class_dw_order_ReturnCase.html">ReturnCase</a> has <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>s, each of
 which is associated with an <a href="class_dw_order_OrderItem.html">OrderItem</a> (an extension to
 either a <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a> or a
 <a href="class_dw_order_ShippingLineItem.html">ShippingLineItem</a>). <br/>
 Each <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a> defines an
 <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_getAuthorizedQuantity_DetailAnchor">ReturnCaseItem.getAuthorizedQuantity()</a> representing the
 maximum quantity expected to be returned. A <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>
 may be associated with 0..n <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s -
 <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s are added to the <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>
 when <a href="class_dw_order_Return.html">Return</a>s are created.
 <p>
 <i>Either</i> - a <a href="class_dw_order_ReturnCase.html">ReturnCase</a> may be used as an RMA, in which
 case they are created when a customer first shows a wish to return item(s).
 The customer then includes the RMA number with the returned item(s). The
 <a href="class_dw_order_Return.html">Return</a> created as a result is then associated with the
 existing <a href="class_dw_order_ReturnCase.html">ReturnCase</a>. <br/>
 <i>Or</i> - a <a href="class_dw_order_ReturnCase.html">ReturnCase</a> is automatically created as part of
 the return creation, i.e. the customer returns some item(s) leading to a
 creation of both a <a href="class_dw_order_Return.html">Return</a> and an associated
 <a href="class_dw_order_ReturnCase.html">ReturnCase</a>.
 </p>
 <p/>
 The scripting api allows access to the <a href="class_dw_order_ReturnCase.html">ReturnCase</a>s, whether
 the <a href="class_dw_order_ReturnCase.html">ReturnCase</a> is an RMA or not, and the
 <a href="class_dw_order_ReturnCase.html">ReturnCase</a> status. Both the <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>s
 and any <a href="class_dw_order_Return.html">Return</a>s associated with the
 <a href="class_dw_order_ReturnCase.html">ReturnCase</a> can be accessed.
 <p/>
 A <a href="class_dw_order_ReturnCase.html">ReturnCase</a> has one of these status values:
 <ul>
 <li>New - the <a href="class_dw_order_ReturnCase.html">ReturnCase</a> has been created and can be edited
 previous to its authorization</li>
 <li>CONFIRMED - the <a href="class_dw_order_ReturnCase.html">ReturnCase</a> is CONFIRMED, can no longer
 be edited, no <a href="class_dw_order_Return.html">Return</a>s have been associated with it. Only an
 New- <a href="class_dw_order_ReturnCase.html">ReturnCase</a> can be CONFIRMED</li>
 <li>PARTIAL_RETURNED - the <a href="class_dw_order_ReturnCase.html">ReturnCase</a> has been associated
 with at least one <a href="class_dw_order_Return.html">Return</a>, but is not yet complete. Only an
 CONFIRMED- <a href="class_dw_order_ReturnCase.html">ReturnCase</a> can be set to PARTIAL_RETURNED</li>
 <li>RETURNED - the <a href="class_dw_order_ReturnCase.html">ReturnCase</a> has been associated with
 <a href="class_dw_order_Return.html">Return</a>s which match the expected authorized quantity. Only
 an CONFIRMED- or PARTIAL_RETURNED- return-case can be set to RETURNED</li>
 <li>Cancelled - the <a href="class_dw_order_ReturnCase.html">ReturnCase</a> has been cancelled (only a
 New- or CONFIRMED- <a href="class_dw_order_ReturnCase.html">ReturnCase</a> can be cancelled)</li>
 </ul>

 <h4><a href="class_dw_order_Return.html">Return</a></h4>
 A <a href="class_dw_order_Return.html">Return</a> represents a physical customer return, and contains
 1..n <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s. A <a href="class_dw_order_Return.html">Return</a> is associated
 with one <a href="class_dw_order_ReturnCase.html">ReturnCase</a>, and each <a href="class_dw_order_ReturnItem.html">ReturnItem</a> is
 associated with one <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a> and (via the
 <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>) a single <a href="class_dw_order_OrderItem.html">OrderItem</a> usually
 representing an <a href="class_dw_order_Order.html">Order</a> <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a>. <br/>
 A <a href="class_dw_order_ReturnItem.html">ReturnItem</a> records the quantity returned. <br/>
 A <a href="class_dw_order_Return.html">Return</a> can have one of these status values:
 <ul>
 <li>NEW - the <a href="class_dw_order_Return.html">Return</a> is new, i.e. needs to undergo a check
 before it can be marked as COMPLETED</li>
 <li>COMPLETED - the return is complete, this is a precondition for refunding
 the customer for a return.</li>
 </ul>
 <h4>Credit Invoice</h4>
 As a result of making a <a href="class_dw_order_Return.html">Return</a>, the customer may be
 refunded. The refund amount is held in a credit <a href="class_dw_order_Invoice.html">Invoice</a>
 which may be associated <i>either</i> with one <a href="class_dw_order_Return.html">Return</a>
 <i>or</i> with one <a href="class_dw_order_ReturnCase.html">ReturnCase</a>. The <a href="class_dw_order_Invoice.html">Invoice</a>
 is passed to the <i>refund</i> payment hook allowing custom code to handle
 the payment refund.

 <h3>Process overview</h3>
 <h4>Create <a href="class_dw_order_ReturnCase.html">ReturnCase</a></h4>
 The creation of <a href="class_dw_order_ReturnCase.html">ReturnCase</a>s is supported using the data-api.
 The api supports, within the context of an <a href="class_dw_order_Order.html">Order</a>, the
 specification of an (optional) RMA-number and addition of
 <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>s for a given order-item and quantity.
 <h4>Authorize <a href="class_dw_order_ReturnCase.html">ReturnCase</a></h4>
 Following its creation, a <a href="class_dw_order_ReturnCase.html">ReturnCase</a> needs to be CONFIRMED -
 an CONFIRMED <a href="class_dw_order_ReturnCase.html">ReturnCase</a> cannot be modified.
 <h4>Cancel <a href="class_dw_order_ReturnCase.html">ReturnCase</a></h4>
 Following its creation or authorization, a <a href="class_dw_order_ReturnCase.html">ReturnCase</a> may be
 cancelled.
 <h4>Create <a href="class_dw_order_Return.html">Return</a></h4>
 <a href="class_dw_order_Return.html">Return</a>s may be imported or created via the data-api. These
 apis specify an (optional) RMA allowing a <a href="class_dw_order_Return.html">Return</a> to be
 associated with a <a href="class_dw_order_ReturnCase.html">ReturnCase</a>, and
 <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s with a quantity and a key allowing them to be
 associated with an order-item. The process is delegated to custom scripts
 which control the creation of the <a href="class_dw_order_Return.html">Return</a> and the addition of
 the <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s:

 <h5>Hook <a href="class_dw_order_hooks_ReturnHooks.html#dw_order_hooks_ReturnHooks_extensionPointCreateReturn_DetailAnchor">extensionPointCreateReturn</a></h5>
 The creation of the new <a href="class_dw_order_Return.html">Return</a> is delegated to the custom
 script when this hook is called, passing the order, and details of the
 <a href="class_dw_order_Return.html">Return</a> to be created to the script. Typically the script
 accesses the <a href="class_dw_order_ReturnCase.html">ReturnCase</a> from the order and creates the
 return with the provided return-number. It may also update the
 <a href="class_dw_order_Order.html">Order</a>, <a href="class_dw_order_ReturnCase.html">ReturnCase</a> or
 <a href="class_dw_order_Return.html">Return</a> using custom values passed in the
 <a href="class_dw_order_Return.html">Return</a> details. <br/>
 <code>
   <br/>exports.createReturn = function (order:Order, returnDetails) {
   <br/>  var returnNumber=returnDetails.returnNumber;
   <br/>  var returnCase = order.getReturnCase(returnDetails.returnCaseNumber);
   <br/>  var newReturn = returnCase.createReturn(returnNumber);
   <br/> return newReturn;
   <br/>}</code>

 <h5>Hook <a href="class_dw_order_hooks_ReturnHooks.html#dw_order_hooks_ReturnHooks_extensionPointAddReturnItem_DetailAnchor">extensionPointAddReturnItem</a></h5>
 This call delegates the creation of individual <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s
 to a custom script, passing the <a href="class_dw_order_Order.html">Order</a>, returnNumber,
 returnCaseItemId and return-item-details. Typically the script will access
 the <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a> from the order and create a new
 <a href="class_dw_order_ReturnItem.html">ReturnItem</a> for it. <br/>
 <code>exports.addReturnItem = function (retrn:Return, returnItemDetails) {
   <br/> var returnCaseItem = order.getReturnCaseItem(returnCaseItemId);
   <br/> var item = returnCaseItem.createReturnItem(returnNr);
   <br/></code>

 <h5>Hook <a href="class_dw_order_hooks_ReturnHooks.html#dw_order_hooks_ReturnHooks_extensionPointChangeStatus_DetailAnchor">extensionPointChangeStatus</a></h5>
 This call delegates the update of the return-status to a custom script,
 passing the <a href="class_dw_order_Order.html">Order</a>, returnNumber and new status. The custom
 script is responsible for setting the status and taking any other actions
 necessary, including the possibility of creating a credit invoice: <br/>
 <code>changeStatus = function (retrn:Return, status) {
   <br/> retrn.status=status;
   <br/></code>

 <h5>Hook <a href="class_dw_order_hooks_ReturnHooks.html#dw_order_hooks_ReturnHooks_extensionPointAfterStatusChange_DetailAnchor">extensionPointAfterStatusChange</a></h5>
 This call delegates the update of the return-status to a custom script,
 passing the <a href="class_dw_order_Order.html">Order</a>, returnNumber and new status. The custom
 script is responsible for setting the status and taking any other actions
 necessary, including the possibility of creating a credit invoice: <br/>
 <code>changeStatus = function (retrn:Return, status) {
   <br/> retrn.status=status;
   <br/></code>
 * @class
 * @extends Object
 * @abstract
 * @interface
 */
dw.order.hooks.ReturnHooks = function() {};
dw.order.hooks.ReturnHooks.prototype = new Object();

/**
 * The extension point name dw.order.return.addReturnItem.
 * @type String
 * @memberOf dw.order.hooks.ReturnHooks
 * @static
 * @const
 */
dw.order.hooks.ReturnHooks.extensionPointAddReturnItem = '';

/**
 * The extension point name dw.order.return.afterStatusChange.
 * @type String
 * @memberOf dw.order.hooks.ReturnHooks
 * @static
 * @const
 */
dw.order.hooks.ReturnHooks.extensionPointAfterStatusChange = '';

/**
 * The extension point name dw.order.return.changeStatus.
 * @type String
 * @memberOf dw.order.hooks.ReturnHooks
 * @static
 * @const
 */
dw.order.hooks.ReturnHooks.extensionPointChangeStatus = '';

/**
 * The extension point name dw.order.return.createReturn.
 * @type String
 * @memberOf dw.order.hooks.ReturnHooks
 * @static
 * @const
 */
dw.order.hooks.ReturnHooks.extensionPointCreateReturn = '';

/**
 * The extension point name dw.order.return.notifyStatusChange.
 * @type String
 * @memberOf dw.order.hooks.ReturnHooks
 * @static
 * @const
 */
dw.order.hooks.ReturnHooks.extensionPointNotifyStatusChange = '';

/**
 * Prefix used for extension point names: dw.order.return.
 * @type String
 * @memberOf dw.order.hooks.ReturnHooks
 * @static
 * @const
 */
dw.order.hooks.ReturnHooks.prefix = '';

/**
 * The hook provides customization in the process of assigning the returned
 amount, quantity etc. Here it is possible to refund differently based on
 the return reason code for example. Also one could correct the inventory
 based on the return information. Utilize
 <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_createReturnItem_String_DetailAnchor">ReturnCaseItem.createReturnItem(String)</a> to create a new
 <a href="class_dw_order_ReturnItem.html">ReturnItem</a>.
 * @memberOf dw.order.hooks.ReturnHooks
 * @param {dw.order.Return} retrn - the return for which an return item should be created
 * @param {com.demandware.wapi.document.data.order.ReturnItem} inputData - the return item
 * @return {dw.system.Status} <ul>          <li>Status.OK return item is successfully added</li>          <li>Status.ERROR return item addition failed.</li>          </ul>
 * @abstract
 */
dw.order.hooks.ReturnHooks.prototype.addReturnItem = function(retrn, inputData) {};

/**
 * Called after method <a href="class_dw_order_hooks_ReturnHooks.html#dw_order_hooks_ReturnHooks_changeStatus_Return_ReturnWO_DetailAnchor">changeStatus(Return, ReturnWO)</a> returns
 Status.OK. The call is made in a separate database transaction allowing
 the script implementation to make an independent remote call if desired.
 * @memberOf dw.order.hooks.ReturnHooks
 * @param {dw.order.Return} retrn - the return
 * @return {dw.system.Status} <ul>          <li>Status.OK status successful</li>          <li>Status.ERROR on failure</li>          </ul>
 * @abstract
 */
dw.order.hooks.ReturnHooks.prototype.afterStatusChange = function(retrn) {};

/**
 * Responsible to change the status of a <a href="class_dw_order_Return.html">Return</a>: the custom
 script is responsible for setting the new status using
 <a href="class_dw_order_Return.html#dw_order_Return_setStatus_String_DetailAnchor">Return.setStatus(String)</a>.

 <p/>
 The invoice handling should be implemented here using
 <a href="class_dw_order_Return.html#dw_order_Return_createInvoice_String_DetailAnchor">Return.createInvoice(String)</a> or
 <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_createInvoice_String_DetailAnchor">ReturnCase.createInvoice(String)</a>. For example create an
 <a href="class_dw_order_Invoice.html">Invoice</a> for a <a href="class_dw_order_Return.html">Return</a> moving to status
 <a href="class_dw_order_Return.html#dw_order_Return_STATUS_COMPLETED_DetailAnchor">Return.STATUS_COMPLETED</a>.
 * @memberOf dw.order.hooks.ReturnHooks
 * @param {dw.order.Return} retrn - the return which status should change
 * @param {com.demandware.wapi.document.data.order.Return} inputData - the data in which the new status is included
 * @return {dw.system.Status} <ul>          <li>Status.OK status successfully changed</li> <li>Status.ERROR          status not changed.</li>          </ul>
 * @abstract
 */
dw.order.hooks.ReturnHooks.prototype.changeStatus = function(retrn, inputData) {};

/**
 * This hook is responsible for creating a new <a href="class_dw_order_Return.html">Return</a>,
 based on a <a href="class_dw_order_ReturnCase.html">ReturnCase</a>. 2 basic workflows are supported:
 <ul>
 <li>
 On-the-fly return: create the parent <a href="class_dw_order_ReturnCase.html">ReturnCase</a> using
 <a href="class_dw_order_Order.html#dw_order_Order_createReturnCase_String_boolean_DetailAnchor">Order.createReturnCase(String, boolean)</a>.</li>
 <li>
 Return-merchandise-authorization (RMA) workflow: resolve an existing
 <a href="class_dw_order_ReturnCase.html">ReturnCase</a> using
 <a href="class_dw_order_Order.html#dw_order_Order_getReturnCase_String_DetailAnchor">Order.getReturnCase(String)</a>.</li>
 </ul>
 In both cases use <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_createReturn_String_DetailAnchor"> this
 method</a> to create the <a href="class_dw_order_Return.html">Return</a> based on the inputData.
 <p/>
 Additional functionality like creating history entry, handling the return
 fees or the shipping cost credit can be implemented in the hook after the
 <a href="class_dw_order_Return.html">Return</a> is created.
 * @memberOf dw.order.hooks.ReturnHooks
 * @param {com.demandware.wapi.document.data.order.Return} inputData - the return
 * @return {dw.order.Return} the created return
 * @abstract
 */
dw.order.hooks.ReturnHooks.prototype.createReturn = function(inputData) {};

/**
 * Called after method <a href="class_dw_order_hooks_ReturnHooks.html#dw_order_hooks_ReturnHooks_changeStatus_Return_ReturnWO_DetailAnchor">changeStatus(Return, ReturnWO)</a> returns
 Status.OK (and after method <a href="class_dw_order_hooks_ReturnHooks.html#dw_order_hooks_ReturnHooks_afterStatusChange_Return_DetailAnchor">afterStatusChange(Return)</a>)
 to inform of a successful status change. The call is made outside any
 database transaction. This is the best hook in which to send customer
 notifications as the status change has already been successfully written
 to the database
 * @memberOf dw.order.hooks.ReturnHooks
 * @param {dw.order.Return} retrn - the return
 * @return {dw.system.Status} <ul>          <li>Status.OK status successful</li>          <li>Status.ERROR on failure</li>          </ul>
 * @abstract
 */
dw.order.hooks.ReturnHooks.prototype.notifyStatusChange = function(retrn) {};

/**
 * This interface represents all script hooks that can be registered around
 shipping order lifecycle. It contains the extension points (hook names), and
 the functions that are called by each extension point. A function must be
 defined inside a JavaScript source and must be exported. The script with the
 exported hook function must be located inside a site cartridge. Inside the
 site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 "hooks": "./hooks.json"
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>

 <pre>
 "hooks": [
      {"name": "dw.order.shippingorder.updateShippingOrderItem", "script": "./shippingOrderUpdate.ds"},
 ]
 </pre>

 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the
 exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @deprecated Support for Shipping Orders and related objects will be removed in an upcoming release
 * @abstract
 * @interface
 */
dw.order.hooks.ShippingOrderHooks = function() {};
dw.order.hooks.ShippingOrderHooks.prototype = new Object();

/**
 * The extension point name dw.order.shippingorder.afterStatusChange.
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointAfterStatusChange = '';

/**
 * The extension point name dw.order.shippingorder.changeStatus.
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointChangeStatus = '';

/**
 * The extension point name dw.order.shippingorder.createShippingOrders.
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointCreateShippingOrders = '';

/**
 * The extension point name dw.order.shippingorder.notifyStatusChange.
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointNotifyStatusChange = '';

/**
 * The extension point name
 dw.order.shippingorder.prepareCreateShippingOrders.
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointPrepareCreateShippingOrders = '';

/**
 * The extension point name dw.order.shippingorder.resolveShippingOrder .
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointResolveShippingOrder = '';

/**
 * The extension point name dw.order.shippingorder.setShippingOrderCancelled.
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointShippingOrderCancelled = '';

/**
 * The extension point name dw.order.shippingorder.setShippingOrderShipped.
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointShippingOrderShipped = '';

/**
 * The extension point name dw.order.shippingorder.setShippingOrderWarehouse.
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointShippingOrderWarehouse = '';

/**
 * The extension point name dw.order.shippingorder.updateShippingOrderItem.
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.extensionPointUpdateShippingOrderItem = '';

/**
 * Prefix used for extension names: dw.order.shippingorder
 * @type String
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @static
 * @const
 */
dw.order.hooks.ShippingOrderHooks.prefix = '';

/**
 * After Status change hook.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointAfterStatusChange_DetailAnchor">extensionPointAfterStatusChange</a>.

 The implementation of this hook is optional. If defined the hook is
 called after <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointChangeStatus_DetailAnchor">extensionPointChangeStatus</a> or respectively after
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointShippingOrderShipped_DetailAnchor">extensionPointShippingOrderShipped</a>,
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointShippingOrderCancelled_DetailAnchor">extensionPointShippingOrderCancelled</a> or
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointShippingOrderWarehouse_DetailAnchor">extensionPointShippingOrderWarehouse</a>

 Runs inside of a transaction.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {dw.order.ShippingOrder} shippingOrder - the shipping order to be updated
 * @return {dw.system.Status} the resulting status
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.afterStatusChange = function(shippingOrder) {};

/**
 * Change the status of a shipping order.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointChangeStatus_DetailAnchor">extensionPointChangeStatus</a>.

 Runs inside a transaction together with the hooks
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointResolveShippingOrder_DetailAnchor">extensionPointResolveShippingOrder</a>
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointUpdateShippingOrderItem_DetailAnchor">extensionPointUpdateShippingOrderItem</a>.
 <p>
 Runs after the iteration over the input's items collection as the last
 step in this transaction. The implementation of this hook is mandatory.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {dw.order.ShippingOrder} shippingOrder - the shipping order to be updated
 * @param {com.demandware.wapi.document.data.order.ShippingOrder} updateData - the input data
 * @return {dw.system.Status} the resulting status
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.changeStatus = function(shippingOrder, updateData) {};

/**
 * Called during shipping order creation for an order.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointCreateShippingOrders_DetailAnchor">extensionPointCreateShippingOrders</a>. It is responsible for
 creating shipping orders and its items for the order. Preparations for
 shipping order creation can be done before in hook
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointPrepareCreateShippingOrders_DetailAnchor">extensionPointPrepareCreateShippingOrders</a>.

 Runs inside of a transaction. The implementation of this hook is
 mandatory.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {dw.order.Order} order - the order to create shipping orders for
 * @return {dw.system.Status} the resulting status
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.createShippingOrders = function(order) {};

/**
 * Notify Status change hook.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointNotifyStatusChange_DetailAnchor">extensionPointNotifyStatusChange</a>.

 The implementation of this hook is optional. If defined the hook is
 called after <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointAfterStatusChange_DetailAnchor">extensionPointAfterStatusChange</a> as the last step
 in the shipping order update process.

 Runs outside of a transaction.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {dw.order.ShippingOrder} shippingOrder - the shipping order to be updated
 * @return {dw.system.Status} the resulting status
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.notifyStatusChange = function(shippingOrder) {};

/**
 * Called before shipping order creation for an order takes place. Typically
 the hook is used to check the payment authorization status of the order.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointPrepareCreateShippingOrders_DetailAnchor">extensionPointPrepareCreateShippingOrders</a>.

 Runs inside its own transaction. The value of the return status is used
 to control whether hook <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_createShippingOrders_Order_DetailAnchor">createShippingOrders(Order)</a> is called
 for the order or not. The implementation of this hook is mandatory.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {dw.order.Order} order - the order to create shipping orders for
 * @return {dw.system.Status} <ul>          <li>Status.OK successful preparation - continue with shipping          order creation for this order.</li> <li>Status.ERROR failed          preparation - skip shipping order creation for this order.</li>          </ul>
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.prepareCreateShippingOrders = function(order) {};

/**
 * Resolve the shipping order. Will be called as first step of the update.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointResolveShippingOrder_DetailAnchor">extensionPointResolveShippingOrder</a>.

 Runs inside a transaction together with the hooks

 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointUpdateShippingOrderItem_DetailAnchor">extensionPointUpdateShippingOrderItem</a>
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointChangeStatus_DetailAnchor">extensionPointChangeStatus</a>. The implementation of this hook is
 mandatory.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {com.demandware.wapi.document.data.order.ShippingOrder} updateData - the input data
 * @return {dw.order.ShippingOrder} the shipping order to update
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.resolveShippingOrder = function(updateData) {};

/**
 * Change the status of a shipping order to cancelled.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointShippingOrderCancelled_DetailAnchor">extensionPointShippingOrderCancelled</a>.

 This is an optional hook that can be implemented to have full control
 over status change to destination status Cancelled. The following hooks
 will be skipped if an implementation for this hook is registered:
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointResolveShippingOrder_DetailAnchor">extensionPointResolveShippingOrder</a>,
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointUpdateShippingOrderItem_DetailAnchor">extensionPointUpdateShippingOrderItem</a>,
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointChangeStatus_DetailAnchor">extensionPointChangeStatus</a>.

 Runs inside of a transaction.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {com.demandware.wapi.document.data.order.ShippingOrder} updateData - the input data
 * @return {dw.system.Status} the resulting status
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.setShippingOrderCancelled = function(updateData) {};

/**
 * Change the status of a shipping order to shipped.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointShippingOrderShipped_DetailAnchor">extensionPointShippingOrderShipped</a>.

 This is an optional hook that can be implemented to have full control
 over status change to destination status Shipped. The following hooks
 will be skipped if an implementation for this hook is registered:
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointResolveShippingOrder_DetailAnchor">extensionPointResolveShippingOrder</a>
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointUpdateShippingOrderItem_DetailAnchor">extensionPointUpdateShippingOrderItem</a>,
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointChangeStatus_DetailAnchor">extensionPointChangeStatus</a>.

 Runs inside of a transaction.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {com.demandware.wapi.document.data.order.ShippingOrder} updateData - the input data
 * @return {dw.system.Status} the resulting status
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.setShippingOrderShipped = function(updateData) {};

/**
 * Change the status of a shipping order to warehouse.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointShippingOrderWarehouse_DetailAnchor">extensionPointShippingOrderWarehouse</a>.

 This is an optional hook that can be implemented to have full control
 over status change to destination status Warehouse. The following hooks
 will be skipped if an implementation for this hook is registered:
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointResolveShippingOrder_DetailAnchor">extensionPointResolveShippingOrder</a>,
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointUpdateShippingOrderItem_DetailAnchor">extensionPointUpdateShippingOrderItem</a>,
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointChangeStatus_DetailAnchor">extensionPointChangeStatus</a>.

 Runs inside of a transaction.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {com.demandware.wapi.document.data.order.ShippingOrder} updateData - the input data
 * @return {dw.system.Status} the resulting status
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.setShippingOrderWarehouse = function(updateData) {};

/**
 * Updates the status of a shipping order item.
 <p>
 The function is called by extension point
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointUpdateShippingOrderItem_DetailAnchor">extensionPointUpdateShippingOrderItem</a>.

 Runs inside a transaction together with the hooks

 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointResolveShippingOrder_DetailAnchor">extensionPointResolveShippingOrder</a>
 <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointChangeStatus_DetailAnchor">extensionPointChangeStatus</a>. The implementation of this hook is
 mandatory.
 * @memberOf dw.order.hooks.ShippingOrderHooks
 * @param {dw.order.ShippingOrder} shippingOrder - the shipping order
 * @param {com.demandware.wapi.document.data.order.ShippingOrderItem} updateItem - the input data
 * @return {dw.system.Status} the resulting status
 * @abstract
 */
dw.order.hooks.ShippingOrderHooks.prototype.updateShippingOrderItem = function(shippingOrder, updateItem) {};

/**
 * The Invoice can be a debit or credit invoice, and is created
 from custom scripts using one of the methods
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_createInvoice_String_DetailAnchor">ShippingOrder.createInvoice(String)</a>,
 <a href="class_dw_order_Appeasement.html#dw_order_Appeasement_createInvoice_String_DetailAnchor">Appeasement.createInvoice(String)</a>,
 <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_createInvoice_String_DetailAnchor">ReturnCase.createInvoice(String)</a> or
 <a href="class_dw_order_Return.html#dw_order_Return_createInvoice_String_DetailAnchor">Return.createInvoice(String)</a>.
 * @class
 * @extends dw.order.AbstractItemCtnr
 */
dw.order.Invoice = function() {};
dw.order.Invoice.prototype = new dw.order.AbstractItemCtnr();

/**
 * Sorting by creation date. Use with method <a href="class_dw_order_Invoice.html#dw_order_Invoice_getPaymentTransactions_DetailAnchor">getPaymentTransactions()</a> as an argument to
 method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.ORDERBY_CREATION_DATE = {};

/**
 * Sorting by item id. Use with method <a href="class_dw_order_Invoice.html#dw_order_Invoice_getItems_DetailAnchor">getItems()</a> as an argument to
 method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.ORDERBY_ITEMID = {};

/**
 * Sorting by the position of the related oder item. Use with method
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_getItems_DetailAnchor">getItems()</a> as an argument to method
 <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.ORDERBY_ITEMPOSITION = {};

/**
 * Reverse orders. Use as an argument
 to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.ORDERBY_REVERSE = {};

/**
 * Unsorted , as it is. Use with method <a href="class_dw_order_Invoice.html#dw_order_Invoice_getItems_DetailAnchor">getItems()</a> as an argument
 to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.ORDERBY_UNSORTED = {};

/**
 * Selects the capture transactions. Use with method <a href="class_dw_order_Invoice.html#dw_order_Invoice_getPaymentTransactions_DetailAnchor">getPaymentTransactions()</a> as an
 argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.QUALIFIER_CAPTURE = {};

/**
 * Selects the product items. Use with method <a href="class_dw_order_Invoice.html#dw_order_Invoice_getItems_DetailAnchor">getItems()</a> as an
 argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.QUALIFIER_PRODUCTITEMS = {};

/**
 * Selects the refund transactions. Use with method <a href="class_dw_order_Invoice.html#dw_order_Invoice_getPaymentTransactions_DetailAnchor">getPaymentTransactions()</a> as an
 argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.QUALIFIER_REFUND = {};

/**
 * Selects for the service items. Use with method <a href="class_dw_order_Invoice.html#dw_order_Invoice_getItems_DetailAnchor">getItems()</a> as an
 argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.QUALIFIER_SERVICEITEMS = {};

/**
 * Constant for Invoice Status Failed.<br>
 The invoice handling failed.
 * @type String
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.STATUS_FAILED = '';

/**
 * Constant for Invoice Status Manual.<br>
 The invoice is not paid but will <b>not</b> be handled automatically.<br>
 A manual invoice handling (capture or refund) is necessary.
 * @type String
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.STATUS_MANUAL = '';

/**
 * Constant for Invoice Status Not Paid.<br>
 The invoice is not paid and will be handled automatically.
 * @type String
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.STATUS_NOT_PAID = '';

/**
 * Constant for Invoice Status Paid.<br>
 The invoice was successfully paid.
 * @type String
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.STATUS_PAID = '';

/**
 * Constant for Invoice Type Appeasement.<br>
 The invoice was created for an appeasement.<br>
 The invoice amount needs to be refunded.
 * @type String
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.TYPE_APPEASEMENT = '';

/**
 * Constant for Invoice Type Return.<br>
 The invoice was created for a return.<br>
 The invoice amount needs to be refunded.
 * @type String
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.TYPE_RETURN = '';

/**
 * Constant for Invoice Type Return Case.<br>
 The invoice was created for a return case.<br>
 The invoice amount needs to be refunded.
 * @type String
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.TYPE_RETURN_CASE = '';

/**
 * Constant for Invoice Type Shipping.<br>
 The invoice was created for a shipping order.<br>
 The invoice amount needs to be captured.
 * @type String
 * @memberOf dw.order.Invoice
 * @static
 * @const
 */
dw.order.Invoice.TYPE_SHIPPING = '';

/**
 * <p>
 The invoice will be accounted.
 </p>
 <p>
 It will be captured in case of a shipping invoice and it will be refunded in
 case of an appeasement, return case or return invoice.<br/>
 </p>
 <p>
 The accounting will be handled in the payment hooks
 <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_capture_Invoice_DetailAnchor">PaymentHooks.capture(Invoice)</a> or
 <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_refund_Invoice_DetailAnchor">PaymentHooks.refund(Invoice)</a>. The implementing script could add
 payment transactions to the invoice. The accompanying business logic will
 set the status to <code>PAID</code> or <code>FAILED</code>.
 </p>
 <p>
 The accounting will fail when the invoice state is different to
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">STATUS_NOT_PAID</a> or <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_FAILED_DetailAnchor">STATUS_FAILED</a>.
 </p>
 <p>
 The method implements its own transaction handling. The method must not
 be called inside a transaction.
 </p>
 * @memberOf dw.order.Invoice
 * @return {Boolean} <code>true</code> when the accounting was successful, otherwise          <code>false</code>.
 */
dw.order.Invoice.prototype.account = function() {};

/**
 * Calling this method registers an amount captured for a given
 order payment instrument. The authorization for the
 capture is associated with the payment transaction belonging to the
 instrument. Calling this method allows the Invoice, the
 <a href="class_dw_order_OrderPaymentInstrument.html">OrderPaymentInstrument</a> and the <a href="class_dw_order_Order.html">Order</a> to
 return their captured amount as a sum calculated on the fly. The method
 may be called multiple times for the same instrument (multiple capture
 for one authorization) or for different instruments (invoice settlement
 using multiple payments).
 * @memberOf dw.order.Invoice
 * @param {dw.order.OrderPaymentInstrument} instrument - the order payment instrument
 * @param {dw.value.Money} capturedAmount - amount to register as captured
 * @return {dw.order.PaymentTransaction} the created capture transaction
 */
dw.order.Invoice.prototype.addCaptureTransaction = function(instrument, capturedAmount) {};

/**
 * Calling this method registers an amount refunded for a given
 order payment instrument. Calling this method allows the
 Invoice, the <a href="class_dw_order_OrderPaymentInstrument.html">OrderPaymentInstrument</a> and
 the <a href="class_dw_order_Order.html">Order</a> to return their refunded amount as a sum
 calculated on the fly. The method may be called multiple times for the
 same instrument (multiple refunds of one payment) or for different
 instruments (invoice settlement using multiple payments).
 * @memberOf dw.order.Invoice
 * @param {dw.order.OrderPaymentInstrument} instrument - the order payment instrument
 * @param {dw.value.Money} refundedAmount - amount to register as refunded
 * @return {dw.order.PaymentTransaction} the created refund transaction
 */
dw.order.Invoice.prototype.addRefundTransaction = function(instrument, refundedAmount) {};

/**
 * Returns the sum of the captured amounts. The captured amounts are
 calculated on the fly.<br>
 Associate a payment capture for a <a href="class_dw_order_OrderPaymentInstrument.html">OrderPaymentInstrument</a>
 with an Invoice using
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_addCaptureTransaction_OrderPaymentInstrument_Money_DetailAnchor">addCaptureTransaction(OrderPaymentInstrument, Money)</a>.
 * @memberOf dw.order.Invoice
 * @return {dw.value.Money} sum of captured amounts
 */
dw.order.Invoice.prototype.getCapturedAmount = function() {};

/**
 * Returns the invoice number.
 * @memberOf dw.order.Invoice
 * @return {String} the invoice number
 */
dw.order.Invoice.prototype.getInvoiceNumber = function() {};

/**
 * Access the collection of <a href="class_dw_order_InvoiceItem.html">InvoiceItem</a>s.
 <p/>
 This <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> can be sorted / filtered using:
 <ul>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_ORDERBY_ITEMID_DetailAnchor">ORDERBY_ITEMID</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_ORDERBY_ITEMPOSITION_DetailAnchor">ORDERBY_ITEMPOSITION</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_ORDERBY_UNSORTED_DetailAnchor">ORDERBY_UNSORTED</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_QUALIFIER_PRODUCTITEMS_DetailAnchor">QUALIFIER_PRODUCTITEMS</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_QUALIFIER_SERVICEITEMS_DetailAnchor">QUALIFIER_SERVICEITEMS</a>
 </ul>
 * @memberOf dw.order.Invoice
 * @return {dw.util.FilteringCollection} the invoice items
 */
dw.order.Invoice.prototype.getItems = function() {};

/**
 * Returns the payment transactions belonging to this Invoice.
 <p/>
 This <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> can be sorted / filtered using:
 <ul>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_ORDERBY_CREATION_DATE_DetailAnchor">ORDERBY_CREATION_DATE</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_ORDERBY_UNSORTED_DetailAnchor">ORDERBY_UNSORTED</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_QUALIFIER_CAPTURE_DetailAnchor">QUALIFIER_CAPTURE</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_QUALIFIER_REFUND_DetailAnchor">QUALIFIER_REFUND</a>
 </ul>
 * @memberOf dw.order.Invoice
 * @return {dw.util.FilteringCollection} the payment transactions.
 * @see <a href="class_dw_order_PaymentTransaction.html">PaymentTransaction</a>
 */
dw.order.Invoice.prototype.getPaymentTransactions = function() {};

/**
 * Returns the sum of the refunded amounts. The refunded amounts are
 calculated on the fly.<br>
 Associate a payment capture for a <a href="class_dw_order_OrderPaymentInstrument.html">OrderPaymentInstrument</a>
 with an Invoice using
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_addRefundTransaction_OrderPaymentInstrument_Money_DetailAnchor">addRefundTransaction(OrderPaymentInstrument, Money)</a>.
 * @memberOf dw.order.Invoice
 * @return {dw.value.Money} sum of refunded amounts
 */
dw.order.Invoice.prototype.getRefundedAmount = function() {};

/**
 * Returns the invoice status.<br>
 The possible values are <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">STATUS_NOT_PAID</a>, <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_MANUAL_DetailAnchor">STATUS_MANUAL</a>,
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_PAID_DetailAnchor">STATUS_PAID</a>, <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_FAILED_DetailAnchor">STATUS_FAILED</a>.
 * @memberOf dw.order.Invoice
 * @return {dw.value.EnumValue} the invoice status
 */
dw.order.Invoice.prototype.getStatus = function() {};

/**
 * Returns the invoice type.<br>
 The possible values are <a href="class_dw_order_Invoice.html#dw_order_Invoice_TYPE_SHIPPING_DetailAnchor">TYPE_SHIPPING</a>, <a href="class_dw_order_Invoice.html#dw_order_Invoice_TYPE_RETURN_DetailAnchor">TYPE_RETURN</a>,
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_TYPE_RETURN_CASE_DetailAnchor">TYPE_RETURN_CASE</a>, <a href="class_dw_order_Invoice.html#dw_order_Invoice_TYPE_APPEASEMENT_DetailAnchor">TYPE_APPEASEMENT</a>.
 * @memberOf dw.order.Invoice
 * @return {dw.value.EnumValue} the invoice type
 */
dw.order.Invoice.prototype.getType = function() {};

/**
 * Sets the invoice status.<br>
 The possible values are <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">STATUS_NOT_PAID</a>, <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_MANUAL_DetailAnchor">STATUS_MANUAL</a>,
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_PAID_DetailAnchor">STATUS_PAID</a>, <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_FAILED_DetailAnchor">STATUS_FAILED</a>.
 * @memberOf dw.order.Invoice
 * @param {String} status - the invoice status to set
 */
dw.order.Invoice.prototype.setStatus = function(status) {};

/**
 * Represents a specific item in an <a href="class_dw_order_Invoice.html">Invoice</a>. Invoice items are added to the invoice
 on its creation, each item references exactly one order-item.
 * @class
 * @extends dw.order.AbstractItem
 */
dw.order.InvoiceItem = function() {};
dw.order.InvoiceItem.prototype = new dw.order.AbstractItem();

/**
 * Price of a single unit before discount application.
 * @memberOf dw.order.InvoiceItem
 * @return {dw.value.Money} Price of a single unit before discount application.
 */
dw.order.InvoiceItem.prototype.getBasePrice = function() {};

/**
 * Returns the captured amount for this item.
 * @memberOf dw.order.InvoiceItem
 * @return {dw.value.Money} the captured amount for this item
 */
dw.order.InvoiceItem.prototype.getCapturedAmount = function() {};

/**
 * Returns the number of the invoice to which this item belongs.
 * @memberOf dw.order.InvoiceItem
 * @return {String} the number of the invoice to which this item belongs
 */
dw.order.InvoiceItem.prototype.getInvoiceNumber = function() {};

/**
 * Returns null or the parent item.
 * @memberOf dw.order.InvoiceItem
 * @return {dw.order.InvoiceItem} null or the parent item.
 */
dw.order.InvoiceItem.prototype.getParentItem = function() {};

/**
 * Returns the quantity of this item.
 * @memberOf dw.order.InvoiceItem
 * @return {dw.value.Quantity} quantity of this item
 */
dw.order.InvoiceItem.prototype.getQuantity = function() {};

/**
 * Returns the refunded amount for this item.
 * @memberOf dw.order.InvoiceItem
 * @return {dw.value.Money} the refunded amount for this item
 */
dw.order.InvoiceItem.prototype.getRefundedAmount = function() {};

/**
 * Updates the captured amount for this item.
 * @memberOf dw.order.InvoiceItem
 * @param {dw.value.Money} capturedAmount - the captured amount for this item
 */
dw.order.InvoiceItem.prototype.setCapturedAmount = function(capturedAmount) {};

/**
 * Set a parent item. The parent item must belong to the same
 <a href="class_dw_order_Invoice.html">Invoice</a>. An infinite parent-child loop is disallowed
 as is a parent-child depth greater than 10. Setting a parent item
 indicates a dependency of the child item on the parent item, and can be
 used to form a parallel structure to that accessed using
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getParent_DetailAnchor">ProductLineItem.getParent()</a>.
 * @memberOf dw.order.InvoiceItem
 * @param {dw.order.InvoiceItem} parentItem - The parent item, null is allowed
 */
dw.order.InvoiceItem.prototype.setParentItem = function(parentItem) {};

/**
 * Updates the refunded amount for this item.
 * @memberOf dw.order.InvoiceItem
 * @param {dw.value.Money} refundedAmount - the refunded amount for this item
 */
dw.order.InvoiceItem.prototype.setRefundedAmount = function(refundedAmount) {};

/**
 * Returns the base price for the line item, which is the
 price of the unit before applying adjustments, in the purchase
 currency. The base price may be net or gross of tax depending
 on the configured taxation policy.
 * @memberOf dw.order.LineItem
 * @return {dw.value.Money} the base price for the line item.
 */
dw.order.LineItem.prototype.getBasePrice = function() {};

/**
 * Returns the gross price for the line item, which is the
 price of the unit before applying adjustments, in the purchase
 currency, including tax.
 * @memberOf dw.order.LineItem
 * @return {dw.value.Money} the value of the gross price.
 */
dw.order.LineItem.prototype.getGrossPrice = function() {};

/**
 * Returns the line item ctnr of the line item.
 * @memberOf dw.order.LineItem
 * @return {dw.order.LineItemCtnr} Line item ctnr of the line item
 */
dw.order.LineItem.prototype.getLineItemCtnr = function() {};

/**
 * Returns the display text for the line item.
 * @memberOf dw.order.LineItem
 * @return {String} the display text.
 */
dw.order.LineItem.prototype.getLineItemText = function() {};

/**
 * Returns the net price for the line item, which is the
 price of the
 unit before applying adjustments, in the purchase currency,
 excluding tax.
 * @memberOf dw.order.LineItem
 * @return {dw.value.Money} the value for the net price.
 */
dw.order.LineItem.prototype.getNetPrice = function() {};

/**
 * Get the price of the line item. If the line item is based on net pricing
 then the net price is returned. If the line item is based on gross pricing
 then the gross price is returned.
 * @memberOf dw.order.LineItem
 * @return {dw.value.Money} either the net or the gross price
 */
dw.order.LineItem.prototype.getPrice = function() {};

/**
 * Return the price amount for the line item. Same as getPrice().getValue().
 * @memberOf dw.order.LineItem
 * @return {Number} the price for the line item
 */
dw.order.LineItem.prototype.getPriceValue = function() {};

/**
 * Returns the tax for the line item, which is the
 tax of the unit before applying adjustments,
 in the purchase currency.
 * @memberOf dw.order.LineItem
 * @return {dw.value.Money} the tax for the line item.
 */
dw.order.LineItem.prototype.getTax = function() {};

/**
 * Get the price used to calculate the tax for this line item.
 * @memberOf dw.order.LineItem
 * @return {dw.value.Money} The tax basis used to calculate tax for this line item, or          Money.NOT_AVAILABLE if tax has not been set for this line item          yet.
 */
dw.order.LineItem.prototype.getTaxBasis = function() {};

/**
 * Returns the tax class ID for the line item or null
 if no tax class ID is associated with the line item.
 In the case where the tax class ID is null, you
 should use the default tax class ID.
 * @memberOf dw.order.LineItem
 * @return {String} the tax class ID for the line item or null  if no tax class ID is associated with the line item.
 * @see <a href="class_dw_order_TaxMgr.html#dw_order_TaxMgr_getDefaultTaxClassID_DetailAnchor">TaxMgr.getDefaultTaxClassID()</a>
 */
dw.order.LineItem.prototype.getTaxClassID = function() {};

/**
 * Returns the tax rate, which is the decimal tax rate to be applied
 to the product represented by this line item. A value of 0.175
 represents a percentage of 17.5%.
 * @memberOf dw.order.LineItem
 * @return {Number} the value of the tax rate.
 */
dw.order.LineItem.prototype.getTaxRate = function() {};

/**
 * Sets the base price for the line item, which is the
 price of the unit before applying adjustments, in the purchase
 currency. The base price may be net or gross of tax depending
 on the configured taxation policy.
 * @memberOf dw.order.LineItem
 * @param {dw.value.Money} aValue - the new value of the base price.
 * @deprecated Use <a href="class_dw_order_LineItem.html#dw_order_LineItem_updatePrice_Money_DetailAnchor">updatePrice(Money)</a> instead.
 */
dw.order.LineItem.prototype.setBasePrice = function(aValue) {};

/**
 * Sets the gross price for the line item, which is the
 Price of the unit before applying adjustments, in the purchase
 currency, including tax.
 * @memberOf dw.order.LineItem
 * @param {dw.value.Money} aValue - the new value of the attribute
 * @deprecated Use <a href="class_dw_order_LineItem.html#dw_order_LineItem_updatePrice_Money_DetailAnchor">updatePrice(Money)</a> which sets the base price and
 also the gross price if the line item is based on gross pricing.
 */
dw.order.LineItem.prototype.setGrossPrice = function(aValue) {};

/**
 * Sets the display text for the line item.
 * @memberOf dw.order.LineItem
 * @param {String} aText - line item text.
 */
dw.order.LineItem.prototype.setLineItemText = function(aText) {};

/**
 * Sets the value for the net price, which is the
 price of the unit before applying adjustments, in the purchase
 currency, excluding tax.
 * @memberOf dw.order.LineItem
 * @param {dw.value.Money} aValue - the new value for the net price
 * @deprecated Use <a href="class_dw_order_LineItem.html#dw_order_LineItem_updatePrice_Money_DetailAnchor">updatePrice(Money)</a> which sets the base price and
 also the net price if the line item is based on net pricing.
 */
dw.order.LineItem.prototype.setNetPrice = function(aValue) {};

/**
 * Sets price attributes of the line item based on the current
 purchase currency and taxation policy. <br/>

 The methods sets the 'basePrice' attribute of the line item.
 Additionally, it sets the 'netPrice' attribute of the line item
 if the current taxation policy is 'net', and the 'grossPrice'
 attribute, if the current taxation policy is 'gross'. <br/>

 If null is specified as value, the price attributes are reset to
 Money.NA.
 * @memberOf dw.order.LineItem
 * @param {Number} value - Price value or null
 */
dw.order.LineItem.prototype.setPriceValue = function(value) {};

/**
 * Sets the value for the tax of the line item, which is the
 the tax of the unit before applying adjustments, in the purchase currency.
 * @memberOf dw.order.LineItem
 * @param {dw.value.Money} aValue - the new value for the tax.
 */
dw.order.LineItem.prototype.setTax = function(aValue) {};

/**
 * Sets the tax class ID for the line item.
 * @memberOf dw.order.LineItem
 * @param {String} aValue - the tax class ID for the line item.
 */
dw.order.LineItem.prototype.setTaxClassID = function(aValue) {};

/**
 * Sets the tax rate, which is the
 decimal tax rate to be applied to the product represented by this
 line item. A value of 0.175 represents a percentage of 17.5%.
 * @memberOf dw.order.LineItem
 * @param {Number} taxRate - the new value for the tax rate.
 */
dw.order.LineItem.prototype.setTaxRate = function(taxRate) {};

/**
 * Updates the price attributes of the line item based
 on the specified price.  The base price is set to the specified
 value.  If the line item is based on net pricing then the net price
 attribute is set.  If the line item is based on  gross pricing then the
 gross price attribute is set.  Whether or not a line item is based
 on net or gross pricing is a site-wide configuration parameter.
 * @memberOf dw.order.LineItem
 * @param {dw.value.Money} price - The price to use when performing the update.  This price               must not be null and must either be equal to NOT_AVAIALBLE               or must have a currency code equal to that of the parent               container.
 * @deprecated Use <a href="class_dw_order_LineItem.html#dw_order_LineItem_setPriceValue_Double_DetailAnchor">setPriceValue(Number)</a> instead.
 */
dw.order.LineItem.prototype.updatePrice = function(price) {};

/**
 * Updates the tax-related attributes of the line item based on the
 specified tax rate and a tax basis determined by the system.
 This method sets the tax basis as an attribute, and is not
 affected by the previous value of this attribute.
 <p/>
 The value used as a basis depends on the type of line item this is and on
 the promotion preferences for the current site. If the "old" tax basis
 rules are used, then the tax basis will simply be equal to
 <a href="class_dw_order_LineItem.html#dw_order_LineItem_getPrice_DetailAnchor">getPrice()</a>. If the "new" tax basis rules used, then the tax
 basis depends upon line item type as follows:

 <ul>
 <li><b>ProductLineItem:</b> basis equals
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getProratedPrice_DetailAnchor">ProductLineItem.getProratedPrice()</a>.</li>
 <li><b>ShippingLineItem:</b> basis equals
 <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_getAdjustedPrice_DetailAnchor">ShippingLineItem.getAdjustedPrice()</a>.</li>
 <li><b>ProductShippingLineItem:</b> basis equals
 <a href="class_dw_order_ProductShippingLineItem.html#dw_order_ProductShippingLineItem_getAdjustedPrice_DetailAnchor">ProductShippingLineItem.getAdjustedPrice()</a>.</li>
 <li><b>PriceAdjustment:</b> basis equals 0.00.</li>
 <li>All other line item types: basis equals <a href="class_dw_order_LineItem.html#dw_order_LineItem_getPrice_DetailAnchor">getPrice()</a>.</li>
 </ul>

 If null is passed as tax rate, tax-related attribute fields are set to
 N/A.
 * @memberOf dw.order.LineItem
 * @param {Number} taxRate - taxRate the tax rate to use or null.
 */
dw.order.LineItem.prototype.updateTax = function(taxRate) {};

/**
 * Updates the tax-related attributes of the line item based on the
 specified tax rate and the passed tax basis. If null is passed as tax
 rate or tax basis, tax-related attribute fields are set to N/A.
 * @memberOf dw.order.LineItem
 * @param {Number} taxRate - the tax rate to use or null.
 * @param {dw.value.Money} taxBasis - the tax basis to use or null.
 */
dw.order.LineItem.prototype.updateTax = function(taxRate, taxBasis) {};

/**
 * constant for Business Type B2B
 * @type Number
 * @memberOf dw.order.LineItemCtnr
 * @static
 * @const
 */
dw.order.LineItemCtnr.BUSINESS_TYPE_B2B = 0;

/**
 * constant for Business Type B2C
 * @type Number
 * @memberOf dw.order.LineItemCtnr
 * @static
 * @const
 */
dw.order.LineItemCtnr.BUSINESS_TYPE_B2C = 0;

/**
 * constant for Channel Type CallCenter
 * @type Number
 * @memberOf dw.order.LineItemCtnr
 * @static
 * @const
 */
dw.order.LineItemCtnr.CHANNEL_TYPE_CALLCENTER = 0;

/**
 * constant for Channel Type DSS
 * @type Number
 * @memberOf dw.order.LineItemCtnr
 * @static
 * @const
 */
dw.order.LineItemCtnr.CHANNEL_TYPE_DSS = 0;

/**
 * constant for Channel Type Marketplace
 * @type Number
 * @memberOf dw.order.LineItemCtnr
 * @static
 * @const
 */
dw.order.LineItemCtnr.CHANNEL_TYPE_MARKETPLACE = 0;

/**
 * constant for Channel Type Pinterest
 * @type Number
 * @memberOf dw.order.LineItemCtnr
 * @static
 * @const
 */
dw.order.LineItemCtnr.CHANNEL_TYPE_PINTEREST = 0;

/**
 * constant for Channel Type Store
 * @type Number
 * @memberOf dw.order.LineItemCtnr
 * @static
 * @const
 */
dw.order.LineItemCtnr.CHANNEL_TYPE_STORE = 0;

/**
 * constant for Channel Type Storefront
 * @type Number
 * @memberOf dw.order.LineItemCtnr
 * @static
 * @const
 */
dw.order.LineItemCtnr.CHANNEL_TYPE_STOREFRONT = 0;

/**
 * constant for Channel Type Twitter
 * @type Number
 * @memberOf dw.order.LineItemCtnr
 * @static
 * @const
 */
dw.order.LineItemCtnr.CHANNEL_TYPE_TWITTER = 0;

/**
 * Adds a note to the object.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} subject - The subject of the note.
 * @param {String} text - The text of the note.  Must be no more than 4000 characters or an exception is thrown.
 * @return {dw.object.Note} the added note.
 */
dw.order.LineItemCtnr.prototype.addNote = function(subject, text) {};

/**
 * Create a billing address for the LineItemCtnr. A LineItemCtnr (e.g.
 basket) initially has no billing address. This method creates a billing
 address for the LineItemCtnr and replaces an existing billing address.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.order.OrderAddress} The new billing address of the LineItemCtnr.
 */
dw.order.LineItemCtnr.prototype.createBillingAddress = function() {};

/**
 * Creates a product line item in the container based on the passed Product
 and BonusDiscountLineItem. The product must be assigned to the current
 site catalog and must also be a bonus product of the specified
 BonusDiscountLineItem or an exception is thrown. The line item is always
 created in the default shipment. If successful, the operation always
 creates a new ProductLineItem and never simply increments the quantity of
 an existing ProductLineItem. An option model can optionally be specified.
 * @memberOf dw.order.LineItemCtnr
 * @param {dw.order.BonusDiscountLineItem} bonusDiscountLineItem - Line item representing an applied             BonusChoiceDiscount in the LineItemCtnr, must not be null.
 * @param {dw.catalog.Product} product - Product The product to add to the LineItemCtnr. Must not             be null and must be a bonus product of bonusDiscountLineItem.
 * @param {dw.catalog.ProductOptionModel} optionModel - ProductOptionModel or null.
 * @param {dw.order.Shipment} shipment - The shipment to add the bonus product to. If null, the             product is added to the default shipment.
 * @return {dw.order.ProductLineItem}
 */
dw.order.LineItemCtnr.prototype.createBonusProductLineItem = function(bonusDiscountLineItem, product, optionModel, shipment) {};

/**
 * Creates a coupon line item that is not based on the Demandware campaign
 system and associates it with the specified coupon code.
 <p/>
 There may not be any other coupon line item in the container with
 the specific coupon code, otherwise an exception is thrown.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} couponCode - couponCode represented by the coupon line item.
 * @return {dw.order.CouponLineItem} New coupon line item.
 */
dw.order.LineItemCtnr.prototype.createCouponLineItem = function(couponCode) {};

/**
 * Creates an OrderPaymentInstrument representing a Gift Certificate.
 The amount is set on a PaymentTransaction that is accessible via the
 OrderPaymentInstrument. By default, the status of the PaymentTransaction
 is set to CREATE. The PaymentTransaction must be processed at a later
 time.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} giftCertificateCode - the redemption code of the Gift Certificate.
 * @param {dw.value.Money} amount - the amount to set on the PaymentTransaction. If the  OrderPaymentInstrument is actually redeemed, this is the amount that  will be deducted from the Gift Certificate.
 * @return {dw.order.OrderPaymentInstrument} the OrderPaymentInstrument.
 */
dw.order.LineItemCtnr.prototype.createGiftCertificatePaymentInstrument = function(giftCertificateCode, amount) {};

/**
 * Creates a PaymentInstrument using the specified payment method type
 and amount. The amount is set on the PaymentTransaction
 that is attached to the PaymentInstrument.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} paymentMethod - The payment method name. See the  PaymentInstrument class for paymentMethod types.
 * @param {dw.value.Money} amount - The payment amount or null.
 * @return {dw.order.OrderPaymentInstrument} The created OrderPaymentInstrument.
 */
dw.order.LineItemCtnr.prototype.createPaymentInstrument = function(paymentMethod, amount) {};

/**
 * Creates an order price adjustment.<br/>
 The promotion id is mandatory and must not be the ID of any actual
 promotion defined in the Demandware system; otherwise an exception is thrown.
 <br/>
 * @memberOf dw.order.LineItemCtnr
 * @param {String} promotionID - Promotion ID
 * @return {dw.order.PriceAdjustment} The new price adjustment
 */
dw.order.LineItemCtnr.prototype.createPriceAdjustment = function(promotionID) {};

/**
 * Creates an order level price adjustment for a specific discount.<br/>
 The promotion id is mandatory and must not be the ID of any actual
 promotion defined in the Demandware system; otherwise an exception is thrown.
 <br/>
 The possible discount types are suppported: <a href="class_dw_campaign_PercentageDiscount.html">PercentageDiscount</a> and <a href="class_dw_campaign_AmountDiscount.html">AmountDiscount</a>.
 <br/>
 Examples:
 <p/>
 <code>
 var myOrder : dw.order.Order; // assume known<br/>
 var paTenPercent : dw.order.PriceAdjustment = myOrder.createPriceAdjustment("myPromotionID1", new dw.campaign.PercentageDiscount(10));<br/>
 var paReduceBy20 : dw.order.PriceAdjustment = myOrder.createPriceAdjustment("myPromotionID2", new dw.campaign.AmountDiscount(20);<br/>
 </code>
 * @memberOf dw.order.LineItemCtnr
 * @param {String} promotionID - Promotion ID
 * @param {dw.campaign.Discount} discount - The discount
 * @return {dw.order.PriceAdjustment} The new price adjustment
 */
dw.order.LineItemCtnr.prototype.createPriceAdjustment = function(promotionID, discount) {};

/**
 * Creates a new product line item in the container and assigns it to the
 specified shipment. An option model can be specified. <br/>

 Please note that the product must be assigned to the current site catalog.
 * @memberOf dw.order.LineItemCtnr
 * @param {dw.catalog.Product} product - Product
 * @param {dw.catalog.ProductOptionModel} optionModel - ProductOptionModel or null
 * @param {dw.order.Shipment} shipment - Shipment
 * @return {dw.order.ProductLineItem}
 */
dw.order.LineItemCtnr.prototype.createProductLineItem = function(product, optionModel, shipment) {};

/**
 * Creates a new product line item in the container and assigns it to the
 specified shipment. <br/>

 If the specified productID represents a product in the site catalog,
 the method will associate the product line item with that catalog
 product and will copy all order-relevant information, like the
 quantity unit, from the catalog product. <br/>

 If the specified productID does not represent a product of the
 site catalog, the method creates a new product line item and
 initializes it with the specified product ID and quantity.
 If the passed in quantity value is not a positive integer, it
 will be rounded to the nearest positive integer.
 The minimum order quantity and step quantity will be set to 1.0.
 <br/>

 For catalog products, the method follows the configured 'Add2Basket'
 strategy to either increment the quantity of an existing product line item
 or create a new product line item for the same product. For non-catalog
 products, the method creates a new product line item no matter if the
 same product is already in the line item container. If a negative
 quantity is specified, it is automatically changed to 1.0. <br/>
 * @memberOf dw.order.LineItemCtnr
 * @param {String} productID - The product ID.
 * @param {dw.value.Quantity} quantity - The quantity of the product.
 * @param {dw.order.Shipment} shipment - Shipment
 * @return {dw.order.ProductLineItem} thr product line item
 * @deprecated Use <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_createProductLineItem_String_Shipment_DetailAnchor">createProductLineItem(String, Shipment)</a> or  <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_updateQuantity_double_DetailAnchor">ProductLineItem.updateQuantity(Number)</a> instead.
 */
dw.order.LineItemCtnr.prototype.createProductLineItem = function(productID, quantity, shipment) {};

/**
 * Creates a new product line item in the container and assigns it to the
 specified shipment. <br/>

 If the specified productID represents a product in the site catalog,
 the method will associate the product line item with that catalog
 product and will copy all order-relevant information, like the
 quantity unit, from the catalog product. The quantity of the
 product line item is initialized with 1.0 or - if defined - the
 minimum order quantity of the product.<br/>

 If the product represents a product in the site catalog and is an
 option product, the product is added with it's default option values. <br/>

 If the specified productID does not represent a product of the
 site catalog, the method creates a new product line item and
 initializes it with the specified product ID and with a
 quantity, minimum order quantity, and step quantity value
 of 1.0.<br/>
 * @memberOf dw.order.LineItemCtnr
 * @param {String} productID - The product ID.
 * @param {dw.order.Shipment} shipment - Shipment
 * @return {dw.order.ProductLineItem} The new product line item
 */
dw.order.LineItemCtnr.prototype.createProductLineItem = function(productID, shipment) {};

/**
 * Creates a standard shipment for the line item container. The specified ID
 must not yet be in use for another shipment of this line item container.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} id - ID of the shipment.
 * @return {dw.order.Shipment}
 */
dw.order.LineItemCtnr.prototype.createShipment = function(id) {};

/**
 * Creates a shipping price adjustment to be applied to the container. <br/>

 The promotion ID is mandatory and must not be the ID of any actual
 promotion defined in the Demandware system; otherwise the method
 will throw an exception. <br/>

 If there already exists a shipping price adjustment referring to
 the specified promotion ID, an exception is thrown.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} promotionID - Promotion ID
 * @return {dw.order.PriceAdjustment} The new price adjustment
 */
dw.order.LineItemCtnr.prototype.createShippingPriceAdjustment = function(promotionID) {};

/**
 * Returns the adjusted total gross price (including tax) in purchase currency.

 Adjusted merchandize prices represent the sum of product prices before
 services such as shipping, but after product-level and
 order-level adjustments.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the adjusted total gross price (including tax) in purchase currency.
 */
dw.order.LineItemCtnr.prototype.getAdjustedMerchandizeTotalGrossPrice = function() {};

/**
 * Returns the total net price (excluding tax) in purchase currency.

 Adjusted merchandize prices represent the sum of product prices before
 services such as shipping, but after product-level and
 order-level adjustments.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the total net price (excluding tax) in purchase currency.
 */
dw.order.LineItemCtnr.prototype.getAdjustedMerchandizeTotalNetPrice = function() {};

/**
 * Returns the adjusted merchandize total price including product-level and
 order-level adjustments. If the line item container is based on net
 pricing the adjusted merchandize total net price is returned. If the
 line item container is based on gross pricing the adjusted merchandize
 total gross price is returned.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} either the adjusted merchandize total net or gross price
 */
dw.order.LineItemCtnr.prototype.getAdjustedMerchandizeTotalPrice = function() {};

/**
 * Returns the adjusted merchandize total price including order-level
 adjustments if requested. If the line item container
 is based on net pricing the adjusted merchandize total net price is
 returned. If the line item container is based on gross pricing the adjusted
 merchandize total gross price is returned.
 * @memberOf dw.order.LineItemCtnr
 * @param {Boolean} applyOrderLevelAdjustments - controls if order-level price adjustements  are applied. If true, the price that is returned  includes order-level price adjustments. If false, only product-level  price adjustments are applied.
 * @return {dw.value.Money} a price representing the adjusted merchandize total controlled by the  applyOrderLevelAdjustments parameter.
 */
dw.order.LineItemCtnr.prototype.getAdjustedMerchandizeTotalPrice = function(applyOrderLevelAdjustments) {};

/**
 * Returns the subtotal tax in purchase currency.

 Adjusted merchandize prices represent the sum of product prices before
 services such as shipping have been added, but after adjustment from
 promotions have been added.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the subtotal tax in purchase currency.
 */
dw.order.LineItemCtnr.prototype.getAdjustedMerchandizeTotalTax = function() {};

/**
 * Returns the adjusted sum of all shipping line items of the line item container,
 including tax after shipping adjustments have been applied.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the adjusted sum of all shipping line items of the line item container,  including tax after shipping adjustments have been applied.
 */
dw.order.LineItemCtnr.prototype.getAdjustedShippingTotalGrossPrice = function() {};

/**
 * Returns the sum of all shipping line items of the line item container,
 excluding tax after shipping adjustments have been applied.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the sum of all shipping line items of the line item container,  excluding tax after shipping adjustments have been applied.
 */
dw.order.LineItemCtnr.prototype.getAdjustedShippingTotalNetPrice = function() {};

/**
 * Returns the adjusted shipping total price. If the line item container
 is based on net pricing the adjusted shipping total net price is
 returned. If the line item container is based on gross pricing the adjusted
 shipping total gross price is returned.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} either the adjusted shipping total net or gross price
 */
dw.order.LineItemCtnr.prototype.getAdjustedShippingTotalPrice = function() {};

/**
 * Returns the tax of all shipping line items of the line item container after
 shipping adjustments have been applied.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the tax of all shipping line items of the line item container after  shipping adjustments have been applied.
 */
dw.order.LineItemCtnr.prototype.getAdjustedShippingTotalTax = function() {};

/**
 * Returns all gift certificate line items of the container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} A collection of all GiftCertificateLineItems of the container.
 * @deprecated Use <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_getGiftCertificateLineItems_DetailAnchor">getGiftCertificateLineItems()</a> to get the
 collection instead.
 */
dw.order.LineItemCtnr.prototype.getAllGiftCertificateLineItems = function() {};

/**
 * Returns all product, shipping, price adjustment, and gift certificate
 line items of the line item container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} A collection of all product, shipping, price adjustment, and gift          certificate line items of the container, in that order.
 */
dw.order.LineItemCtnr.prototype.getAllLineItems = function() {};

/**
 * Returns all product line items of the container, no matter if they are
 dependent or independent. This includes option, bundled and bonus line
 items.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} An unsorted collection of all ProductLineItem instances of the          container.
 */
dw.order.LineItemCtnr.prototype.getAllProductLineItems = function() {};

/**
 * Returns all product line items of the container that have a product ID
 equal to the specified product ID, no matter if they are dependent or
 independent. This includes option, bundled and bonus line items.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} productID - The product ID used to filter the product line items.
 * @return {dw.util.Collection} An unsorted collection of all ProductLineItem instances which          have the specified product ID.
 */
dw.order.LineItemCtnr.prototype.getAllProductLineItems = function(productID) {};

/**
 * Returns a hash mapping all products in the line item container to their
 total quantities.  The total product quantity is used chiefly
 to validate the availability of the items in the cart.  This method
 is not appropriate to look up prices because it returns products
 such as bundled line items which are included in the price of their
 parent and therefore have no corresponding price.<p/>

 The method counts all direct product line items, plus dependent product
 line items that are not option line items. It also excludes product line
 items that are not associated to any catalog product.<p/>
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.HashMap} A map of products and their total quantities.
 */
dw.order.LineItemCtnr.prototype.getAllProductQuantities = function() {};

/**
 * Returns the collection of all shipping price adjustments applied
 somewhere in the container. This can be adjustments applied to individual
 shipments or to the container itself. Note that the promotions engine
 only applies shipping price adjustments to the the default shipping line
 item of shipments, and never to the container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} an unsorted collection of the shipping PriceAdjustment instances          associated with this container.
 * @see <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_getShippingPriceAdjustments_DetailAnchor">getShippingPriceAdjustments()</a>
 */
dw.order.LineItemCtnr.prototype.getAllShippingPriceAdjustments = function() {};

/**
 * Returns the billing address defined for the container. Returns null if
 no billing address has been created yet.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.order.OrderAddress} the billing address or null.
 */
dw.order.LineItemCtnr.prototype.getBillingAddress = function() {};

/**
 * Returns an unsorted collection of the the bonus discount line items
 associated with this container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} An unsorted collection of BonusDiscountLine instances in the          container.
 */
dw.order.LineItemCtnr.prototype.getBonusDiscountLineItems = function() {};

/**
 * Returns the type of the business this order has been placed in.<br/>
 Possible values are <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_BUSINESS_TYPE_B2C_DetailAnchor">BUSINESS_TYPE_B2C</a> or <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_BUSINESS_TYPE_B2B_DetailAnchor">BUSINESS_TYPE_B2B</a>.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.EnumValue} the type of the business this order has been placed in. or null, if the business type is not set
 */
dw.order.LineItemCtnr.prototype.getBusinessType = function() {};

/**
 * The channel type defines in which sales channel this order has been created.
 This can be used to distinguish order placed through Storefront, Call Center or Marketplace.<br/>
 Possible values are <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_STOREFRONT_DetailAnchor">CHANNEL_TYPE_STOREFRONT</a>, <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_CALLCENTER_DetailAnchor">CHANNEL_TYPE_CALLCENTER</a>,
 <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_MARKETPLACE_DetailAnchor">CHANNEL_TYPE_MARKETPLACE</a>, <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_DSS_DetailAnchor">CHANNEL_TYPE_DSS</a>, <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_STORE_DetailAnchor">CHANNEL_TYPE_STORE</a>,
 <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_PINTEREST_DetailAnchor">CHANNEL_TYPE_PINTEREST</a> or <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_CHANNEL_TYPE_TWITTER_DetailAnchor">CHANNEL_TYPE_TWITTER</a>.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.EnumValue} the sales channel this order has been placed in or null, if the order channel is not set
 */
dw.order.LineItemCtnr.prototype.getChannelType = function() {};

/**
 * Returns the coupon line item representing the specified coupon code.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} couponCode - the coupon code.
 * @return {dw.order.CouponLineItem} coupon line item or null.
 */
dw.order.LineItemCtnr.prototype.getCouponLineItem = function(couponCode) {};

/**
 * Returns a sorted collection of the coupon line items in the container. The coupon line items are returned in the order
 they were added to container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} A sorted list of the CouponLineItem instances in the          container.
 */
dw.order.LineItemCtnr.prototype.getCouponLineItems = function() {};

/**
 * Returns the currency code for this line item container. The currency code
 is a 3-character currency mnemonic such as 'USD' or 'EUR'. The currency
 code represents the currency in which the calculation is made, and in
 which the buyer sees all prices in the store front.
 * @memberOf dw.order.LineItemCtnr
 * @return {String} the currency code for this line item container.
 */
dw.order.LineItemCtnr.prototype.getCurrencyCode = function() {};

/**
 * Returns the customer associated with this container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.customer.Customer} the customer associated with this container.
 */
dw.order.LineItemCtnr.prototype.getCustomer = function() {};

/**
 * Returns the email of the customer associated with this container.
 * @memberOf dw.order.LineItemCtnr
 * @return {String} the email of the customer associated with this container.
 */
dw.order.LineItemCtnr.prototype.getCustomerEmail = function() {};

/**
 * Returns the name of the customer associated with this container.
 * @memberOf dw.order.LineItemCtnr
 * @return {String} the name of the customer associated with this container.
 */
dw.order.LineItemCtnr.prototype.getCustomerName = function() {};

/**
 * Returns the customer number of the customer associated with this container.
 * @memberOf dw.order.LineItemCtnr
 * @return {String} the customer number of the customer associated with this container.
 */
dw.order.LineItemCtnr.prototype.getCustomerNo = function() {};

/**
 * Returns the default shipment of the line item container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.order.Shipment} Default shipment of the container
 */
dw.order.LineItemCtnr.prototype.getDefaultShipment = function() {};

/**
 * Returns the Etag of the line item container. The Etag is a hash that represents the overall container state
 including any associated objects like line items.
 * @memberOf dw.order.LineItemCtnr
 * @return {String} the Etag value
 */
dw.order.LineItemCtnr.prototype.getEtag = function() {};

/**
 * Returns all gift certificate line items of the container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} A collection of all GiftCertificateLineItems of the container.
 */
dw.order.LineItemCtnr.prototype.getGiftCertificateLineItems = function() {};

/**
 * Returns all gift certificate line items of the container, no matter if they are
 dependent or independent.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} giftCertificateId - the gift certificate identifier.
 * @return {dw.util.Collection} A collection of all GiftCertificateLineItems of the container.
 */
dw.order.LineItemCtnr.prototype.getGiftCertificateLineItems = function(giftCertificateId) {};

/**
 * Returns an unsorted collection of the PaymentInstrument instances that
 represent GiftCertificates in this container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} an unsorted collection containing the set of PaymentInstrument          instances that represent GiftCertificates.
 */
dw.order.LineItemCtnr.prototype.getGiftCertificatePaymentInstruments = function() {};

/**
 * Returns an unsorted collection containing all PaymentInstruments of type
 PaymentInstrument.METHOD_GIFT_CERTIFICATE where the specified code is the
 same code on the payment instrument.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} giftCertificateCode - the gift certificate code.
 * @return {dw.util.Collection} an unsorted collection containing all PaymentInstruments of type          PaymentInstrument.METHOD_GIFT_CERTIFICATE where the specified          code is the same code on the payment instrument.
 */
dw.order.LineItemCtnr.prototype.getGiftCertificatePaymentInstruments = function(giftCertificateCode) {};

/**
 * Returns the total gross price of all gift certificates in
 the cart. Should usually be equal to total net price.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the total gross price of all gift certificate line items
 */
dw.order.LineItemCtnr.prototype.getGiftCertificateTotalGrossPrice = function() {};

/**
 * Returns the total net price (excluding tax) of all gift certificates in
 the cart. Should usually be equal to total gross price.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the total net price of all gift certificate line items
 */
dw.order.LineItemCtnr.prototype.getGiftCertificateTotalNetPrice = function() {};

/**
 * Returns the gift certificate total price. If the line item container is based
 on net pricing the gift certificate total net price is returned. If the line
 item container is based on gross pricing the gift certificate total gross
 price is returned.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} either the gift certificate total net or gross price
 */
dw.order.LineItemCtnr.prototype.getGiftCertificateTotalPrice = function() {};

/**
 * Returns the total tax of all gift certificates in
 the cart. Should usually be 0.0.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the total tax of all gift certificate line items
 */
dw.order.LineItemCtnr.prototype.getGiftCertificateTotalTax = function() {};

/**
 * Returns the total gross price (including tax) in purchase currency.

 Merchandize total prices represent the sum of product prices before
 services such as shipping or adjustment from promotions have
 been added.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the total gross price (including tax) in purchase currency.
 */
dw.order.LineItemCtnr.prototype.getMerchandizeTotalGrossPrice = function() {};

/**
 * Returns the total net price (excluding tax) in purchase currency.

 Merchandize total prices represent the sum of product prices before
 services such as shipping or adjustment from promotion have
 been added.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the total net price (excluding tax) in purchase currency.
 */
dw.order.LineItemCtnr.prototype.getMerchandizeTotalNetPrice = function() {};

/**
 * Returns the merchandize total price. If the line item container is based
 on net pricing the merchandize total net price is returned. If the line
 item container is based on gross pricing the merchandize total gross price
 is returned.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} either the merchandize total net or gross price
 */
dw.order.LineItemCtnr.prototype.getMerchandizeTotalPrice = function() {};

/**
 * Returns the total tax in purchase currency.

 Merchandize total prices represent the sum of product prices before
 services such as shipping or adjustment from promotions have
 been added.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the total tax in purchase currency.
 */
dw.order.LineItemCtnr.prototype.getMerchandizeTotalTax = function() {};

/**
 * Returns the list of notes for this object, ordered by creation time
 from oldest to newest.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.List} the list of notes for this object, ordered by creation time          from oldest to newest.
 */
dw.order.LineItemCtnr.prototype.getNotes = function() {};

/**
 * Returns the payment instrument of the line item container or null.
 This method is deprecated. You should use getPaymentInstruments() or
 getGiftCertificatePaymentInstruments() instead.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.order.OrderPaymentInstrument} the order payment instrument of the line item container or null.
 * @deprecated Use <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_getPaymentInstruments_DetailAnchor">getPaymentInstruments()</a> or
  <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_getGiftCertificatePaymentInstruments_DetailAnchor">getGiftCertificatePaymentInstruments()</a> to get the set of payment
 instruments.
 */
dw.order.LineItemCtnr.prototype.getPaymentInstrument = function() {};

/**
 * Returns an unsorted collection of the payment instruments in this
 container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} an unsorted collection containing the set of PaymentInstrument          instances associated with this container.
 */
dw.order.LineItemCtnr.prototype.getPaymentInstruments = function() {};

/**
 * Returns an unsorted collection of PaymentInstrument instances based on
 the specified payment method ID.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} paymentMethodID - the ID of the payment method used.
 * @return {dw.util.Collection} an unsorted collection of OrderPaymentInstrument instances based          on the payment method.
 */
dw.order.LineItemCtnr.prototype.getPaymentInstruments = function(paymentMethodID) {};

/**
 * Returns the price adjustment associated to the specified
 promotion ID.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} promotionID - Promotion id
 * @return {dw.order.PriceAdjustment} The price adjustment associated with the specified promotion ID          or null if none was found.
 */
dw.order.LineItemCtnr.prototype.getPriceAdjustmentByPromotionID = function(promotionID) {};

/**
 * Returns the collection of price adjustments that have been applied to the
 totals such as promotion on the purchase value (i.e. $10 Off or 10% Off).
 The price adjustments are sorted by the order in which they were applied
 to the order by the promotions engine.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} the sorted collection of PriceAdjustment instances.
 */
dw.order.LineItemCtnr.prototype.getPriceAdjustments = function() {};

/**
 * Returns the product line items of the container that are not dependent on
 other product line items. This includes line items representing bonus
 products in the container but excludes option, bundled, and bonus line
 items. The returned collection is sorted by the position attribute of the
 product line items.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} A sorted collection of ProductLineItem instances which are not          dependent on other product line items.
 */
dw.order.LineItemCtnr.prototype.getProductLineItems = function() {};

/**
 * Returns the product line items of the container that have a product ID
 equal to the specified product ID and that are not dependent on other
 product line items. This includes line items representing bonus products
 in the container, but excludes option, bundled and bonus line items. The
 returned collection is sorted by the position attribute of the product
 line items.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} productID - The Product ID used to filter the product line items.
 * @return {dw.util.Collection} A sorted collection of ProductLineItem instances which have the          specified product ID and are not dependent on other product line          items.
 */
dw.order.LineItemCtnr.prototype.getProductLineItems = function(productID) {};

/**
 * Returns a hash map of all products in the line item container and their
 total quantities. The total product quantity is for example used
 to lookup the product price.<p/>

 The method counts all direct product line items, plus dependent product
 line items that are not bundled line items and no option line items. It
 also excludes product line items that are not associated to any catalog
 product, and bonus product line items.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.HashMap} a map of products and their total quantities.
 * @see <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_getProductQuantities_boolean_DetailAnchor">LineItemCtnr.getProductQuantities(boolean)</a>
 */
dw.order.LineItemCtnr.prototype.getProductQuantities = function() {};

/**
 * Returns a hash map of all products in the line item container and their
 total quantities. The total product quantity is for example used
 to lookup the product price in the cart.<p/>

 The method counts all direct product line items, plus dependent product
 line items that are not bundled line items and no option line items. It
 also excludes product line items that are not associated to any catalog
 product.<p/>

 If the parameter 'includeBonusProducts' is set to true, the method also
 counts bonus product line items.
 * @memberOf dw.order.LineItemCtnr
 * @param {Boolean} includeBonusProducts - if true also bonus product line item are counted
 * @return {dw.util.HashMap} A map of products and their total quantities.
 */
dw.order.LineItemCtnr.prototype.getProductQuantities = function(includeBonusProducts) {};

/**
 * Returns the total quantity of all product line items.
 Not included are bundled line items and option line items.
 * @memberOf dw.order.LineItemCtnr
 * @return {Number} The total quantity of all line items of the container.
 */
dw.order.LineItemCtnr.prototype.getProductQuantityTotal = function() {};

/**
 * Returns the shipment for the specified ID or null if no shipment
 with this ID exists in the line item container.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} id - the shipment identifier.
 * @return {dw.order.Shipment} Shipment or null
 */
dw.order.LineItemCtnr.prototype.getShipment = function(id) {};

/**
 * Returns all shipments of the line item container. <br/>
 The first shipment in the returned collection is the default shipment.
 All other shipments are sorted ascending by shipment ID.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} Shipments of the line item container
 */
dw.order.LineItemCtnr.prototype.getShipments = function() {};

/**
 * Returns the shipping price adjustment associated with the
 specified promotion ID.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} promotionID - Promotion id
 * @return {dw.order.PriceAdjustment} The price adjustment associated with the specified promotion ID          or null if none was found.
 */
dw.order.LineItemCtnr.prototype.getShippingPriceAdjustmentByPromotionID = function(promotionID) {};

/**
 * Returns the of shipping price adjustments applied to the
 shipping total of the container.  Note that the promotions engine
 only applies shipping price adjustments to the the default shipping line
 item of shipments, and never to the container.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.util.Collection} a collection of shipping price adjustments.
 * @see <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_getAllShippingPriceAdjustments_DetailAnchor">getAllShippingPriceAdjustments()</a>
 */
dw.order.LineItemCtnr.prototype.getShippingPriceAdjustments = function() {};

/**
 * Returns the sum of all shipping line items of the line item container,
 including tax before shipping adjustments have been applied.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the sum of all shipping line items of the line item container,  including tax before shipping adjustments have been applied.
 */
dw.order.LineItemCtnr.prototype.getShippingTotalGrossPrice = function() {};

/**
 * Returns the sum of all shipping line items of the line item container,
 excluding tax before shipping adjustments have been applied.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the sum of all shipping line items of the line item container,  excluding tax before shipping adjustments have been applied.
 */
dw.order.LineItemCtnr.prototype.getShippingTotalNetPrice = function() {};

/**
 * Returns the shipping total price. If the line item container is based on
 net pricing the shipping total net price is returned. If the line item
 container is based on gross pricing the shipping total gross price is
 returned.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} either the shipping total net or gross price
 */
dw.order.LineItemCtnr.prototype.getShippingTotalPrice = function() {};

/**
 * Returns the tax of all shipping line items of the line item container before
 shipping adjustments have been applied.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the tax of all shipping line items of the line item container before  shipping adjustments have been applied.
 */
dw.order.LineItemCtnr.prototype.getShippingTotalTax = function() {};

/**
 * Returns the grand total price gross of tax for LineItemCtnr, in purchase currency.

 Total prices represent the sum of product prices, services prices and adjustments.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the grand total price.
 */
dw.order.LineItemCtnr.prototype.getTotalGrossPrice = function() {};

/**
 * Returns the grand total price for LineItemCtnr net of tax, in purchase currency.

 Total prices represent the sum of product prices, services prices and adjustments.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the grand total price.
 */
dw.order.LineItemCtnr.prototype.getTotalNetPrice = function() {};

/**
 * Returns the grand total tax for LineItemCtnr, in purchase currency.

 Total prices represent the sum of product prices, services prices and adjustments.
 * @memberOf dw.order.LineItemCtnr
 * @return {dw.value.Money} the grand total tax.
 */
dw.order.LineItemCtnr.prototype.getTotalTax = function() {};

/**
 * Removes the all Payment Instruments from this container
 and deletes the Payment Instruments.
 * @memberOf dw.order.LineItemCtnr
 */
dw.order.LineItemCtnr.prototype.removeAllPaymentInstruments = function() {};

/**
 * Removes the specified bonus discount line item from the line item
 container.
 * @memberOf dw.order.LineItemCtnr
 * @param {dw.order.BonusDiscountLineItem} bonusDiscountLineItem - The bonus discount line item to remove, must             not be null.
 */
dw.order.LineItemCtnr.prototype.removeBonusDiscountLineItem = function(bonusDiscountLineItem) {};

/**
 * Removes the specified coupon line item from the line item
 container.
 * @memberOf dw.order.LineItemCtnr
 * @param {dw.order.CouponLineItem} couponLineItem - The coupon line item to remove
 */
dw.order.LineItemCtnr.prototype.removeCouponLineItem = function(couponLineItem) {};

/**
 * Removes the specified Payment Instrument from this container
 and deletes the Payment Instrument.
 * @memberOf dw.order.LineItemCtnr
 * @param {dw.order.PaymentInstrument} pi - the Payment Instrument to remove.
 */
dw.order.LineItemCtnr.prototype.removePaymentInstrument = function(pi) {};

/**
 * Removes the specified price adjustment line item from the line item
 container.
 * @memberOf dw.order.LineItemCtnr
 * @param {dw.order.PriceAdjustment} priceAdjustment - The price adjustment line item to remove,             must not be null.
 */
dw.order.LineItemCtnr.prototype.removePriceAdjustment = function(priceAdjustment) {};

/**
 * Removes the specified product line item from the line item container.
 * @memberOf dw.order.LineItemCtnr
 * @param {dw.order.ProductLineItem} productLineItem - The product line item to remove, must not be null.
 */
dw.order.LineItemCtnr.prototype.removeProductLineItem = function(productLineItem) {};

/**
 * Removes the specified shipment and all associated product,
 gift certificate, shipping and price adjustment line items from the
 line item container. It is not permissible to remove the default shipment.
 * @memberOf dw.order.LineItemCtnr
 * @param {dw.order.Shipment} shipment - Shipment to be removed, must not be null.
 */
dw.order.LineItemCtnr.prototype.removeShipment = function(shipment) {};

/**
 * Removes the specified shipping price adjustment line item from the line
 item container.
 * @memberOf dw.order.LineItemCtnr
 * @param {dw.order.PriceAdjustment} priceAdjustment - The price adjustment line item to remove,             must not be null.
 */
dw.order.LineItemCtnr.prototype.removeShippingPriceAdjustment = function(priceAdjustment) {};

/**
 * Sets the email address of the customer associated with this container.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} aValue - the email address of the customer associated with this container.
 */
dw.order.LineItemCtnr.prototype.setCustomerEmail = function(aValue) {};

/**
 * Sets the name of the customer associated with this container.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} aValue - the name of the customer associated with this container.
 */
dw.order.LineItemCtnr.prototype.setCustomerName = function(aValue) {};

/**
 * Sets the customer number of the customer associated with this container.
 * @memberOf dw.order.LineItemCtnr
 * @param {String} customerNo - the customer number of the customer associated with this container.
 */
dw.order.LineItemCtnr.prototype.setCustomerNo = function(customerNo) {};

/**
 * Recalculates the totals of the line item container. It is necessary to call
 this method after any type of modification to the basket.
 * @memberOf dw.order.LineItemCtnr
 */
dw.order.LineItemCtnr.prototype.updateTotals = function() {};

/**
 * The Order class represents an order.
 * @class
 * @extends dw.order.LineItemCtnr
 */
dw.order.Order = function() {};
dw.order.Order.prototype = new dw.order.LineItemCtnr();

/**
 * constant for when Confirmation Status is Confirmed
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.CONFIRMATION_STATUS_CONFIRMED = 0;

/**
 * constant for when Confirmation Status is Not Confirmed
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.CONFIRMATION_STATUS_NOTCONFIRMED = 0;

/**
 * constant for when Export Status is Exported
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.EXPORT_STATUS_EXPORTED = 0;

/**
 * constant for when Export Status is Failed
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.EXPORT_STATUS_FAILED = 0;

/**
 * constant for when Export Status is Not Exported
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.EXPORT_STATUS_NOTEXPORTED = 0;

/**
 * constant for when Export Status is ready to be exported.
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.EXPORT_STATUS_READY = 0;

/**
 * constant for when Order Status is Cancelled
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.ORDER_STATUS_CANCELLED = 0;

/**
 * constant for when Order Status is Completed
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.ORDER_STATUS_COMPLETED = 0;

/**
 * constant for when Order Status is Created
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.ORDER_STATUS_CREATED = 0;

/**
 * constant for when Order Status is Failed
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.ORDER_STATUS_FAILED = 0;

/**
 * constant for when Order Status is New
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.ORDER_STATUS_NEW = 0;

/**
 * constant for when Order Status is Open
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.ORDER_STATUS_OPEN = 0;

/**
 * constant for when Order Status is Replaced
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.ORDER_STATUS_REPLACED = 0;

/**
 * constant for when Payment Status is Not Paid
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.PAYMENT_STATUS_NOTPAID = 0;

/**
 * constant for when Payment Status is Paid
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.PAYMENT_STATUS_PAID = 0;

/**
 * constant for when Payment Status is Part Paid
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.PAYMENT_STATUS_PARTPAID = 0;

/**
 * constant for when Shipping Status is Not shipped
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.SHIPPING_STATUS_NOTSHIPPED = 0;

/**
 * constant for when Shipping Status is Part Shipped
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.SHIPPING_STATUS_PARTSHIPPED = 0;

/**
 * constant for when Shipping Status is Shipped
 * @type Number
 * @memberOf dw.order.Order
 * @static
 * @const
 */
dw.order.Order.SHIPPING_STATUS_SHIPPED = 0;

/**
 * Creates a new <a href="class_dw_order_Appeasement.html">Appeasement</a> associated with this order.

 The new Appeasement
 will have an appeasementNumber based on the <a href="class_dw_order_Order.html#dw_order_Order_getOrderNo_DetailAnchor">getOrderNo()</a>.
 * @memberOf dw.order.Order
 * @return {dw.order.Appeasement} the created appeasement
 */
dw.order.Order.prototype.createAppeasement = function() {};

/**
 * Creates a new <a href="class_dw_order_Appeasement.html">Appeasement</a> associated with this order.

 <p/>An appeasementNumber must be specified.

 <p/>If an Appeasement already exists for the appeasementNumber, the method fails with an
 exception.
 * @memberOf dw.order.Order
 * @param {String} appeasementNumber - the appeasementNumber to be assigned to the newly created appeasement
 * @return {dw.order.Appeasement} the created appeasement
 * @throws IllegalArgumentException if an Appeasement already exists with the number.
 */
dw.order.Order.prototype.createAppeasement = function(appeasementNumber) {};

/**
 * Creates a new <a href="class_dw_order_ReturnCase.html">ReturnCase</a> associated with this order
 specifying whether the ReturnCase is an RMA (return merchandise authorization).

 <p/>The new ReturnCase
 will have a returnCaseNumber based on the <a href="class_dw_order_Order.html#dw_order_Order_getOrderNo_DetailAnchor">getOrderNo()</a>, e.g. for an order-no 1234 the
 return cases will have the numbers 1234#RC1, 1234#RC2, 1234#RC3...
 * @memberOf dw.order.Order
 * @param {Boolean} isRMA - whether the new ReturnCase is an RMA (return merchandise authorization)
 * @return {dw.order.ReturnCase} the created ReturnCase
 */
dw.order.Order.prototype.createReturnCase = function(isRMA) {};

/**
 * Creates a new <a href="class_dw_order_ReturnCase.html">ReturnCase</a> associated with this order
 specifying whether the ReturnCase is an RMA (return merchandise authorization).

 <p/>A returnCaseNumber must be specified.

 <p/>If a ReturnCase already exists for the returnCaseNumber, the method fails with an
 exception.
 * @memberOf dw.order.Order
 * @param {String} returnCaseNumber - returnCaseNumber to use
 * @param {Boolean} isRMA - whether the new ReturnCase is an RMA (return merchandise authorization)
 * @return {dw.order.ReturnCase} null or the ReturnCase associated with the given returnCaseNumber
 * @throws IllegalArgumentException if a ReturnCase already exists with the number.
 */
dw.order.Order.prototype.createReturnCase = function(returnCaseNumber, isRMA) {};

/**
 * Returns the <a href="class_dw_order_OrderItem.html"> order item</a> with the given status which wraps a new
 <a href="class_dw_order_ShippingLineItem.html"> service item</a> which is created and added to the order.
 * @memberOf dw.order.Order
 * @param {String} ID - the ID of the new service item.<br>             This ID will be returned when <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_getID_DetailAnchor">ShippingLineItem.getID()</a>             is called.
 * @param {String} status - the status of the order item, use one of <ul>  <li><a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_NEW_DetailAnchor">OrderItem.STATUS_NEW</a></li>  <li> <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_OPEN_DetailAnchor">OrderItem.STATUS_OPEN</a></li>  <li> <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_SHIPPED_DetailAnchor">OrderItem.STATUS_SHIPPED</a></li>  </ul>
 * @return {dw.order.OrderItem} the created order item
 */
dw.order.Order.prototype.createServiceItem = function(ID, status) {};

/**
 * Creates a new <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a> for this order.
 <p>
 Generates a default shipping order number. Use
 <a href="class_dw_order_Order.html#dw_order_Order_createShippingOrder_String_DetailAnchor">createShippingOrder(String)</a> for a defined shipping order number.
 * @memberOf dw.order.Order
 * @return {dw.order.ShippingOrder} the created shipping order
 * @see <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a>
 */
dw.order.Order.prototype.createShippingOrder = function() {};

/**
 * Creates a new <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a> for this order.
 <p>
 * @memberOf dw.order.Order
 * @param {String} shippingOrderNumber - the document number to be used
 * @return {dw.order.ShippingOrder} the created shipping order
 * @see <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a>
 */
dw.order.Order.prototype.createShippingOrder = function(shippingOrderNumber) {};

/**
 * Returns the affiliate partner ID value, or null.
 * @memberOf dw.order.Order
 * @return {String} the affiliate partner ID value, or null.
 */
dw.order.Order.prototype.getAffiliatePartnerID = function() {};

/**
 * Returns the affiliate partner name value, or null.
 * @memberOf dw.order.Order
 * @return {String} the affiliate partner name value, or null.
 */
dw.order.Order.prototype.getAffiliatePartnerName = function() {};

/**
 * Returns the <a href="class_dw_order_Appeasement.html">Appeasement</a> associated with this order with the given appeasementNumber.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} appeasementNumber - the appeasement number
 * @return {dw.order.Appeasement} the Appeasement associated with the given appeasementNumber
 */
dw.order.Order.prototype.getAppeasement = function(appeasementNumber) {};

/**
 * Returns the <a href="class_dw_order_AppeasementItem.html">AppeasementItem</a> associated with this Order with the given appeasementItemID.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} appeasementItemID - the ID
 * @return {dw.order.AppeasementItem} the AppeasementItem associated with the given appeasementItemID.
 */
dw.order.Order.prototype.getAppeasementItem = function(appeasementItemID) {};

/**
 * Returns the collection of <a href="class_dw_order_AppeasementItem.html">AppeasementItem</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} the appeasement items belonging to this order
 */
dw.order.Order.prototype.getAppeasementItems = function() {};

/**
 * Returns the collection of <a href="class_dw_order_Appeasement.html">Appeasement</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} the appeasements associated with this order
 */
dw.order.Order.prototype.getAppeasements = function() {};

/**
 * If this order was cancelled, returns the value of the
 cancel code or null.
 * @memberOf dw.order.Order
 * @return {dw.value.EnumValue} the value of the cancel code.
 */
dw.order.Order.prototype.getCancelCode = function() {};

/**
 * If this order was cancelled, returns the text describing why
 the order was cancelled or null.
 * @memberOf dw.order.Order
 * @return {String} the description as to why the order was cancelled or null.
 */
dw.order.Order.prototype.getCancelDescription = function() {};

/**
 * Returns the sum of the captured amounts. The captured amounts
 are calculated on the fly. Associate a payment capture for an <a href="class_dw_order_PaymentInstrument.html">PaymentInstrument</a> with an <a href="class_dw_order_Invoice.html">Invoice</a>
 using <a href="class_dw_order_Invoice.html#dw_order_Invoice_addCaptureTransaction_OrderPaymentInstrument_Money_DetailAnchor">Invoice.addCaptureTransaction(OrderPaymentInstrument, Money)</a>.
 * @memberOf dw.order.Order
 * @return {dw.value.Money} sum of captured amounts
 */
dw.order.Order.prototype.getCapturedAmount = function() {};

/**
 * Returns the confirmation status of the order.<br/>
 Possible values are <a href="class_dw_order_Order.html#dw_order_Order_CONFIRMATION_STATUS_NOTCONFIRMED_DetailAnchor">CONFIRMATION_STATUS_NOTCONFIRMED</a> and
 <a href="class_dw_order_Order.html#dw_order_Order_CONFIRMATION_STATUS_CONFIRMED_DetailAnchor">CONFIRMATION_STATUS_CONFIRMED</a>.
 * @memberOf dw.order.Order
 * @return {dw.value.EnumValue} Order confirmation status
 */
dw.order.Order.prototype.getConfirmationStatus = function() {};

/**
 * Returns the name of the user who has created the order.
 If an agent user has created the order, the agent user's name
 is returned. Otherwise "Customer" is returned.
 * @memberOf dw.order.Order
 * @return {String} the name of the user who created the order.
 */
dw.order.Order.prototype.getCreatedBy = function() {};

/**
 * Returns the current order. The current order
 represents the most recent order in a chain of orders.
 For example, if Order1 was replaced by Order2, Order2 is the current
 representation of the order and Order1 is the original representation
 of the order. If you replace Order2 with Order3, Order 3 is now the
 current order and Order1 is still the original representation of the
 order. If this order has not been replaced, this method returns this
 order because this order is the current order.
 * @memberOf dw.order.Order
 * @return {dw.order.Order} the current order.
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrderNo_DetailAnchor">getOriginalOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrder_DetailAnchor">getOriginalOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrderNo_DetailAnchor">getReplacedOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrder_DetailAnchor">getReplacedOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrderNo_DetailAnchor">getReplacementOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrder_DetailAnchor">getReplacementOrder()</a>
 */
dw.order.Order.prototype.getCurrentOrder = function() {};

/**
 * Returns the order number of the current order. The current order
 represents the most recent order in a chain of orders.
 For example, if Order1 was replaced by Order2, Order2 is the current
 representation of the order and Order1 is the original representation
 of the order. If you replace Order2 with Order3, Order 3 is now the
 current order and Order1 is still the original representation of the
 order. If this order has not been replaced, calling this method returns the
 same value as the <a href="class_dw_order_Order.html#dw_order_Order_getOrderNo_DetailAnchor">getOrderNo()</a> method because this order is the
 current order.
 * @memberOf dw.order.Order
 * @return {String} the order number of the current order
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrderNo_DetailAnchor">getOriginalOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrder_DetailAnchor">getOriginalOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrderNo_DetailAnchor">getReplacedOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrder_DetailAnchor">getReplacedOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrderNo_DetailAnchor">getReplacementOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrder_DetailAnchor">getReplacementOrder()</a>
 */
dw.order.Order.prototype.getCurrentOrderNo = function() {};

/**
 * Returns the ID of the locale that was in effect when the order
 was placed. This is the customer's locale.
 * @memberOf dw.order.Order
 * @return {String} the ID of the locale associated with this order, or null.
 */
dw.order.Order.prototype.getCustomerLocaleID = function() {};

/**
 * Returns the customer-specific reference information for the order, or null.
 * @memberOf dw.order.Order
 * @return {String} the customer-specific reference information for the order, or null.
 */
dw.order.Order.prototype.getCustomerOrderReference = function() {};

/**
 * Returns a date after which an order can be exported.
 * @memberOf dw.order.Order
 * @return {Date} a date after which an order can be exported.
 */
dw.order.Order.prototype.getExportAfter = function() {};

/**
 * Returns the export status of the order.<br/>
 Possible values are: <a href="class_dw_order_Order.html#dw_order_Order_EXPORT_STATUS_NOTEXPORTED_DetailAnchor">EXPORT_STATUS_NOTEXPORTED</a>,
 <a href="class_dw_order_Order.html#dw_order_Order_EXPORT_STATUS_EXPORTED_DetailAnchor">EXPORT_STATUS_EXPORTED</a>, <a href="class_dw_order_Order.html#dw_order_Order_EXPORT_STATUS_READY_DetailAnchor">EXPORT_STATUS_READY</a>,
 and <a href="class_dw_order_Order.html#dw_order_Order_EXPORT_STATUS_FAILED_DetailAnchor">EXPORT_STATUS_FAILED</a>.
 * @memberOf dw.order.Order
 * @return {dw.value.EnumValue} Order export status
 */
dw.order.Order.prototype.getExportStatus = function() {};

/**
 * Returns the value of an external order number associated
 with this order, or null.
 * @memberOf dw.order.Order
 * @return {String} the value of an external order number associated  with this order, or null.
 */
dw.order.Order.prototype.getExternalOrderNo = function() {};

/**
 * Returns the status of an external order associated
 with this order, or null.
 * @memberOf dw.order.Order
 * @return {String} the status of an external order associated  with this order, or null.
 */
dw.order.Order.prototype.getExternalOrderStatus = function() {};

/**
 * Returns the text describing the external order, or null.
 * @memberOf dw.order.Order
 * @return {String} the text describing the external order, or null.
 */
dw.order.Order.prototype.getExternalOrderText = function() {};

/**
 * Returns the <a href="class_dw_order_Invoice.html">Invoice</a> associated with this order with the given invoiceNumber.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} invoiceNumber - the invoice number
 * @return {dw.order.Invoice} the invoice associated with the given invoiceNumber
 */
dw.order.Order.prototype.getInvoice = function(invoiceNumber) {};

/**
 * Returns the <a href="class_dw_order_InvoiceItem.html">InvoiceItem</a> associated with this order with the given ID.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} invoiceItemID - the item ID
 * @return {dw.order.InvoiceItem} the invoice item associated with the given ID
 */
dw.order.Order.prototype.getInvoiceItem = function(invoiceItemID) {};

/**
 * Returns the collection of <a href="class_dw_order_InvoiceItem.html">InvoiceItem</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} invoice items belonging to this order
 */
dw.order.Order.prototype.getInvoiceItems = function() {};

/**
 * Returns the invoice number for this Order.
 * @memberOf dw.order.Order
 * @return {String} the invoice number for this Order.
 */
dw.order.Order.prototype.getInvoiceNo = function() {};

/**
 * Returns the collection of <a href="class_dw_order_Invoice.html">Invoice</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} invoices belonging to this order
 */
dw.order.Order.prototype.getInvoices = function() {};

/**
 * Returns the <a href="class_dw_order_OrderItem.html">OrderItem</a> for the itemID.
 An OrderItem will only exist for <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a>s or
 <a href="class_dw_order_ShippingLineItem.html">ShippingLineItem</a>s which belong to the order.
 The method fails with an exception if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} itemID - the itemID
 * @return {dw.order.OrderItem} the order item for itemID
 * @throws IllegalArgumentException if no instance is found
 * @see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getOrderItem_DetailAnchor">ProductLineItem.getOrderItem()</a>
 * @see <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_getOrderItem_DetailAnchor">ShippingLineItem.getOrderItem()</a>
 */
dw.order.Order.prototype.getOrderItem = function(itemID) {};

/**
 * Returns the order number for this order.
 * @memberOf dw.order.Order
 * @return {String} the order number for this order.
 */
dw.order.Order.prototype.getOrderNo = function() {};

/**
 * Returns the URL safe token for this order.
 * @memberOf dw.order.Order
 * @return {String} the URL safe token for this order.
 */
dw.order.Order.prototype.getOrderToken = function() {};

/**
 * Returns the original order associated with
 this order. The original order represents an order that was the
 first ancestor in a chain of orders.
 For example, if Order1 was replaced by Order2, Order2 is the current
 representation of the order and Order1 is the original representation
 of the order. If you replace Order2 with Order3, Order1 is still the
 original representation of the order. If this order is the first
 ancestor, this method returns this order.
 * @memberOf dw.order.Order
 * @return {dw.order.Order} the order number of the original order associated with  this order.
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrderNo_DetailAnchor">Order.getCurrentOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrder_DetailAnchor">Order.getCurrentOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrderNo_DetailAnchor">Order.getReplacedOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrder_DetailAnchor">Order.getReplacedOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrderNo_DetailAnchor">Order.getReplacementOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrder_DetailAnchor">Order.getReplacementOrder()</a>
 */
dw.order.Order.prototype.getOriginalOrder = function() {};

/**
 * Returns the order number of the original order associated with
 this order. The original order represents an order that was the
 first ancestor in a chain of orders.
 For example, if Order1 was replaced by Order2, Order2 is the current
 representation of the order and Order1 is the original representation
 of the order. If you replace Order2 with Order3, Order1 is still the
 original representation of the order. If this order is the first
 ancestor, this method returns the value of getOrderNo().
 * @memberOf dw.order.Order
 * @return {String} the order number of the original order associated with  this order.
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrderNo_DetailAnchor">Order.getCurrentOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrder_DetailAnchor">Order.getCurrentOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrderNo_DetailAnchor">Order.getReplacedOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrder_DetailAnchor">Order.getReplacedOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrderNo_DetailAnchor">Order.getReplacementOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrder_DetailAnchor">Order.getReplacementOrder()</a>
 */
dw.order.Order.prototype.getOriginalOrderNo = function() {};

/**
 * Returns the order payment status value.<br/>
 Possible values are <a href="class_dw_order_Order.html#dw_order_Order_PAYMENT_STATUS_NOTPAID_DetailAnchor">PAYMENT_STATUS_NOTPAID</a>, <a href="class_dw_order_Order.html#dw_order_Order_PAYMENT_STATUS_PARTPAID_DetailAnchor">PAYMENT_STATUS_PARTPAID</a>
 or <a href="class_dw_order_Order.html#dw_order_Order_PAYMENT_STATUS_PAID_DetailAnchor">PAYMENT_STATUS_PAID</a>.
 * @memberOf dw.order.Order
 * @return {dw.value.EnumValue} Order payment status
 */
dw.order.Order.prototype.getPaymentStatus = function() {};

/**
 * Returns the payment transaction associated with this order.
 It is possible that there are multiple payment transactions
 associated with the order.  In this case, this method returns
 the transaction associated with the first PaymentInstrument
 returned by <code>getPaymentInstruments()</code>.
 * @memberOf dw.order.Order
 * @return {dw.order.PaymentTransaction} the payment transaction or null if there is no transaction.
 * @deprecated Use <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_getPaymentInstruments_DetailAnchor">LineItemCtnr.getPaymentInstruments()</a>
 to get the list of PaymentInstrument instances and then use
 getPaymentTransaction() method on each PaymentInstrument to access
 the individual transactions.
 */
dw.order.Order.prototype.getPaymentTransaction = function() {};

/**
 * Returns the sum of the refunded amounts. The refunded amounts are
 calculated on the fly. Associate a payment refund for an <a href="class_dw_order_PaymentInstrument.html">PaymentInstrument</a> with an <a href="class_dw_order_Invoice.html">Invoice</a>
 using <a href="class_dw_order_Invoice.html#dw_order_Invoice_addRefundTransaction_OrderPaymentInstrument_Money_DetailAnchor">Invoice.addRefundTransaction(OrderPaymentInstrument, Money)</a>.
 * @memberOf dw.order.Order
 * @return {dw.value.Money} sum of refunded amounts
 */
dw.order.Order.prototype.getRefundedAmount = function() {};

/**
 * Returns the IP address of the remote host from which the order was created.
 <p/>
 If the IP address was not captured for the order because order IP logging
 was disabled at the time the order was created, null will be returned.
 * @memberOf dw.order.Order
 * @return {String} The IP address of the remote host captured for the order or null
 */
dw.order.Order.prototype.getRemoteHost = function() {};

/**
 * If this order was replaced by another order,
 returns the value of the replace code. Otherwise.
 returns null.
 * @memberOf dw.order.Order
 * @return {dw.value.EnumValue} the replace code
 */
dw.order.Order.prototype.getReplaceCode = function() {};

/**
 * If this order was replaced by another order,
 returns the value of the replace description. Otherwise
 returns null.
 * @memberOf dw.order.Order
 * @return {String} the value of the replace code or null.
 */
dw.order.Order.prototype.getReplaceDescription = function() {};

/**
 * Returns the order that this order replaced or null. For example, if you
 have three orders where Order1 was replaced by Order2 and Order2 was
 replaced by Order3, calling this method on Order3 will return Order2.
 Similarly, calling this method on Order1 will return null as Order1 was
 the original order.
 * @memberOf dw.order.Order
 * @return {dw.order.Order} the order that replaced this order, or null.
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrderNo_DetailAnchor">getCurrentOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrder_DetailAnchor">getCurrentOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrderNo_DetailAnchor">getOriginalOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrder_DetailAnchor">getOriginalOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrderNo_DetailAnchor">getReplacementOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrder_DetailAnchor">getReplacementOrder()</a>
 */
dw.order.Order.prototype.getReplacedOrder = function() {};

/**
 * Returns the order number that this order replaced or null if this order
 did not replace an order. For example, if you have three orders
 where Order1 was replaced by Order2 and Order2 was replaced by Order3,
 calling this method on Order3 will return the order number for
 Order2. Similarly, calling this method on Order1 will return null as
 Order1 was the original order.
 * @memberOf dw.order.Order
 * @return {String} the order number of the order that this order replaced or null.
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrderNo_DetailAnchor">getCurrentOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrder_DetailAnchor">getCurrentOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrderNo_DetailAnchor">getOriginalOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrder_DetailAnchor">getOriginalOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrderNo_DetailAnchor">getReplacementOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacementOrder_DetailAnchor">getReplacementOrder()</a>
 */
dw.order.Order.prototype.getReplacedOrderNo = function() {};

/**
 * Returns the order that replaced this order, or null.
 * @memberOf dw.order.Order
 * @return {dw.order.Order} the order that replaced this order, or null.
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrderNo_DetailAnchor">getCurrentOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrder_DetailAnchor">getCurrentOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrderNo_DetailAnchor">getOriginalOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrder_DetailAnchor">getOriginalOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrderNo_DetailAnchor">getReplacedOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrder_DetailAnchor">getReplacedOrder()</a>
 */
dw.order.Order.prototype.getReplacementOrder = function() {};

/**
 * If this order was replaced by another order,
 returns the order number that replaced this order. Otherwise
 returns null.
 * @memberOf dw.order.Order
 * @return {String} the order that replaced this order, or null.
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrderNo_DetailAnchor">getCurrentOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getCurrentOrder_DetailAnchor">getCurrentOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrderNo_DetailAnchor">getOriginalOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getOriginalOrder_DetailAnchor">getOriginalOrder()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrderNo_DetailAnchor">getReplacedOrderNo()</a>
 * @see <a href="class_dw_order_Order.html#dw_order_Order_getReplacedOrder_DetailAnchor">getReplacedOrder()</a>
 */
dw.order.Order.prototype.getReplacementOrderNo = function() {};

/**
 * Returns the <a href="class_dw_order_Return.html">Return</a> associated with this order with the given returnNumber.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} returnNumber - the return number
 * @return {dw.order.Return} the return associated with the given returnNumber
 */
dw.order.Order.prototype.getReturn = function(returnNumber) {};

/**
 * Returns the <a href="class_dw_order_ReturnCase.html">ReturnCase</a> associated with this order with the given returnCaseNumber.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} returnCaseNumber - the return case number
 * @return {dw.order.ReturnCase} the return case associated with the given returnCaseNumber
 */
dw.order.Order.prototype.getReturnCase = function(returnCaseNumber) {};

/**
 * Returns the <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a> associated with this order with the given returnCaseItemID.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} returnCaseItemID - the ID
 * @return {dw.order.ReturnCaseItem} the return case item associated with the given returnCaseItemID
 */
dw.order.Order.prototype.getReturnCaseItem = function(returnCaseItemID) {};

/**
 * Returns the collection of <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} return case items belonging to this order
 */
dw.order.Order.prototype.getReturnCaseItems = function() {};

/**
 * Returns the collection of <a href="class_dw_order_ReturnCase.html">ReturnCase</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} return cases belonging to this order
 */
dw.order.Order.prototype.getReturnCases = function() {};

/**
 * Returns the <a href="class_dw_order_ReturnItem.html">ReturnItem</a> associated with this order with the given ID.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} returnItemID - the ID
 * @return {dw.order.ReturnItem} the return item associated with the given returnItemID
 */
dw.order.Order.prototype.getReturnItem = function(returnItemID) {};

/**
 * Returns the collection of <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} return items belonging to this order
 */
dw.order.Order.prototype.getReturnItems = function() {};

/**
 * Returns the collection of <a href="class_dw_order_Return.html">Return</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} returns belonging to this order
 */
dw.order.Order.prototype.getReturns = function() {};

/**
 * Returns the <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a> associated with this order with the given shippingOrderNumber.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} shippingOrderNumber - the shipping order number
 * @return {dw.order.ShippingOrder} the shipping order associated with the given shippingOrderNumber
 */
dw.order.Order.prototype.getShippingOrder = function(shippingOrderNumber) {};

/**
 * Returns the <a href="class_dw_order_ShippingOrderItem.html">ShippingOrderItem</a> associated with this order with the given shippingOrderItemID.
 The method returns <code>null</code> if no instance can be found.
 * @memberOf dw.order.Order
 * @param {String} shippingOrderItemID - the ID
 * @return {dw.order.ShippingOrderItem} the shipping order item associated with the given shippingOrderItemID
 */
dw.order.Order.prototype.getShippingOrderItem = function(shippingOrderItemID) {};

/**
 * Returns the collection of <a href="class_dw_order_ShippingOrderItem.html">ShippingOrderItem</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} shipping order items belonging to this order
 */
dw.order.Order.prototype.getShippingOrderItems = function() {};

/**
 * Returns the collection of <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a>s associated with this order.
 * @memberOf dw.order.Order
 * @return {dw.util.FilteringCollection} shipping orders belonging to this order
 */
dw.order.Order.prototype.getShippingOrders = function() {};

/**
 * Returns the order shipping status.<br/>
 Possible values are <a href="class_dw_order_Order.html#dw_order_Order_SHIPPING_STATUS_NOTSHIPPED_DetailAnchor">SHIPPING_STATUS_NOTSHIPPED</a>,
 <a href="class_dw_order_Order.html#dw_order_Order_SHIPPING_STATUS_PARTSHIPPED_DetailAnchor">SHIPPING_STATUS_PARTSHIPPED</a> or <a href="class_dw_order_Order.html#dw_order_Order_SHIPPING_STATUS_SHIPPED_DetailAnchor">SHIPPING_STATUS_SHIPPED</a>.
 * @memberOf dw.order.Order
 * @return {dw.value.EnumValue} Order shipping status
 */
dw.order.Order.prototype.getShippingStatus = function() {};

/**
 * Returns the source code stored with the order or
 null if no source code is attached to the order.
 * @memberOf dw.order.Order
 * @return {String} the source code stored with the order or  null if no source code is attached to the order.
 */
dw.order.Order.prototype.getSourceCode = function() {};

/**
 * Returns the source code group attached to the order or
 null if no source code group is attached to the order.
 * @memberOf dw.order.Order
 * @return {dw.campaign.SourceCodeGroup} the source code group attached to the order or  null if no source code group is attached to the order.
 */
dw.order.Order.prototype.getSourceCodeGroup = function() {};

/**
 * Returns the source code group id stored with the order or
 null if no source code group is attached to the order.
 * @memberOf dw.order.Order
 * @return {String} the source code group id stored with the order or  null if no source code group is attached to the order.
 */
dw.order.Order.prototype.getSourceCodeGroupID = function() {};

/**
 * Returns the status of the order.<br/>
 Possible values are <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_CREATED_DetailAnchor">ORDER_STATUS_CREATED</a>, <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_NEW_DetailAnchor">ORDER_STATUS_NEW</a>, <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_OPEN_DetailAnchor">ORDER_STATUS_OPEN</a>,
 <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_COMPLETED_DetailAnchor">ORDER_STATUS_COMPLETED</a>, <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_CANCELLED_DetailAnchor">ORDER_STATUS_CANCELLED</a>, <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_FAILED_DetailAnchor">ORDER_STATUS_FAILED</a> or
 <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_REPLACED_DetailAnchor">ORDER_STATUS_REPLACED</a>.
 <p/>
 * @memberOf dw.order.Order
 * @return {dw.value.EnumValue} Status of the order.
 * @see <a href="class_dw_order_LineItemCtnr.html">LineItemCtnr</a>
 */
dw.order.Order.prototype.getStatus = function() {};

/**
 * Returns <CODE>true</CODE>, if the order is imported and <CODE>false</CODE>
 otherwise.
 * @memberOf dw.order.Order
 * @return {Boolean} true, if the order was imported, false otherwise.
 */
dw.order.Order.prototype.isImported = function() {};

/**
 * Ensures that the order is authorized.
 <P>
 Checks if the order is authorized by calling the hook
 <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_validateAuthorization_Order_DetailAnchor">PaymentHooks.validateAuthorization(Order)</a>. If the authorization
 is not valid it reauthorizes the order by calling the
 <a href="class_dw_order_hooks_PaymentHooks.html#dw_order_hooks_PaymentHooks_reauthorize_Order_DetailAnchor">PaymentHooks.reauthorize(Order)</a>.
 * @memberOf dw.order.Order
 * @return {dw.system.Status} the status of the operation, will be Status.OK if the order is          authorized after this call
 */
dw.order.Order.prototype.reauthorize = function() {};

/**
 * Sets the affiliate partner ID value.
 * @memberOf dw.order.Order
 * @param {String} affiliatePartnerID - the affiliate partner ID value.
 */
dw.order.Order.prototype.setAffiliatePartnerID = function(affiliatePartnerID) {};

/**
 * Sets the affiliate partner name value.
 * @memberOf dw.order.Order
 * @param {String} affiliatePartnerName - the affiliate partner name value.
 */
dw.order.Order.prototype.setAffiliatePartnerName = function(affiliatePartnerName) {};

/**
 * Sets the cancel code value.
 * @memberOf dw.order.Order
 * @param {String} cancelCode - the cancel code value.
 */
dw.order.Order.prototype.setCancelCode = function(cancelCode) {};

/**
 * Sets the description as to why the order was cancelled.
 * @memberOf dw.order.Order
 * @param {String} cancelDescription - the description for why the order was cancelled.
 */
dw.order.Order.prototype.setCancelDescription = function(cancelDescription) {};

/**
 * Sets the confirmation status value.<br/>
 Possible values are <a href="class_dw_order_Order.html#dw_order_Order_CONFIRMATION_STATUS_NOTCONFIRMED_DetailAnchor">CONFIRMATION_STATUS_NOTCONFIRMED</a> or
 <a href="class_dw_order_Order.html#dw_order_Order_CONFIRMATION_STATUS_CONFIRMED_DetailAnchor">CONFIRMATION_STATUS_CONFIRMED</a>.
 * @memberOf dw.order.Order
 * @param {Number} status - Order confirmation status
 */
dw.order.Order.prototype.setConfirmationStatus = function(status) {};

/**
 * This method is used to associate the order object with the specified customer object.
 <p/>
 If the customer object represents a registered customer, the order will be assigned
 to this registered customer and the order's customer number
 (<a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_getCustomerNo_DetailAnchor">LineItemCtnr.getCustomerNo()</a>) will be updated.
 <p/>
 If the customer object represents an unregistered (anonymous) customer, the
 order will become an anonymous order and the order's customer number
 will be set to null.
 * @memberOf dw.order.Order
 * @param {dw.customer.Customer} customer - The customer to be associated with the order.
 * @exception NullArgumentException If specified customer is null.
 */
dw.order.Order.prototype.setCustomer = function(customer) {};

/**
 * Sets the customer-specific reference information for the order.
 * @memberOf dw.order.Order
 * @param {String} reference - the customer-specific reference information for the order.
 */
dw.order.Order.prototype.setCustomerOrderReference = function(reference) {};

/**
 * Sets the date after which an order can be exported.
 * @memberOf dw.order.Order
 * @param {Date} date - the date after which an order can be exported.
 */
dw.order.Order.prototype.setExportAfter = function(date) {};

/**
 * Sets the export status of the order.<br/>
 Possible values are: <a href="class_dw_order_Order.html#dw_order_Order_EXPORT_STATUS_NOTEXPORTED_DetailAnchor">EXPORT_STATUS_NOTEXPORTED</a>,
 <a href="class_dw_order_Order.html#dw_order_Order_EXPORT_STATUS_EXPORTED_DetailAnchor">EXPORT_STATUS_EXPORTED</a>, <a href="class_dw_order_Order.html#dw_order_Order_EXPORT_STATUS_READY_DetailAnchor">EXPORT_STATUS_READY</a>,
 and <a href="class_dw_order_Order.html#dw_order_Order_EXPORT_STATUS_FAILED_DetailAnchor">EXPORT_STATUS_FAILED</a>.
 * @memberOf dw.order.Order
 * @param {Number} status - Order export status
 */
dw.order.Order.prototype.setExportStatus = function(status) {};

/**
 * Sets the value of an external order number associated
 with this order
 * @memberOf dw.order.Order
 * @param {String} externalOrderNo - the value of an external order number associated  with this order.
 */
dw.order.Order.prototype.setExternalOrderNo = function(externalOrderNo) {};

/**
 * Sets the status of an external order associated
 with this order
 * @memberOf dw.order.Order
 * @param {String} status - the status of the external order.
 */
dw.order.Order.prototype.setExternalOrderStatus = function(status) {};

/**
 * Sets the text describing the external order.
 * @memberOf dw.order.Order
 * @param {String} text - the text describing the external order.
 */
dw.order.Order.prototype.setExternalOrderText = function(text) {};

/**
 * Sets the invoice number for this Order.
 * @memberOf dw.order.Order
 * @param {String} aValue - the invoice number for this Order.
 */
dw.order.Order.prototype.setInvoiceNo = function(aValue) {};

/**
 * Sets the order status. Use this method when using Order Center processes such as
 the creation of <a href="class_dw_order_ShippingOrder.html"> shipping orders</a>. The only supported values are
 <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_OPEN_DetailAnchor">ORDER_STATUS_OPEN</a>, <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_CANCELLED_DetailAnchor">ORDER_STATUS_CANCELLED</a>.
 Setting the status will also adjust the order item status when necessary.
 <p/>
 Method <a href="class_dw_order_Order.html#dw_order_Order_setStatus_int_DetailAnchor">setStatus(Number)</a> provides an alternative method.
 * @memberOf dw.order.Order
 * @param {Number} statusNew - the status to be set
 * @throws IllegalArgumentException
             on attempt to set an unsupported status value
 */
dw.order.Order.prototype.setOrderStatus = function(statusNew) {};

/**
 * Sets the order payment status.<br/>
 Possible values are <a href="class_dw_order_Order.html#dw_order_Order_PAYMENT_STATUS_NOTPAID_DetailAnchor">PAYMENT_STATUS_NOTPAID</a>, <a href="class_dw_order_Order.html#dw_order_Order_PAYMENT_STATUS_PARTPAID_DetailAnchor">PAYMENT_STATUS_PARTPAID</a>
 or <a href="class_dw_order_Order.html#dw_order_Order_PAYMENT_STATUS_PAID_DetailAnchor">PAYMENT_STATUS_PAID</a>.
 * @memberOf dw.order.Order
 * @param {Number} status - Order payment status
 */
dw.order.Order.prototype.setPaymentStatus = function(status) {};

/**
 * Sets the value of the replace code.
 * @memberOf dw.order.Order
 * @param {String} replaceCode - the value of the replace code.
 */
dw.order.Order.prototype.setReplaceCode = function(replaceCode) {};

/**
 * Sets the value of the replace description.
 * @memberOf dw.order.Order
 * @param {String} replaceDescription - the value of the replace description.
 */
dw.order.Order.prototype.setReplaceDescription = function(replaceDescription) {};

/**
 * Sets the order shipping status value.<br/>
 Possible values are <a href="class_dw_order_Order.html#dw_order_Order_SHIPPING_STATUS_NOTSHIPPED_DetailAnchor">SHIPPING_STATUS_NOTSHIPPED</a>,
 <a href="class_dw_order_Order.html#dw_order_Order_SHIPPING_STATUS_PARTSHIPPED_DetailAnchor">SHIPPING_STATUS_PARTSHIPPED</a> or <a href="class_dw_order_Order.html#dw_order_Order_SHIPPING_STATUS_SHIPPED_DetailAnchor">SHIPPING_STATUS_SHIPPED</a>.
 * @memberOf dw.order.Order
 * @param {Number} status - Order shipping status
 */
dw.order.Order.prototype.setShippingStatus = function(status) {};

/**
 * Sets the status of the order.<br/>
 Possible values are <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_NEW_DetailAnchor">ORDER_STATUS_NEW</a>, <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_OPEN_DetailAnchor">ORDER_STATUS_OPEN</a>
 , <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_COMPLETED_DetailAnchor">ORDER_STATUS_COMPLETED</a>, <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_CANCELLED_DetailAnchor">ORDER_STATUS_CANCELLED</a>, or
 <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_REPLACED_DetailAnchor">ORDER_STATUS_REPLACED</a>. This method doesn't support order
 statuses <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_CREATED_DetailAnchor">ORDER_STATUS_CREATED</a> or <a href="class_dw_order_Order.html#dw_order_Order_ORDER_STATUS_FAILED_DetailAnchor">ORDER_STATUS_FAILED</a>.
 Please use the Pipelet 'PlaceOrder' or 'FailOrder'.

 <p/>Do not use this method if you are using Order Center processes.
 * @memberOf dw.order.Order
 * @param {Number} status - Order status
 * @throws IllegalArgumentException
             on attempt to set status CREATED or FAILED
 */
dw.order.Order.prototype.setStatus = function(status) {};

/**
 * Tracks an order change.

 This adds a history entry to the order. Focus of history entries are
 changes through business logic, both custom and internal logic. Tracked
 order changes are read-only and can be accessed in the Business Manager
 order history. The following attributes of the created <a href="class_dw_object_Note.html"> history entry</a> are initialized: <li>
 <a href="class_dw_object_Note.html#dw_object_Note_getCreatedBy_DetailAnchor">Note.getCreatedBy()</a> gets the current user assigned</li> <li>
 <a href="class_dw_object_Note.html#dw_object_Note_getCreationDate_DetailAnchor">Note.getCreationDate()</a> gets the current date assigned</li>
 * @memberOf dw.order.Order
 * @param {String} text - the text of the history entry
 * @return {dw.object.Note} the created history entry
 */
dw.order.Order.prototype.trackOrderChange = function(text) {};

/**
 * The Address class represents a customer's address.
 <p/>
 <b>Note:</b> this class allows access to sensitive personal and private information.
 Pay attention to appropriate legal and regulatory requirements.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.OrderAddress = function() {};
dw.order.OrderAddress.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the customer's first address.
 * @memberOf dw.order.OrderAddress
 * @return {String} the first address value.
 */
dw.order.OrderAddress.prototype.getAddress1 = function() {};

/**
 * Returns the customer's second address.
 * @memberOf dw.order.OrderAddress
 * @return {String} the second address value.
 */
dw.order.OrderAddress.prototype.getAddress2 = function() {};

/**
 * Returns the Customer's City.
 * @memberOf dw.order.OrderAddress
 * @return {String} the Customer's city.
 */
dw.order.OrderAddress.prototype.getCity = function() {};

/**
 * Returns the Customer's company name.
 * @memberOf dw.order.OrderAddress
 * @return {String} the company name.
 */
dw.order.OrderAddress.prototype.getCompanyName = function() {};

/**
 * Returns the customer's country code.
 * @memberOf dw.order.OrderAddress
 * @return {dw.value.EnumValue} the country code.
 */
dw.order.OrderAddress.prototype.getCountryCode = function() {};

/**
 * Returns the Customer's first name.
 * @memberOf dw.order.OrderAddress
 * @return {String} the Customer first name.
 */
dw.order.OrderAddress.prototype.getFirstName = function() {};

/**
 * Returns a concatenation of the Customer's first, middle,
 and last names and it' suffix.
 * @memberOf dw.order.OrderAddress
 * @return {String} a concatenation of the Customer's first, middle,  and last names and it' suffix.
 */
dw.order.OrderAddress.prototype.getFullName = function() {};

/**
 * Returns the customer's job title.
 * @memberOf dw.order.OrderAddress
 * @return {String} the job title.
 */
dw.order.OrderAddress.prototype.getJobTitle = function() {};

/**
 * Returns the customer's last name.
 * @memberOf dw.order.OrderAddress
 * @return {String} the last name.
 */
dw.order.OrderAddress.prototype.getLastName = function() {};

/**
 * Returns the customer's phone number.
 * @memberOf dw.order.OrderAddress
 * @return {String} the phone number.
 */
dw.order.OrderAddress.prototype.getPhone = function() {};

/**
 * Returns the customer's postal code.
 * @memberOf dw.order.OrderAddress
 * @return {String} the postal code.
 */
dw.order.OrderAddress.prototype.getPostalCode = function() {};

/**
 * Returns the customer's post box.
 * @memberOf dw.order.OrderAddress
 * @return {String} the postBox.
 */
dw.order.OrderAddress.prototype.getPostBox = function() {};

/**
 * Returns the customer's salutation.
 * @memberOf dw.order.OrderAddress
 * @return {String} the customer's salutation.
 */
dw.order.OrderAddress.prototype.getSalutation = function() {};

/**
 * Returns the customer's second name.
 * @memberOf dw.order.OrderAddress
 * @return {String} the second name.
 */
dw.order.OrderAddress.prototype.getSecondName = function() {};

/**
 * Returns the customer's state.
 * @memberOf dw.order.OrderAddress
 * @return {String} the state.
 */
dw.order.OrderAddress.prototype.getStateCode = function() {};

/**
 * Returns the customer's suffix.
 * @memberOf dw.order.OrderAddress
 * @return {String} the suffix.
 */
dw.order.OrderAddress.prototype.getSuffix = function() {};

/**
 * Returns the customer's suite.
 * @memberOf dw.order.OrderAddress
 * @return {String} the customer's suite.
 */
dw.order.OrderAddress.prototype.getSuite = function() {};

/**
 * Returns the customer's title.
 * @memberOf dw.order.OrderAddress
 * @return {String} the title.
 */
dw.order.OrderAddress.prototype.getTitle = function() {};

/**
 * Returns true if the specified address is equivalent to
 this address. An equivalent address is an address whose
 core attributes contain the same values. The core attributes
 are:
 <ul>
 <li>address1</li>
 <li>address2</li>
 <li>city</li>
 <li>companyName</li>
 <li>countryCode</li>
 <li>firstName</li>
 <li>lastName</li>
 <li>postalCode</li>
 <li>postBox</li>
 <li>stateCode</li>
 </ul>
 * @memberOf dw.order.OrderAddress
 * @param {Object} address - the address to test.
 * @return {Boolean} true if the specified address is equivalent to  this address, false otherwise.
 */
dw.order.OrderAddress.prototype.isEquivalentAddress = function(address) {};

/**
 * Sets the customer's first address.
 * @memberOf dw.order.OrderAddress
 * @param {String} value - The value to set.
 */
dw.order.OrderAddress.prototype.setAddress1 = function(value) {};

/**
 * Sets the customer's second address.
 * @memberOf dw.order.OrderAddress
 * @param {String} value - The value to set.
 */
dw.order.OrderAddress.prototype.setAddress2 = function(value) {};

/**
 * Sets the Customer's City.
 * @memberOf dw.order.OrderAddress
 * @param {String} city - the Customer's city to set.
 */
dw.order.OrderAddress.prototype.setCity = function(city) {};

/**
 * Sets the Customer's company name.
 * @memberOf dw.order.OrderAddress
 * @param {String} companyName - the name of the company.
 */
dw.order.OrderAddress.prototype.setCompanyName = function(companyName) {};

/**
 * Sets the Customer's country code.
 * @memberOf dw.order.OrderAddress
 * @param {String} countryCode - the country code.
 */
dw.order.OrderAddress.prototype.setCountryCode = function(countryCode) {};

/**
 * Sets the Customer's first name.
 * @memberOf dw.order.OrderAddress
 * @param {String} firstName - the customer's first  name to set.
 */
dw.order.OrderAddress.prototype.setFirstName = function(firstName) {};

/**
 * Sets the customer's job title.
 * @memberOf dw.order.OrderAddress
 * @param {String} jobTitle - The job title to set.
 */
dw.order.OrderAddress.prototype.setJobTitle = function(jobTitle) {};

/**
 * Sets the customer's last name.
 * @memberOf dw.order.OrderAddress
 * @param {String} lastName - The last name to set.
 */
dw.order.OrderAddress.prototype.setLastName = function(lastName) {};

/**
 * Sets the customer's phone number. The length is restricted to 256 characters.
 * @memberOf dw.order.OrderAddress
 * @param {String} phoneNumber - The phone number to set.
 */
dw.order.OrderAddress.prototype.setPhone = function(phoneNumber) {};

/**
 * Sets the customer's postal code.
 * @memberOf dw.order.OrderAddress
 * @param {String} postalCode - The postal code to set.
 */
dw.order.OrderAddress.prototype.setPostalCode = function(postalCode) {};

/**
 * Sets the customer's post box.
 * @memberOf dw.order.OrderAddress
 * @param {String} postBox - The post box to set.
 */
dw.order.OrderAddress.prototype.setPostBox = function(postBox) {};

/**
 * Sets the customer's salutation.
 * @memberOf dw.order.OrderAddress
 * @param {String} value - the customer's salutation.
 * @deprecated Use <a href="class_dw_order_OrderAddress.html#dw_order_OrderAddress_setSalutation_String_DetailAnchor">setSalutation(String)</a>
 */
dw.order.OrderAddress.prototype.setSaluation = function(value) {};

/**
 * Sets the customer's salutation.
 * @memberOf dw.order.OrderAddress
 * @param {String} value - the customer's salutation.
 */
dw.order.OrderAddress.prototype.setSalutation = function(value) {};

/**
 * Sets the customer's second name.
 * @memberOf dw.order.OrderAddress
 * @param {String} secondName - The second name to set.
 */
dw.order.OrderAddress.prototype.setSecondName = function(secondName) {};

/**
 * Sets the customer's state.
 * @memberOf dw.order.OrderAddress
 * @param {String} state - The state to set.
 */
dw.order.OrderAddress.prototype.setStateCode = function(state) {};

/**
 * Sets the customer's suffix.
 * @memberOf dw.order.OrderAddress
 * @param {String} suffix - The suffix to set.
 */
dw.order.OrderAddress.prototype.setSuffix = function(suffix) {};

/**
 * Sets the customer's suite. The length is restricted to 256 characters.
 * @memberOf dw.order.OrderAddress
 * @param {String} value - the customer's suite.
 */
dw.order.OrderAddress.prototype.setSuite = function(value) {};

/**
 * Sets the customer's title.
 * @memberOf dw.order.OrderAddress
 * @param {String} title - The title to set.
 */
dw.order.OrderAddress.prototype.setTitle = function(title) {};

/**
 * Defines <i>extensions</i> to <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a>s and
 <a href="class_dw_order_ShippingLineItem.html">ShippingLineItem</a>s belonging to an <a href="class_dw_order_Order.html"> order</a>.

 <p/>
 The order-item can be accessed using
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getOrderItem_DetailAnchor">ProductLineItem.getOrderItem()</a> or
 <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_getOrderItem_DetailAnchor">ShippingLineItem.getOrderItem()</a> - these methods return null
 if the item is associated with a <a href="class_dw_order_Basket.html"> basket</a> rather than
 an <a href="class_dw_order_Order.html"> order</a>. Alternative access is available using
 <a href="class_dw_order_Order.html#dw_order_Order_getOrderItem_String_DetailAnchor">Order.getOrderItem(String)</a> by passing the
 <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_getItemID_DetailAnchor"> itemID</a> used to identify the
 order-item in for example export files. The
 associated order-item can also be accessed from
 <a href="class_dw_order_InvoiceItem.html"> invoice-items</a>,
 <a href="class_dw_order_ShippingOrderItem.html"> shipping-order-items</a>,
 <a href="class_dw_order_ReturnItem.html"> return-items</a> and <a href="class_dw_order_ReturnCaseItem.html"> return-case-items</a> using <a href="class_dw_order_AbstractItem.html#dw_order_AbstractItem_getOrderItem_DetailAnchor">AbstractItem.getOrderItem()</a>.

 <p/>
 The order-item provides an item-level <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_getStatus_DetailAnchor"> status</a> and
 <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_getType_DetailAnchor"> type</a>, methods for accessing and creating associated items,
 and methods used to <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_allocateInventory_boolean_DetailAnchor"> allocate
 inventory</a> for <a href="class_dw_order_ShippingOrder.html"> shipping-order</a> creation.
 * @class
 * @extends Object
 */
dw.order.OrderItem = function() {};
dw.order.OrderItem.prototype = new Object();

/**
 * Constant for Order Item Status BACKORDER
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.STATUS_BACKORDER = '';

/**
 * Constant for Order Item Status CANCELLED
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.STATUS_CANCELLED = '';

/**
 * Constant for Order Item Status CONFIRMED
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.STATUS_CONFIRMED = '';

/**
 * Constant for Order Item Status CREATED
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.STATUS_CREATED = '';

/**
 * Constant for Order Item Status NEW
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.STATUS_NEW = '';

/**
 * Constant for Order Item Status OPEN
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.STATUS_OPEN = '';

/**
 * Constant for Order Item Status SHIPPED
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.STATUS_SHIPPED = '';

/**
 * Constant for Order Item Status WAREHOUSE
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.STATUS_WAREHOUSE = '';

/**
 * Constant for Order Item Type PRODUCT
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.TYPE_PRODUCT = '';

/**
 * Constant for Order Item Type SERVICE
 * @type String
 * @memberOf dw.order.OrderItem
 * @static
 * @const
 */
dw.order.OrderItem.TYPE_SERVICE = '';

/**
 * Attempts to allocate inventory for the item and returns the quantity that
 could be allocated or <code>null</code> if no allocation was possible.
 <p/>
 All <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getOptionProductLineItems_DetailAnchor"> option
 product line items</a> are allocated with their parent. Note that for items
 with option product line items no partial allocation is possible. That
 means the partialAllocation parameter will in this case always be
 considered as <code>false</code>
 * @memberOf dw.order.OrderItem
 * @param {Boolean} partialAllocation - <ul>             <li><code>true</code> accept a partial allocation as a result.             Partial allocation is only possible when no option product             line items are included,</li> <li><code>false</code> only full             allocation will be used, partial allocation will be released             automatically</li>             </ul>
 * @return {dw.value.Quantity} <ul>          <li>successful: the newly allocated quantity </li> <li>failed:          <code>null</code>          </ul>
 */
dw.order.OrderItem.prototype.allocateInventory = function(partialAllocation) {};

/**
 * Sum of amounts appeased for this item, calculated by iterating over
 invoice items associated with the item.
 * @memberOf dw.order.OrderItem
 * @return {dw.value.Money} Sum of amounts refunded for this item
 */
dw.order.OrderItem.prototype.getAppeasedAmount = function() {};

/**
 * Sum of amounts captured for this item, calculated by iterating over
 invoice items associated with the item.
 * @memberOf dw.order.OrderItem
 * @return {dw.value.Money} Sum of amounts captured for this item
 */
dw.order.OrderItem.prototype.getCapturedAmount = function() {};

/**
 * Returns all invoice items associated with this item, each
 <a href="class_dw_order_InvoiceItem.html">InvoiceItem</a> will belong to a different
 <a href="class_dw_order_Invoice.html">Invoice</a>, which can also be accessed using
 <a href="class_dw_order_Order.html#dw_order_Order_getInvoices_DetailAnchor">Order.getInvoices()</a> or <a href="class_dw_order_Order.html#dw_order_Order_getInvoice_String_DetailAnchor">Order.getInvoice(String)</a>.
 * @memberOf dw.order.OrderItem
 * @return {dw.util.Collection} invoice items associated with this item
 */
dw.order.OrderItem.prototype.getInvoiceItems = function() {};

/**
 * The itemID used to identify the OrderItem. Note this is
 not a UUID, it is created internally when the OrderItem
 instance is created, and is typically used within export files to
 identify the item.
 * @memberOf dw.order.OrderItem
 * @return {String} the itemID of the OrderItem
 */
dw.order.OrderItem.prototype.getItemID = function() {};

/**
 * Returns the line item which is being extended by this instance.
 * @memberOf dw.order.OrderItem
 * @return {dw.order.LineItem} the line item associated with this instance
 */
dw.order.OrderItem.prototype.getLineItem = function() {};

/**
 * Sum of amounts refunded for this item, calculated by iterating over
 invoice items associated with the item.
 * @memberOf dw.order.OrderItem
 * @return {dw.value.Money} Sum of amounts refunded for this item
 */
dw.order.OrderItem.prototype.getRefundedAmount = function() {};

/**
 * Returns all return case items associated with this item,
 each <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a> will belong to a different
 <a href="class_dw_order_ReturnCase.html">ReturnCase</a>, which can also be accessed using
 <a href="class_dw_order_Order.html#dw_order_Order_getReturnCases_DetailAnchor">Order.getReturnCases()</a> or <a href="class_dw_order_Order.html#dw_order_Order_getReturnCase_String_DetailAnchor">Order.getReturnCase(String)</a>.
 * @memberOf dw.order.OrderItem
 * @return {dw.util.Collection} invoice items associated with this item
 */
dw.order.OrderItem.prototype.getReturnCaseItems = function() {};

/**
 * The quantity returned, dynamically sum of quantities held by associated
 ReturnItems.
 * @memberOf dw.order.OrderItem
 * @return {dw.value.Quantity} quantity returned, the sum of quantities held by associated          ReturnItems
 */
dw.order.OrderItem.prototype.getReturnedQuantity = function() {};

/**
 * The not cancelled shipping order item if existing.
 <P>
 For one OrderItem exactly one shipping order Item can
 exist that is not in status <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_STATUS_CANCELLED_DetailAnchor">ShippingOrderItem.STATUS_CANCELLED</a>.
 Can be <code>null</code> if no shipping order creation ran for this item.
 * @memberOf dw.order.OrderItem
 * @return {dw.order.ShippingOrderItem} the shipping order item or <code>null</code>
 */
dw.order.OrderItem.prototype.getShippingOrderItem = function() {};

/**
 * Returns a collection of the shipping order items created for this item.
 ShippingOrder items represents the whole or part of this item which could
 be delivered, and belong to a shipping order.
 * @memberOf dw.order.OrderItem
 * @return {dw.util.Collection} collection of the shipping order items created for this item
 */
dw.order.OrderItem.prototype.getShippingOrderItems = function() {};

/**
 * Gets the order item status.<br>
 The possible values are <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_NEW_DetailAnchor">STATUS_NEW</a>, <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_OPEN_DetailAnchor">STATUS_OPEN</a>,
 <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_BACKORDER_DetailAnchor">STATUS_BACKORDER</a>, <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_CONFIRMED_DetailAnchor">STATUS_CONFIRMED</a>,
 <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_WAREHOUSE_DetailAnchor">STATUS_WAREHOUSE</a>, <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_SHIPPED_DetailAnchor">STATUS_SHIPPED</a>,
 <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_STATUS_CANCELLED_DetailAnchor">STATUS_CANCELLED</a>.
 <p/>
 * @memberOf dw.order.OrderItem
 * @return {dw.value.EnumValue} the status
 */
dw.order.OrderItem.prototype.getStatus = function() {};

/**
 * Returns the type of line item with which this instance is associated, one
 of
 <ul>
 <li>SERVICE (method <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_getLineItem_DetailAnchor">OrderItem.getLineItem()</a> returns a
 <a href="class_dw_order_ShippingLineItem.html">ShippingLineItem</a></li>
 <li>PRODUCT (method <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_getLineItem_DetailAnchor">OrderItem.getLineItem()</a> returns a
 <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a></li>
 </ul>
 * @memberOf dw.order.OrderItem
 * @return {dw.value.EnumValue} the type of order item, one of {@link #TYPE_PRODUCT} or          {@link #TYPE_SERVICE}.
 */
dw.order.OrderItem.prototype.getType = function() {};

/**
 * Set the status of the order item, use one of the values documented in
 <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_getStatus_DetailAnchor">OrderItem.getStatus()</a>
 * @memberOf dw.order.OrderItem
 * @param {String} status - status string matching one of the values for status
 */
dw.order.OrderItem.prototype.setStatus = function(status) {};

/**
 * Provides static helper methods for managing orders.
 * @class
 * @extends Object
 */
dw.order.OrderMgr = function() {};
dw.order.OrderMgr.prototype = new Object();

/**
 * Triggers the shipping order creation for an order.
 <P>
 Must be run outside of an transaction. Will call hooks of the shipping
 order creation process which are:
 <ul>
 <li> <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointPrepareCreateShippingOrders_DetailAnchor">ShippingOrderHooks.extensionPointPrepareCreateShippingOrders</a></li>
 <li> <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointCreateShippingOrders_DetailAnchor">ShippingOrderHooks.extensionPointCreateShippingOrders</a></li>
 <li> <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointAfterStatusChange_DetailAnchor">ShippingOrderHooks.extensionPointAfterStatusChange</a></li>
 <li> <a href="class_dw_order_hooks_ShippingOrderHooks.html#dw_order_hooks_ShippingOrderHooks_extensionPointNotifyStatusChange_DetailAnchor">ShippingOrderHooks.extensionPointNotifyStatusChange</a></li>
 </ul>
 As a result none, one or multiple <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a>s are created.
 * @memberOf dw.order.OrderMgr
 * @param {dw.order.Order} order - the order to run the shipping order creation for
 * @return {dw.system.Status} Status 'OK' or 'ERROR' with an error message
 * @static
 */
dw.order.OrderMgr.createShippingOrders = function(order) {};

/**
 * Returns the meta data for Orders.
 * @memberOf dw.order.OrderMgr
 * @return {dw.object.ObjectTypeDefinition} the meta data for Orders.
 * @static
 */
dw.order.OrderMgr.describeOrder = function() {};

/**
 * <p>
 This method fails an unplaced order and is usually called if payment could
 not be authorized. The specified Order must be in status CREATED, and will
 be set to status FAILED.
 </p>
 <p>
 Inventory transactions and coupon redemptions associated with the Order will
 be rolled back.
 </p>
 <p>
 If the order is failed in the same session in which it was created, the
 basket will be reopened such that it can be used for a subsequent order.
 </p>
 * @memberOf dw.order.OrderMgr
 * @param {dw.order.Order} order - the order to be placed
 * @return {dw.system.Status} Status 'OK' or 'ERROR' with an error message
 * @static
 */
dw.order.OrderMgr.failOrder = function(order) {};

/**
 * Returns the order with the specified order number.
 * @memberOf dw.order.OrderMgr
 * @param {String} orderNumber - the order number of the to be retrieved order
 * @return {dw.order.Order} Order for specified order number
 * @static
 */
dw.order.OrderMgr.getOrder = function(orderNumber) {};

/**
 * <p>
 This method places an order and is usually called after payment has been
 authorized. The specified order must be in status CREATED, and will be set
 to status NEW.
 </p>
 <p>
 If the order contains product or gift certificate line items associated with
 product list items, the pipelet updates the purchase the product list items.
 For example, if the basket contains an item added from a gift registry, the
 purchase history of the respective gift registry item is updated.
 </p>
 <p>
 The order will count towards product and customer active data.
 </p>
 * @memberOf dw.order.OrderMgr
 * @param {dw.order.Order} order - the order to be placed
 * @return {dw.system.Status} Status 'OK' or 'ERROR' with an error message
 * @static
 */
dw.order.OrderMgr.placeOrder = function(order) {};

/**
 * Executes a user-definable function on a set of orders. This method is intended top be used in batch processes and jobs,
 since it allows efficient processing of large result sets (which might take a while to process).

 First, a search with the given parameters is executed. Then the given function is executed once for each order of the search result.
 The order is handed over as the only parameter to this function.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 The callback function will be supplied with a single argument of type 'Order'. When the function defines
 additional arguments, they will be undefined when called. When the method doesn't define any argument, it will
 be called anyway.

 Error during execution of the callback will be logged, and execution will continue with the next element from the
 result set.

 This method can be used as in this example (which counts the number of orders):

 <pre>
         var count=0;
         function callback(order: Order)
         {
             count++;
             dw.system.Logger.debug("order found: "+order.documentNo)
         }
        OrderMgr.processOrders(callback, "buyerno=1");
        dw.system.Logger.debug("found "+count+" orders for buyerno 1");
     </pre>
 * @memberOf dw.order.OrderMgr
 * @param {org.mozilla.javascript.Function} processFunction - the function to execute for each order
 * @param {String} queryString - the query string to use when searching for a order.
 * @param {Object[]} args - the query string arguments.
 * @static
 * @varArgs
 */
dw.order.OrderMgr.processOrders = function(processFunction, queryString, args) {};

/**
 * <p/>Searches for a single order instance.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul>

 <p/>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.


 <p/>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>


 <p/>If there is more than one object matching the specified query criteria, the
 result is not deterministic. In order to retrieve a single object from a sorted result
 set it is recommended to use the following code:
 <code>queryOrders("", "custom.myAttr asc", null).first()</code>.
 The method <code>first()</code> returns only the next element and closes the
 iterator.

 <b>This method will be deprecated in a future release. We recommend to use methods <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_searchOrder_String_Object_DetailAnchor">searchOrder(String, Object...)</a>,
 <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_searchOrders_Map_String_DetailAnchor">searchOrders(Map, String)</a> and <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_searchOrders_String_String_Object_DetailAnchor">searchOrders(String, String, Object...)</a>
 to search for orders, and to use method <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_processOrders_Function_String_Object_DetailAnchor">processOrders(Function, String, Object...)</a> to search and process orders in jobs.</b>
 * @memberOf dw.order.OrderMgr
 * @param {String} queryString - the query string that is used to locate the order.
 * @param {Object[]} args - one or more arguments to apply.
 * @return {dw.order.Order} the order which was found when executing the <code>queryString</code>.
 * @static
 * @varArgs
 */
dw.order.OrderMgr.queryOrder = function(queryString, args) {};

/**
 * <p/>Searches for order instances.

 <p/>The search can be configured with a map, which key-value pairs are
 converted into a query expression. The key-value pairs are turned into a
 sequence of '=' or 'like' conditions, which are combined with AND
 statements.

 <p/>Example:<br/>
 A map with the key/value pairs: <i>'name'/'tom*', 'age'/66</i>
 will be converted as follows: <code>"name like 'tom*' and age = 66"</code>

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.

 <p>It is strongly recommended to call the <code><a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a></code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>

 <b>This method will be deprecated in a future release. We recommend to use methods <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_searchOrder_String_Object_DetailAnchor">searchOrder(String, Object...)</a>,
 <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_searchOrders_Map_String_DetailAnchor">searchOrders(Map, String)</a> and <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_searchOrders_String_String_Object_DetailAnchor">searchOrders(String, String, Object...)</a>
 to search for orders, and to use method <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_processOrders_Function_String_Object_DetailAnchor">processOrders(Function, String, Object...)</a> to search and process orders in jobs.</b>
 * @memberOf dw.order.OrderMgr
 * @param {dw.util.Map} queryAttributes - a set of key-value pairs that define the query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 */
dw.order.OrderMgr.queryOrders = function(queryAttributes, sortString) {};

/**
 * Searches for order instances.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 <p/>The identifier for an <b>attribute</b>  to use in a query condition is always the
 ID of the  attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul>

 <p/>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.


 <p/>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>


 <p/>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.

 <p/>Sometimes it is desired to get all instances of specified type with a special sorting condition.
 This can be easily done by providing the 'type' of the custom object and the 'sortString' in combination with
 an empty 'queryString', e.g. <code>queryOrders("sample", "", "custom.myAttr asc")</code>

 <p>It is strongly recommended to call <code><a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a></code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>

 <b>This method will be deprecated in a future release. We recommend to use methods <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_searchOrder_String_Object_DetailAnchor">searchOrder(String, Object...)</a>,
 <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_searchOrders_Map_String_DetailAnchor">searchOrders(Map, String)</a> and <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_searchOrders_String_String_Object_DetailAnchor">searchOrders(String, String, Object...)</a>
 to search for orders, and to use method <a href="class_dw_order_OrderMgr.html#dw_order_OrderMgr_processOrders_Function_String_Object_DetailAnchor">processOrders(Function, String, Object...)</a> to search and process orders in jobs.</b>
 * @memberOf dw.order.OrderMgr
 * @param {String} queryString - the actual query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @param {Object[]} args - one or more arguments for the query string.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 * @varArgs
 */
dw.order.OrderMgr.queryOrders = function(queryString, sortString, args) {};

/**
 * <p/>Searches for a single order instance.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 <p/>The identifier for an <b>attribute</b> to use in a query condition is always the
 ID of the attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul>

 <p/>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.


 <p/>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>


 <p/>If there is more than one object matching the specified query criteria, the
 result is not deterministic. In order to retrieve a single object from a sorted result
 set it is recommended to use the following code:
 <code>queryOrders("", "custom.myAttr asc", null).first()</code>.
 The method <code>first()</code> returns only the next element and closes the
 iterator.

 <p/>If the order search API is configured to use the new Search Service (Beta), the following differences apply:<br/>
 <ul>
     <li>wildcards will be filtered from the query (*, %, +) and replaces by spaces</li>
     <li>LIKE and ILIKE queries will be executed as fulltext queries (working on whole words), not as substring searches</li>
     <li>LIKE queries will always be case insensitive</li>
     <li>using logical operators may change the execution of LIKE/ILIKE clauses to exact string comparison, depending on how they are combined</li>
     <li>using logical operators may result in degraded performance, depending on how they are combined</li>
 </ul>
 * @memberOf dw.order.OrderMgr
 * @param {String} queryString - the query string that is used to locate the order.
 * @param {Object[]} args - one or more arguments to apply.
 * @return {dw.order.Order} the order which was found when executing the <code>queryString</code>.
 * @static
 * @varArgs
 */
dw.order.OrderMgr.searchOrder = function(queryString, args) {};

/**
 * <p/>Searches for order instances.

 <p/>The search can be configured with a map, which key-value pairs are
 converted into a query expression. The key-value pairs are turned into a
 sequence of '=' or 'like' conditions, which are combined with AND
 statements.

 <p/>Example:<br/>
 A map with the key/value pairs: <i>'name'/'tom*', 'age'/66</i>
 will be converted as follows: <code>"name like 'tom*' and age = 66"</code>
 Note that wildcards are not supported by Search Service.

 <p/>The identifier for an <b>attribute</b> to use in a query condition is always the
 ID of the attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.

 <p>It is strongly recommended to call <code><a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a></code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>

 <p/>If the order search API is configured to use the new Search Service (Beta), the following differences apply:<br/>
 <ul>
     <li>wildcards will be filtered from the query (*, %, +) and replaces by spaces</li>
     <li>LIKE and ILIKE queries will be executed as fulltext queries (working on whole words), not as substring searches</li>
     <li>LIKE queries will always be case insensitive</li>
     <li>using logical operators may change the execution of LIKE/ILIKE clauses to exact string comparison, depending on how they are combined</li>
     <li>using logical operators may result in degraded performance, depending on how they are combined</li>
 </ul>
 * @memberOf dw.order.OrderMgr
 * @param {dw.util.Map} queryAttributes - a set of key-value pairs that define the query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 */
dw.order.OrderMgr.searchOrders = function(queryAttributes, sortString) {};

/**
 * Searches for order instances.

 <p/>The search can be configured using a simple query language, which
 provides most common filter and operator functionality.

 <p/>The identifier for an <b>attribute</b> to use in a query condition is always the
 ID of the attribute as defined in the type definition. For custom defined attributes
 the prefix custom is required in the search term (e.g. <code>custom.color = {1}</code>),
 while for system attributes no prefix is used (e.g. <code>name = {4}</code>).

 <p/>Supported attribute value <b>types</b> with sample expression values:<ul>
 <li><i>String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Integer</i> <code>1, 3E4</code></li>
 <li><i>Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Date</i> <code>yyyy-MM-dd e.g. 2007-05-31 (Default TimeZone = UTC)</code></li>
 <li><i>DateTime</i> <code>yyyy-MM-dd'T'hh:mm:ss+Z e.g. 2007-05-31T00:00+Z (Z TimeZone = UTC) or 2007-05-31T00:00:00</code></li>
 <li><i>Boolean</i> <code>true, false</code></li>
 <li><i>Email</i> <code>'search@demandware.com', '*@demandware.com'</code></li>
 <li><i>Set of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Set of Integer</i> <code>1, 3E4</code></li>
 <li><i>Set of Number</i> <code>1.0, 3.99E5</code></li>
 <li><i>Enum of String</i> <code>'String', 'Str*', 'Strin?'</code></li>
 <li><i>Enum of Integer</i> <code>1, 3E4</code></li></ul><br/>
 The following types of attributes are not queryable:<ul><br/>
 <li><i>Image</i></li>
 <li><i>HTML</i></li>
 <li><i>Text</i></li>
 <li><i>Quantity</i></li>
 <li><i>Password</i></li></ul><br/>
 Note, that some system attributes are not queryable by default regardless of the
 actual value type code.


 <p/>The following <b>operators</b> are supported in a condition:<br/><ul>
 <li><code>=</code> Equals - All types; supports NULL value (<code>thumbnail = NULL</code>)</li>
 <li><code>!=</code> Not equals - All types; supports NULL value (<code>thumbnail != NULL</code>)</li>
 <li><code>&lt;</code> Less than  - Integer, Number and Date types only</li>
 <li><code>&gt;</code> Greater than - Integer, Number and Date types only</li>
 <li><code>&lt;=</code> Less or equals than - Integer, Number and Date types only</li>
 <li><code>&gt;=</code> Greater or equals than  - Integer, Number and Date types only</li>
 <li><code>LIKE</code> Like - String types and Email only; use if leading or trailing
 wildcards will be used to support substring search(<code>custom.country LIKE 'US*'</code>)</li>
 <li><code>ILIKE</code> Caseindependent Like - String types and Email only, use to support
 case insensitive query (<code>custom.country ILIKE 'usa'</code>), does also support wildcards for
 substring matching</li></ul>
 Note that wildcards are not supported by Search Service.

 <p/>Conditions can be combined using logical expressions 'AND', 'OR' and 'NOT'
 and nested using parenthesis e.g.
 <code>gender = {1} AND (age >= {2} OR (NOT profession LIKE {3}))</code>.


 <p/>The query language provides a placeholder syntax to pass objects as
 additional search parameters. Each passed object is related to a
 placeholder in the query string. The placeholder must be an Integer that
 is surrounded by braces. The first Integer value must be '0', the second
 '1' and so on, e.g.
 <code>querySystemObjects("sample", "age = {0} or creationDate >= {1}", 18, date)</code>


 <p/>The <b>sorting</b> parameter is optional and may contain a comma separated list of
 attribute names to sort by. Each sort attribute name may be followed by an
 optional sort direction specifier ('asc' | 'desc'). Default sorting directions is
 ascending, if no direction was specified.<br/>
 Example: <code>age desc, name</code><br/>
 Please note that specifying a localized custom attribute as the sorting attribute is
 currently not supported.

 <p/>Sometimes it is desired to get all instances of specified type with a special sorting condition.
 This can be easily done by providing the 'type' of the custom object and the 'sortString' in combination with
 an empty 'queryString', e.g. <code>queryOrders("sample", "", "custom.myAttr asc")</code>

 <p>It is strongly recommended to call <code><a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a></code> on the returned SeekableIterator
 if not all of its elements are being retrieved. This will ensure the proper cleanup of system resources.</p>

 <p/>If the order search API is configured to use the new Search Service (Beta), the following differences apply:<br/>
 <ul>
     <li>wildcards will be filtered from the query (*, %, +) and replaces by spaces</li>
     <li>LIKE and ILIKE queries will be executed as fulltext queries (working on whole words), not as substring searches</li>
     <li>LIKE queries will always be case insensitive</li>
     <li>using logical operators may change the execution of LIKE/ILIKE clauses to exact string comparison, depending on how they are combined</li>
     <li>using logical operators may result in degraded performance, depending on how they are combined</li>
 </ul>
 * @memberOf dw.order.OrderMgr
 * @param {String} queryString - the actual query.
 * @param {String} sortString - an optional sorting or null if no sorting is necessary.
 * @param {Object[]} args - one or more arguments for the query string.
 * @return {dw.util.SeekableIterator} SeekableIterator containing the result set of the query.
 * @see <a href="class_dw_util_SeekableIterator.html#dw_util_SeekableIterator_close_DetailAnchor">SeekableIterator.close()</a>
 * @static
 * @varArgs
 */
dw.order.OrderMgr.searchOrders = function(queryString, sortString, args) {};

/**
 * Register a "start checkout" event for the current session basket. This event is tracked for AB test statistics
 but otherwise has no effect on the basket. The system will register at most one checkout per basket per session.
 * @memberOf dw.order.OrderMgr
 * @return {dw.system.Status}
 * @static
 */
dw.order.OrderMgr.startCheckout = function() {};

/**
 * Represents any payment instrument used to pay orders, such as credit card
 or bank transfer. The object defines standard methods for credit card
 payment, and can be extended by attributes appropriate for other
 payment methods.
 * @class
 * @extends dw.order.PaymentInstrument
 */
dw.order.OrderPaymentInstrument = function() {};
dw.order.OrderPaymentInstrument.prototype = new dw.order.PaymentInstrument();

/**
 * Returns the driver's license associated with a bank account if the calling
 context meets the following criteria: <br/>
 <ul>
 <li>
 If the method call happens in the context of a storefront request and
 the current customer is identical to the customer related to the basket
 or order, and the current protocol is HTTPS.
 </li>
 <li>
 If the method call happens in the context of the business manager and the
 current user has permission to the Orders module.
 </li>
 </ul>
 Otherwise, the method throws an exception.
 * @memberOf dw.order.OrderPaymentInstrument
 * @return {String} the driver's license number if the calling context meets the  necessary criteria.
 */
dw.order.OrderPaymentInstrument.prototype.getBankAccountDriversLicense = function() {};

/**
 * Returns the account number if the calling context meets
 the following criteria: <br/>
 <ul>
 <li>
 If the method call happens in the context of a storefront request and
 the current customer is identical to the customer related to the basket
 or order, and the current protocol is HTTPS.
 </li>
 <li>
 If the method call happens in the context of the business manager and the
 current user has permissions to the Orders module.
 </li>
 </ul>
 Otherwise, the method throws an exception.
 * @memberOf dw.order.OrderPaymentInstrument
 * @return {String} the account number if the calling context meets the  necessary criteria.
 */
dw.order.OrderPaymentInstrument.prototype.getBankAccountNumber = function() {};

/**
 * Returns the sum of the captured amounts. The captured amounts
 are calculated on the fly. Associate a payment capture for an Payment Instrument with an Invoice
 using Invoice method addCaptureTransaction.
 * @memberOf dw.order.OrderPaymentInstrument
 * @return {dw.value.Money} sum of captured amounts
 */
dw.order.OrderPaymentInstrument.prototype.getCapturedAmount = function() {};

/**
 * Returns the de-crypted creditcard number if the calling context meets
 the following criteria: <br/>
 <ul>
 <li>
 If the method call happens in the context of a storefront request and
 the current customer is identical to the customer related to the basket
 or order, and the current protocol is HTTPS.
 </li>
 <li>
 If the method call happens in the context of the business manager and the
 current user has the permission to manage orders.
 </li>
 </ul>
 Otherwise, the method returns the masked credit card number.
 * @memberOf dw.order.OrderPaymentInstrument
 * @return {String} the de-crypted creditcard number if the calling context meets the  necessary criteria.
 */
dw.order.OrderPaymentInstrument.prototype.getCreditCardNumber = function() {};

/**
 * Returns the Payment Transaction for this Payment Instrument or null.
 * @memberOf dw.order.OrderPaymentInstrument
 * @return {dw.order.PaymentTransaction} the Payment Transaction for this Payment Instrument or null.
 */
dw.order.OrderPaymentInstrument.prototype.getPaymentTransaction = function() {};

/**
 * Returns the sum of the refunded amounts. The refunded amounts
 are calculated on the fly. Associate a payment refund for an Payment Instrument with an Invoice
 using Invoice method addRefundTransaction.
 * @memberOf dw.order.OrderPaymentInstrument
 * @return {dw.value.Money} sum of refunded amounts
 */
dw.order.OrderPaymentInstrument.prototype.getRefundedAmount = function() {};

/**
 *
 * @class
 * @extends Object
 */
dw.order.OrderProcessStatusCodes = function() {};
dw.order.OrderProcessStatusCodes.prototype = new Object();

/**
 * Indicates that the order could not be used because
 it has already been cancelled.
 * @type String
 * @memberOf dw.order.OrderProcessStatusCodes
 * @static
 * @const
 */
dw.order.OrderProcessStatusCodes.ORDER_ALREADY_CANCELLED = '';

/**
 * Indicates that the order could not be used because it
 has already been exported.
 * @type String
 * @memberOf dw.order.OrderProcessStatusCodes
 * @static
 * @const
 */
dw.order.OrderProcessStatusCodes.ORDER_ALREADY_EXPORTED = '';

/**
 * Indicates that the order could not be used because
 it has already been failed.
 * @type String
 * @memberOf dw.order.OrderProcessStatusCodes
 * @static
 * @const
 */
dw.order.OrderProcessStatusCodes.ORDER_ALREADY_FAILED = '';

/**
 * Indicates that the order could not be used because
 it has already been replaced.
 * @type String
 * @memberOf dw.order.OrderProcessStatusCodes
 * @static
 * @const
 */
dw.order.OrderProcessStatusCodes.ORDER_ALREADY_REPLACED = '';

/**
 * Indicates that the order could not be used because it
 contains gift certificates.
 * @type String
 * @memberOf dw.order.OrderProcessStatusCodes
 * @static
 * @const
 */
dw.order.OrderProcessStatusCodes.ORDER_CONTAINS_GC = '';

/**
 * Indicates that the order could not be used because
 it has not been placed.
 * @type String
 * @memberOf dw.order.OrderProcessStatusCodes
 * @static
 * @const
 */
dw.order.OrderProcessStatusCodes.ORDER_NOT_PLACED = '';

/**
 * Represents payment cards and provides methods to access the payment card
 attributes and status.
 <p/>
 <b>Note:</b> this class handles sensitive financial and card holder data.
 Pay special attention to PCI DSS v3. requirements 1, 3, 7, and 9.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.PaymentCard = function() {};
dw.order.PaymentCard.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the unique card type of the payment card.
 * @memberOf dw.order.PaymentCard
 * @return {String} cardType of the payment card.
 */
dw.order.PaymentCard.prototype.getCardType = function() {};

/**
 * Returns the description of the payment card.
 * @memberOf dw.order.PaymentCard
 * @return {dw.content.MarkupText} Description of the payment card.
 */
dw.order.PaymentCard.prototype.getDescription = function() {};

/**
 * Returns the reference to the payment card image.
 * @memberOf dw.order.PaymentCard
 * @return {dw.content.MediaFile} Image of the payment card.
 */
dw.order.PaymentCard.prototype.getImage = function() {};

/**
 * Returns the name of the payment card.
 * @memberOf dw.order.PaymentCard
 * @return {String} Name of the payment card.
 */
dw.order.PaymentCard.prototype.getName = function() {};

/**
 * Returns 'true' if payment card is active (enabled), otherwise 'false' is returned.
 * @memberOf dw.order.PaymentCard
 * @return {Boolean} true if payment card is active, otherwise false.
 */
dw.order.PaymentCard.prototype.isActive = function() {};

/**
 * Returns 'true' if this payment card is applicable for the specified
 customer, country and payment amount and the session currency.
 <p/>

 The payment card is applicable if
 <ul>
 <li>the card is restricted by customer group, and at least one of the
 groups of the specified customer is assigned to the card</li>
 <li>the card is restricted by billing country, and the specified country
 code is assigned to the card</li>
 <li>the method is restricted by payment amount for the session currency,
 and the specified payment amount is within the limits of the min/max
 payment amount defined for the method and the session currency</li>
 <li>the method is restricted by session currency, and the session
 currency code is assigned to the method</li>
 </ul>

 All parameters are optional, and if not specified, the respective
 restriction won't be validated. For example, if a card is restricted by
 billing country, but no country code is specified, this card will be
 returned, unless it is filtered out by customer group or payment amount.
 * @memberOf dw.order.PaymentCard
 * @param {dw.customer.Customer} customer - Customer or null
 * @param {String} countryCode - Billing country code or null
 * @param {Number} paymentAmount - Payment amount or null
 * @return {Boolean} true if payment card is applicable, false otherwise
 */
dw.order.PaymentCard.prototype.isApplicable = function(customer, countryCode, paymentAmount) {};

/**
 * Constant for specification of the public key encryption algorithm RSA.
 * @type String
 * @memberOf dw.order.PaymentInstrument
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_getEncryptedCreditCardNumber_String_CertificateRef_DetailAnchor">getEncryptedCreditCardNumber(String, CertificateRef)</a>
 * @static
 * @const
 */
dw.order.PaymentInstrument.ENCRYPTION_ALGORITHM_RSA = '';

/**
 * Represents a bank transfer type of payment.
 * @type String
 * @memberOf dw.order.PaymentInstrument
 * @static
 * @const
 */
dw.order.PaymentInstrument.METHOD_BANK_TRANSFER = '';

/**
 * Represents a 'bill me later' type of payment.
 * @type String
 * @memberOf dw.order.PaymentInstrument
 * @static
 * @const
 */
dw.order.PaymentInstrument.METHOD_BML = '';

/**
 * Represents a credit card type of payment.
 * @type String
 * @memberOf dw.order.PaymentInstrument
 * @static
 * @const
 */
dw.order.PaymentInstrument.METHOD_CREDIT_CARD = '';

/**
 * Represents a gift certificate.
 * @type String
 * @memberOf dw.order.PaymentInstrument
 * @static
 * @const
 */
dw.order.PaymentInstrument.METHOD_GIFT_CERTIFICATE = '';

/**
 * Returns the driver's license number associated with the bank account if the
 calling context meets the following criteria: <br/>
 <ul>
 <li>
 If the instance is a CustomerPaymentInstrument, and
 we are in the context of a storefront request, and the current customer
 is registered and authenticated, and the payment instrument is associated
 to the profile of the current customer, and the current protocol is HTTPS
 </li>
 <li>
 If the instance is a OrderPaymentInstrumentInfo, and we are in
 the context of a storefront request, and the current customer is identical
 to the customer related to the basket, and the current protocol is HTTPS
 </li>
 <li>
 If the instance is a OrderPaymentInstrumentInfo, and we are in
 the context of a business manager request, and the current user has the
 permission MANAGE_ORDERS
 </li>
 <li>
 If the instance is a OrderPaymentInstrumentInfo, and the account information
 has not been masked as a result of the data retention security policy
 for the site
 </li>
 </ul>
 <p/>
 Otherwise, the method returns the masked driver's license number.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the driver's license number if the calling context meets  the necessary criteria.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 * @abstract
 */
dw.order.PaymentInstrument.prototype.getBankAccountDriversLicense = function() {};

/**
 * Returns the last 4 characters of the decrypted driver's license number of
 the bank account associated with this PaymentInstrument.

 If the number is empty or null
 it will be returned without an exception.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the last 4 characters of the de-crypted driver's license number.
 */
dw.order.PaymentInstrument.prototype.getBankAccountDriversLicenseLastDigits = function() {};

/**
 * Returns the last specified number of characters of the decrypted driver's license number of
 the bank account associated with this PaymentInstrument.

 If the number is empty (i.e. "" or null),
 it will be returned without an exception.

 Note that <code>count</code> is limited to 4 in an unsecure environment,
 and if account information for this payment instrument has been masked
 due to the data retention security policy for the site.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} count - number of characters to be returned.
 * @return {String} the last specified number of characters of the decrypted driver's license number.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getBankAccountDriversLicenseLastDigits = function(count) {};

/**
 * Returns the driver's license state code associated with a bank account payment instrument.
 Returns null for other payment methods.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the state in which the bank account driver's license was issued.
 * @tbd
 */
dw.order.PaymentInstrument.prototype.getBankAccountDriversLicenseStateCode = function() {};

/**
 * Returns the full name of the holder of a bank account payment instrument.
 Returns null for other payment methods.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the bank account holder's full name.
 * @tbd
 */
dw.order.PaymentInstrument.prototype.getBankAccountHolder = function() {};

/**
 * Returns the bank account number if the calling context meets
 the following criteria: <br/>
 <ul>
 <li>
 If the instance is a CustomerPaymentInstrument, and
 we are in the context of a storefront request, and the current customer
 is registered and authenticated, and the payment instrument is associated
 to the profile of the current customer, and the current protocol is HTTPS
 </li>
 <li>
 If the instance is a OrderPaymentInstrumentInfo, and we are in
 the context of a storefront request, and the current customer is identical
 to the customer related to the basket, and the current protocol is HTTPS
 </li>
 <li>
 If the instance is a OrderPaymentInstrumentInfo, and we are in
 the context of a business manager request, and the current user has the
 permission MANAGE_ORDERS
 </li>
 <li>
 If the instance is a OrderPaymentInstrumentInfo, and the account information
 has not been masked as a result of the data retention security policy
 for the site
 </li>
 </ul>
 <p/>
 Otherwise, the method returns the masked bank account number.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the bank account number if the calling context meets  the necessary criteria.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 * @abstract
 */
dw.order.PaymentInstrument.prototype.getBankAccountNumber = function() {};

/**
 * Returns the last 4 characters of the decrypted bank account number.

 If the number is empty or null,
 it will be returned without an exception.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the last 4 characters of the decrypted bank account number.
 */
dw.order.PaymentInstrument.prototype.getBankAccountNumberLastDigits = function() {};

/**
 * Returns the last specified number of characters of the decrypted bank account card number.

 If the number is empty (i.e. "" or null),
 it will be returned without an exception.

 Note that <code>count</code> is limited to 4 in an unsecure environment,
 and if account information for this payment instrument has been masked
 due to the data retention security policy for the site.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} count - number of characters to be returned.
 * @return {String} the last specified characters of the decrypted bank account number.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getBankAccountNumberLastDigits = function(count) {};

/**
 * Returns the bank routing number of a bank account payment instrument.
 Returns null for other payment methods.

 If account information has been masked due to the data retention security
 policy for the site, the return value is fully masked.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the bank account rounting number.
 * @tbd
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getBankRoutingNumber = function() {};

/**
 * Returns the month of the year in which the credit card
 expires (1-12).
 * @memberOf dw.order.PaymentInstrument
 * @return {Number} the month of the year in which the credit card  expires (1-12).
 */
dw.order.PaymentInstrument.prototype.getCreditCardExpirationMonth = function() {};

/**
 * Returns the year in which the credit card
 expires, such as '2004'.
 * @memberOf dw.order.PaymentInstrument
 * @return {Number} the year in which the credit card  expires.
 */
dw.order.PaymentInstrument.prototype.getCreditCardExpirationYear = function() {};

/**
 * Returns the name of the credit card owner.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the name of the credit card owner.
 */
dw.order.PaymentInstrument.prototype.getCreditCardHolder = function() {};

/**
 * Returns the credit card issue number.  This attribute is only used by
 specific credit/debit card processors such as Solo and Switch in the UK.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the credit card issue number
 */
dw.order.PaymentInstrument.prototype.getCreditCardIssueNumber = function() {};

/**
 * Returns the decrypted credit card number if the calling context meets
 the following criteria: <br/>
 <ul>
 <li>
 If the instance is a CustomerPaymentInstrument, and
 we are in the context of a storefront request, and the current customer
 is registered and authenticated, and the payment instrument is associated
 to the profile of the current customer, and the current protocol is HTTPS
 </li>
 <li>
 If the instance is a OrderPaymentInstrumentInfo, and we are in
 the context of a storefront request, and the current customer is identical
 to the customer related to the basket, and the current protocol is HTTPS
 </li>
 <li>
 If the instance is a OrderPaymentInstrumentInfo, and we are in
 the context of a business manager request, and the current user has the
 permission MANAGE_ORDERS
 </li>
 <li>
 If the instance is a OrderPaymentInstrumentInfo, and the account information
 has not been masked as a result of the data retention security policy
 for the site
 </li>
 </ul>
 <p/>
 Otherwise, the method returns the masked credit card number.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the decrypted credit card number if the calling context meets  the necessary criteria.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 * @abstract
 */
dw.order.PaymentInstrument.prototype.getCreditCardNumber = function() {};

/**
 * Returns the last 4 characters of the decrypted credit card number.

 If the number is empty or null
 it will be returned without an exception.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the last 4 characters of the de-crypted credit card number.
 */
dw.order.PaymentInstrument.prototype.getCreditCardNumberLastDigits = function() {};

/**
 * Returns the last specified number of characters of the decrypted credit card number.

 If the number is empty (i.e. "" or null),
 it will be returned without an exception.

 Note that <code>count</code> is limited to 4 in an unsecure environment,
 and if account information for this payment instrument has been masked
 due to the data retention security policy for the site.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} count - number of characters to be returned.
 * @return {String} the last specified number of characters of the decrypted credit card number.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getCreditCardNumberLastDigits = function(count) {};

/**
 * Secure credit card data can be replaced by a token by utilizing a
 tokenization provider, which securely stores the credit card data using
 the token as a key. The stored data can later reused by including the
 token in a request. In this way credit card processes such as
 authorization and capture can be implemented without being responsible
 for persisting the credit card data.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the token
 */
dw.order.PaymentInstrument.prototype.getCreditCardToken = function() {};

/**
 * Returns the type of the credit card.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the type of the credit card.
 */
dw.order.PaymentInstrument.prototype.getCreditCardType = function() {};

/**
 * Returns the month of the year in which the credit card became
 valid (1-12).  This attribute is not used by all credit card types.
 * @memberOf dw.order.PaymentInstrument
 * @return {Number} the month of the year in which the credit card became  valid (1-12).
 */
dw.order.PaymentInstrument.prototype.getCreditCardValidFromMonth = function() {};

/**
 * Returns the year in which the credit card became valid, such as '2001'.
 This attribute is not used by all credit card types.
 * @memberOf dw.order.PaymentInstrument
 * @return {Number} the year in which the credit card became valid
 */
dw.order.PaymentInstrument.prototype.getCreditCardValidFromYear = function() {};

/**
 * Encrypts the driver's license number of the bank account of this object with the given algorithm
 and the given public key. Returned is the base64-encoded representation
 of the result. <p/>
 See also <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_String_String_String_int_DetailAnchor">Cipher.encrypt(String, String, String, String, Number)</a> on how to generate RSA key pairs.

 If account information has been masked due to the data retention security
 policy for the site, the returned value is the base64-encoded representation
 of the encrypted form of the masked number.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} algorithm - The algorithm to be used for the encryption of this bank             account driver's license. Currently only "RSA" is supported.<p/>
 * @param {String} publicKey - A base64 encoded form of the public key to be used to encrypt             this bank account driver's license number.<p/>
 * @return {String} the base64-encoded representation of the bank account driver's license.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getEncryptedBankAccountDriversLicense = function(algorithm, publicKey) {};

/**
 * Encrypts the bank account number of this object with the given algorithm
 and the given public key. Returned is the base64-encoded representation
 of the result.

 If account information has been masked due to the data retention security
 policy for the site, the returned value is the base64-encoded representation
 of the encrypted form of the masked number.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} algorithm - The algorithm to be used for the encryption of this credit             card number. Currently only "RSA" is supported.
 * @param {String} publicKey - A base64 encoded form of the public key to be used to encrypt             this credit card number.
 * @return {String} the base64-encoded representation of the bank account number.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getEncryptedBankAccountNumber = function(algorithm, publicKey) {};

/**
 * Encrypts the credit card number of this object with the given algorithm
 and the public key taken from a certificate in the keystore.
 Returned is the base64-encoded representation of the result. <p/>
 See also <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_CertificateRef_String_String_int_DetailAnchor">Cipher.encrypt(String, CertificateRef, String, String, Number)</a> on how to generate RSA key pairs.

 If account information has been masked due to the data retention security
 policy for the site, the returned value is the base64-encoded representation
 of the encrypted form of the masked number.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} algorithm - The algorithm to be used for the encryption of this credit             card number. Currently only "RSA" is supported.<p/>
 * @param {dw.crypto.CertificateRef} publicKey - A reference to a trusted certificate entry containing             the public key in the keystore.<p/>
 * @return {String} the base64-encoded representation of the credit card number.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getEncryptedCreditCardNumber = function(algorithm, publicKey) {};

/**
 * Encrypts the credit card number of this object with the given algorithm
 and the given public key. Returned is the base64-encoded representation
 of the result. <p/>
 See also <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_String_String_String_int_DetailAnchor">Cipher.encrypt(String, String, String, String, Number)</a> on how to generate RSA key pairs.

 If account information has been masked due to the data retention security
 policy for the site, the returned value is the base64-encoded representation
 of the encrypted form of the masked number.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} algorithm - The algorithm to be used for the encryption of this credit             card number. Currently only "RSA" is supported.<p/>
 * @param {String} publicKey - A base64 encoded form of the public key to be used to encrypt             this credit card number.<p/>
 * @return {String} the base64-encoded representation of the credit card number.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 * @deprecated The method has been deprecated. Please use <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_getEncryptedCreditCardNumber_String_CertificateRef_DetailAnchor">getEncryptedCreditCardNumber(String, CertificateRef)</a> instead.
 */
dw.order.PaymentInstrument.prototype.getEncryptedCreditCardNumber = function(algorithm, publicKey) {};

/**
 * Returns the Gift Certificate code for this Payment Instrument.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the Gift Certificate code or null if not set.
 */
dw.order.PaymentInstrument.prototype.getGiftCertificateCode = function() {};

/**
 * Returns the Gift Certificate ID for this Payment Instrument.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the Gift Certificate ID or null if not set.
 * @deprecated Use <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_getGiftCertificateCode_DetailAnchor">getGiftCertificateCode()</a>
 */
dw.order.PaymentInstrument.prototype.getGiftCertificateID = function() {};

/**
 * Returns the decrypted driver's license number of the bank account with
 all but the last 4 characters replaced with a '*' character.

 If the driver's license number is empty,
 it will be returned without an exception.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the decrypted driver's license number with  all but the last 4 characters replaced with a '*' character.
 */
dw.order.PaymentInstrument.prototype.getMaskedBankAccountDriversLicense = function() {};

/**
 * Returns the decrypted driver's license number of the bank account with
 all but the specified number characters replaced with a '*' character.

 If the driver's license number is empty (i.e. "" or null),
 it will be returned without an exception.

 Note that <code>ignore</code> is limited to 4 in an unsecure environment,
 and if account information for this payment instrument has been masked
 due to the data retention security policy for the site.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} ignore - the number of characters to leave unmasked.
 * @return {String} the decrypted driver's license number with  all but the specified number characters replaced with a '*' character.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getMaskedBankAccountDriversLicense = function(ignore) {};

/**
 * Returns the decrypted bank account number with
 all but the last 4 characters replaced with a '*' character.

 If the number is empty (i.e. "" or null),
 it will be returned without an exception.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the decrypted bank account number with  all but the last 4 characters replaced with a '*' character.
 */
dw.order.PaymentInstrument.prototype.getMaskedBankAccountNumber = function() {};

/**
 * Returns the decrypted bank account number with
 all but the specified number characters replaced with a '*' character.

 If the card number is empty (i.e. "" or null),
 it will be returned without an exception.

 Note that <code>ignore</code> is limited to 4 in an unsecure environment,
 and if account information for this payment instrument has been masked
 due to the data retention security policy for the site.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} ignore - the number of characters to leave unmasked
 * @return {String} the decrypted bank account number with  all but the specified number of characters replaced with a '*' character.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getMaskedBankAccountNumber = function(ignore) {};

/**
 * Returns the decrypted credit card number with
 all but the last 4 characters replaced with a '*' character.

 If the number is empty,
 it will be returned without an exception.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the decrypted credit card number with  all but the last 4 characters replaced with a '*' character.
 */
dw.order.PaymentInstrument.prototype.getMaskedCreditCardNumber = function() {};

/**
 * Returns the decrypted credit card number with
 all but the specified number characters replaced with a '*' character.

 If the card number is empty (i.e. "" or null),
 it will be returned without an exception.

 Note that <code>ignore</code> is limited to 4 in an unsecure environment,
 and if account information for this payment instrument has been masked
 due to the data retention security policy for the site.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} ignore - the number of characters to leave unmasked.
 * @return {String} the decrypted credit card number with  all but the specified number characters replaced with a '*' character.
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.getMaskedCreditCardNumber = function(ignore) {};

/**
 * Returns the masked gift certificate code with
 all but the last 4 characters replaced with a '*' character.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the masked gift certificate code.
 */
dw.order.PaymentInstrument.prototype.getMaskedGiftCertificateCode = function() {};

/**
 * Returns the masked gift certificate code with
 all but the specified number of characters replaced with a '*' character.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} ignore - the number of characters to leave unmasked.
 * @return {String} the masked gift certificate code.
 * @throws IllegalArgumentException if ignore is negative.
 */
dw.order.PaymentInstrument.prototype.getMaskedGiftCertificateCode = function(ignore) {};

/**
 * Returns the identifier of the payment method represented by this
 payment instrument.
 * @memberOf dw.order.PaymentInstrument
 * @return {String} the identifier of the payment method represented by this  payment instrument.
 */
dw.order.PaymentInstrument.prototype.getPaymentMethod = function() {};

/**
 * Returns true if this payment instrument represents an expired credit
 card. This check is only logical if the credit card expiration month and
 year are set. If either of these attributes are not set, then this method
 always returns false.
 * @memberOf dw.order.PaymentInstrument
 * @return {Boolean} true if this payment instrument represents an expired credit          card, false otherwise
 */
dw.order.PaymentInstrument.prototype.isCreditCardExpired = function() {};

/**
 * Returns <code>true</code> if the account information for this Payment Instrument
 has been permanently masked as a result of the data retention security policy
 for the site or a creditcard tokenization, and <code>false</code> otherwise.

 When account information is masked only the last 4 digits of the credit card
 or bank account number are recoverable.  The bank account driver's license number
 and bank routing number are completely masked.
 * @memberOf dw.order.PaymentInstrument
 * @return {Boolean} whether or not the account information has been masked
 */
dw.order.PaymentInstrument.prototype.isPermanentlyMasked = function() {};

/**
 * Set the driver's license number associated with a bank account payment instrument.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} license - the bank account holder driver's license.
 * @tbd
 */
dw.order.PaymentInstrument.prototype.setBankAccountDriversLicense = function(license) {};

/**
 * Set the driver's license state code associated with a bank account payment instrument.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} stateCode - the state in which the bank account driver's license was issued.
 * @tbd
 */
dw.order.PaymentInstrument.prototype.setBankAccountDriversLicenseStateCode = function(stateCode) {};

/**
 * Set the full name of the holder of a bank account payment instrument.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} holder - the bank account holder's full name.
 * @tbd
 */
dw.order.PaymentInstrument.prototype.setBankAccountHolder = function(holder) {};

/**
 * Set the bank account number of a bank account payment instrument.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} accountNumber - the bank account number.
 * @tbd
 */
dw.order.PaymentInstrument.prototype.setBankAccountNumber = function(accountNumber) {};

/**
 * Set the bank routing number of a bank account payment instrument.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} routingNumber - the bank account rounting number.
 * @tbd
 */
dw.order.PaymentInstrument.prototype.setBankRoutingNumber = function(routingNumber) {};

/**
 * Sets the month of the year in which the credit card
 expires. Permissible values are from 1 to 12.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} aValue - the month of the year in which the credit card  expires. Permissible values are from 1 to 12.
 */
dw.order.PaymentInstrument.prototype.setCreditCardExpirationMonth = function(aValue) {};

/**
 * Sets the year in which the credit card
 expires, such as '2004'.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} aValue - the year in which the credit card  expires.
 */
dw.order.PaymentInstrument.prototype.setCreditCardExpirationYear = function(aValue) {};

/**
 * Sets the name of the credit card owner.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} aValue - the name of the credit card owner.
 */
dw.order.PaymentInstrument.prototype.setCreditCardHolder = function(aValue) {};

/**
 * Set the credit card issue number.  This attribute is only used by
 specific credit/debit card processors such as Solo and Switch in the UK.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} aValue - the credit card issue number
 */
dw.order.PaymentInstrument.prototype.setCreditCardIssueNumber = function(aValue) {};

/**
 * Sets the credit card number for this payment.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} aValue - the new value of the credit card number.
 */
dw.order.PaymentInstrument.prototype.setCreditCardNumber = function(aValue) {};

/**
 * Secure credit card data can be replaced by a token by utilizing a
 tokenization provider, which securely stores the credit card data using
 the token as a key. The stored data can later reused by including the
 token in a request. In this way credit card processes such as
 authorization and capture can be implemented without being responsible
 for persisting the credit card data.
 <p>
 An Exception will be thrown when the token is null or blank.
 <p>
 When setting a credit card token, the account information (including the
 creditcard number) is masked and all creditcard attributes are frozen and
 an attempt to change will be result in an exception.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} token - the token
 * @see <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_isPermanentlyMasked_DetailAnchor">PaymentInstrument.isPermanentlyMasked()</a>
 */
dw.order.PaymentInstrument.prototype.setCreditCardToken = function(token) {};

/**
 * Sets the type of the credit card.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} aValue - the type of the credit card.
 */
dw.order.PaymentInstrument.prototype.setCreditCardType = function(aValue) {};

/**
 * Sets the month of the year in which the credit card became valid (1-12).
 This attribute is not used by all credit card types
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} aValue - the month of the year in which the credit card  became valid (1-12).
 */
dw.order.PaymentInstrument.prototype.setCreditCardValidFromMonth = function(aValue) {};

/**
 * Sets the year in which the credit card became valid, such as '2001'.
 This attribute is not used by all credit card types.
 * @memberOf dw.order.PaymentInstrument
 * @param {Number} aValue - the year in which the credit card became valid
 */
dw.order.PaymentInstrument.prototype.setCreditCardValidFromYear = function(aValue) {};

/**
 * Sets the Gift Certificate code for this Payment Instrument.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} giftCertificateCode - the Gift Certificate code.
 */
dw.order.PaymentInstrument.prototype.setGiftCertificateCode = function(giftCertificateCode) {};

/**
 * Sets the Gift Certificate ID for this Payment Instrument.
 * @memberOf dw.order.PaymentInstrument
 * @param {String} giftCertificateID - the Gift Certificate ID.
 * @deprecated Use <a href="class_dw_order_PaymentInstrument.html#dw_order_PaymentInstrument_setGiftCertificateCode_String_DetailAnchor">setGiftCertificateCode(String)</a>
 */
dw.order.PaymentInstrument.prototype.setGiftCertificateID = function(giftCertificateID) {};

/**
 * The PaymentMethod class represents a logical type of payment a customer can
 make in the storefront. This class provides methods to access the payment
 method attributes, status, and (for card-based payment methods) the related
 payment cards.
 <p/>
 A typical storefront presents the customer a list of payment methods that a
 customer can choose from after he has entered his billing address during the
 checkout.
 <a href="class_dw_order_PaymentMgr.html#dw_order_PaymentMgr_getApplicablePaymentMethods_Customer_String_Number_DetailAnchor">PaymentMgr.getApplicablePaymentMethods(Customer, String, Number)</a>
 is used to determine the PaymentMethods that are relevant for the customer
 based on the amount of his order, his customer groups, and his shipping
 address.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.PaymentMethod = function() {};
dw.order.PaymentMethod.prototype = new dw.object.ExtensibleObject();

/**
 * Returns enabled payment cards that are assigned to this payment method, regardless
 of current customer, country or payment amount restrictions.
 The payment cards are sorted as defined in the Business Manager.
 * @memberOf dw.order.PaymentMethod
 * @return {dw.util.List} List of enabled payment cards of current site
 */
dw.order.PaymentMethod.prototype.getActivePaymentCards = function() {};

/**
 * Returns the sorted list of all enabled payment cards of this payment
 method applicable for the specified customer, country, payment amount and the session currency
 The payment cards are sorted as defined in the Business Manager. <p/>

 A payment card is applicable if
 <ul>
 <li> the card is restricted by customer group, and at least one of
 the groups of the specified customer is assigned to the card</li>
 <li> the card is restricted by billing country, and the specified
 country code is assigned to the card</li>
 <li>the card is restricted by payment amount for the session currency,
 and the specified payment amount is within the limits of the min/max
 payment amount defined for the method and the session currency</li>
 <li> the card is restricted by currency code, and the specified
 currency code matches session currency.</li>
 </ul>

 All parameters are optional, and if not specified, the respective
 restriction won't be validated. For example, if a card is restricted
 by billing country, but no country code is specified, this card will
 be returned, unless it is filtered out by customer group or payment
 amount.
 * @memberOf dw.order.PaymentMethod
 * @param {dw.customer.Customer} customer - Customer or null
 * @param {String} countryCode - Billing country code or null
 * @param {Number} paymentAmount - Payment amount or null
 * @return {dw.util.List} List of applicable payment cards of this payment method
 */
dw.order.PaymentMethod.prototype.getApplicablePaymentCards = function(customer, countryCode, paymentAmount) {};

/**
 * Returns the description of the payment method.
 * @memberOf dw.order.PaymentMethod
 * @return {dw.content.MarkupText} Description of the payment method.
 */
dw.order.PaymentMethod.prototype.getDescription = function() {};

/**
 * Returns the unique ID of the payment method.
 * @memberOf dw.order.PaymentMethod
 * @return {String} ID of the payment method.
 */
dw.order.PaymentMethod.prototype.getID = function() {};

/**
 * Returns the reference to the payment method image.
 * @memberOf dw.order.PaymentMethod
 * @return {dw.content.MediaFile} Image of the payment method.
 */
dw.order.PaymentMethod.prototype.getImage = function() {};

/**
 * Returns the name of the payment method.
 * @memberOf dw.order.PaymentMethod
 * @return {String} Name of the payment method.
 */
dw.order.PaymentMethod.prototype.getName = function() {};

/**
 * Returns the payment processor associated to this payment method.
 * @memberOf dw.order.PaymentMethod
 * @return {dw.order.PaymentProcessor} the payment processor associated to this payment method.
 */
dw.order.PaymentMethod.prototype.getPaymentProcessor = function() {};

/**
 * Returns 'true' if payment method is active (enabled), otherwise 'false' is returned.
 * @memberOf dw.order.PaymentMethod
 * @return {Boolean} true if payment method is active, otherwise false.
 */
dw.order.PaymentMethod.prototype.isActive = function() {};

/**
 * Returns 'true' if this payment method is applicable for the specified
 customer, country and payment amount and the session currency.
 <p/>

 The payment method is applicable if
 <ul>
 <li>the method is restricted by customer group, and at least one of the
 groups of the specified customer is assigned to the method</li>
 <li>the method is restricted by billing country, and the specified
 country code is assigned to the method</li>
 <li>the method is restricted by payment amount for the session currency,
 and the specified payment amount is within the limits of the min/max
 payment amount defined for the method and the session currency</li>
 <li>the method is restricted by currency code, and the specified
 currency code matches session currency.</li>
 </ul>

 All parameters are optional, and if not specified, the respective
 restriction won't be validated. For example, if a method is restricted by
 billing country, but no country code is specified, this method will be
 returned, unless it is filtered out by customer group or payment amount.
 * @memberOf dw.order.PaymentMethod
 * @param {dw.customer.Customer} customer - Customer or null
 * @param {String} countryCode - Billing country code or null
 * @param {Number} paymentAmount - Payment amount or null
 * @return {Boolean} true if payment method is applicable, false otherwise
 */
dw.order.PaymentMethod.prototype.isApplicable = function(customer, countryCode, paymentAmount) {};

/**
 * <a href="class_dw_order_PaymentMgr.html">PaymentMgr</a> is used to access payment methods and payment
 cards of the current site.
 <p>
 To access payment methods and payment cards explicitly, use methods
 <a href="class_dw_order_PaymentMgr.html#dw_order_PaymentMgr_getPaymentMethod_String_DetailAnchor">getPaymentMethod(String)</a> and <a href="class_dw_order_PaymentMgr.html#dw_order_PaymentMgr_getPaymentCard_String_DetailAnchor">getPaymentCard(String)</a>.</p>
 <p>
 To access active payment methods use method <a href="class_dw_order_PaymentMgr.html#dw_order_PaymentMgr_getActivePaymentMethods_DetailAnchor">getActivePaymentMethods()</a>.</p>
 <p>
 To access applicable payment methods for a customer, country and/or payment
 amount use method <a href="class_dw_order_PaymentMgr.html#dw_order_PaymentMgr_getApplicablePaymentMethods_Customer_String_Number_DetailAnchor">getApplicablePaymentMethods(Customer,String,Number)</a>.</p>
 * @class
 * @extends Object
 */
dw.order.PaymentMgr = function() {};
dw.order.PaymentMgr.prototype = new Object();

/**
 * Returns the sorted list of all enabled payment methods of the current
 site, regardless of any customer group, country, payment amount or currency
 restrictions. The payment methods are sorted as defined in the Business
 Manager.
 * @memberOf dw.order.PaymentMgr
 * @return {dw.util.List} List of enabled payment methods of current site
 * @static
 */
dw.order.PaymentMgr.getActivePaymentMethods = function() {};

/**
 * Returns the sorted list of all enabled payment methods of the current
 site applicable for the session currency, specified customer, country and payment amount.
 The payment methods are sorted as defined in the Business Manager. <p/>

 A payment method is applicable if
 <ul>
 <li> the method is restricted by customer group, and at least one of
 the groups of the specified customer is assigned to the method</li>
 <li> the method is restricted by billing country, and the specified
 country code is assigned to the method</li>
 <li>the method is restricted by payment amount for the session currency,
 and the specified payment amount is within the limits of the min/max
 payment amount defined for the method and the session currency</li>
 <li> the method is restricted by currency code, and the specified
 currency code matches session currency.</li>
 </ul>

 All parameters are optional, and if not specified, the respective
 restriction won't be validated. For example, if a method is restricted
 by billing country, but no country code is specified, this method will
 be returned, unless it is filtered out by customer group or payment
 amount.
 * @memberOf dw.order.PaymentMgr
 * @param {dw.customer.Customer} customer - Customer or null
 * @param {String} countryCode - Billing country code or null
 * @param {Number} paymentAmount - Payment amount or null
 * @return {dw.util.List} List of applicable payment methods of current site
 * @static
 */
dw.order.PaymentMgr.getApplicablePaymentMethods = function(customer, countryCode, paymentAmount) {};

/**
 * Returns the payment card for the specified cardType or null if no such
 card exists in the current site.
 * @memberOf dw.order.PaymentMgr
 * @param {String} cardType - PaymentCard type
 * @return {dw.order.PaymentCard} PaymentCard or null
 * @static
 */
dw.order.PaymentMgr.getPaymentCard = function(cardType) {};

/**
 * Returns the payment method for the specified ID or null if no such method
 exists in the current site.
 * @memberOf dw.order.PaymentMgr
 * @param {String} id - PaymentMethod ID
 * @return {dw.order.PaymentMethod} PaymentMethod or null
 * @static
 */
dw.order.PaymentMgr.getPaymentMethod = function(id) {};

/**
 * A PaymentProcessor represents an entity that processes payments of one or
 more types. In the Demandware system, a payment processor is just a container
 for configuration values, which describe, for example, the parameters (URL,
 merchant ID, password, etc) required for connecting to a payment gateway.
 <p/>
 The system has several built in PaymentProcessors. These are:

 <ul>
 <li>BASIC_CREDIT</li>
 <li>BASIC_GIFT_CERTIFICATE</li>
 <li>CYBERSOURCE_CREDIT</li>
 <li>CYBERSOURCE_BML</li>
 <li>PAYPAL_CREDIT</li>
 <li>PAYPAL_EXPRESS</li>
 <li>VERISIGN_CREDIT</li>
 </ul>

 The first two of these are merely placeholders with no associated preference
 values. The remaining system payment processors define preference values
 which are maintained in the Business Manager and are used in conjunction with
 built-in Demandware payment integrations. Preferences of system
 PaymentProcessors are not intended to be read programmatically.
 <p/>
 Merchants may also define custom payment processors. This is done by defining
 a payment processor with an arbitrary ID in the Business Manager, and then
 configuring an attribute group with the same ID on the
 <a href="class_dw_system_SitePreferences.html">SitePreferences</a> system object. Attributes added to the
 group will be considered preferences of the payment processor and will be
 readable through <a href="class_dw_order_PaymentProcessor.html#dw_order_PaymentProcessor_getPreferenceValue_String_DetailAnchor">getPreferenceValue(String)</a>. Merchants can design
 their checkout process to read these preferences at run time for connecting
 to their payment gateways.
 <p/>
 Every <a href="class_dw_order_PaymentMethod.html">PaymentMethod</a> in the system is associated with at most
 one PaymentProcessor. This basically represents the physical payment gateway
 which processes the (logical) payment method. Each payment processor may be
 associated with an arbitrary number of payment methods. Also, each payment
 transaction has one PaymentProcessor which is set by custom code during the
 checkout process.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.PaymentProcessor = function() {};
dw.order.PaymentProcessor.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the 'ID' of this processor.
 * @memberOf dw.order.PaymentProcessor
 * @return {String} the 'ID' of this processor, e.g. "BASIC_CREDIT".
 */
dw.order.PaymentProcessor.prototype.getID = function() {};

/**
 * Returns the value of the specified preference for this payment processor.
 If the preference name is invalid (or null) or no preference value is
 defined for this payment processor, null is returned.
 * @memberOf dw.order.PaymentProcessor
 * @param {String} name - preference name. Typically an attribute defined on             SitePreferences contained in an attribute group whose name is             the same as this.ID.
 * @return {Object} preference value, or null.
 */
dw.order.PaymentProcessor.prototype.getPreferenceValue = function(name) {};

/**
 *
 * @class
 * @extends Object
 */
dw.order.PaymentStatusCodes = function() {};
dw.order.PaymentStatusCodes.prototype = new Object();

/**
 * The code indicates that the credit card number is incorrect.
 * @type String
 * @memberOf dw.order.PaymentStatusCodes
 * @static
 * @const
 */
dw.order.PaymentStatusCodes.CREDITCARD_INVALID_CARD_NUMBER = '';

/**
 * The code indicates that the credit card is expired.
 * @type String
 * @memberOf dw.order.PaymentStatusCodes
 * @static
 * @const
 */
dw.order.PaymentStatusCodes.CREDITCARD_INVALID_EXPIRATION_DATE = '';

/**
 * The code indicates that the credit card security code length is invalid.
 * @type String
 * @memberOf dw.order.PaymentStatusCodes
 * @static
 * @const
 */
dw.order.PaymentStatusCodes.CREDITCARD_INVALID_SECURITY_CODE = '';

/**
 * The PaymentTransaction class represents a payment transaction.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.PaymentTransaction = function() {};
dw.order.PaymentTransaction.prototype = new dw.object.ExtensibleObject();

/**
 * Constant representing the authorization type of payment transaction.
 * @type String
 * @memberOf dw.order.PaymentTransaction
 * @static
 * @const
 */
dw.order.PaymentTransaction.TYPE_AUTH = '';

/**
 * Constant representing the authorization reversal type of payment transaction.
 * @type String
 * @memberOf dw.order.PaymentTransaction
 * @static
 * @const
 */
dw.order.PaymentTransaction.TYPE_AUTH_REVERSAL = '';

/**
 * Constant representing the capture type of payment transaction.
 * @type String
 * @memberOf dw.order.PaymentTransaction
 * @static
 * @const
 */
dw.order.PaymentTransaction.TYPE_CAPTURE = '';

/**
 * Constant representing the credit type of payment transaction.
 * @type String
 * @memberOf dw.order.PaymentTransaction
 * @static
 * @const
 */
dw.order.PaymentTransaction.TYPE_CREDIT = '';

/**
 * Returns the amount of the transaction.
 * @memberOf dw.order.PaymentTransaction
 * @return {dw.value.Money} the amount of the transaction.
 */
dw.order.PaymentTransaction.prototype.getAmount = function() {};

/**
 * Returns the payment instrument related to this payment transaction.
 * @memberOf dw.order.PaymentTransaction
 * @return {dw.order.OrderPaymentInstrument} the order payment instrument related to this payment transaction.
 */
dw.order.PaymentTransaction.prototype.getPaymentInstrument = function() {};

/**
 * Returns the payment processor related to this payment transaction.
 * @memberOf dw.order.PaymentTransaction
 * @return {dw.order.PaymentProcessor} the payment processor related to this payment transaction.
 */
dw.order.PaymentTransaction.prototype.getPaymentProcessor = function() {};

/**
 * Returns the payment service-specific transaction id.
 * @memberOf dw.order.PaymentTransaction
 * @return {String} the payment service-specific transaction id.
 */
dw.order.PaymentTransaction.prototype.getTransactionID = function() {};

/**
 * Returns the value of the transaction type where the
 value is one of TYPE_AUTH, TYPE_AUTH_REVERSAL, TYPE_CAPTURE
 or TYPE_CREDIT.
 * @memberOf dw.order.PaymentTransaction
 * @return {dw.value.EnumValue} the value of the transaction type where the  value is one of TYPE_AUTH, TYPE_AUTH_REVERSAL, TYPE_CAPTURE  or TYPE_CREDIT.
 */
dw.order.PaymentTransaction.prototype.getType = function() {};

/**
 * Sets the amount of the transaction.
 * @memberOf dw.order.PaymentTransaction
 * @param {dw.value.Money} amount - the amount of the transaction.
 */
dw.order.PaymentTransaction.prototype.setAmount = function(amount) {};

/**
 * Sets the payment processor related to this payment transaction.
 * @memberOf dw.order.PaymentTransaction
 * @param {dw.order.PaymentProcessor} paymentProcessor - the payment processor related to this payment transaction.
 */
dw.order.PaymentTransaction.prototype.setPaymentProcessor = function(paymentProcessor) {};

/**
 * Sets the payment service-specific transaction id.
 * @memberOf dw.order.PaymentTransaction
 * @param {String} transactionID - the payment service-specific transaction id.
 */
dw.order.PaymentTransaction.prototype.setTransactionID = function(transactionID) {};

/**
 * Sets the value of the transaction type where permissible
 values are TYPE_AUTH, TYPE_AUTH_REVERSAL, TYPE_CAPTURE or TYPE_CREDIT.
 * @memberOf dw.order.PaymentTransaction
 * @param {String} type - the value of the transaction type where the  value is one of TYPE_AUTH, TYPE_AUTH_REVERSAL, TYPE_CAPTURE or TYPE_CREDIT.
 */
dw.order.PaymentTransaction.prototype.setType = function(type) {};

/**
 * The PriceAdjustment class represents an adjustment to the price of an order.
 A PriceAdjustment can apply to a ProductLineItem, ShippingLineItem,
 ProductShippingLineItem, or a LineItemCtnr, and are generally categorized as
 product-level, shipping-level, or order-level. PriceAdjustments are generated
 by the Demandware promotions engine when applying discounts. See
 <a href="class_dw_campaign_PromotionMgr.html#dw_campaign_PromotionMgr_applyDiscounts_DiscountPlan_DetailAnchor">PromotionMgr.applyDiscounts(DiscountPlan)</a>.
 They may also be generated by custom code through the API. See for example
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_createPriceAdjustment_String_DetailAnchor">ProductLineItem.createPriceAdjustment(String)</a>. In the latter
 case, the PriceAdjustment is called "custom"; in the former case, it is
 called "system". System price adjustments are associated with the promotion
 that triggered their creation. If the promotion was coupon-based, then the
 price adjustment will additionally be associated with a coupon line item in
 the LineItemCtnr.
 * @class
 * @extends dw.order.LineItem
 */
dw.order.PriceAdjustment = function() {};
dw.order.PriceAdjustment.prototype = new dw.order.LineItem();

/**
 * Returns the Demandware AB-test this price adjustment is associated with.
 The associated AB-test is determined from the ABTestID attribute which is
 set by the promotions engine when applying discounts.
 <p/>
 If the AB-test has been removed from the system since this price
 adjustment was created, this method returns null. This method always
 returns null for custom price adjustments.
 * @memberOf dw.order.PriceAdjustment
 * @return {dw.campaign.ABTest} the Demandware AB-test the price adjustment was based on, or          <code>null</code> if it was not based on an AB-test.
 */
dw.order.PriceAdjustment.prototype.getABTest = function() {};

/**
 * Returns the ID of the AB-test related to this price adjustment.
 * @memberOf dw.order.PriceAdjustment
 * @return {String} ID of related AB-test, or null.
 */
dw.order.PriceAdjustment.prototype.getABTestID = function() {};

/**
 * Returns the Demandware AB-test segment this price adjustment is
 associated with. The associated AB-test segment is determined from the
 ABTestSegmentID attribute which is set by the promotions engine when
 applying discounts.
 <p/>
 If the AB-test, or this segment, has been removed from the system since
 this price adjustment was created, this method returns null. This method
 always returns null for custom price adjustments.
 * @memberOf dw.order.PriceAdjustment
 * @return {dw.campaign.ABTestSegment} the Demandware AB-test segment the price adjustment was based on,          or <code>null</code> if it was not based on an AB-test.
 */
dw.order.PriceAdjustment.prototype.getABTestSegment = function() {};

/**
 * Returns the ID of the AB-test segment related to this price adjustment.
 * @memberOf dw.order.PriceAdjustment
 * @return {String} ID of related AB-test segment, or null.
 */
dw.order.PriceAdjustment.prototype.getABTestSegmentID = function() {};

/**
 * A <code>Discount</code> instance describing the discount applied to
 obtain this price-adjustment. This method only returns a non-null value
 if the price-adjustment was created
 <ul>
 <li>when a discount-plan was applied to a basket, or</li>
 <li>as a <i>custom</i> price-adjustment using one of the methods
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_createPriceAdjustment_String_Discount_DetailAnchor">ProductLineItem.createPriceAdjustment(String, Discount)</a>,
 <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_createShippingPriceAdjustment_String_Discount_DetailAnchor">ShippingLineItem.createShippingPriceAdjustment(String, Discount)</a>
 or <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_createPriceAdjustment_String_Discount_DetailAnchor">LineItemCtnr.createPriceAdjustment(String, Discount)</a>.
 </li>
 </ul>
 </p> Note an instance of the <a href="class_dw_campaign_Discount.html">Discount</a> subclasses is
 returned, such as <a href="class_dw_campaign_AmountDiscount.html">AmountDiscount</a> or
 <a href="class_dw_campaign_PriceBookPriceDiscount.html">PriceBookPriceDiscount</a>, use
 <a href="class_dw_campaign_Discount.html#dw_campaign_Discount_getType_DetailAnchor">Discount.getType()</a> and the constants in
 <a href="class_dw_campaign_Discount.html">Discount</a> to distinguish between types. Each subclass
 provides access to specific properties.
 * @memberOf dw.order.PriceAdjustment
 * @return {dw.campaign.Discount} null or the discount applied
 */
dw.order.PriceAdjustment.prototype.getAppliedDiscount = function() {};

/**
 * Returns the Demandware campaign this price adjustment is associated with.
 The associated campaign is determined from the campaignID attribute which
 is set by the promotions engine when applying discounts.
 <p/>
 If the campaign has been removed from the system since this price
 adjustment was created, this method returns null. This method always
 returns null for custom price adjustments.
 <p/>
 Note: If the price adjustment was generated by a Demandware promotion as
 part of an AB-test, then a Campaign object will be returned, but it is a
 mock implementation, and not a true Campaign. This behavior is required
 for backwards compatibility and should not be relied upon as it may
 change in future releases.
 * @memberOf dw.order.PriceAdjustment
 * @return {dw.campaign.Campaign} the Demandware campaign the price adjustment was based on, or          <code>null</code> if it was not based on a campaign.
 */
dw.order.PriceAdjustment.prototype.getCampaign = function() {};

/**
 * Returns the ID of the campaign the price adjustment was based on.
 <p/>
 Note:If the price adjustment was generated by a Demandware promotion as
 part of an AB-test, then an ID will be returned but it is not the ID of a
 true campaign. This behavior is required for backwards compatibility and
 should not be relied upon as it may change in future releases.
 * @memberOf dw.order.PriceAdjustment
 * @return {String} the ID of the Demandware campaign the price adjustment was based          on, or <code>null</code> if it was not based on a campaign.
 */
dw.order.PriceAdjustment.prototype.getCampaignID = function() {};

/**
 * Returns the coupon line item related to this price adjustment.
 If the price adjustment is not based on a coupon, null is returned.
 * @memberOf dw.order.PriceAdjustment
 * @return {dw.order.CouponLineItem} Coupon line item or null.
 */
dw.order.PriceAdjustment.prototype.getCouponLineItem = function() {};

/**
 * Returns the name of the user who created the price adjustment.
 This method returns a value if the price-adjustment was
 created as a <i>custom</i> price-adjustment using one of the methods
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_createPriceAdjustment_String_Discount_DetailAnchor">ProductLineItem.createPriceAdjustment(String, Discount)</a>,
 <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_createShippingPriceAdjustment_String_Discount_DetailAnchor">ShippingLineItem.createShippingPriceAdjustment(String, Discount)</a>
 or <a href="class_dw_order_LineItemCtnr.html#dw_order_LineItemCtnr_createPriceAdjustment_String_Discount_DetailAnchor">LineItemCtnr.createPriceAdjustment(String, Discount)</a>.
 <p/>
 If an agent user has created the price adjustment, the agent user's name
 is returned. Otherwise "Customer" is returned.
 * @memberOf dw.order.PriceAdjustment
 * @return {String} the name of the user who created the price adjustment
 */
dw.order.PriceAdjustment.prototype.getCreatedBy = function() {};

/**
 * Returns the promotion associated with this price adjustment. The
 associated promotion is determined from the promotionID and campaignID
 attributes which are set by the promotions engine when applying
 discounts. Alternatively if the promotion applied as part of an AB-test,
 then the associated promotion is determined from the promotionID
 attribute and the hidden attributes, abTestID and abTestGroupID.
 <p/>
 If the promotion has been removed from the system since this price
 adjustment was created, or if the promotion still exists but is not
 assigned to any campaign or AB-test, this method returns null. If the
 promotion has been reassigned to a different campaign or AB-test since
 this price adjustment was created, then the system will return an
 appropriate Promotion instance. This method always returns null for
 custom price adjustments.
 * @memberOf dw.order.PriceAdjustment
 * @return {dw.campaign.Promotion} the associated promotion, or null.
 */
dw.order.PriceAdjustment.prototype.getPromotion = function() {};

/**
 * Returns the ID of the promotion related to this price adjustment.
 * @memberOf dw.order.PriceAdjustment
 * @return {String} ID of related promotion.
 */
dw.order.PriceAdjustment.prototype.getPromotionID = function() {};

/**
 * Returns a map representing the product line items to which this price
 adjustment is "related" (in the sense defined below) and the portion of
 this adjustment's price which applies to each after discount prorating is
 performed. This information is sometimes useful to display in the
 storefront but is more often useful for integrating with backend
 order-management and accounting systems which require all discounts to be
 itemized.
 <p/>
 The definition of "related" product line items depends on the type of
 promotion which generated this price adjustment:

 <ul>
 <li>For order promotions, price adjustments are prorated across all
 product line items which are not explicitly excluded by the promotion.
 Custom order price adjustments apply to all items in the LineItemCtnr.</li>
 <li>For Buy-X-Get-Y product promotions, price adjustments are prorated
 across all items all product line items that are involved in the
 promotion, meaning that the PLI has one or more items contributing to the
 qualifying product count (i.e. the item is one of the X) or receiving the
 discount (i.e. the item is one of the Y).</li>
 <li>Other product promotions are not prorated and simply adjust the
 parent product line item, and so the returned map is of size 1.</li>
 <li>For shipping promotions, this method returns an empty map.</li>
 </ul>

 Buy-X-Get-Y product promotions are prorated as follows: Each price
 adjustment generated by the promotion is sequentially prorated upon the
 related items according to the items' adjusted prices after all non-BOGO
 product promotions are considered, but before order promotions are
 considered.
 <p/>
 Order promotions are prorated sequentially upon non-excluded items
 according to the order in which they applied during promotion processing.
 <p/>
 The values in the map are inclusive of tax if this price adjustment is
 based on gross pricing, and exclusive of tax otherwise. The sum of the
 prorated prices always equals the price of this price adjustment.
 * @memberOf dw.order.PriceAdjustment
 * @return {dw.util.Map} map of ProductLineItems to Money instances representing the          product line items across which this price adjustment is prorated          and the portion of this adjustment which applies towards each.
 */
dw.order.PriceAdjustment.prototype.getProratedPrices = function() {};

/**
 * Returns the number of items this price adjustment applies to. This value
 is always equal to 1 for price adjustments generated by order or shipping
 promotions. For price adjustments generated by product promotions, this
 value represents the number of units of the parent product line item to
 which the adjustment applies. Because promotions may have a maximum
 number of applications this value may be less than the product line item
 quantity.
 <p/>
 For custom price adjustments, not generated by the promotions engine,
 this method always returns 0.
 * @memberOf dw.order.PriceAdjustment
 * @return {Number} The number of items this price adjustment applies to.
 */
dw.order.PriceAdjustment.prototype.getQuantity = function() {};

/**
 * Returns the reason code of the price adjustment. The list of available
 reason codes is editable system meta-data. An example for using the
 reason code is that in a call center application the CSR will explain
 why he gave a discount to the customer.
 * @memberOf dw.order.PriceAdjustment
 * @return {dw.value.EnumValue} reason code of the price adjustment
 */
dw.order.PriceAdjustment.prototype.getReasonCode = function() {};

/**
 * Returns true if the price adjustment was generated by the Demandware
 promotions engine when applying a promotion assigned to an AB-test.
 * @memberOf dw.order.PriceAdjustment
 * @return {Boolean} true if the price adjustment was generated by the Demandware          promotions engine when applying a promotion assigned to an          AB-test, false otherwise.
 */
dw.order.PriceAdjustment.prototype.isBasedOnABTest = function() {};

/**
 * Returns true if the price adjustment was generated by the Demandware
 promotions engine when applying a promotion assigned to a Campaign or an
 AB-test.
 * @memberOf dw.order.PriceAdjustment
 * @return {Boolean} true if the price adjustment was generated by the Demandware          promotions engine, false otherwise.
 * @deprecated The method has been deprecated since the name implies that
             there is a related Campaign, which may not be true. Use
             <code>!isCustom()</code> instead.
 */
dw.order.PriceAdjustment.prototype.isBasedOnCampaign = function() {};

/**
 * Identifies if the promotion line item results from a coupon.
 * @memberOf dw.order.PriceAdjustment
 * @return {Boolean} true if the promotion line item results from a coupon, false otherwise.
 */
dw.order.PriceAdjustment.prototype.isBasedOnCoupon = function() {};

/**
 * Returns true if this PriceAdjustment was created by custom script code.
 * @memberOf dw.order.PriceAdjustment
 * @return {Boolean} true if this PriceAdjustment was created by custom script code,          or false if it was created by Demandware promotions engine.
 */
dw.order.PriceAdjustment.prototype.isCustom = function() {};

/**
 * Returns true if this PriceAdjustment was added manually by a user.
 <p/>
 A manual PriceAdjustment is one which has been added as a result of
 a user interaction e.g. by a user editing an order.
 <p/>
 A non-manual PriceAdjustment is one which has been added for a different
 reason, e.g. by custom logic which automatically adjusts the price of
 particular products when certain conditions are met.
 * @memberOf dw.order.PriceAdjustment
 * @return {Boolean} true if this PriceAdjustment was added manually by a user,          otherwise - false
 */
dw.order.PriceAdjustment.prototype.isManual = function() {};

/**
 * Marks the current PriceAdjustment as manual/non-manual.
 <p/>
 Note that only custom PriceAdjustment can be marked as manual/non-manual.
 <p/>
 A manual PriceAdjustment is one which has been added as a result of
 a user interaction e.g. by a user editing an order.
 <p/>
 A non-manual PriceAdjustment is one which has been added for a different
 reason, e.g. by custom logic which automatically adjusts the price of
 particular products when certain conditions are met.
 * @memberOf dw.order.PriceAdjustment
 * @param {Boolean} aFlag - the manual flag to set
 * @throws IllegalArgumentException
             if the adjustment is not custom
 */
dw.order.PriceAdjustment.prototype.setManual = function(aFlag) {};

/**
 * Set the reason code, using the internal non-localizable value. Standard values are 'PRICE_MATCH',
 'BACKORDER' and 'EVEN_EXCHANGE', but the available list is editable system meta-data.
 * @memberOf dw.order.PriceAdjustment
 * @param {String} reasonCode - reason code
 */
dw.order.PriceAdjustment.prototype.setReasonCode = function(reasonCode) {};

/**
 * Represents a specific product line item.
 * @class
 * @extends dw.order.LineItem
 */
dw.order.ProductLineItem = function() {};
dw.order.ProductLineItem.prototype = new dw.order.LineItem();

/**
 * Creates a product price adjustment. The price adjustment
 line item is being initialized with the tax class code and tax rate
 of the product line item.<br/>

 The promotion ID is mandatory and must not be the ID of any actual
 promotion defined in the Demandware system.<br/>

 If there already exists a price adjustment for the same promotionID,
 an exception is thrown.
 * @memberOf dw.order.ProductLineItem
 * @param {String} promotionID - Promotion ID
 * @return {dw.order.PriceAdjustment} The new price adjustment
 */
dw.order.ProductLineItem.prototype.createPriceAdjustment = function(promotionID) {};

/**
 * Creates a product price adjustment representing a specific discount. The price adjustment
 line item is initialized with the tax class code and tax rate
 of the product line item.<br/>

 The promotion ID is mandatory and must not be the ID of any actual
 promotion defined in the Demandware system. If a price adjustment already exists for the same promotionID,
 an exception is thrown.
 <br/>
 The possible discounts are <a href="class_dw_campaign_FixedPriceDiscount.html">FixedPriceDiscount</a>,
 <a href="class_dw_campaign_AmountDiscount.html">AmountDiscount</a>, <a href="class_dw_campaign_PercentageDiscount.html">PercentageDiscount</a>.
 <br/>
 Example:
 <p/>
 <code>
 var myProductItem : dw.order.ProductLineItem; // assume known<br/>
 var paFixedUnitPrice100 : dw.order.PriceAdjustment = myProductItem.createPriceAdjustment("myPromotionID1", new FixedPriceDiscount(100.00));<br/>
 var paTenPercent : dw.order.PriceAdjustment = myProductItem.createPriceAdjustment("myPromotionID2", new PercentageDiscount(10));<br/>
 var paReduceBy20 : dw.order.PriceAdjustment = myProductItem.createPriceAdjustment("myPromotionID3", new AmountDiscount(20.00);<br/>
 </code>
 * @memberOf dw.order.ProductLineItem
 * @param {String} promotionID - Unique custom promotion ID, not null
 * @param {dw.campaign.Discount} discount - The desired discount, not null
 * @return {dw.order.PriceAdjustment} The new custom price adjustment
 */
dw.order.ProductLineItem.prototype.createPriceAdjustment = function(promotionID, discount) {};

/**
 * Creates the dependent shipping line item for this line item.
 The shipping line item can define product-specific shipping
 costs for this product line item.
 This method has replace semantics: If there is an existing
 shipping line item it will be replaced
 with a new shipping line item.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.order.ProductShippingLineItem} the created shipping line item
 */
dw.order.ProductLineItem.prototype.createShippingLineItem = function() {};

/**
 * Returns the gross price of the product line item after applying all product-level
 adjustments.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.value.Money} gross price after applying product-level adjustments
 * @see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getAdjustedNetPrice_DetailAnchor">getAdjustedNetPrice()</a>
 * @see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getAdjustedPrice_DetailAnchor">getAdjustedPrice()</a>
 */
dw.order.ProductLineItem.prototype.getAdjustedGrossPrice = function() {};

/**
 * Returns the net price of the product line item after applying all product-level
 adjustments.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.value.Money} net price after applying product-level adjustments
 * @see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getAdjustedGrossPrice_DetailAnchor">getAdjustedGrossPrice()</a>
 * @see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getAdjustedPrice_DetailAnchor">getAdjustedPrice()</a>
 */
dw.order.ProductLineItem.prototype.getAdjustedNetPrice = function() {};

/**
 * Returns the price of the product line item after applying all product-level
 adjustments. For net pricing the adjusted net price is returned
 (see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getAdjustedNetPrice_DetailAnchor">getAdjustedNetPrice()</a>). For gross pricing, the adjusted
 gross price is returned (see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getAdjustedGrossPrice_DetailAnchor">getAdjustedGrossPrice()</a>).
 * @memberOf dw.order.ProductLineItem
 * @return {dw.value.Money} Adjusted net or gross price
 * @see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getAdjustedGrossPrice_DetailAnchor">getAdjustedGrossPrice()</a>
 * @see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getAdjustedNetPrice_DetailAnchor">getAdjustedNetPrice()</a>
 */
dw.order.ProductLineItem.prototype.getAdjustedPrice = function() {};

/**
 * Returns the price of this product line item after considering all
 dependent price adjustments and optionally prorating all order-level
 price adjustments. For net pricing the net price is returned. For gross
 pricing, the gross price is returned.
 * @memberOf dw.order.ProductLineItem
 * @param {Boolean} applyOrderLevelAdjustments - If true, order-level adjustments will             be applied to line item price.
 * @return {dw.value.Money} Adjusted net or gross price
 * @see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getAdjustedPrice_DetailAnchor">getAdjustedPrice()</a>
 */
dw.order.ProductLineItem.prototype.getAdjustedPrice = function(applyOrderLevelAdjustments) {};

/**
 * Returns the tax of the unit after applying adjustments, in the purchase currency.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.value.Money} the tax of the unit after applying adjustments, in the purchase currency.
 */
dw.order.ProductLineItem.prototype.getAdjustedTax = function() {};

/**
 * Returns the parent bonus discount line item of this line item.  Only
 bonus product line items that have been selected by the customer as
 part of a BONUS_CHOICE discount have one of these.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.order.BonusDiscountLineItem} the bonus discount line item of this line item or null
 */
dw.order.ProductLineItem.prototype.getBonusDiscountLineItem = function() {};

/**
 * Returns a collection containing the bundled product line items.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.util.Collection} a collection containing the bundled product line items.
 */
dw.order.ProductLineItem.prototype.getBundledProductLineItems = function() {};

/**
 * Returns the category the product line item is associated with. If the
 line item is not associated with a category, or the category does not
 exist in the site catalog, the method returns null.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.catalog.Category} Category or null
 */
dw.order.ProductLineItem.prototype.getCategory = function() {};

/**
 * Returns the ID of the category the product line item is associated with.
 * @memberOf dw.order.ProductLineItem
 * @return {String} Category ID or null.
 */
dw.order.ProductLineItem.prototype.getCategoryID = function() {};

/**
 * Returns the value set for the external line item status
 or null if no value set.
 * @memberOf dw.order.ProductLineItem
 * @return {String} the value set for the external line item status  or null if no value set.
 */
dw.order.ProductLineItem.prototype.getExternalLineItemStatus = function() {};

/**
 * Returns the value set for the external line item text
 or null if no value set.
 * @memberOf dw.order.ProductLineItem
 * @return {String} the value set for the external line item text  or null if no value set.
 */
dw.order.ProductLineItem.prototype.getExternalLineItemText = function() {};

/**
 * Returns the value set for gift message or null if no value set.
 * @memberOf dw.order.ProductLineItem
 * @return {String} the value set for gift message or null if no value set.
 */
dw.order.ProductLineItem.prototype.getGiftMessage = function() {};

/**
 * Returns the name of the manfacturer of the product.
 * @memberOf dw.order.ProductLineItem
 * @return {String} The name of the manfacturer of the product.
 */
dw.order.ProductLineItem.prototype.getManufacturerName = function() {};

/**
 * Returns the name of the manfacturer's SKU of this product line item.
 * @memberOf dw.order.ProductLineItem
 * @return {String} the name of the manfacturer's SKU of this product line item.
 */
dw.order.ProductLineItem.prototype.getManufacturerSKU = function() {};

/**
 * Returns the minimal order quantity allowed for the product represented by the
 ProductLineItem (copied from product on initialization).
 Note: the quantity of a ProductLineItem must obey the limits set by the
 ProductLineItem's attributes 'MinOrderQuantity' and 'StepQuantity', i.e.
 for a 'MinOrderQuantity' of 2.0 and a 'StepQuantity' of 2.5 then values
 2.0, 4.5, 7.0... are allowed values.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.value.Quantity} the minimal order quantity allowed for the product.
 */
dw.order.ProductLineItem.prototype.getMinOrderQuantity = function() {};

/**
 * Return the value portion of getMinOrderQuantity().
 * @memberOf dw.order.ProductLineItem
 * @return {Number} the minimal order quantity value allowed for the product.
 */
dw.order.ProductLineItem.prototype.getMinOrderQuantityValue = function() {};

/**
 * Returns the ID of the product option this product line item
 represents. If the product line item does not represent an option,
 null is returned.
 * @memberOf dw.order.ProductLineItem
 * @return {String} the ID of the product option this product line item represents.
 */
dw.order.ProductLineItem.prototype.getOptionID = function() {};

/**
 * Returns the product option model for a product line item representing
 an option product. The returned option model has preselected values
 based on the dependent option line items of this product line item.<br/>
 Null is returned if this line item does not represent an option product.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.catalog.ProductOptionModel} the product option model for a product line item representing  an option product.
 */
dw.order.ProductLineItem.prototype.getOptionModel = function() {};

/**
 * Returns a collection containing option product line items.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.util.Collection} a collection containing option product line items.
 */
dw.order.ProductLineItem.prototype.getOptionProductLineItems = function() {};

/**
 * Returns the ID of the product option value this product line item
 represents. If the product line item does not represent an option,
 null is returned.
 * @memberOf dw.order.ProductLineItem
 * @return {String} the ID of the product option value this product line item represents.
 */
dw.order.ProductLineItem.prototype.getOptionValueID = function() {};

/**
 * Returns the <a href="class_dw_order_OrderItem.html"> order-item extension</a> for this item, or <code>null</code>.
 An order-item extension will only exist for a ProductLineItem which
 belongs to an <a href="class_dw_order_Order.html">Order</a>.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.order.OrderItem} null or the order-item extension
 */
dw.order.ProductLineItem.prototype.getOrderItem = function() {};

/**
 * Returns the parent line item of this line item or null if the line item
 is independent.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.order.ProductLineItem} the parent line item of this line item or null if the line item  is independent.
 */
dw.order.ProductLineItem.prototype.getParent = function() {};

/**
 * Returns the position within the line item container assigned to the ProductLineItem upon
 its creation, may be used as a sort-order.
 The position is updated in the following way: <br/>
 When a ProductLineItem is added to the LineItemCtnr, it is assigned the
 next available position, based on the current count <br/>
 When a ProductLineItem is removed from the LineItemCtnr then LineItemCtnr
 method reassignPositions is called, so that the 'gap' left by the removed
 line-item is refilled. This method is dependent on no 2 ProductLineItem
 having the same position.
 When a LineItemCtnr is copied (eg when a PlacedOrder is created from a
 Basket), no special position handling is necessary as the
 ProductLineItems are added according to theie current position ordering
 in the source LineItemCtnr.
 * @memberOf dw.order.ProductLineItem
 * @return {Number} the position within the line item container assigned to the ProductLineItem upon  its creation.
 */
dw.order.ProductLineItem.prototype.getPosition = function() {};

/**
 * Returns the price adjustment associated to the specified
 promotion ID.
 * @memberOf dw.order.ProductLineItem
 * @param {String} promotionID - Promotion id
 * @return {dw.order.PriceAdjustment} The price adjustment associated with the promotion ID or null
 */
dw.order.ProductLineItem.prototype.getPriceAdjustmentByPromotionID = function(promotionID) {};

/**
 * Returns an iterator of price adjustments that have been applied to this
 product line item such as promotions on the purchase price
 (i.e. $10 Off or 10% Off).
 * @memberOf dw.order.ProductLineItem
 * @return {dw.util.Collection} a collection of price adjustments that have been applied to this  product line item.
 */
dw.order.ProductLineItem.prototype.getPriceAdjustments = function() {};

/**
 * Returns the product associated with the product line item.  The product
 line item might not be related to an actual catalog product, for
 example if it represents an option, or was not created from a catalog
 product, or if the product does not exist in the catalog anymore.
 In these cases, the method returns null.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.catalog.Product} the product of the line item, or null
 */
dw.order.ProductLineItem.prototype.getProduct = function() {};

/**
 * Returns the ID of the related product.
 * @memberOf dw.order.ProductLineItem
 * @return {String} the ID of the related product.
 */
dw.order.ProductLineItem.prototype.getProductID = function() {};

/**
 * Returns the inventory list the product line item is associated with. If the
 line item is not associated with a inventory list, or the inventory list does not
 exist, the method returns null.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.catalog.ProductInventoryList} ProductInventoryList or null
 */
dw.order.ProductLineItem.prototype.getProductInventoryList = function() {};

/**
 * Returns the ID of the inventory list the product line item is associated with.
 * @memberOf dw.order.ProductLineItem
 * @return {String} ProductInventoryList ID or null.
 */
dw.order.ProductLineItem.prototype.getProductInventoryListID = function() {};

/**
 * Returns the associated ProductListItem.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.customer.ProductListItem} item or null.
 */
dw.order.ProductLineItem.prototype.getProductListItem = function() {};

/**
 * Returns the name of product that was copied when
 product was added to line item container.
 * @memberOf dw.order.ProductLineItem
 * @return {String} the name of product.
 */
dw.order.ProductLineItem.prototype.getProductName = function() {};

/**
 * Returns the price of this product line item after considering all
 dependent price adjustments and prorating all Buy-X-Get-Y
 and order-level discounts, according to the scheme described in
 <a href="class_dw_order_PriceAdjustment.html#dw_order_PriceAdjustment_getProratedPrices_DetailAnchor">PriceAdjustment.getProratedPrices()</a>. For net pricing the
 net price is returned. For gross pricing, the gross price is returned.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.value.Money} Adjusted and prorated net or gross price
 */
dw.order.ProductLineItem.prototype.getProratedPrice = function() {};

/**
 * Returns a Map of PriceAdjustment to Money instances. They keys to this
 map are the price adjustments that apply to this ProductLineItem either
 directly or indirectly when discounts are prorated according to the
 scheme described in <a href="class_dw_order_PriceAdjustment.html#dw_order_PriceAdjustment_getProratedPrices_DetailAnchor">PriceAdjustment.getProratedPrices()</a>.
 The values in the map are the portion of the adjustment which applies to
 this particular product line item.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.util.Map} Map of PriceAdjustment to Money instances, representing the          prorated adjustments applied to this ProductLineItem.
 */
dw.order.ProductLineItem.prototype.getProratedPriceAdjustmentPrices = function() {};

/**
 * Returns the ProductLineItem that qualified the basket for this bonus
 product.
 <p/>
 This method is only applicable if the product line item is a bonus
 product line item, and if the promotion is a product promotion with
 number of qualifying products granting a bonus-product discount. If these
 conditions aren't met, the method returns null. If there are multiple
 product line items that triggered this bonus product, this method returns
 the last one by position within the order.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.order.ProductLineItem} the ProductLineItem that qualified the basket for this bonus          product. Returns null if this is not a bonus product, or if there          was no distinct qualifying product.
 */
dw.order.ProductLineItem.prototype.getQualifyingProductLineItemForBonusProduct = function() {};

/**
 * Returns the quantity of the product represented by this ProductLineItem.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.value.Quantity} the quantity of the product.
 */
dw.order.ProductLineItem.prototype.getQuantity = function() {};

/**
 * Returns the value of the quantity of this ProductLineItem.
 * @memberOf dw.order.ProductLineItem
 * @return {Number} quantity value of product line item
 */
dw.order.ProductLineItem.prototype.getQuantityValue = function() {};

/**
 * Returns all bonus product line items for which this line item is a
 qualifying product line item. This method is usually called when
 rendering the cart so that bonus products can be shown next to the
 products that triggered their creation.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.util.Collection} the bonus product line items triggered by the addition of this          product to the cart.
 */
dw.order.ProductLineItem.prototype.getRelatedBonusProductLineItems = function() {};

/**
 * Returns the associated Shipment.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.order.Shipment} The shipment of the product line item
 */
dw.order.ProductLineItem.prototype.getShipment = function() {};

/**
 * Returns the dependent shipping line item of this line item.
 The shipping line item can define product-specific shipping
 costs for this product line item.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.order.ProductShippingLineItem} the shipping line item of this line item or null
 */
dw.order.ProductLineItem.prototype.getShippingLineItem = function() {};

/**
 * Returns step quantity allowed for the product represented by the ProductLineItem
 (copied from product on initialization).
 Note: the quantity of a ProductLineItem must obey the limits set by the
 ProductLineItem's attributes 'MinOrderQuantity' and 'StepQuantity', i.e.
 for a 'MinOrderQuantity' of 2.0 and a 'StepQuantity' of 2.5 then values
 2.0, 4.5, 7.0... are allowed values.
 * @memberOf dw.order.ProductLineItem
 * @return {dw.value.Quantity} step quantity allowed for the product.
 */
dw.order.ProductLineItem.prototype.getStepQuantity = function() {};

/**
 * Return the value portion of getStepQuantity().
 * @memberOf dw.order.ProductLineItem
 * @return {Number} step quantity value allowed for the product.
 */
dw.order.ProductLineItem.prototype.getStepQuantityValue = function() {};

/**
 * Identifies if the product line item represents a bonus line item.
 * @memberOf dw.order.ProductLineItem
 * @return {Boolean} true if the product line item represents a bonus  line item, false otherwise.
 */
dw.order.ProductLineItem.prototype.isBonusProductLineItem = function() {};

/**
 * Identifies if the product line item represents a bundled line item.
 * @memberOf dw.order.ProductLineItem
 * @return {Boolean} true if the product line item represents a bundled line item.
 */
dw.order.ProductLineItem.prototype.isBundledProductLineItem = function() {};

/**
 * Returns true if the product line items represents a catalog product.
 * @memberOf dw.order.ProductLineItem
 * @return {Boolean} true if product line item represents catalog product.
 */
dw.order.ProductLineItem.prototype.isCatalogProduct = function() {};

/**
 * Returns true if this line item represents a gift, false otherwise.
 * @memberOf dw.order.ProductLineItem
 * @return {Boolean} true if this line item represents a gift, false otherwise.
 */
dw.order.ProductLineItem.prototype.isGift = function() {};

/**
 * Identifies if the product line item represents an option line item.
 Option line items do not represent true products but rather options of
 products.  An option line item always has a parent product line item
 representing a true product.
 * @memberOf dw.order.ProductLineItem
 * @return {Boolean} true if the product line item represents an option  line item, false otherwise.
 */
dw.order.ProductLineItem.prototype.isOptionProductLineItem = function() {};

/**
 * Removes the specified price adjustment from the product line item.
 * @memberOf dw.order.ProductLineItem
 * @param {dw.order.PriceAdjustment} priceAdjustmentLineItem - The price adjustment to remove
 */
dw.order.ProductLineItem.prototype.removePriceAdjustment = function(priceAdjustmentLineItem) {};

/**
 * Removes the dependent shipping line item for this line item.
 * @memberOf dw.order.ProductLineItem
 */
dw.order.ProductLineItem.prototype.removeShippingLineItem = function() {};

/**
 * Replaces the current product of the product line item with the product
 specified in parameter <i>newProduct</i>. <br/>
 The following rules apply: <br/>
 <ul>
 <li> Preserve line item attributes UUID, Quantity, CategoryID,
 ExternalLineItemStatus, ExternalLineItemText, isGift, GiftMessage,
 Position, Parent, Shipment</li>
 <li> Replace product-specific attributes ProductID, ProductName,
 MinOrderQuantity, StepQuantity, ManufacturerName, ManufacturerSKU</li>
 <li> Remove all price adjustments related to the product line item</li>
 <li> Remove the shipping line item related to the product line item</li>
 <li> Remove all bundled line items of current product, and
 add bundled line items if new product is a bundle</li>
 <li> Remove all option line items of current product, and add option
 line items if new product is an option product; use default option
 selections</li>
 <li> Set all price attributes to N/A</li>
 <li> Preserve all custom attributes of line item, but override
 order-required attributes with values from new product</li>
 </ul>

 <p/>The primary use is to replace one variation product with another,
 without having to both create a new line item for the replacement
 and remove the line item for the replaced product.
 * @memberOf dw.order.ProductLineItem
 * @param {dw.catalog.Product} newProduct - The new product of the product line item
 */
dw.order.ProductLineItem.prototype.replaceProduct = function(newProduct) {};

/**
 * Sets the specified category as the product line item category context.
 * @memberOf dw.order.ProductLineItem
 * @param {dw.catalog.Category} category - Category instance or null
 */
dw.order.ProductLineItem.prototype.setCategory = function(category) {};

/**
 * Sets the ID of the category the product line item is associated with.
 * @memberOf dw.order.ProductLineItem
 * @param {String} categoryID - the Category ID or null.
 */
dw.order.ProductLineItem.prototype.setCategoryID = function(categoryID) {};

/**
 * Sets the value to set for the external line item status.
 * @memberOf dw.order.ProductLineItem
 * @param {String} status - the value to set for the external line item status.
 */
dw.order.ProductLineItem.prototype.setExternalLineItemStatus = function(status) {};

/**
 * Sets the value to set for the external line item text.
 * @memberOf dw.order.ProductLineItem
 * @param {String} text - the value to set for the external line item text.
 */
dw.order.ProductLineItem.prototype.setExternalLineItemText = function(text) {};

/**
 * Controls if this line item is a gift or not.
 * @memberOf dw.order.ProductLineItem
 * @param {Boolean} isGift - set to true if you want this line item to  represent a gift.
 */
dw.order.ProductLineItem.prototype.setGift = function(isGift) {};

/**
 * Sets the value to set for the gift message.
 * @memberOf dw.order.ProductLineItem
 * @param {String} message - the value to set for the gift message.
 */
dw.order.ProductLineItem.prototype.setGiftMessage = function(message) {};

/**
 * Sets the name of the manufacturer of this product.
 * @memberOf dw.order.ProductLineItem
 * @param {String} name - The name of the manfacturer of this product
 */
dw.order.ProductLineItem.prototype.setManufacturerName = function(name) {};

/**
 * Sets the SKU of the manufacturer of this product.
 * @memberOf dw.order.ProductLineItem
 * @param {String} sku - The SKU of the manfacturer of this product
 */
dw.order.ProductLineItem.prototype.setManufacturerSKU = function(sku) {};

/**
 * Set the minimum order quantity value for this object.  This will be used
 to validate and adjust quantities when <code>setQuantityValue()</code>
 is called.  For typical catalog product line items, it is usually
 desirable to have this value inherited from the product attributes, but
 for non-catalog products, it is sometimes desirable to set this  value
 programmatically.  <br/>

 Null is accepted and represents Quantity.NA.
 Otherwise, the quantity value must be > 0.
 * @memberOf dw.order.ProductLineItem
 * @param {Number} quantityValue - The minimal order quantity allowed for the product or null.
 */
dw.order.ProductLineItem.prototype.setMinOrderQuantityValue = function(quantityValue) {};

/**
 * Sets the position within the line item container. This value may be used as a sort-order.
 The position is updated in the following way: <br/>
 When a ProductLineItem is added to the LineItemCtnr, it is assigned the
 next available position, based on the current count <br/>
 When a ProductLineItem is removed from the LineItemCtnr then LineItemCtnr
 method reassignPositions is called, so that the 'gap' left by the removed
 line-item is refilled. This method is dependent on no 2 ProductLineItem
 having the same position.
 When a LineItemCtnr is copied (e.g. when an Order is created from a
 Basket), no special position handling is necessary as the
 ProductLineItems are added according to their current position ordering
 in the source LineItemCtnr.
 * @memberOf dw.order.ProductLineItem
 * @param {Number} aValue - the position within the line item container.
 */
dw.order.ProductLineItem.prototype.setPosition = function(aValue) {};

/**
 * Sets price attributes of the line item based on the current
 purchase currency, taxation policy and line item quantity.<br/>

 The method sets the 'basePrice' attribute of the line item.
 Additionally, it sets the 'netPrice' attribute of the line item
 if the current taxation policy is 'net', and the 'grossPrice'
 attribute, if the current taxation policy is 'gross'. The
 'netPrice'/'grossPrice' attributes are set by multiplying the
 specified price value with the line item quantity.<br/>

 If null is specified as value, the price attributes are reset to
 Money.NA.
 * @memberOf dw.order.ProductLineItem
 * @param {Number} value - Price value or null
 */
dw.order.ProductLineItem.prototype.setPriceValue = function(value) {};

/**
 * Sets the specified inventory list as the product line item inventory context.
 * @memberOf dw.order.ProductLineItem
 * @param {dw.catalog.ProductInventoryList} productInventoryList - ProductInventoryList instance or null
 */
dw.order.ProductLineItem.prototype.setProductInventoryList = function(productInventoryList) {};

/**
 * Sets the ID of the inventory list the product line item is associated with.
 * @memberOf dw.order.ProductLineItem
 * @param {String} productInventoryListID - the ProductInventoryList ID or null.
 */
dw.order.ProductLineItem.prototype.setProductInventoryListID = function(productInventoryListID) {};

/**
 * Sets the name of product.
 * @memberOf dw.order.ProductLineItem
 * @param {String} aValue - the name of the product.
 */
dw.order.ProductLineItem.prototype.setProductName = function(aValue) {};

/**
 * Updates the quantity value of the product line item.
 Validates the specified quantity value against the line item's min order
 and step quantity and adjusts it if necessary.  In particular, if
 0 is passed, then the value will be adjusted to the min order quantity,
 not removed from the line item container.
 <p/>
 Null values or values &lt; 0.0 are not accepted.
 * @memberOf dw.order.ProductLineItem
 * @param {Number} quantityValue - Quantity value.
 */
dw.order.ProductLineItem.prototype.setQuantityValue = function(quantityValue) {};

/**
 * Associates the specified product line item with the specified shipment.
  The method is only applicable for independent product line items.
  If called for any dependent line item (option or bundled line item),
  the method will throw an exception.<br/>
  The shipment for all dependent line items will be updated automatically
  by the method.<br/>

  Product line item and shipment must belong to the same line item ctnr.
 * @memberOf dw.order.ProductLineItem
 * @param {dw.order.Shipment} shipment - The new shipment of the product line item
 */
dw.order.ProductLineItem.prototype.setShipment = function(shipment) {};

/**
 * Set the step quantity value for this object.  This will be used
 to validate and adjust quantities when <code>updateQuantity()</code>
 is called.  For typical catalog product line items, it is usually
 desirable to have this value inherited from the product attributes, but
 for non-catalog products, it is sometimes desirable to set this
 value programmatically.  <br/>

 Null is accepted and represents Quantity.NA.
 Otherwise, the quantity value must be > 0.
 * @memberOf dw.order.ProductLineItem
 * @param {Number} quantityValue - The minimal order quantity allowed for the product or null.
 */
dw.order.ProductLineItem.prototype.setStepQuantityValue = function(quantityValue) {};

/**
 * Determines and sets the price of a option line item based on the
 selected option value the line item represents.
 * @memberOf dw.order.ProductLineItem
 */
dw.order.ProductLineItem.prototype.updateOptionPrice = function() {};

/**
 * Updates an option line item with a new option value.

 This method will not do anything if the current line item is no
 option line item, if the specified value does not exist for the
 current option or if this value is already selected.

 Note, that this method will update the attributes optionValueID,
 productID, productName and lineItemText. It will not update the price
 attributes of the line item.
 * @memberOf dw.order.ProductLineItem
 * @param {dw.catalog.ProductOptionValue} optionValue - The value to update the option line item with
 */
dw.order.ProductLineItem.prototype.updateOptionValue = function(optionValue) {};

/**
 * Updates the price attributes of the line item based
 on the specified price.  The base price is set to the specified
 value.  If the line item is based on net pricing then the net price
 attribute is set.  If the line item is based on  gross pricing then the
 gross price attribute is set.  Whether or not a line item is based
 on net or gross pricing is a site-wide configuration parameter.
 In either case, this price is equal to the product of the base price
 and the quantity of this line item in its container.
 * @memberOf dw.order.ProductLineItem
 * @param {dw.value.Money} price - The price to use when performing the update.  This price               must not be null and must either be equal to NOT_AVAIALBLE               or must have a currency code equal to that of the parent               container.
 * @deprecated Use <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_setPriceValue_Double_DetailAnchor">setPriceValue(Number)</a>
 */
dw.order.ProductLineItem.prototype.updatePrice = function(price) {};

/**
 * Updates the quantity value of the product line item and all its dependent
 product line items. Validates the specified quantity value against the
 line item's min order and step quantity and adjusts it if necessary.
 The adjusted quantity value is returned. <br/>

 In general, quantity values &lt; 0.0 are not accepted.
 * @memberOf dw.order.ProductLineItem
 * @param {Number} quantityValue - Numeric quantity value.
 * @return {Number} Adjusted quantity value
 * @deprecated Use <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_setQuantityValue_Double_DetailAnchor">setQuantityValue(Number)</a> followed by  <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getQuantity_DetailAnchor">getQuantity()</a> instead.
 */
dw.order.ProductLineItem.prototype.updateQuantity = function(quantityValue) {};

/**
 * Instances of ProductShippingCost represent product specific shipping costs.
 <br/>

 Use <a href="class_dw_order_ProductShippingModel.html#dw_order_ProductShippingModel_getShippingCost_ShippingMethod_DetailAnchor">ProductShippingModel.getShippingCost(ShippingMethod)</a> to get
 the shipping cost for a specific product.
 * @class
 * @extends Object
 */
dw.order.ProductShippingCost = function() {};
dw.order.ProductShippingCost.prototype = new Object();

/**
 * Returns the shipping amount.
 * @memberOf dw.order.ProductShippingCost
 * @return {dw.value.Money} Shipping amount
 */
dw.order.ProductShippingCost.prototype.getAmount = function() {};

/**
 * Returns true if shipping cost is a fixed-price shipping cost,
 and false if surcharge shipping cost.
 * @memberOf dw.order.ProductShippingCost
 * @return {Boolean} true of fixed-price shipping cost, else false
 */
dw.order.ProductShippingCost.prototype.isFixedPrice = function() {};

/**
 * Returns true if shipping cost is a surcharge to the shipment
 shipping cost, and false if fixed-price shipping cost.
 * @memberOf dw.order.ProductShippingCost
 * @return {Boolean} true of surcharge shipping cost, else false
 */
dw.order.ProductShippingCost.prototype.isSurcharge = function() {};

/**
 * Represents a specific line item in a shipment. A ProductShippingLineItem defines
 lineitem-specific shipping costs.
 * @class
 * @extends dw.order.LineItem
 */
dw.order.ProductShippingLineItem = function() {};
dw.order.ProductShippingLineItem.prototype = new dw.order.LineItem();

/**
 *
 * @type String
 * @memberOf dw.order.ProductShippingLineItem
 * @static
 * @const
 */
dw.order.ProductShippingLineItem.PRODUCT_SHIPPING_ID = '';

/**
 * Returns the gross price of the product shipping line item after applying
 all product-shipping-level adjustments.
 * @memberOf dw.order.ProductShippingLineItem
 * @return {dw.value.Money} gross price after applying product-shipping-level adjustments
 * @see <a href="class_dw_order_ProductShippingLineItem.html#dw_order_ProductShippingLineItem_getAdjustedNetPrice_DetailAnchor">getAdjustedNetPrice()</a>
 * @see <a href="class_dw_order_ProductShippingLineItem.html#dw_order_ProductShippingLineItem_getAdjustedPrice_DetailAnchor">getAdjustedPrice()</a>
 */
dw.order.ProductShippingLineItem.prototype.getAdjustedGrossPrice = function() {};

/**
 * Returns the net price of the product shipping line item after applying
 all product-shipping-level adjustments.
 * @memberOf dw.order.ProductShippingLineItem
 * @return {dw.value.Money} net price after applying product-shipping-level adjustments
 * @see <a href="class_dw_order_ProductShippingLineItem.html#dw_order_ProductShippingLineItem_getAdjustedGrossPrice_DetailAnchor">getAdjustedGrossPrice()</a>
 * @see <a href="class_dw_order_ProductShippingLineItem.html#dw_order_ProductShippingLineItem_getAdjustedPrice_DetailAnchor">getAdjustedPrice()</a>
 */
dw.order.ProductShippingLineItem.prototype.getAdjustedNetPrice = function() {};

/**
 * Returns the price of the product shipping line item after applying all
 pproduct-shipping-level adjustments. For net pricing the adjusted net
 price is returned (see <a href="class_dw_order_ProductShippingLineItem.html#dw_order_ProductShippingLineItem_getAdjustedNetPrice_DetailAnchor">getAdjustedNetPrice()</a>). For gross
 pricing, the adjusted gross price is returned (see
 <a href="class_dw_order_ProductShippingLineItem.html#dw_order_ProductShippingLineItem_getAdjustedGrossPrice_DetailAnchor">getAdjustedGrossPrice()</a>).
 * @memberOf dw.order.ProductShippingLineItem
 * @return {dw.value.Money} Adjusted net or gross price
 * @see <a href="class_dw_order_ProductShippingLineItem.html#dw_order_ProductShippingLineItem_getAdjustedGrossPrice_DetailAnchor">getAdjustedGrossPrice()</a>
 * @see <a href="class_dw_order_ProductShippingLineItem.html#dw_order_ProductShippingLineItem_getAdjustedNetPrice_DetailAnchor">getAdjustedNetPrice()</a>
 */
dw.order.ProductShippingLineItem.prototype.getAdjustedPrice = function() {};

/**
 * Returns the tax of the unit after applying adjustments, in the purchase
 currency.
 * @memberOf dw.order.ProductShippingLineItem
 * @return {dw.value.Money} the tax of the unit after applying adjustments, in the purchase          currency.
 */
dw.order.ProductShippingLineItem.prototype.getAdjustedTax = function() {};

/**
 * Returns an iterator of price adjustments that have been applied to this
 product shipping line item.
 * @memberOf dw.order.ProductShippingLineItem
 * @return {dw.util.Collection} a collection of price adjustments that have been applied to this  product shipping line item.
 */
dw.order.ProductShippingLineItem.prototype.getPriceAdjustments = function() {};

/**
 * Returns the parent product line item this shipping line item belongs to.
 * @memberOf dw.order.ProductShippingLineItem
 * @return {dw.order.ProductLineItem} the product line item
 */
dw.order.ProductShippingLineItem.prototype.getProductLineItem = function() {};

/**
 * Returns the quantity of the shipping cost.
 * @memberOf dw.order.ProductShippingLineItem
 * @return {dw.value.Quantity} the shipping quantity
 */
dw.order.ProductShippingLineItem.prototype.getQuantity = function() {};

/**
 * Returns the shipment this shipping line item belongs to.
 * @memberOf dw.order.ProductShippingLineItem
 * @return {dw.order.Shipment} the shipment
 */
dw.order.ProductShippingLineItem.prototype.getShipment = function() {};

/**
 * Returns the 'surcharge' flag.
 * @memberOf dw.order.ProductShippingLineItem
 * @return {Boolean} true if this is a surcharge shipping cost, false if fixed shipping cost
 */
dw.order.ProductShippingLineItem.prototype.isSurcharge = function() {};

/**
 * Sets price attributes of the line item based on the
 purchase currency, taxation policy and line item quantity.<br/>

 The method sets the 'basePrice' attribute of the line item.
 Additionally, it sets the 'netPrice' attribute of the line item
 if the current taxation policy is 'net', and the 'grossPrice'
 attribute, if the current taxation policy is 'gross'. The
 'netPrice'/'grossPrice' attributes are set by multiplying the
 specified price value with the line item quantity. <br/>

 If null is specified as value, the price attributes are reset to
 Money.NA.
 * @memberOf dw.order.ProductShippingLineItem
 * @param {Number} value - Price value or null
 */
dw.order.ProductShippingLineItem.prototype.setPriceValue = function(value) {};

/**
 * Sets the quantity of the shipping cost.
 * @memberOf dw.order.ProductShippingLineItem
 * @param {dw.value.Quantity} quantity - the shipping quantity
 */
dw.order.ProductShippingLineItem.prototype.setQuantity = function(quantity) {};

/**
 * Sets the 'surcharge' flag.
 * @memberOf dw.order.ProductShippingLineItem
 * @param {Boolean} flag - true if this is a surcharge shipping cost,  false if this is a fixed shipping cost.
 */
dw.order.ProductShippingLineItem.prototype.setSurcharge = function(flag) {};

/**
 * Instances of ProductShippingModel provide access to product-level
 shipping information, such as applicable or inapplicable shipping methods
 and shipping cost defined for the product for a specified shipping
 method. <br/>

 Use <a href="class_dw_order_ShippingMgr.html#dw_order_ShippingMgr_getProductShippingModel_Product_DetailAnchor">ShippingMgr.getProductShippingModel(Product)</a> to get
 the shipping model for a specific product.
 * @class
 * @extends Object
 */
dw.order.ProductShippingModel = function() {};
dw.order.ProductShippingModel.prototype = new Object();

/**
 * Returns the active applicable shipping methods for the product related
 to this shipping model, i.e. shipping methods the product can be shipped
 with. A product can be shipping with a shipping methods if the shipping
 method is not explicitely marked as inapplicable for this product.
 * @memberOf dw.order.ProductShippingModel
 * @return {dw.util.Collection} Applicable shipping methods for the product
 */
dw.order.ProductShippingModel.prototype.getApplicableShippingMethods = function() {};

/**
 * Returns the active inapplicable shipping methods for the product related
 to this shipping model, i.e. shipping methods the product cannot be
 shipped with. A product cannot be shipping with a shipping methods if the
 shipping method is explicitely marked as inapplicable for this product.
 * @memberOf dw.order.ProductShippingModel
 * @return {dw.util.Collection} Inapplicable shipping methods for the product
 */
dw.order.ProductShippingModel.prototype.getInapplicableShippingMethods = function() {};

/**
 * Returns the shipping cost object for the related product and
 the specified shipping method, or null if no product-level fixed-price or
 surcharge shipping cost are defined for the specified product. <p/>
 The following rules apply:
 <ul>
 <li>if fixed and surcharge shipping cost is defined for a product, the fixed cost takes precedence</li>
 <li>if a product is member of multiple shipping cost groups, the lowest shipping cost takes precedence</li>
 </ul>
 * @memberOf dw.order.ProductShippingModel
 * @param {dw.order.ShippingMethod} shippingMethod - the shipping method to use.
 * @return {dw.order.ProductShippingCost} Product shipping cost
 */
dw.order.ProductShippingModel.prototype.getShippingCost = function(shippingMethod) {};

/**
 * Returns the active shipping methods for which either any fixed-price or
 surcharge product-level shipping cost is defined for the specified product. <br/>
 Note that this can include inapplicable shipping methods
 (see <a href="class_dw_order_ProductShippingModel.html#dw_order_ProductShippingModel_getInapplicableShippingMethods_DetailAnchor">getInapplicableShippingMethods()</a>).
 * @memberOf dw.order.ProductShippingModel
 * @return {dw.util.Collection} Shipping methods with shipping cost
 */
dw.order.ProductShippingModel.prototype.getShippingMethodsWithShippingCost = function() {};

/**
 * The Return represents a physical customer return, and contains 1..n
 <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s. The Return is associated with one <a href="class_dw_order_ReturnCase.html">ReturnCase</a>, and each
 ReturnItem is associated with one <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a> and (via the
 ReturnCaseItem) a single <a href="class_dw_order_OrderItem.html">OrderItem</a> usually representing an <a href="class_dw_order_Order.html">Order</a>
 <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a>. <br/>
 The ReturnItem records the quantity returned.
 <br/>The Return can have one of these status values:
 <ul>
 <li>NEW - the return is new, i.e. needs to undergo a check before it can be
 marked as COMPLETED</li>
 <li>COMPLETED - the return is complete, this is a precondition for refunding the
 customer for a return.</li>
 </ul>
 * @class
 * @extends dw.order.AbstractItemCtnr
 */
dw.order.Return = function() {};
dw.order.Return.prototype = new dw.order.AbstractItemCtnr();

/**
 * Sorting by item id. Use with method <a href="class_dw_order_Return.html#dw_order_Return_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Return
 * @static
 * @const
 */
dw.order.Return.ORDERBY_ITEMID = {};

/**
 * Sorting by the position of the related oder item. Use with method <a href="class_dw_order_Return.html#dw_order_Return_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Return
 * @static
 * @const
 */
dw.order.Return.ORDERBY_ITEMPOSITION = {};

/**
 * Unsorted , as it is. Use with method <a href="class_dw_order_Return.html#dw_order_Return_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.Return
 * @static
 * @const
 */
dw.order.Return.ORDERBY_UNSORTED = {};

/**
 * Selects the product items. Use with method <a href="class_dw_order_Return.html#dw_order_Return_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.Return
 * @static
 * @const
 */
dw.order.Return.QUALIFIER_PRODUCTITEMS = {};

/**
 * Selects for the service items. Use with method <a href="class_dw_order_Return.html#dw_order_Return_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.Return
 * @static
 * @const
 */
dw.order.Return.QUALIFIER_SERVICEITEMS = {};

/**
 * Constant for Return Status COMPLETED
 * @type String
 * @memberOf dw.order.Return
 * @static
 * @const
 */
dw.order.Return.STATUS_COMPLETED = '';

/**
 * Constant for Return Status NEW
 * @type String
 * @memberOf dw.order.Return
 * @static
 * @const
 */
dw.order.Return.STATUS_NEW = '';

/**
 * Creates a new <a href="class_dw_order_Invoice.html">Invoice</a> based on this Return.
 The return-number will be used as the invoice-number. The
 Invoice can then be accessed using <a href="class_dw_order_Return.html#dw_order_Return_getInvoice_DetailAnchor">getInvoice()</a> or its
 number using <a href="class_dw_order_Return.html#dw_order_Return_getInvoiceNumber_DetailAnchor">getInvoiceNumber()</a>. The method must not be called
 more than once for a Return, nor may 2 Invoices exist
 with the same invoice-number.
 <p/>
 The new Invoice is a credit-invoice with a <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">Invoice.STATUS_NOT_PAID</a> status, and
 will be passed to the refund payment-hook in a separate database
 transaction for processing.
 * @memberOf dw.order.Return
 * @return {dw.order.Invoice} new invoice
 */
dw.order.Return.prototype.createInvoice = function() {};

/**
 * Creates a new <a href="class_dw_order_Invoice.html">Invoice</a> based on this Return. The
 invoice-number must be specified as an argument. The
 Invoice can then be accessed using <a href="class_dw_order_Return.html#dw_order_Return_getInvoice_DetailAnchor">getInvoice()</a> or its
 number using <a href="class_dw_order_Return.html#dw_order_Return_getInvoiceNumber_DetailAnchor">getInvoiceNumber()</a>. The method must not be called
 more than once for a Return, nor may 2 Invoices exist
 with the same invoice-number.
 <p/>
 The new Invoice is a credit-invoice with a <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">Invoice.STATUS_NOT_PAID</a> status, and
 will be passed to the refund payment-hook in a separate database
 transaction for processing.
 * @memberOf dw.order.Return
 * @param {String} invoiceNumber - the invoice-number to use
 * @return {dw.order.Invoice} the new invoice
 */
dw.order.Return.prototype.createInvoice = function(invoiceNumber) {};

/**
 * Create a <a href="class_dw_order_ReturnItem.html">ReturnItem</a> based on a <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>.
 * @memberOf dw.order.Return
 * @param {String} returnCaseItemID - the id of the return case item
 * @return {dw.order.ReturnItem} the created return item
 */
dw.order.Return.prototype.createItem = function(returnCaseItemID) {};

/**
 * Returns null or the previously created <a href="class_dw_order_Invoice.html">Invoice</a>.
 * @memberOf dw.order.Return
 * @return {dw.order.Invoice} null or the previously created invoice.
 * @see <a href="class_dw_order_Return.html#dw_order_Return_createInvoice_String_DetailAnchor">createInvoice(String)</a>
 */
dw.order.Return.prototype.getInvoice = function() {};

/**
 * Returns null or the invoice-number.
 * @memberOf dw.order.Return
 * @return {String} null or the previously created invoice.
 * @see <a href="class_dw_order_Return.html#dw_order_Return_createInvoice_String_DetailAnchor">createInvoice(String)</a>
 */
dw.order.Return.prototype.getInvoiceNumber = function() {};

/**
 * Returns the <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s contained in the Return, created with method
 <a href="class_dw_order_Return.html#dw_order_Return_createItem_String_DetailAnchor">createItem(String)</a>.

 <p/>
 This <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> can be sorted / filtered using:
 <ul>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with <a href="class_dw_order_Return.html#dw_order_Return_ORDERBY_ITEMID_DetailAnchor">ORDERBY_ITEMID</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_Return.html#dw_order_Return_ORDERBY_ITEMPOSITION_DetailAnchor">ORDERBY_ITEMPOSITION</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with <a href="class_dw_order_Return.html#dw_order_Return_ORDERBY_UNSORTED_DetailAnchor">ORDERBY_UNSORTED</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with <a href="class_dw_order_Return.html#dw_order_Return_QUALIFIER_PRODUCTITEMS_DetailAnchor">QUALIFIER_PRODUCTITEMS</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with <a href="class_dw_order_Return.html#dw_order_Return_QUALIFIER_SERVICEITEMS_DetailAnchor">QUALIFIER_SERVICEITEMS</a>
 </ul>
 * @memberOf dw.order.Return
 * @return {dw.util.FilteringCollection} the return items
 * @see <a href="class_dw_order_ReturnItem.html">ReturnItem</a>
 */
dw.order.Return.prototype.getItems = function() {};

/**
 * A note for the return.
 * @memberOf dw.order.Return
 * @return {String} the note or <code>null</code>
 */
dw.order.Return.prototype.getNote = function() {};

/**
 * Returns the <a href="class_dw_order_ReturnCase.html">ReturnCase</a> with which this Return is associated. The ReturnCase
 may represent an RMA (return merchandise authorization).
 * @memberOf dw.order.Return
 * @return {dw.order.ReturnCase} the return case
 */
dw.order.Return.prototype.getReturnCase = function() {};

/**
 * The return number identifying this return.
 * @memberOf dw.order.Return
 * @return {String} the return number
 */
dw.order.Return.prototype.getReturnNumber = function() {};

/**
 * Gets the return status.
 <p>
 Possible values are <a href="class_dw_order_Return.html#dw_order_Return_STATUS_NEW_DetailAnchor">STATUS_NEW</a>, <a href="class_dw_order_Return.html#dw_order_Return_STATUS_COMPLETED_DetailAnchor">STATUS_COMPLETED</a>.
 * @memberOf dw.order.Return
 * @return {dw.value.EnumValue} the status
 */
dw.order.Return.prototype.getStatus = function() {};

/**
 * Sets a note for the return.
 * @memberOf dw.order.Return
 * @param {String} note - the note
 */
dw.order.Return.prototype.setNote = function(note) {};

/**
 * Sets the return status.
 <p>
 Possible values are <a href="class_dw_order_Return.html#dw_order_Return_STATUS_NEW_DetailAnchor">STATUS_NEW</a>, <a href="class_dw_order_Return.html#dw_order_Return_STATUS_COMPLETED_DetailAnchor">STATUS_COMPLETED</a>
 <p>
 When set to status COMPLETED, only the the custom attributes of the return itself and its return items can be changed.
 * @memberOf dw.order.Return
 * @param {String} statusName - the status
 */
dw.order.Return.prototype.setStatus = function(statusName) {};

/**
 * All returns exist in the context of a ReturnCase, each <a href="class_dw_order_Order.html">Order</a>
 can have any number of ReturnCases. <br/>
 The ReturnCase has <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>s, each of which is associated with an
 <a href="class_dw_order_OrderItem.html">OrderItem</a> (an extension to either a <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a> or a <a href="class_dw_order_ShippingLineItem.html">ShippingLineItem</a>). <br/>
 Each ReturnCaseItem defines <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_getAuthorizedQuantity_DetailAnchor">ReturnCaseItem.getAuthorizedQuantity()</a> representing the maximum
 quantity expected to be returned. The ReturnCaseItem may be associated with
 0..n <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s - ReturnItems are added to the ReturnCaseItem when
 <a href="class_dw_order_Return.html">Return</a>s are created.
 <p>
 <i>Either</i> - a ReturnCase may be used as an RMA, in which case they are
 created when a customer first shows a wish to return item(s). The customer
 then includes the RMA number with the returned item(s). The Return created as
 a result is then associated with the existing ReturnCase. <br/>
 <i>Or</i> - a ReturnCase is automatically created as part of the return
 creation, i.e. the customer returns some item(s) leading to a creation of
 both a Return and an associated ReturnCase.
 </p>
 <p/>
 The scripting api allows access to the ReturnCases, whether the ReturnCase is an RMA or not,
 and the ReturnCase status. Both the ReturnCaseItems and any Returns
 associated with the ReturnCase can be accessed.
 <p/>
 A ReturnCase has one of these status values:
 <ul>
 <li>NEW - the ReturnCase has been created and can be edited previous to
 its authorization</li>
 <li>CONFIRMED - the ReturnCase is CONFIRMED, can no longer be edited, no
 Returns have been associated with it. Only a NEW- ReturnCase can be
 CONFIRMED</li>
 <li>PARTIAL_RETURNED - the ReturnCase has been associated with at least one Return,
 but is not yet complete. Only a CONFIRMED- ReturnCase can be set to
 PARTIAL_RETURNED</li>
 <li>RETURNED - the ReturnCase has been associated with Returns which match
 the expected authorized quantity. Only an CONFIRMED- or PARTIAL_RETURNED- return-case
 can be set to RETURNED</li>
 <li>CANCELLED - the ReturnCase has been cancelled (only a NEW- or
 CONFIRMED- ReturnCase can be cancelled)</li>
 </ul>
 * @class
 * @extends dw.order.AbstractItemCtnr
 */
dw.order.ReturnCase = function() {};
dw.order.ReturnCase.prototype = new dw.order.AbstractItemCtnr();

/**
 * Sorting by item id. Use with method <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.ORDERBY_ITEMID = {};

/**
 * Sorting by the position of the related oder item. Use with method <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.ORDERBY_ITEMPOSITION = {};

/**
 * Unsorted , as it is. Use with method <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.ORDERBY_UNSORTED = {};

/**
 * Selects the product items. Use with method <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.QUALIFIER_PRODUCTITEMS = {};

/**
 * Selects for the service items. Use with method <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_getItems_DetailAnchor">getItems()</a> as an argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.QUALIFIER_SERVICEITEMS = {};

/**
 * constant for ReturnCase Status CANCELLED
 * @type String
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.STATUS_CANCELLED = '';

/**
 * constant for ReturnCase Status CONFIRMED
 * @type String
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.STATUS_CONFIRMED = '';

/**
 * constant for ReturnCase Status NEW
 * @type String
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.STATUS_NEW = '';

/**
 * constant for ReturnCase Status PARTIAL RETURNED
 * @type String
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.STATUS_PARTIAL_RETURNED = '';

/**
 * constant for ReturnCase Status RETURNED
 * @type String
 * @memberOf dw.order.ReturnCase
 * @static
 * @const
 */
dw.order.ReturnCase.STATUS_RETURNED = '';

/**
 * <p>Attempt to confirm the ReturnCase.</p>
 <p>Without items the return case will be canceled</p>
 <p>When confirmed, only the the custom attributes of its return case items can be changed.
 * @memberOf dw.order.ReturnCase
 * @throws IllegalStateException
                thrown if Status is not <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_STATUS_NEW_DetailAnchor">STATUS_NEW</a>
 */
dw.order.ReturnCase.prototype.confirm = function() {};

/**
 * Creates a new <a href="class_dw_order_Invoice.html">Invoice</a> based on this
 ReturnCase. The return-case-number will
 be used as the invoice-number. The Invoice can then be
 accessed using <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_getInvoice_DetailAnchor">getInvoice()</a> or its number using
 <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_getInvoiceNumber_DetailAnchor">getInvoiceNumber()</a>. The method must not be called more than once
 for a ReturnCase, nor may 2 Invoices
 exist with the same invoice-number.
 <p/>
 The new Invoice is a credit-invoice with a
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">Invoice.STATUS_NOT_PAID</a> status, and will be passed to
 the refund payment-hook in a separate database transaction for
 processing.
 * @memberOf dw.order.ReturnCase
 * @return {dw.order.Invoice} new invoice
 */
dw.order.ReturnCase.prototype.createInvoice = function() {};

/**
 * Creates a new <a href="class_dw_order_Invoice.html">Invoice</a> based on this
 ReturnCase. The invoice-number must be specified as an
 argument. The Invoice can then be
 accessed using <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_getInvoice_DetailAnchor">getInvoice()</a> or its number using
 <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_getInvoiceNumber_DetailAnchor">getInvoiceNumber()</a>. The method must not be called more than once
 for a ReturnCase, nor may 2 Invoices
 exist with the same invoice-number.
 <p/>
 The new Invoice is a credit-invoice with a
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">Invoice.STATUS_NOT_PAID</a> status, and will be passed to
 the refund payment-hook in a separate database transaction for
 processing.
 * @memberOf dw.order.ReturnCase
 * @param {String} invoiceNumber - the invoice-number to be used for the invoice creation
 * @return {dw.order.Invoice} new invoice
 */
dw.order.ReturnCase.prototype.createInvoice = function(invoiceNumber) {};

/**
 * Creates a new item for a given order item. Note: a ReturnCase may have
 only one item per order item.
 * @memberOf dw.order.ReturnCase
 * @param {String} orderItemID - order item id
 * @return {dw.order.ReturnCaseItem} null or item for given order item
 * @throws IllegalArgumentException
                thrown if getItem(orderItem) returns non null
 */
dw.order.ReturnCase.prototype.createItem = function(orderItemID) {};

/**
 * Creates a new <a href="class_dw_order_Return.html">Return</a> with a generated number and associates it with this ReturnCase.
 * @memberOf dw.order.ReturnCase
 * @return {dw.order.Return} new Return instance
 */
dw.order.ReturnCase.prototype.createReturn = function() {};

/**
 * Creates a new <a href="class_dw_order_Return.html">Return</a> with the given number and associates it with this ReturnCase.
 * @memberOf dw.order.ReturnCase
 * @param {String} returnNumber - return number to assign
 * @return {dw.order.Return} new Return instance
 */
dw.order.ReturnCase.prototype.createReturn = function(returnNumber) {};

/**
 * Returns null or the previously created <a href="class_dw_order_Invoice.html">Invoice</a>.
 * @memberOf dw.order.ReturnCase
 * @return {dw.order.Invoice} null or the previously created invoice.
 * @see <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_createInvoice_String_DetailAnchor">createInvoice(String)</a>
 */
dw.order.ReturnCase.prototype.getInvoice = function() {};

/**
 * Returns null or the invoice-number.
 * @memberOf dw.order.ReturnCase
 * @return {String} null or the previously created invoice.
 * @see <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_createInvoice_String_DetailAnchor">createInvoice(String)</a>
 */
dw.order.ReturnCase.prototype.getInvoiceNumber = function() {};

/**
 * Access the collection of <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>s.
 <p/>
 This <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> can be sorted / filtered using:
 <ul>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_ORDERBY_ITEMID_DetailAnchor">ORDERBY_ITEMID</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_ORDERBY_ITEMPOSITION_DetailAnchor">ORDERBY_ITEMPOSITION</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_ORDERBY_UNSORTED_DetailAnchor">ORDERBY_UNSORTED</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_QUALIFIER_PRODUCTITEMS_DetailAnchor">QUALIFIER_PRODUCTITEMS</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_QUALIFIER_SERVICEITEMS_DetailAnchor">QUALIFIER_SERVICEITEMS</a>
 </ul>
 * @memberOf dw.order.ReturnCase
 * @return {dw.util.FilteringCollection} the items
 */
dw.order.ReturnCase.prototype.getItems = function() {};

/**
 * Returns the mandatory return case number identifying this document.
 * @memberOf dw.order.ReturnCase
 * @return {String} the return case number
 */
dw.order.ReturnCase.prototype.getReturnCaseNumber = function() {};

/**
 * Return the collection of <a href="class_dw_order_Return.html">Return</a>s associated with this ReturnCase.
 * @memberOf dw.order.ReturnCase
 * @return {dw.util.Collection} the collection of Returns.
 */
dw.order.ReturnCase.prototype.getReturns = function() {};

/**
 * Gets the return case item status. The status of a ReturnCase is read-only and calculated from the status of
 the associated <a href="class_dw_order_ReturnCaseItem.html">ReturnCaseItem</a>s.
 <p>
 The possible values are <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_STATUS_NEW_DetailAnchor">STATUS_NEW</a>,<a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_STATUS_CONFIRMED_DetailAnchor">STATUS_CONFIRMED</a>,
 <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_STATUS_PARTIAL_RETURNED_DetailAnchor">STATUS_PARTIAL_RETURNED</a>, <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_STATUS_RETURNED_DetailAnchor">STATUS_RETURNED</a>,
 <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_STATUS_CANCELLED_DetailAnchor">STATUS_CANCELLED</a>.
 <p/>
 * @memberOf dw.order.ReturnCase
 * @return {dw.value.EnumValue} the status
 */
dw.order.ReturnCase.prototype.getStatus = function() {};

/**
 * Return whether this is an RMA. This is specified when calling <a href="class_dw_order_Order.html#dw_order_Order_createReturnCase_String_boolean_DetailAnchor">Order.createReturnCase(String, boolean)</a>.
 * @memberOf dw.order.ReturnCase
 * @return {Boolean} whether this is an RMA.
 */
dw.order.ReturnCase.prototype.isRMA = function() {};

/**
 * An item of a <a href="class_dw_order_ReturnCase.html">ReturnCase</a>, created using method
 <a href="class_dw_order_ReturnCase.html#dw_order_ReturnCase_createItem_String_DetailAnchor">ReturnCase.createItem(String)</a>. Initially the
 ReturnCaseItem is NEW. No <a href="class_dw_order_Return.html">Return</a> can be
 created at this point. From NEW the item transitions in CONFIRMED state.
 Now Return can be created. Next transition is either to
 PARTIAL_RETURNED or to CANCELLED. At the end the item can be RETURNED (no other
 Returns can be created.

 The custom code implementing the ReturnHooks is
 responsible to provide the logic for the transitions. Please refer to the
 documentation of <a href="class_dw_order_hooks_ReturnHooks.html">ReturnHooks</a> for further
 information.
 <br>
 When the related ReturnCase were confirmed, only the the custom attributes of the return case item can be changed.
 * @class
 * @extends dw.order.AbstractItem
 */
dw.order.ReturnCaseItem = function() {};
dw.order.ReturnCaseItem.prototype = new dw.order.AbstractItem();

/**
 * constant for ReturnCase Status CANCELLED
 * @type String
 * @memberOf dw.order.ReturnCaseItem
 * @static
 * @const
 */
dw.order.ReturnCaseItem.STATUS_CANCELLED = '';

/**
 * constant for ReturnCase Status CONFIRMED
 * @type String
 * @memberOf dw.order.ReturnCaseItem
 * @static
 * @const
 */
dw.order.ReturnCaseItem.STATUS_CONFIRMED = '';

/**
 * constant for ReturnCase Status NEW
 * @type String
 * @memberOf dw.order.ReturnCaseItem
 * @static
 * @const
 */
dw.order.ReturnCaseItem.STATUS_NEW = '';

/**
 * constant for ReturnCase Status PARTIAL RETURNED
 * @type String
 * @memberOf dw.order.ReturnCaseItem
 * @static
 * @const
 */
dw.order.ReturnCaseItem.STATUS_PARTIAL_RETURNED = '';

/**
 * constant for ReturnCase Status RETURNED
 * @type String
 * @memberOf dw.order.ReturnCaseItem
 * @static
 * @const
 */
dw.order.ReturnCaseItem.STATUS_RETURNED = '';

/**
 * Create a new <a href="class_dw_order_ReturnItem.html">ReturnItem</a> for this ReturnCaseItem and assign it to the
 given <a href="class_dw_order_Return.html">Return</a>.
 * @memberOf dw.order.ReturnCaseItem
 * @param {String} returnNumber - number of Return to which new item is assigned.
 * @return {dw.order.ReturnItem} new ReturnItem
 */
dw.order.ReturnCaseItem.prototype.createReturnItem = function(returnNumber) {};

/**
 * Return the <a href="class_dw_value_Quantity.html">Quantity</a> authorized for this ReturnCaseItem, may be N/A.
 * @memberOf dw.order.ReturnCaseItem
 * @return {dw.value.Quantity} the authorized quantity or N/A
 */
dw.order.ReturnCaseItem.prototype.getAuthorizedQuantity = function() {};

/**
 * Price of a single unit before discount application.
 * @memberOf dw.order.ReturnCaseItem
 * @return {dw.value.Money} Price of a single unit before discount application.
 */
dw.order.ReturnCaseItem.prototype.getBasePrice = function() {};

/**
 * Return the note for this return case item.
 * @memberOf dw.order.ReturnCaseItem
 * @return {String} the note or <code>null</code>
 */
dw.order.ReturnCaseItem.prototype.getNote = function() {};

/**
 * Returns null or the parent item.
 * @memberOf dw.order.ReturnCaseItem
 * @return {dw.order.ReturnCaseItem} null or the parent item.
 */
dw.order.ReturnCaseItem.prototype.getParentItem = function() {};

/**
 * Returns the reason code for return case item.
 * @memberOf dw.order.ReturnCaseItem
 * @return {dw.value.EnumValue} the return reason code
 */
dw.order.ReturnCaseItem.prototype.getReasonCode = function() {};

/**
 * Mandatory number of <a href="class_dw_order_ReturnCase.html">ReturnCase</a> to which this item belongs
 * @memberOf dw.order.ReturnCaseItem
 * @return {String} number of ReturnCase to which this item belongs
 */
dw.order.ReturnCaseItem.prototype.getReturnCaseNumber = function() {};

/**
 * Unsorted collection of <a href="class_dw_order_ReturnItem.html">ReturnItem</a>s associated with this ReturnCaseItem.
 * @memberOf dw.order.ReturnCaseItem
 * @return {dw.util.Collection} unsorted collection of ReturnItems associated with this ReturnCaseItem
 * @see <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_createReturnItem_String_DetailAnchor">createReturnItem(String)</a>
 */
dw.order.ReturnCaseItem.prototype.getReturnItems = function() {};

/**
 * Gets the return case item status.
 <p>
 The possible values are <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_NEW_DetailAnchor">STATUS_NEW</a>,<a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_CONFIRMED_DetailAnchor">STATUS_CONFIRMED</a>,
 <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_PARTIAL_RETURNED_DetailAnchor">STATUS_PARTIAL_RETURNED</a>, <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_RETURNED_DetailAnchor">STATUS_RETURNED</a>,
 <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_CANCELLED_DetailAnchor">STATUS_CANCELLED</a>.
 <p/>
 * @memberOf dw.order.ReturnCaseItem
 * @return {dw.value.EnumValue} the status
 */
dw.order.ReturnCaseItem.prototype.getStatus = function() {};

/**
 * Set the optional authorized <a href="class_dw_value_Quantity.html">Quantity</a> for this item. Passing null will result in an N/A Quantity
 being set.
 * @memberOf dw.order.ReturnCaseItem
 * @param {dw.value.Quantity} authorizedQuantity - null or the quantity
 */
dw.order.ReturnCaseItem.prototype.setAuthorizedQuantity = function(authorizedQuantity) {};

/**
 * Sets a note for this return case item.
 * @memberOf dw.order.ReturnCaseItem
 * @param {String} note - the note for this return case item to set
 */
dw.order.ReturnCaseItem.prototype.setNote = function(note) {};

/**
 * Set a parent item. The parent item must belong to the same
 <a href="class_dw_order_ReturnCase.html">ReturnCase</a>. An infinite parent-child loop is disallowed
 as is a parent-child depth greater than 10. Setting a parent item
 indicates a dependency of the child item on the parent item, and can be
 used to form a parallel structure to that accessed using
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getParent_DetailAnchor">ProductLineItem.getParent()</a>.
 * @memberOf dw.order.ReturnCaseItem
 * @param {dw.order.ReturnCaseItem} parentItem - The parent item, null is allowed
 */
dw.order.ReturnCaseItem.prototype.setParentItem = function(parentItem) {};

/**
 * Changes the reason code. Initially the reason code is set on return case
 item creation.
 * @memberOf dw.order.ReturnCaseItem
 * @param {String} reasonCode - the reason code to set
 */
dw.order.ReturnCaseItem.prototype.setReasonCode = function(reasonCode) {};

/**
 * Sets the status.
 <p>
 The possible values are <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_NEW_DetailAnchor">STATUS_NEW</a>,<a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_CONFIRMED_DetailAnchor">STATUS_CONFIRMED</a>,
 <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_PARTIAL_RETURNED_DetailAnchor">STATUS_PARTIAL_RETURNED</a>, <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_RETURNED_DetailAnchor">STATUS_RETURNED</a>,
 <a href="class_dw_order_ReturnCaseItem.html#dw_order_ReturnCaseItem_STATUS_CANCELLED_DetailAnchor">STATUS_CANCELLED</a>.

 <p>
 * @memberOf dw.order.ReturnCaseItem
 * @param {String} statusString - the status
 * @throws NullPointerException
             if status is <code>null</code>
 * @throws IllegalArgumentException
             if the status transition to the status is not allowed
 */
dw.order.ReturnCaseItem.prototype.setStatus = function(statusString) {};

/**
 * An item of a <a href="class_dw_order_Return.html">Return</a>, created using <a href="class_dw_order_Return.html#dw_order_Return_createItem_String_DetailAnchor">Return.createItem(String)</a>.
 Represents a physically returned order line item. Please refer to the documentation of <a href="class_dw_order_hooks_ReturnHooks.html">ReturnHooks</a>
 for further information.
 <br>
 When the related Return were set to status COMPLETED, only the the custom attributes of the return item can be changed.
 * @class
 * @extends dw.order.AbstractItem
 */
dw.order.ReturnItem = function() {};
dw.order.ReturnItem.prototype = new dw.order.AbstractItem();

/**
 * Create a new <a href="class_dw_order_TaxItem.html"> tax-item</a> and add to this item.
 * @memberOf dw.order.ReturnItem
 * @param {dw.util.Decimal} amount - amount to assign to the tax-item
 * @param {dw.order.TaxGroup} taxGroup - the <a href="class_dw_order_TaxGroup.html">TaxGroup</a> to which the item belongs
 * @return {dw.order.TaxItem} the new tax-item
 */
dw.order.ReturnItem.prototype.addTaxItem = function(amount, taxGroup) {};

/**
 * Apply a rate of (factor / divisor) to the prices in this item, with the option to half round up or half round down to the
 nearest cent if necessary.
 <p/><i>Examples</i>:
 <br/><table><tr><th align=right>TaxBasis before</th><th align=right>factor</th><th align=right>divisor</th><th>roundup</th><th align=middle>Calculation</th><th align=middle>TaxBasis after</th></tr>
 <tr><td align=right>$10.00</td><td align=right>1</td><td align=right>2</td><td align=middle>true</td><td align=right>10*1/2=</td><td align=right>$5.00</td></tr>
 <tr><td align=right>$10.00</td><td align=right>9</td><td align=right>10</td><td align=middle>true</td><td align=right>10*9/10=</td><td align=right>$9.00</td></tr>
 <tr><td align=right>$10.00</td><td align=right>1</td><td align=right>3</td><td align=middle>true</td><td align=right>10*1/3=3.3333=</td><td align=right>$3.33</td></tr>
 <tr><td align=right> $2.47</td><td align=right>1</td><td align=right>2</td><td align=middle>true</td><td align=right>2.47*1/2=1.235=</td><td align=right>$1.24</td></tr>
 <tr><td align=right> $2.47</td><td align=right>1</td><td align=right>2</td><td align=middle>false</td><td align=right>2.47*1/2=1.235=</td><td align=right>$1.23</td></tr>
 </table>
 <p/><i>Which prices are updated?</i>:
 <br/>The rate described above is applied to tax-basis and tax then the net-price and gross-price are recalculated by adding / subtracting
 depending on whether the order is based on net price.
 <p/><i>Example (order based on net price)</i>
 <br/>New TaxBasis:$10.00, Tax:$1.00, NetPrice=TaxBasis=$10.00, GrossPrice=TaxBasis+Tax=$11.00
 <p/><i>Example (order based on gross price)</i>
 <br/>New TaxBasis:$10.00, Tax:$1.00, NetPrice=TaxBasis-tax=$9.00, GrossPrice=TaxBasis=$10.00
 * @memberOf dw.order.ReturnItem
 * @param {dw.util.Decimal} factor - factor used to calculate rate
 * @param {dw.util.Decimal} divisor - divisor used to calculate rate
 * @param {Boolean} roundUp - whether to round up or down on 0.5
 * @see <a href="class_dw_order_AbstractItem.html#dw_order_AbstractItem_getTaxBasis_DetailAnchor">AbstractItem.getTaxBasis()</a>
 * @see <a href="class_dw_order_AbstractItem.html#dw_order_AbstractItem_getTax_DetailAnchor">AbstractItem.getTax()</a>
 * @see <a href="class_dw_order_AbstractItem.html#dw_order_AbstractItem_getNetPrice_DetailAnchor">AbstractItem.getNetPrice()</a>
 * @see <a href="class_dw_order_AbstractItem.html#dw_order_AbstractItem_getGrossPrice_DetailAnchor">AbstractItem.getGrossPrice()</a>
 * @see <a href="class_dw_order_TaxMgr.html#dw_order_TaxMgr_getTaxationPolicy_DetailAnchor">TaxMgr.getTaxationPolicy()</a>
 */
dw.order.ReturnItem.prototype.applyPriceRate = function(factor, divisor, roundUp) {};

/**
 * Price of a single unit before discount application.
 * @memberOf dw.order.ReturnItem
 * @return {dw.value.Money} Price of a single unit before discount application.
 */
dw.order.ReturnItem.prototype.getBasePrice = function() {};

/**
 * Return the note for this return item.
 * @memberOf dw.order.ReturnItem
 * @return {String} the note or <code>null</code>
 */
dw.order.ReturnItem.prototype.getNote = function() {};

/**
 * Returns null or the parent item.
 * @memberOf dw.order.ReturnItem
 * @return {dw.order.ReturnItem} null or the parent item.
 */
dw.order.ReturnItem.prototype.getParentItem = function() {};

/**
 * Returns the reason code for return item. The list of reason codes can be updated
 by updating meta-data for ReturnItem.
 * @memberOf dw.order.ReturnItem
 * @return {dw.value.EnumValue} the return reason code
 */
dw.order.ReturnItem.prototype.getReasonCode = function() {};

/**
 * Returns the return case item related to this item. Should never return null.
 * @memberOf dw.order.ReturnItem
 * @return {dw.order.ReturnCaseItem} the return case item related to this item
 */
dw.order.ReturnItem.prototype.getReturnCaseItem = function() {};

/**
 * The <a href="class_dw_value_Quantity.html">Quantity</a> returned. This may return an N/A quantity.
 * @memberOf dw.order.ReturnItem
 * @return {dw.value.Quantity} the quantity returned, may be N/A
 */
dw.order.ReturnItem.prototype.getReturnedQuantity = function() {};

/**
 * The mandatory returnNumber of the <a href="class_dw_order_Return.html">Return</a> to which this item belongs.
 * @memberOf dw.order.ReturnItem
 * @return {String} the returnNumber of the Return to which this item belongs
 */
dw.order.ReturnItem.prototype.getReturnNumber = function() {};

/**
 * Sets a note for this return item.
 * @memberOf dw.order.ReturnItem
 * @param {String} note - the note for this return item to set
 */
dw.order.ReturnItem.prototype.setNote = function(note) {};

/**
 * Set a parent item. The parent item must belong to the same
 <a href="class_dw_order_Return.html">Return</a>. An infinite parent-child loop is disallowed
 as is a parent-child depth greater than 10. Setting a parent item
 indicates a dependency of the child item on the parent item, and can be
 used to form a parallel structure to that accessed using
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getParent_DetailAnchor">ProductLineItem.getParent()</a>.
 * @memberOf dw.order.ReturnItem
 * @param {dw.order.ReturnItem} parentItem - The parent item, null is allowed
 */
dw.order.ReturnItem.prototype.setParentItem = function(parentItem) {};

/**
 * Set the reason code. The list of reason codes can be updated by updating meta-data for ReturnItem.
 * @memberOf dw.order.ReturnItem
 * @param {String} reasonCode - the reason code to set
 */
dw.order.ReturnItem.prototype.setReasonCode = function(reasonCode) {};

/**
 * Set the <a href="class_dw_value_Quantity.html">Quantity</a> returned. Passing null results in an exception being thrown.
 The quantity must be higher than zero and not be higher than the remaining quantity to return.

 <p/>The item prices are recalculated in this method as described in <a href="class_dw_order_ReturnItem.html#dw_order_ReturnItem_applyPriceRate_Decimal_Decimal_boolean_DetailAnchor">applyPriceRate(Decimal, Decimal, boolean)</a>
 with the <code>quantity</code> argument as the factor, and ordered quantity as divisor
 and <code>true</code> as the roundup parameter.
 * @memberOf dw.order.ReturnItem
 * @param {dw.value.Quantity} quantity - the quantity returned, null not allowed
 * @see <a href="class_dw_order_OrderItem.html#dw_order_OrderItem_getReturnedQuantity_DetailAnchor">OrderItem.getReturnedQuantity()</a>
 * @see <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getQuantity_DetailAnchor">ProductLineItem.getQuantity()</a>
 */
dw.order.ReturnItem.prototype.setReturnedQuantity = function(quantity) {};

/**
 * Set the tax-basis price for this item.
 * @memberOf dw.order.ReturnItem
 * @param {dw.value.Money} taxBasis
 */
dw.order.ReturnItem.prototype.setTaxBasis = function(taxBasis) {};

/**
 * Set the tax-items for this item.
 * @memberOf dw.order.ReturnItem
 * @param {dw.util.Collection} taxItems - items
 * @see <a href="class_dw_order_ReturnItem.html#dw_order_ReturnItem_addTaxItem_Decimal_TaxGroup_DetailAnchor">addTaxItem(Decimal, TaxGroup)</a>
 * @see <a href="class_dw_order_TaxGroup.html#dw_order_TaxGroup_create_String_String_String_Decimal_DetailAnchor">TaxGroup.create(String, String, String, Decimal)</a>
 */
dw.order.ReturnItem.prototype.setTaxItems = function(taxItems) {};

/**
 * Represents an order shipment.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.Shipment = function() {};
dw.order.Shipment.prototype = new dw.object.ExtensibleObject();

/**
 * Shipment shipping status representing 'Not shipped'.
 * @type Number
 * @memberOf dw.order.Shipment
 * @deprecated Use <a href="class_dw_order_Shipment.html#dw_order_Shipment_SHIPPING_STATUS_NOTSHIPPED_DetailAnchor">SHIPPING_STATUS_NOTSHIPPED</a> instead.
 * @static
 * @const
 */
dw.order.Shipment.SHIPMENT_NOTSHIPPED = 0;

/**
 * Shipment shipping status representing 'Shipped'.
 * @type Number
 * @memberOf dw.order.Shipment
 * @deprecated Use <a href="class_dw_order_Shipment.html#dw_order_Shipment_SHIPPING_STATUS_SHIPPED_DetailAnchor">SHIPPING_STATUS_SHIPPED</a> instead.
 * @static
 * @const
 */
dw.order.Shipment.SHIPMENT_SHIPPED = 0;

/**
 * Shipment shipping status representing 'Not shipped'.
 * @type Number
 * @memberOf dw.order.Shipment
 * @static
 * @const
 */
dw.order.Shipment.SHIPPING_STATUS_NOTSHIPPED = 0;

/**
 * Shipment shipping status representing 'Shipped'.
 * @type Number
 * @memberOf dw.order.Shipment
 * @static
 * @const
 */
dw.order.Shipment.SHIPPING_STATUS_SHIPPED = 0;

/**
 * A shipment has initially no shipping address. This method creates a
 shipping address for the shipment and replaces an existing shipping
 address.
 * @memberOf dw.order.Shipment
 * @return {dw.order.OrderAddress} The new shipping address of the shipment
 */
dw.order.Shipment.prototype.createShippingAddress = function() {};

/**
 * Creates a new shipping line item for this shipment.
 If the specified ID is already assigned to any of the existing
 shipping line items of the shipment, the method throws an exception.
 * @memberOf dw.order.Shipment
 * @param {String} id - The id to use to locate the new shipping line item.
 * @return {dw.order.ShippingLineItem} The new shipping line item.
 */
dw.order.Shipment.prototype.createShippingLineItem = function(id) {};

/**
 * Creates a shipping price adjustment to be applied to the shipment. The
 price adjustment implicitly belongs to the standard shipping line item
 if this line item exists, otherwise it belongs to the shipment itself.<br/>

 The promotion ID is mandatory and must not be the ID of any actual
 promotion defined in the Demandware system.<br/>

 If there already exists a shipping price adjustment line item referring
 to the specified promotion ID, an exception is thrown.
 * @memberOf dw.order.Shipment
 * @param {String} promotionID - Promotion ID
 * @return {dw.order.PriceAdjustment} The new price adjustment line item.
 * @deprecated Deprecated in favor of
             <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_createShippingPriceAdjustment_String_DetailAnchor">ShippingLineItem.createShippingPriceAdjustment(String)</a>
             which explicitly relates the price adjustment to a shipping
             line item.
 */
dw.order.Shipment.prototype.createShippingPriceAdjustment = function(promotionID) {};

/**
 * Returns the adjusted total gross price, including tax, in the purchase currency.

 Adjusted merchandize prices represent the sum of product prices before
 services such as shipping have been added, but after adjustments from i.e.
 promotions have been added.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the adjusted total gross price, including tax, in the purchase currency.
 */
dw.order.Shipment.prototype.getAdjustedMerchandizeTotalGrossPrice = function() {};

/**
 * Returns the adjusted net price, excluding tax, in the purchase currency.

 Adjusted merchandize prices represent the sum of product prices before
 services such as shipping have been added, but after adjustments from i.e.
 promotions have been added.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the adjusted net price, excluding tax, in the purchase currency.
 */
dw.order.Shipment.prototype.getAdjustedMerchandizeTotalNetPrice = function() {};

/**
 * Returns the merchandize total price after all product discounts.
 If the line item container is based on net pricing the adjusted
 merchandize total net price is returned.
 If the line item container is based on gross pricing the adjusted
 merchandize total gross price is returned.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} either the adjusted merchandize total net or gross price.
 */
dw.order.Shipment.prototype.getAdjustedMerchandizeTotalPrice = function() {};

/**
 * Returns the merchandise total price of the shipment after considering all
 product price adjustments and, optionally, prorating all order-level
 discounts. For net pricing the net price is returned. For gross pricing,
 the gross price is returned.
 * @memberOf dw.order.Shipment
 * @param {Boolean} applyOrderLevelAdjustments - If true, order-level adjustments will             be applied to total price
 * @return {dw.value.Money} Adjusted net or gross merchandise total price
 * @see <a href="class_dw_order_Shipment.html#dw_order_Shipment_getAdjustedMerchandizeTotalPrice_DetailAnchor">getAdjustedMerchandizeTotalPrice()</a>
 */
dw.order.Shipment.prototype.getAdjustedMerchandizeTotalPrice = function(applyOrderLevelAdjustments) {};

/**
 * Returns the total tax in purchase currency.

 Adjusted merchandize prices represent the sum of product prices before
 services such as shipping have been added, but after adjustments from i.e.
 promotions have been added.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the total tax in purchase currency.
 */
dw.order.Shipment.prototype.getAdjustedMerchandizeTotalTax = function() {};

/**
 * Returns the adjusted sum of all shipping line items of the shipment,
 including tax after shipping adjustments have been applied.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the adjusted sum of all shipping line items of the shipment,  including tax after shipping adjustments have been applied.
 */
dw.order.Shipment.prototype.getAdjustedShippingTotalGrossPrice = function() {};

/**
 * Returns the sum of all shipping line items of the shipment, excluding tax
 after shipping adjustments have been applied.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the sum of all shipping line items of the shipment, excluding tax          after shipping adjustments have been applied.
 */
dw.order.Shipment.prototype.getAdjustedShippingTotalNetPrice = function() {};

/**
 * Returns the adjusted shipping total price. If the line item container
 is based on net pricing the adjusted shipping total net price is
 returned. If the line item container is based on gross pricing the adjusted
 shipping total gross price is returned.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} either the adjusted shipping total net or gross price
 */
dw.order.Shipment.prototype.getAdjustedShippingTotalPrice = function() {};

/**
 * Returns the tax of all shipping line items of the shipment after shipping
 adjustments have been applied.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the tax of all shipping line items of the shipment after shipping          adjustments have been applied.
 */
dw.order.Shipment.prototype.getAdjustedShippingTotalTax = function() {};

/**
 * Returns all line items related to the shipment.

 <p/>The returned collection may include line items of the following types:
 <ul>
 <li><a href="class_dw_order_ProductLineItem.html">ProductLineItem</a></li>
 <li><a href="class_dw_order_ShippingLineItem.html">ShippingLineItem</a></li>
 <li><a href="class_dw_order_GiftCertificateLineItem.html">GiftCertificateLineItem</a></li>
 <li><a href="class_dw_order_PriceAdjustment.html">PriceAdjustment</a></li>
 </ul>
 Their common type is <a href="class_dw_order_LineItem.html">LineItem</a>.

 <p/>Each <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a> in the collection
 may itself contain bundled or option product line items,
 as well as a product-level shipping line item.
 * @memberOf dw.order.Shipment
 * @return {dw.util.Collection} all line items related to ths shipment.
 */
dw.order.Shipment.prototype.getAllLineItems = function() {};

/**
 * Returns all gift certificate line items of the shipment.
 * @memberOf dw.order.Shipment
 * @return {dw.util.Collection} A collection of all GiftCertificateLineItems of the shipment.
 */
dw.order.Shipment.prototype.getGiftCertificateLineItems = function() {};

/**
 * Returns the value set for gift message or null if no value set.
 * @memberOf dw.order.Shipment
 * @return {String} the value set for gift message or null if no value set.
 */
dw.order.Shipment.prototype.getGiftMessage = function() {};

/**
 * Returns the ID of this shipment.
 * @memberOf dw.order.Shipment
 * @return {String} the ID of this shipment
 */
dw.order.Shipment.prototype.getID = function() {};

/**
 * Returns the total gross price, including tax, in the purchase currency.

 Merchandize total prices represent the sum of product prices before
 services such as shipping or adjustments from i.e. promotions have
 been added.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the total gross price, including tax, in the purchase currency.
 */
dw.order.Shipment.prototype.getMerchandizeTotalGrossPrice = function() {};

/**
 * Returns the net price, excluding tax, in the purchase currency.

 Merchandize total prices represent the sum of product prices before
 services such as shipping or adjustments from i.e. promotions have
 been added.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the net price, excluding tax, in the purchase currency.
 */
dw.order.Shipment.prototype.getMerchandizeTotalNetPrice = function() {};

/**
 * Returns the merchandize total price. If the line item container is based
 on net pricing the merchandize total net price is returned. If the line
 item container is based on gross pricing the merchandize total gross price
 is returned.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} either the merchandize total net or gross price
 */
dw.order.Shipment.prototype.getMerchandizeTotalPrice = function() {};

/**
 * Returns a collection of price adjustments that have been applied to the
 totals such as promotion on the purchase value (i.e. $10 Off or 10% Off).
 * @memberOf dw.order.Shipment
 * @return {dw.util.Collection} a collection of price adjustments that have been applied to the  totals such as promotion on the purchase value (i.e. $10 Off or 10% Off).
 * @deprecated Shipments cannot have merchandize price adjustments, therefore
 this method will always return an empty collection
 */
dw.order.Shipment.prototype.getMerchandizeTotalPriceAdjustments = function() {};

/**
 * Returns the total tax in purchase currency.

 Merchandize total prices represent the sum of product prices before
 services such as shipping or adjustments from i.e. promotions have
 been added.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the total tax in purchase currency.
 */
dw.order.Shipment.prototype.getMerchandizeTotalTax = function() {};

/**
 * Returns a collection of all product line items related
 to this shipment.
 * @memberOf dw.order.Shipment
 * @return {dw.util.Collection} a collection of all product line items related  to this shipment.
 */
dw.order.Shipment.prototype.getProductLineItems = function() {};

/**
 * Returns the merchandise total price of the shipment after considering all
 product price adjustments and prorating all Buy-X-Get-Y and order-level
 discounts, according to the scheme described in
 <a href="class_dw_order_PriceAdjustment.html#dw_order_PriceAdjustment_getProratedPrices_DetailAnchor">PriceAdjustment.getProratedPrices()</a>. For net pricing the
 net price is returned. For gross pricing, the gross price is returned.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} Adjusted and prorated net or gross merchandise total price
 */
dw.order.Shipment.prototype.getProratedMerchandizeTotalPrice = function() {};

/**
 * Returns the shipment number for this shipment.

 This number is automatically generated.
 * @memberOf dw.order.Shipment
 * @return {String} the shipment number for this shipment.
 */
dw.order.Shipment.prototype.getShipmentNo = function() {};

/**
 * Returns the shipping address or null if none is set.
 * @memberOf dw.order.Shipment
 * @return {dw.order.OrderAddress} the shipping address or null if none is set.
 */
dw.order.Shipment.prototype.getShippingAddress = function() {};

/**
 * Returns the shipping line item identified by the specified ID, or
 null if not found.

 <p/>To get the standard shipping line item for this shipment,
 use the identifier <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_STANDARD_SHIPPING_ID_DetailAnchor">ShippingLineItem.STANDARD_SHIPPING_ID</a>.
 * @memberOf dw.order.Shipment
 * @param {String} id - the identifier to use to locate the shipping line item.
 * @return {dw.order.ShippingLineItem} the shipping line item identified by the specified ID, or  null if not found.
 */
dw.order.Shipment.prototype.getShippingLineItem = function(id) {};

/**
 * Returns a collection of all shipping line items of the shipment,
 excluding any product-level shipping costs that are
 associated with <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a>s of the shipment.
 * @memberOf dw.order.Shipment
 * @return {dw.util.Collection} a collection of all shipping line items of the shipment,  excluding any product-level shipping costs.
 */
dw.order.Shipment.prototype.getShippingLineItems = function() {};

/**
 * Returns the shipping method or null if none is set.
 * @memberOf dw.order.Shipment
 * @return {dw.order.ShippingMethod} the shipping method or null if none is set.
 */
dw.order.Shipment.prototype.getShippingMethod = function() {};

/**
 * Returns the shipping method ID or null if none is set.
 * @memberOf dw.order.Shipment
 * @return {String} the shipping method ID or null if none is set.
 */
dw.order.Shipment.prototype.getShippingMethodID = function() {};

/**
 * Returns the shipping price adjustment associated with the
 specified promotion ID.
 * @memberOf dw.order.Shipment
 * @param {String} promotionID - the promotion ID
 * @return {dw.order.PriceAdjustment} The price adjustment associated with the given promotion ID
 */
dw.order.Shipment.prototype.getShippingPriceAdjustmentByPromotionID = function(promotionID) {};

/**
 * Returns a collection of price adjustments that have been applied to the
 shipping costs of the shipment, for example by the promotions engine.<br/>

 Note that this method returns all shipping price adjustments in this
 shipment regardless of which shipping line item they belong to. Use
 <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_getShippingPriceAdjustments_DetailAnchor">ShippingLineItem.getShippingPriceAdjustments()</a> to
 retrieve the shipping price adjustments associated with a specific
 shipping line item.
 * @memberOf dw.order.Shipment
 * @return {dw.util.Collection} a collection of price adjustments that have been applied to the          shipping costs of the shipment.
 */
dw.order.Shipment.prototype.getShippingPriceAdjustments = function() {};

/**
 * Returns the shipping status. Possible values are
 SHIPMENT_NOTSHIPPED or SHIPMENT_SHIPPED.
 * @memberOf dw.order.Shipment
 * @return {dw.value.EnumValue} the shipping status. Possible values are  SHIPMENT_NOTSHIPPED or SHIPMENT_SHIPPED.
 */
dw.order.Shipment.prototype.getShippingStatus = function() {};

/**
 * Returns the sum of all shipping line items of the shipment,
 including tax before shipping adjustments have been applied.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the sum of all shipping line items of the shipment,  including tax before shipping adjustments have been applied.
 */
dw.order.Shipment.prototype.getShippingTotalGrossPrice = function() {};

/**
 * Returns the sum of all shipping line items of the shipment, excluding tax
 before shipping adjustments have been applied.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the sum of all shipping line items of the shipment, excluding tax          before shipping adjustments have been applied.
 */
dw.order.Shipment.prototype.getShippingTotalNetPrice = function() {};

/**
 * Returns the shipping total price. If the line item container is based on
 net pricing the shipping total net price is returned. If the line item
 container is based on gross pricing the shipping total gross price is
 returned.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} either the shipping total net or gross price
 */
dw.order.Shipment.prototype.getShippingTotalPrice = function() {};

/**
 * Returns the tax of all shipping line items of the shipment before
 shipping adjustments have been applied.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the tax of all shipping line items of the shipment before          shipping adjustments have been applied.
 */
dw.order.Shipment.prototype.getShippingTotalTax = function() {};

/**
 * Convenenience method. Same as
 <code>getShippingLineItem(ShippingLineItem.STANDARD_SHIPPING_ID)</code>
 * @memberOf dw.order.Shipment
 * @return {dw.order.ShippingLineItem} The standard shipping line item, or null if it does not exist.
 */
dw.order.Shipment.prototype.getStandardShippingLineItem = function() {};

/**
 * Returns the grand total price gross of tax for the shipment, in purchase currency.

 Total prices represent the sum of product prices, services prices and adjustments.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the grand total price gross of tax for the shipment, in purchase currency.
 */
dw.order.Shipment.prototype.getTotalGrossPrice = function() {};

/**
 * Returns the grand total price for the shipment net of tax, in purchase currency.

 Total prices represent the sum of product prices, services prices and adjustments.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the grand total price for the shipment net of tax, in purchase currency.
 */
dw.order.Shipment.prototype.getTotalNetPrice = function() {};

/**
 * Returns the total tax for the shipment, in purchase currency.

 Total prices represent the sum of product prices, services prices and adjustments.
 * @memberOf dw.order.Shipment
 * @return {dw.value.Money} the total tax for the shipment, in purchase currency.
 */
dw.order.Shipment.prototype.getTotalTax = function() {};

/**
 * Returns the tracking number of this shipment.
 * @memberOf dw.order.Shipment
 * @return {String} the tracking number of this shipment.
 */
dw.order.Shipment.prototype.getTrackingNumber = function() {};

/**
 * Return true if this shipment is the default shipment.
 * @memberOf dw.order.Shipment
 * @return {Boolean} true if this shipment is the default shipment.
 */
dw.order.Shipment.prototype.isDefault = function() {};

/**
 * Returns true if this line item represents a gift, false otherwise.
 * @memberOf dw.order.Shipment
 * @return {Boolean} true if this line item represents a gift, false otherwise.
 */
dw.order.Shipment.prototype.isGift = function() {};

/**
 * Removes the specified shipping line item and any of its dependent
 shipping price adjustments.
 * @memberOf dw.order.Shipment
 * @param {dw.order.ShippingLineItem} shippingLineItem - The shipping line item to be removed.
 */
dw.order.Shipment.prototype.removeShippingLineItem = function(shippingLineItem) {};

/**
 * Removes the specified shipping price adjustment from the shipment.
 * @memberOf dw.order.Shipment
 * @param {dw.order.PriceAdjustment} priceAdjustment - The price adjustment line item to remove
 * @deprecated Deprecated in favor of
             <a href="class_dw_order_ShippingLineItem.html#dw_order_ShippingLineItem_removeShippingPriceAdjustment_PriceAdjustment_DetailAnchor">ShippingLineItem.removeShippingPriceAdjustment(PriceAdjustment)</a>
             since shipping price adjustments belong to a specific
             shipping line item.
 */
dw.order.Shipment.prototype.removeShippingPriceAdjustment = function(priceAdjustment) {};

/**
 * Controls if this line item is a gift or not.
 * @memberOf dw.order.Shipment
 * @param {Boolean} isGift - set to true if you want this line item to  represent a gift.
 */
dw.order.Shipment.prototype.setGift = function(isGift) {};

/**
 * Sets the value to set for the gift message.
 * @memberOf dw.order.Shipment
 * @param {String} message - the value to set for the gift message.
 */
dw.order.Shipment.prototype.setGiftMessage = function(message) {};

/**
 * Set the specified shipping method for the specified shipment.
 * @memberOf dw.order.Shipment
 * @param {dw.order.ShippingMethod} method - the shipping method to use.
 */
dw.order.Shipment.prototype.setShippingMethod = function(method) {};

/**
 * Sets the shipping status of the shipment. <br/>
 Possible values are <a href="class_dw_order_Shipment.html#dw_order_Shipment_SHIPPING_STATUS_NOTSHIPPED_DetailAnchor">SHIPPING_STATUS_NOTSHIPPED</a> or
 <a href="class_dw_order_Shipment.html#dw_order_Shipment_SHIPPING_STATUS_SHIPPED_DetailAnchor">SHIPPING_STATUS_SHIPPED</a>.
 * @memberOf dw.order.Shipment
 * @param {Number} status - Shipment shipping status
 */
dw.order.Shipment.prototype.setShippingStatus = function(status) {};

/**
 * Sets the tracking number of this shipment.
 * @memberOf dw.order.Shipment
 * @param {String} aValue - the tracking number of this shipment.
 */
dw.order.Shipment.prototype.setTrackingNumber = function(aValue) {};

/**
 * Represents shipping cost applied to shipments. <br/>

 Returned by
 <a href="class_dw_order_ShipmentShippingModel.html#dw_order_ShipmentShippingModel_getShippingCost_ShippingMethod_DetailAnchor">ShipmentShippingModel.getShippingCost(ShippingMethod)</a>.
 * @class
 * @extends Object
 */
dw.order.ShipmentShippingCost = function() {};
dw.order.ShipmentShippingCost.prototype = new Object();

/**
 * Returns the shipping amount.
 * @memberOf dw.order.ShipmentShippingCost
 * @return {dw.value.Money} Shipping amount
 */
dw.order.ShipmentShippingCost.prototype.getAmount = function() {};

/**
 * Instances of ShipmentShippingModel provide access to shipment-level
 shipping information, such as applicable and inapplicable shipping methods
 and shipping cost. <br/>

 Use <a href="class_dw_order_ShippingMgr.html#dw_order_ShippingMgr_getShipmentShippingModel_Shipment_DetailAnchor">ShippingMgr.getShipmentShippingModel(Shipment)</a> to get
 the shipping model for a specific shipment.
 * @class
 * @extends Object
 */
dw.order.ShipmentShippingModel = function() {};
dw.order.ShipmentShippingModel.prototype = new Object();

/**
 * Returns the active applicable shipping methods for the shipment related
 to this shipping model. A shipping method is applicable for a shipment
 if it does not exclude any of the products in the shipment, and does
 not exclude the shipment's shipping address, if this is set.
 * @memberOf dw.order.ShipmentShippingModel
 * @return {dw.util.Collection} Applicable shipping methods for the shipment
 */
dw.order.ShipmentShippingModel.prototype.getApplicableShippingMethods = function() {};

/**
 * Returns the active applicable shipping methods for the shipment related
 to this shipping model and the specified shipping address. A shipping
 method is applicable if it does not exclude any of the products in the
 shipment, and does not exclude the specified shipping address.
 <p/>
 The parameter shippingAddressObj must be a JavaScript literal with the
 same properties as an OrderAddress object, or alternatively a Map.
 For example:
 <p/>

<pre>
 model.getApplicableShippingMethods (
    { countryCode: &quot;US&quot;,
      stateCode: &quot;MA,
      custom { POBox : true }
    }
 )
 </pre>

 This method is useful when it is needed to retrieve the list of
 applicable shipping methods for an address before the address is saved to
 the shipment.
 * @memberOf dw.order.ShipmentShippingModel
 * @param {Object} shippingAddressObj - A JavaScript object representing an order             address, must not be null.
 * @return {dw.util.Collection} Applicable shipping methods for the shipment
 */
dw.order.ShipmentShippingModel.prototype.getApplicableShippingMethods = function(shippingAddressObj) {};

/**
 * Returns the active inapplicable shipping methods for the shipment related
 to this shipping model. A shipping method is inapplicable for a shipment
 if it is inapplicable for at least one product contained in the
 shipment, or the shipping address is excluded by the shipping method.
 * @memberOf dw.order.ShipmentShippingModel
 * @return {dw.util.Collection} Inapplicable shipping methods for the shipment
 */
dw.order.ShipmentShippingModel.prototype.getInapplicableShippingMethods = function() {};

/**
 * Returns the active inapplicable shipping methods for the shipment related
 to this shipping model and the specified shipping address. A shipping
 method is inapplicable if it is inapplicable for at least one product
 contained in the shipment, or the specified shipping address is excluded
 by the shipping method.
 <p/>
 The parameter shippingAddressObj must be a JavaScript literal with the
 same properties as an OrderAddress object, or alternatively a Map.
 For example:
 <p/>

 <pre>
 model.getApplicableShippingMethods (
    { countryCode: &quot;US&quot;,
      stateCode: &quot;MA,
      custom { POBox : true }
    }
 )
 </pre>

 This method is useful when it is needed to retrieve the list of
 applicable shipping methods for an address before the address is saved to
 the shipment.
 * @memberOf dw.order.ShipmentShippingModel
 * @param {Object} shippingAddressObj - A JavaScript object representing an order             address.
 * @return {dw.util.Collection} Inapplicable shipping methods for the shipment
 */
dw.order.ShipmentShippingModel.prototype.getInapplicableShippingMethods = function(shippingAddressObj) {};

/**
 * Returns the shipping cost object for the related shipment and
 the specified shipping method. Shipping cost for shipments
 depended on the merchandise total of the shipment. The method
 uses the adjusted merchandise total after product and order discounts,
 and excluding products with product-level fixed-price shipping
 cost.<p/>
 * @memberOf dw.order.ShipmentShippingModel
 * @param {dw.order.ShippingMethod} shippingMethod - the shipping method to use.
 * @return {dw.order.ShipmentShippingCost} Product shipping cost
 */
dw.order.ShipmentShippingModel.prototype.getShippingCost = function(shippingMethod) {};

/**
 * Represents a specific line item in a shipment. The ShippingLineItem defines
 the general shipping costs of a shipment.
 * @class
 * @extends dw.order.LineItem
 */
dw.order.ShippingLineItem = function() {};
dw.order.ShippingLineItem.prototype = new dw.order.LineItem();

/**
 *
 * @type String
 * @memberOf dw.order.ShippingLineItem
 * @static
 * @const
 */
dw.order.ShippingLineItem.STANDARD_SHIPPING_ID = '';

/**
 * Creates a shipping price adjustment to be applied to the shipping line
 item.<br/>

 The promotion ID is mandatory and must not be the ID of any actual
 promotion defined in the Demandware system.<br/>

 If there already exists a shipping price adjustment on this shipping line
 item referring to the specified promotion ID, an exception is thrown.
 * @memberOf dw.order.ShippingLineItem
 * @param {String} promotionID - Promotion ID
 * @return {dw.order.PriceAdjustment} The new price adjustment line item.
 */
dw.order.ShippingLineItem.prototype.createShippingPriceAdjustment = function(promotionID) {};

/**
 * Creates a shipping price adjustment to be applied to the shipping line
 item.<br/>

 The promotion ID is mandatory and must not be the ID of any actual
 promotion defined in the Demandware system. If a shipping price adjustment on this shipping line
 item referring to the specified promotion ID already exists, an exception is thrown.
 <br/>
 The possible values for discount are <a href="class_dw_campaign_PercentageDiscount.html">PercentageDiscount</a>,
 <a href="class_dw_campaign_AmountDiscount.html">AmountDiscount</a>, <a href="class_dw_campaign_FixedPriceShippingDiscount.html">FixedPriceShippingDiscount</a>.
 <br/>
 Examples:
 <p/>
 <code>
 var myShippingItem : dw.order.ShippingLineItem; // assume known<br/>
 var paFixedShippingPrice12 : dw.order.PriceAdjustment = myShippingItem.createPriceAdjustment("myPromotionID1", new FixedPriceShippingDiscount(12));<br/>
 var paTenPercent : dw.order.PriceAdjustment = myShippingItem.createPriceAdjustment("myPromotionID2", new PercentageDiscount(10));<br/>
 var paReduceBy2 : dw.order.PriceAdjustment = myShippingItem.createPriceAdjustment("myPromotionID3", new AmountDiscount(2));<br/>
 </code>
 * @memberOf dw.order.ShippingLineItem
 * @param {String} promotionID - Promotion ID
 * @param {dw.campaign.Discount} discount - The desired discount, not null
 * @return {dw.order.PriceAdjustment} The new price adjustment line item.
 */
dw.order.ShippingLineItem.prototype.createShippingPriceAdjustment = function(promotionID, discount) {};

/**
 * Returns the price of this shipping line item including tax after
 shipping adjustments have been applied.
 * @memberOf dw.order.ShippingLineItem
 * @return {dw.value.Money} the price of this shipping line item, including tax          after shipping adjustments have been applied.
 */
dw.order.ShippingLineItem.prototype.getAdjustedGrossPrice = function() {};

/**
 * Returns the price of this shipping line item, excluding tax after
 shipping adjustments have been applied.
 * @memberOf dw.order.ShippingLineItem
 * @return {dw.value.Money} the price of this shipping line item, excluding tax after          shipping adjustments have been applied.
 */
dw.order.ShippingLineItem.prototype.getAdjustedNetPrice = function() {};

/**
 * Returns the adjusted price of this shipping line item. If the line item
 container is based on net pricing, the adjusted net price is returned. If
 the line item container is based on gross pricing, the adjusted gross
 price is returned.
 * @memberOf dw.order.ShippingLineItem
 * @return {dw.value.Money} either the adjusted net or gross price of this shipping line          item.
 */
dw.order.ShippingLineItem.prototype.getAdjustedPrice = function() {};

/**
 * Returns the tax of this shipping line item after shipping adjustments
 have been applied.
 * @memberOf dw.order.ShippingLineItem
 * @return {dw.value.Money} the tax of this shipping line item after shipping adjustments          have been applied.
 */
dw.order.ShippingLineItem.prototype.getAdjustedTax = function() {};

/**
 * Returns the ID of this ShippingLineItem.
 * @memberOf dw.order.ShippingLineItem
 * @return {String} ID of this ShippingLineItem
 */
dw.order.ShippingLineItem.prototype.getID = function() {};

/**
 * Returns the <a href="class_dw_order_OrderItem.html"> order-item extension</a> for this item, or <code>null</code>.
 An order-item extension will only exist for a ShippingLineItem which
 belongs to an <a href="class_dw_order_Order.html">Order</a>.
 * @memberOf dw.order.ShippingLineItem
 * @return {dw.order.OrderItem} null or the order-item
 */
dw.order.ShippingLineItem.prototype.getOrderItem = function() {};

/**
 * Returns the collection of shipping price adjustments that have been
 applied to this shipping line item.
 * @memberOf dw.order.ShippingLineItem
 * @return {dw.util.Collection} the collection of shipping price adjustments that have been          applied to this shipping line item.
 */
dw.order.ShippingLineItem.prototype.getShippingPriceAdjustments = function() {};

/**
 * Removes the specified shipping price adjustment from this shipping line
 item.
 * @memberOf dw.order.ShippingLineItem
 * @param {dw.order.PriceAdjustment} priceAdjustment - The price adjustment line item to remove
 */
dw.order.ShippingLineItem.prototype.removeShippingPriceAdjustment = function(priceAdjustment) {};

/**
 * Constructs a new shipping location.
 * @class
 * @extends Object
 */
dw.order.ShippingLocation = function() {};
dw.order.ShippingLocation.prototype = new Object();

/**
 * Constructs a new shipping location and initializes it with the values of the
 specified address object.
 * @class
 * @extends Object
 * @param {dw.customer.CustomerAddress} address - the address that the shipping location represents.
 */
dw.order.ShippingLocation = function(address) {};
dw.order.ShippingLocation.prototype = new Object();

/**
 * Constructs a new shipping location and initializes it with the values of the
 specified address object.
 * @class
 * @extends Object
 * @param {dw.order.OrderAddress} address - the address that the shipping location represents.
 */
dw.order.ShippingLocation = function(address) {};
dw.order.ShippingLocation.prototype = new Object();

/**
 * Returns the shipping location's first address.
 * @memberOf dw.order.ShippingLocation
 * @return {String} the shipping location's first address.
 */
dw.order.ShippingLocation.prototype.getAddress1 = function() {};

/**
 * Returns the shipping location's second address.
 * @memberOf dw.order.ShippingLocation
 * @return {String} the shipping location's second address.
 */
dw.order.ShippingLocation.prototype.getAddress2 = function() {};

/**
 * Returns the shipping location's city.
 * @memberOf dw.order.ShippingLocation
 * @return {String} the shipping location's city.
 */
dw.order.ShippingLocation.prototype.getCity = function() {};

/**
 * Returns the shipping location's country code.
 * @memberOf dw.order.ShippingLocation
 * @return {String} the shipping location's country code.
 */
dw.order.ShippingLocation.prototype.getCountryCode = function() {};

/**
 * Returns the shipping location's postal code.
 * @memberOf dw.order.ShippingLocation
 * @return {String} the shipping location's postal code.
 */
dw.order.ShippingLocation.prototype.getPostalCode = function() {};

/**
 * Returns the shipping location's post box.
 * @memberOf dw.order.ShippingLocation
 * @return {String} the shipping location's post box.
 */
dw.order.ShippingLocation.prototype.getPostBox = function() {};

/**
 * Returns the shipping location's state code.
 * @memberOf dw.order.ShippingLocation
 * @return {String} the shipping location's state code.
 */
dw.order.ShippingLocation.prototype.getStateCode = function() {};

/**
 * Returns the shipping location's suite.
 * @memberOf dw.order.ShippingLocation
 * @return {String} the shipping location's suite.
 */
dw.order.ShippingLocation.prototype.getSuite = function() {};

/**
 * Sets the shipping location's first address.
 * @memberOf dw.order.ShippingLocation
 * @param {String} aValue - the shipping location's first address.
 */
dw.order.ShippingLocation.prototype.setAddress1 = function(aValue) {};

/**
 * Sets the shipping location's second address.
 * @memberOf dw.order.ShippingLocation
 * @param {String} aValue - the shipping location's second address.
 */
dw.order.ShippingLocation.prototype.setAddress2 = function(aValue) {};

/**
 * Sets the shipping location's city.
 * @memberOf dw.order.ShippingLocation
 * @param {String} aValue - the shipping location's city.
 */
dw.order.ShippingLocation.prototype.setCity = function(aValue) {};

/**
 * Sets the shipping location's country code.
 * @memberOf dw.order.ShippingLocation
 * @param {String} aValue - the shipping location's country code.
 */
dw.order.ShippingLocation.prototype.setCountryCode = function(aValue) {};

/**
 * Sets the shipping location's postal code.
 * @memberOf dw.order.ShippingLocation
 * @param {String} aValue - the shipping location's postal code.
 */
dw.order.ShippingLocation.prototype.setPostalCode = function(aValue) {};

/**
 * Sets the shipping location's post box.
 * @memberOf dw.order.ShippingLocation
 * @param {String} aValue - the shipping location's post box.
 */
dw.order.ShippingLocation.prototype.setPostBox = function(aValue) {};

/**
 * Sets the shipping location's state code.
 * @memberOf dw.order.ShippingLocation
 * @param {String} aValue - the shipping location's state code.
 */
dw.order.ShippingLocation.prototype.setStateCode = function(aValue) {};

/**
 * Sets the shipping location's suite.
 * @memberOf dw.order.ShippingLocation
 * @param {String} aValue - the shipping location's suite.
 */
dw.order.ShippingLocation.prototype.setSuite = function(aValue) {};

/**
 * ShippingMethod represents how the shipment will be shipped.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.order.ShippingMethod = function() {};
dw.order.ShippingMethod.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the base shipping method or null if undefined.
 * @memberOf dw.order.ShippingMethod
 * @return {dw.order.ShippingMethod} Base shipping method
 */
dw.order.ShippingMethod.prototype.getBaseMethod = function() {};

/**
 * Returns the currency code associated with the shipping method
 * @memberOf dw.order.ShippingMethod
 * @return {String} currency code
 */
dw.order.ShippingMethod.prototype.getCurrencyCode = function() {};

/**
 * Returns the dependent shipping methods of this shipping method,
 regardless of the online status of the methods. <br/>
 Dependent shipping methods have this method as their base method.
 * @memberOf dw.order.ShippingMethod
 * @return {dw.util.Collection} Dependent shipping methods
 */
dw.order.ShippingMethod.prototype.getDependentMethods = function() {};

/**
 * Returns the description of the shipping method as specified in the current locale or
 null if it could not be found.
 * @memberOf dw.order.ShippingMethod
 * @return {String} he description of the shipping method as specified in the current locale or  null if it could not be found.
 */
dw.order.ShippingMethod.prototype.getDescription = function() {};

/**
 * Returns the display name of the shipping method in the current locale or
 null if it could not be found.
 * @memberOf dw.order.ShippingMethod
 * @return {String} the display name of the shipping method or null if it could not be found.
 */
dw.order.ShippingMethod.prototype.getDisplayName = function() {};

/**
 * Returns the ID of the shipping method.
 * @memberOf dw.order.ShippingMethod
 * @return {String} the ID of the shipping method.
 */
dw.order.ShippingMethod.prototype.getID = function() {};

/**
 * Returns the tax class id of the shipping method.
 * @memberOf dw.order.ShippingMethod
 * @return {String} the tax class id of the shipping method.
 */
dw.order.ShippingMethod.prototype.getTaxClassID = function() {};

/**
 * Returns 'true' if the shipping method is marked as 'default' for the current session's currency.
 Otherwise 'false' is returned.
 * @memberOf dw.order.ShippingMethod
 * @return {Boolean} 'true' if it is the default shipping method of the site
 */
dw.order.ShippingMethod.prototype.isDefaultMethod = function() {};

/**
 * Returns true if shipping method is online, false otherwise
 * @memberOf dw.order.ShippingMethod
 * @return {Boolean}
 */
dw.order.ShippingMethod.prototype.isOnline = function() {};

/**
 * Provides methods to access the shipping information.
 * @class
 * @extends Object
 */
dw.order.ShippingMgr = function() {};
dw.order.ShippingMgr.prototype = new Object();

/**
 * Applies product and shipment-level shipping cost to the specified line
 item container.
 <p/>

 For each product line item in the specified line item container, a
 product shipping line item is created if product-level shipping cost is
 defined for the product. If no product-level shipping cost is defined for
 the product, an existing product shipping line item is removed. <br/>

 For each shipment in the specified line item container, shipment-level
 shipping cost is calculated. This cost is determined based on the
 merchandise total of the shipment after all product and order discounts.
 Only products without or with surcharge product-specific shipping cost
 count towards this merchandise total. Products with fixed
 product-specific shipping cost don't count towards the merchandise total
 used to calculate shipment-level shipping cost. The calculated shipping
 cost is set at the standard shipping line item of the shipment. <br/>

 If 'net' taxation is configured for the site, the merchandise total
 before tax is used. If 'gross' taxation is configured for the site, the
 merchandise total after tax is used.

 If no shipping method is set for a shipment, neither product nor
 shipment-level shipping cost can be calculated. In this case, the amount
 of the standard shipment shipping line item will be set to N/A, and
 shipping line items of product line items in this shipment will be
 removed from the line item container.

 Special cases for product-level shipping cost: <br/>
 <ul>
 <li>if a product is member of multiple shipping cost groups, the lowest
 shipping cost takes precedence</li>
 <li>if fixed and surcharge shipping cost is defined for a product, the
 fixed cost takes precedence</li>
 <li>shipping cost defined for a master product is also defined for all
 variants of this master</li>
 <li>shipping cost is not applied to bundled product line items or options
 line items</li>
 </ul>
 * @memberOf dw.order.ShippingMgr
 * @param {dw.order.LineItemCtnr} lineItemCtnr - the line item container to use.
 * @static
 */
dw.order.ShippingMgr.applyShippingCost = function(lineItemCtnr) {};

/**
 * Returns the active shipping methods of the current site applicable to the session currency.
 * @memberOf dw.order.ShippingMgr
 * @return {dw.util.Collection} the active shipping methods of the current site applicable to the session currency.
 * @static
 */
dw.order.ShippingMgr.getAllShippingMethods = function() {};

/**
 * Returns the default shipping method of the current site applicable to the session currency.

 Does an additional check if there is a base method and if their currencies are
 the same. Returns NULL if the two currencies are different.
 * @memberOf dw.order.ShippingMgr
 * @return {dw.order.ShippingMethod} the default shipping method of the current site applicable to the session currency or null.
 * @static
 */
dw.order.ShippingMgr.getDefaultShippingMethod = function() {};

/**
 * Returns the shipping model for the specified product.
 * @memberOf dw.order.ShippingMgr
 * @param {dw.catalog.Product} product - Product
 * @return {dw.order.ProductShippingModel} Shipping model for specified product
 * @static
 */
dw.order.ShippingMgr.getProductShippingModel = function(product) {};

/**
 * Returns the shipping model for the specified shipment.
 * @memberOf dw.order.ShippingMgr
 * @param {dw.order.Shipment} shipment - the shipment to use.
 * @return {dw.order.ShipmentShippingModel} Shipping model for specified product
 * @static
 */
dw.order.ShippingMgr.getShipmentShippingModel = function(shipment) {};

/**
 * Returns the shipping cost amount for the specified shipping method and
 the specified order value. <br/>
 If shipping cost cannot be calculated for any reason, Money.NA is
 returned.
 * @memberOf dw.order.ShippingMgr
 * @param {dw.order.ShippingMethod} shippingMethod - Selected shipping method
 * @param {dw.value.Money} orderValue - Order value
 * @return {dw.value.Money} Shipping cost
 * @static
 */
dw.order.ShippingMgr.getShippingCost = function(shippingMethod, orderValue) {};

/**
 * A shipping order is used to specify items that should be shipped, and is
 typically exported to, and updated by a back-office warehouse management
 system.
 <p/>
 An <a href="class_dw_order_Order.html">Order</a> can have n shipping orders expressing how the order
 is to be shipped. The creation, export and update of shipping orders is
 largely handled by custom logic in scripts by implementing
 <a href="class_dw_order_hooks_ShippingOrderHooks.html">ShippingOrderHooks</a>. Use method
 <a href="class_dw_order_Order.html#dw_order_Order_createShippingOrder_DetailAnchor">Order.createShippingOrder()</a> for creation and add items using
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_createShippingOrderItem_OrderItem_Quantity_DetailAnchor">createShippingOrderItem(OrderItem, Quantity)</a> - each item is related
 to an order item which in turn represents a product- or shipping- line item
 in the order.
 <p/>
 A shipping order has a status calculated from its item status, one of
 <ul>
 <li>CONFIRMED - shipping order not yet exported, with 0 items, or all items
 in status CONFIRMED.</li>
 <li>WAREHOUSE - shipping order exported, with all items in status WAREHOUSE.</li>
 <li>SHIPPED - exported shipping order has been updated, with 1-n items in
 status SHIPPED and 0-n CANCELLED.</li>
 <li>CANCELLED - exported shipping order has been updated, with all items in
 status CANCELLED.</li>
 </ul>
 <br/>
 The following status transitions are supported. Every status transition is
 documented by the addition of an order note such as 'Shipping order 123456
 status changed to WAREHOUSE.':
 <table>
 <tr>
 <th>From</th>
 <th>To</th>
 <th>When</th>
 <th>Use</th>
 </tr>
 <tr>
 <td>CONFIRMED</td>
 <td>WAREHOUSE</td>
 <td>Shipping order exported</td>
 <td>Call <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_setStatusWarehouse_DetailAnchor">setStatusWarehouse()</a> - note this is the only way to set the
 items to status WAREHOUSE</td>
 </tr>
 <tr>
 <td>WAREHOUSE</td>
 <td>SHIPPED</td>
 <td>One or more items have been SHIPPED</td>
 <td>Call <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_setStatus_String_DetailAnchor">ShippingOrderItem.setStatus(String)</a> using
 <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_STATUS_SHIPPED_DetailAnchor">ShippingOrderItem.STATUS_SHIPPED</a></td>
 </tr>
 <tr>
 <td>WAREHOUSE</td>
 <td>CANCELLED</td>
 <td>All items have been CANCELLED</td>
 <td>Call <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_setStatus_String_DetailAnchor">ShippingOrderItem.setStatus(String)</a> using
 <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_STATUS_CANCELLED_DetailAnchor">ShippingOrderItem.STATUS_CANCELLED</a></td>
 </tr>
 </table>
 * @class
 * @extends dw.order.AbstractItemCtnr
 * @deprecated Support for Shipping Orders and related objects will be removed in an upcoming release
 */
dw.order.ShippingOrder = function() {};
dw.order.ShippingOrder.prototype = new dw.order.AbstractItemCtnr();

/**
 * Sorting by item id. Use with method <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getItems_DetailAnchor">getItems()</a> as an argument to
 method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.ShippingOrder
 * @static
 * @const
 */
dw.order.ShippingOrder.ORDERBY_ITEMID = {};

/**
 * Sorting by the position of the related oder item. Use with method
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getItems_DetailAnchor">getItems()</a> as an argument to method
 <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.ShippingOrder
 * @static
 * @const
 */
dw.order.ShippingOrder.ORDERBY_ITEMPOSITION = {};

/**
 * Unsorted , as it is. Use with method <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getItems_DetailAnchor">getItems()</a> as an argument
 to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a>.
 * @type Object
 * @memberOf dw.order.ShippingOrder
 * @static
 * @const
 */
dw.order.ShippingOrder.ORDERBY_UNSORTED = {};

/**
 * Selects the product items. Use with method <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getItems_DetailAnchor">getItems()</a> as an
 argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.ShippingOrder
 * @static
 * @const
 */
dw.order.ShippingOrder.QUALIFIER_PRODUCTITEMS = {};

/**
 * Selects for the service items. Use with method <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getItems_DetailAnchor">getItems()</a> as an
 argument to method <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a>.
 * @type Object
 * @memberOf dw.order.ShippingOrder
 * @static
 * @const
 */
dw.order.ShippingOrder.QUALIFIER_SERVICEITEMS = {};

/**
 * Constant for Shipping Order Status CANCELLED
 * @type String
 * @memberOf dw.order.ShippingOrder
 * @static
 * @const
 */
dw.order.ShippingOrder.STATUS_CANCELLED = '';

/**
 * Constant for Shipping Order Status CONFIRMED
 * @type String
 * @memberOf dw.order.ShippingOrder
 * @static
 * @const
 */
dw.order.ShippingOrder.STATUS_CONFIRMED = '';

/**
 * Constant for Shipping Order Status SHIPPED
 * @type String
 * @memberOf dw.order.ShippingOrder
 * @static
 * @const
 */
dw.order.ShippingOrder.STATUS_SHIPPED = '';

/**
 * Constant for Shipping Order Status WAREHOUSE
 * @type String
 * @memberOf dw.order.ShippingOrder
 * @static
 * @const
 */
dw.order.ShippingOrder.STATUS_WAREHOUSE = '';

/**
 * Adds a tracking info to this shipping order with the given ID.
 * @memberOf dw.order.ShippingOrder
 * @param {String} trackingInfoID - the tracking info id
 * @return {dw.order.TrackingInfo} the new tracking info
 * @see <a href="class_dw_order_TrackingInfo.html">TrackingInfo</a>
 */
dw.order.ShippingOrder.prototype.addTrackingInfo = function(trackingInfoID) {};

/**
 * Creates a new <a href="class_dw_order_Invoice.html">Invoice</a> based on this
 ShippingOrder.
 <p/>
 The shipping-order-number will be used as the
 invoice-number. The Invoice can then be accessed using
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getInvoice_DetailAnchor">getInvoice()</a> or <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getInvoiceNumber_DetailAnchor">getInvoiceNumber()</a> can be used.
 The method must not be called more than once for a ShippingOrder,
 nor may 2 Invoices exist with the same invoice-number.
 <p/>
 The new Invoice is a debit-invoice with a status
 <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">Invoice.STATUS_NOT_PAID</a>, and will be passed to the
 capture payment-hook in a separate database transaction for processing.
 * @memberOf dw.order.ShippingOrder
 * @return {dw.order.Invoice} new invoice
 */
dw.order.ShippingOrder.prototype.createInvoice = function() {};

/**
 * Creates a new <a href="class_dw_order_Invoice.html">Invoice</a> based on this ShippingOrder.
 <p/>
 The invoice-number must be specified as an argument.The Invoice can then be accessed using
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getInvoice_DetailAnchor">getInvoice()</a> or <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getInvoiceNumber_DetailAnchor">getInvoiceNumber()</a> can be used.
 The method must not be called more than once for a ShippingOrder,
 nor may 2 Invoices exist with the same invoice-number.
 <p/>
 The new Invoice is a debit-invoice with a status <a href="class_dw_order_Invoice.html#dw_order_Invoice_STATUS_NOT_PAID_DetailAnchor">Invoice.STATUS_NOT_PAID</a>, and
 will be passed to the capture payment-hook in a separate database
 transaction for processing.
 * @memberOf dw.order.ShippingOrder
 * @param {String} invoiceNumber - the invoice-number to use
 * @return {dw.order.Invoice} new invoice
 */
dw.order.ShippingOrder.prototype.createInvoice = function(invoiceNumber) {};

/**
 * Create a <a href="class_dw_order_ShippingOrderItem.html">ShippingOrderItem</a> in the shipping order with
 the number <code>shippingOrderNumber</code>.
 <p>
 The quantity of the new item can be optionally specified. A quantity of
 <code>null</code> indicates the new item should be based on the entire order item and
 is recommended for <a href="class_dw_order_ShippingLineItem.html">ShippingLineItem</a>s. If a quantity is
 specified for a <a href="class_dw_order_ProductLineItem.html">ProductLineItem</a> which is less than
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getQuantity_DetailAnchor">ProductLineItem.getQuantity()</a> the
 ProductLineItem will be split, creating a new
 ProductLineItem. The new
 ShippingOrderItem will be associated with the new
 ProductLineItem, which will receive the specified
 quantity.
 * @memberOf dw.order.ShippingOrder
 * @param {dw.order.OrderItem} orderItem - the order item where the shipping order item will belong to
 * @param {dw.value.Quantity} quantity - the quantity for which the shipping order item will be created
 * @return {dw.order.ShippingOrderItem} the created shipping order item
 */
dw.order.ShippingOrder.prototype.createShippingOrderItem = function(orderItem, quantity) {};

/**
 * Returns null or the previously created <a href="class_dw_order_Invoice.html">Invoice</a>.
 * @memberOf dw.order.ShippingOrder
 * @return {dw.order.Invoice} null or the previously created invoice.
 * @see <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_createInvoice_String_DetailAnchor">createInvoice(String)</a>
 */
dw.order.ShippingOrder.prototype.getInvoice = function() {};

/**
 * Returns <code>null</code> or the invoice-number.
 * @memberOf dw.order.ShippingOrder
 * @return {String} <code>null</code> or the previously created invoice number.
 * @see <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_createInvoice_String_DetailAnchor">createInvoice(String)</a>
 */
dw.order.ShippingOrder.prototype.getInvoiceNumber = function() {};

/**
 * A filtering collection of the shipping order items belonging to the
 shipping order.
 <p/>
 This <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> could be sorted / filtered
 using:
 <ul>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_ORDERBY_ITEMID_DetailAnchor">ORDERBY_ITEMID</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_ORDERBY_ITEMPOSITION_DetailAnchor">ORDERBY_ITEMPOSITION</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">FilteringCollection.sort(Object)</a> with
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_ORDERBY_UNSORTED_DetailAnchor">ORDERBY_UNSORTED</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_QUALIFIER_PRODUCTITEMS_DetailAnchor">QUALIFIER_PRODUCTITEMS</a>
 <li><a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">FilteringCollection.select(Object)</a> with
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_QUALIFIER_SERVICEITEMS_DetailAnchor">QUALIFIER_SERVICEITEMS</a>
 </ul>
 * @memberOf dw.order.ShippingOrder
 * @return {dw.util.FilteringCollection} the filtering collection of the shipping items.
 * @see <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_createShippingOrderItem_OrderItem_Quantity_DetailAnchor">createShippingOrderItem(OrderItem, Quantity)</a>
 * @see <a href="class_dw_order_ShippingOrderItem.html">ShippingOrderItem</a>
 */
dw.order.ShippingOrder.prototype.getItems = function() {};

/**
 * Gets the shipping date.
 <p/>
 Returns <code>null</code> if this shipping order is not yet shipped.
 * @memberOf dw.order.ShippingOrder
 * @return {Date} the shipping date or <code>null</code>
 */
dw.order.ShippingOrder.prototype.getShipDate = function() {};

/**
 * Returns the shipping address (optional, can be null).

 <p/>
 Note: the shipping address is not copied into the
 ShippingOrder but is a link to a
 <a href="class_dw_order_OrderAddress.html">OrderAddress</a> held in the <a href="class_dw_order_Order.html">Order</a>.
 * @memberOf dw.order.ShippingOrder
 * @return {dw.order.OrderAddress} the shipping address or <code>null</code>
 */
dw.order.ShippingOrder.prototype.getShippingAddress = function() {};

/**
 * Returns the shipping method of the shipping order.
 <p/>
 Can be <code>null</code>.
 * @memberOf dw.order.ShippingOrder
 * @return {dw.order.ShippingMethod} the shipping method or <code>null</code>
 */
dw.order.ShippingOrder.prototype.getShippingMethod = function() {};

/**
 * Gets the shipping order number.
 * @memberOf dw.order.ShippingOrder
 * @return {String} the shipping order number
 */
dw.order.ShippingOrder.prototype.getShippingOrderNumber = function() {};

/**
 * Gets the status of this shipping order. The status is read-only and
 calculated from the item status. See class documentation for more
 details.<br>
 The possible values are <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_STATUS_CONFIRMED_DetailAnchor">STATUS_CONFIRMED</a>,
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_STATUS_WAREHOUSE_DetailAnchor">STATUS_WAREHOUSE</a>, <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_STATUS_SHIPPED_DetailAnchor">STATUS_SHIPPED</a>,
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_STATUS_CANCELLED_DetailAnchor">STATUS_CANCELLED</a>.
 * @memberOf dw.order.ShippingOrder
 * @return {dw.value.EnumValue} the status
 */
dw.order.ShippingOrder.prototype.getStatus = function() {};

/**
 * Gets a tracking info for this shipping order.
 * @memberOf dw.order.ShippingOrder
 * @param {String} trackingInfoID - the tracking info id
 * @return {dw.order.TrackingInfo} the tracking info or <code>null</code>
 * @see <a href="class_dw_order_TrackingInfo.html">TrackingInfo</a>
 */
dw.order.ShippingOrder.prototype.getTrackingInfo = function(trackingInfoID) {};

/**
 * Gets all tracking informations for this shipping order.
 * @memberOf dw.order.ShippingOrder
 * @return {dw.util.Collection} all tracking informations for this shipping order
 * @see <a href="class_dw_order_TrackingInfo.html">TrackingInfo</a>
 */
dw.order.ShippingOrder.prototype.getTrackingInfos = function() {};

/**
 * Sets the shipping date.
 * @memberOf dw.order.ShippingOrder
 * @param {Date} date - the ship date
 */
dw.order.ShippingOrder.prototype.setShipDate = function(date) {};

/**
 * Set a shipping address for the shipping order.
 * @memberOf dw.order.ShippingOrder
 * @param {dw.order.OrderAddress} address - the shipping address
 * @see <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getShippingAddress_DetailAnchor">getShippingAddress()</a>
 */
dw.order.ShippingOrder.prototype.setShippingAddress = function(address) {};

/**
 * Set the id of shipping method.
 * @memberOf dw.order.ShippingOrder
 * @param {String} shippingMethodID - the id of the shipping method
 * @see <a href="class_dw_order_ShippingMethod.html#dw_order_ShippingMethod_getID_DetailAnchor">ShippingMethod.getID()</a>
 */
dw.order.ShippingOrder.prototype.setShippingMethodID = function(shippingMethodID) {};

/**
 * Set a CONFIRMED shipping order (all items in status CONFIRMED) to status
 WAREHOUSE (all items in status WAREHOUSE).<br/>
 Note - this method is the only way to transition a shipping order from
 CONFIRMED to WAREHOUSE.
 * @memberOf dw.order.ShippingOrder
 * @throws IllegalArgumentException
             if the shipping order is in a status other than CONFIRMED.
 */
dw.order.ShippingOrder.prototype.setStatusWarehouse = function() {};

/**
 * One or more ShippingOrderItems are contained in a
 <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a>, created using
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_createShippingOrderItem_OrderItem_Quantity_DetailAnchor">ShippingOrder.createShippingOrderItem(OrderItem, Quantity)</a>
 and can be retrieved by
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getItems_DetailAnchor">ShippingOrder.getItems()</a>. A
 ShippingOrderItem references a single
 <a href="class_dw_order_OrderItem.html">OrderItem</a> which in turn references a
 <a href="class_dw_order_LineItem.html">LineItem</a> associated with an <a href="class_dw_order_Order.html">Order</a>.
 * @class
 * @extends dw.order.AbstractItem
 * @deprecated Support for Shipping Orders and related objects will be removed in an upcoming release
 */
dw.order.ShippingOrderItem = function() {};
dw.order.ShippingOrderItem.prototype = new dw.order.AbstractItem();

/**
 * Constant for Order Item Status CANCELLED
 * @type String
 * @memberOf dw.order.ShippingOrderItem
 * @static
 * @const
 */
dw.order.ShippingOrderItem.STATUS_CANCELLED = '';

/**
 * Constant for Order Item Status CONFIRMED
 * @type String
 * @memberOf dw.order.ShippingOrderItem
 * @static
 * @const
 */
dw.order.ShippingOrderItem.STATUS_CONFIRMED = '';

/**
 * Constant for Order Item Status SHIPPED
 * @type String
 * @memberOf dw.order.ShippingOrderItem
 * @static
 * @const
 */
dw.order.ShippingOrderItem.STATUS_SHIPPED = '';

/**
 * Constant for Order Item Status WAREHOUSE
 * @type String
 * @memberOf dw.order.ShippingOrderItem
 * @static
 * @const
 */
dw.order.ShippingOrderItem.STATUS_WAREHOUSE = '';

/**
 * A shipping order item can be assigned
 to one or many <a href="class_dw_order_TrackingInfo.html"> tracking infos</a> with
 different quantities. For example an item with quantity 3 may have been
 shipped in 2 packages, each represented by its own
 tracking info - 2
 <a href="class_dw_order_TrackingRef.html">TrackingRef</a>s would exist with quantities 1 and 2.
 <p/>
 This method creates and adds a new tracking
 reference to this shipping order item for a given
 tracking info and quantity. The new
 instance is returned.
 * @memberOf dw.order.ShippingOrderItem
 * @param {String} trackingInfoID - the id of the tracking info
 * @param {dw.value.Quantity} quantity - the quantity the which is assigned to the tracking info for             this shipping order item. Optional (null is allowed).
 * @return {dw.order.TrackingRef} the new tracking reference
 * @see <a href="class_dw_order_TrackingRef.html">TrackingRef</a>
 */
dw.order.ShippingOrderItem.prototype.addTrackingRef = function(trackingInfoID, quantity) {};

/**
 * Price of a single unit before discount application.
 * @memberOf dw.order.ShippingOrderItem
 * @return {dw.value.Money} Price of a single unit before discount application.
 */
dw.order.ShippingOrderItem.prototype.getBasePrice = function() {};

/**
 * Returns null or the parent item.
 * @memberOf dw.order.ShippingOrderItem
 * @return {dw.order.ShippingOrderItem} null or the parent item.
 */
dw.order.ShippingOrderItem.prototype.getParentItem = function() {};

/**
 * The quantity of the shipping order item.
 <p>
 The <a href="class_dw_value_Quantity.html">Quantity</a> is equal to the related line item quantity.
 * @memberOf dw.order.ShippingOrderItem
 * @return {dw.value.Quantity} the quantity
 */
dw.order.ShippingOrderItem.prototype.getQuantity = function() {};

/**
 * The mandatory shipping order number of the related
 <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a>.
 * @memberOf dw.order.ShippingOrderItem
 * @return {String} the shipping order number.
 */
dw.order.ShippingOrderItem.prototype.getShippingOrderNumber = function() {};

/**
 * Gets the order item status.
 <p>
 The possible values are <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_STATUS_CONFIRMED_DetailAnchor">STATUS_CONFIRMED</a>,
 <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_STATUS_WAREHOUSE_DetailAnchor">STATUS_WAREHOUSE</a>, <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_STATUS_SHIPPED_DetailAnchor">STATUS_SHIPPED</a>,
 <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_STATUS_CANCELLED_DetailAnchor">STATUS_CANCELLED</a>.
 <p/>
 * @memberOf dw.order.ShippingOrderItem
 * @return {dw.value.EnumValue} the status
 */
dw.order.ShippingOrderItem.prototype.getStatus = function() {};

/**
 * Gets the tracking refs (tracking infos) the shipping order item is
 assigned to.
 * @memberOf dw.order.ShippingOrderItem
 * @return {dw.util.FilteringCollection} the tracking refs ( tracking infos - {@link dw.order.TrackingRef}          ) the shipping order item is assigned to.
 * @see <a href="class_dw_order_TrackingRef.html">TrackingRef</a>
 */
dw.order.ShippingOrderItem.prototype.getTrackingRefs = function() {};

/**
 * Set a parent item. The parent item must belong to the same
 <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a>. An infinite parent-child loop is disallowed
 as is a parent-child depth greater than 10. Setting a parent item
 indicates a dependency of the child item on the parent item, and can be
 used to form a parallel structure to that accessed using
 <a href="class_dw_order_ProductLineItem.html#dw_order_ProductLineItem_getParent_DetailAnchor">ProductLineItem.getParent()</a>.
 * @memberOf dw.order.ShippingOrderItem
 * @param {dw.order.ShippingOrderItem} parentItem - The parent item, null is allowed
 */
dw.order.ShippingOrderItem.prototype.setParentItem = function(parentItem) {};

/**
 * Sets the status. See <a href="class_dw_order_ShippingOrder.html">ShippingOrder</a> for details of
 shipping order status transitions. Do not use this method to set a
 shipping order to status WAREHOUSE, instead use
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_setStatusWarehouse_DetailAnchor">ShippingOrder.setStatusWarehouse()</a>
 <p/>
 This also triggers the setting of the status of the
 <a href="class_dw_order_LineItem.html">LineItem</a>. Setting this status can also have impact to
 the order status, accessed using <a href="class_dw_order_Order.html#dw_order_Order_getStatus_DetailAnchor">Order.getStatus()</a> and the
 shipping order status, accessed using <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getStatus_DetailAnchor">ShippingOrder.getStatus()</a>.
 * @memberOf dw.order.ShippingOrderItem
 * @param {String} status - the status
 * @throws NullPointerException
             if status is <code>null</code>
 * @throws IllegalArgumentException
             if the status transition to the status is not allowed
 */
dw.order.ShippingOrderItem.prototype.setStatus = function(status) {};

/**
 * Split the shipping order item.
 <p>
 This will also lead to a split of the related <a href="class_dw_order_LineItem.html">LineItem</a>.
 Split means that for the passed quantity a new item is created with this
 quantity as an exact copy of this item. The remaining amount will stay in
 this item.
 <p>
 If quantity is equal to <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_getQuantity_DetailAnchor">getQuantity()</a> no split is done and this
 item is returned itself.
 * @memberOf dw.order.ShippingOrderItem
 * @param {dw.value.Quantity} quantity - the quantity for the newly created item
 * @return {dw.order.ShippingOrderItem} the newly created item or this item
 * @throws IllegalArgumentException
             if quantity is greater than <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_getQuantity_DetailAnchor">getQuantity()</a>
 */
dw.order.ShippingOrderItem.prototype.split = function(quantity) {};

/**
 * Container used to represent an subtotal or grandtotal item which contains various prices and a tax breakdown
 held in a collection of tax-items.
 <p/>Usage example:
 <code>
 <br/>var invoice : Invoice = ...;
 <br/>var productNet = invoice.productSubTotal.netPrice;
 <br/>var serviceNet = invoice.serviceSubTotal.netPrice;
 <br/>var grandNet   = invoice.grandTotal.netPrice;
 <br/>var grandTax   = invoice.grandTotal.tax;
 <br/>var grandGross = invoice.grandTotal.grossPrice;
 <br/>
 <br/> # tax breakdown
 <br/>for each(taxItem : TaxItem in invoice.grandTotal.taxItems) {
 <br/>  var tax : Money         = taxItem.amount;
 <br/>  var taxGroup : TaxGroup = taxItem.taxGroup;
 <br/>  var rate : Double       = taxGroup.rate;
 <br/>  var caption :String     = taxGroup.caption;
 <br/>  var taxType :String     = taxGroup.taxType;
 <br/>}
 </code>
 * @class
 * @extends Object
 */
dw.order.SumItem = function() {};
dw.order.SumItem.prototype = new Object();

/**
 * Gross price of SumItem.
 * @memberOf dw.order.SumItem
 * @return {dw.value.Money} Gross price of SumItem.
 */
dw.order.SumItem.prototype.getGrossPrice = function() {};

/**
 * Net price of SumItem.
 * @memberOf dw.order.SumItem
 * @return {dw.value.Money} Net price of SumItem.
 */
dw.order.SumItem.prototype.getNetPrice = function() {};

/**
 * Total tax for SumItem.
 * @memberOf dw.order.SumItem
 * @return {dw.value.Money} Total tax for SumItem.
 */
dw.order.SumItem.prototype.getTax = function() {};

/**
 * Price of entire SumItem on which tax calculation is based. Same as <a href="class_dw_order_SumItem.html#dw_order_SumItem_getNetPrice_DetailAnchor">getNetPrice()</a>
 or <a href="class_dw_order_SumItem.html#dw_order_SumItem_getGrossPrice_DetailAnchor">getGrossPrice()</a> depending on whether the order is based on net or gross prices.
 * @memberOf dw.order.SumItem
 * @return {dw.value.Money} Price of entire item on which tax calculation is based
 */
dw.order.SumItem.prototype.getTaxBasis = function() {};

/**
 * Tax items representing a tax breakdown for the SumItem.
 * @memberOf dw.order.SumItem
 * @return {dw.util.Collection} tax items representing a tax breakdown for the SumItem
 * @see <a href="class_dw_order_TaxItem.html">TaxItem</a>
 */
dw.order.SumItem.prototype.getTaxItems = function() {};

/**
 * Contains the formal definition of a tax including a type (it's just the key),
 a <a href="class_dw_order_TaxGroup.html#dw_order_TaxGroup_getRate_DetailAnchor"> percentage value</a> if provided, a <a href="class_dw_order_TaxGroup.html#dw_order_TaxGroup_getCaption_DetailAnchor"> caption</a> and a <a href="class_dw_order_TaxGroup.html#dw_order_TaxGroup_getDescription_DetailAnchor"> description</a>.
 * @class
 * @extends Object
 */
dw.order.TaxGroup = function() {};
dw.order.TaxGroup.prototype = new Object();

/**
 * Creates a TaxGroup. <br/>
 This TaxGroup can be used for example in <a href="class_dw_order_ReturnItem.html#dw_order_ReturnItem_addTaxItem_Decimal_TaxGroup_DetailAnchor">ReturnItem.addTaxItem(Decimal, TaxGroup)</a>.
 * @memberOf dw.order.TaxGroup
 * @param {String} taxType - the tax type
 * @param {String} caption - the caption
 * @param {String} description - the description
 * @param {dw.util.Decimal} taxRate - the tax rate as floating point. <br/>             <code>1.0</code> means 100 %.
 * @return {dw.order.TaxGroup} the tax group
 * @static
 */
dw.order.TaxGroup.create = function(taxType, caption, description, taxRate) {};

/**
 * Gets the caption.
 * @memberOf dw.order.TaxGroup
 * @return {String} the caption
 */
dw.order.TaxGroup.prototype.getCaption = function() {};

/**
 * Gets the description.
 * @memberOf dw.order.TaxGroup
 * @return {String} the description
 */
dw.order.TaxGroup.prototype.getDescription = function() {};

/**
 * Gets the percentage amount of the rate.
 * @memberOf dw.order.TaxGroup
 * @return {Number} the tax rate percentage value
 */
dw.order.TaxGroup.prototype.getRate = function() {};

/**
 * Gets the tax type.
 * @memberOf dw.order.TaxGroup
 * @return {String} the tax type
 */
dw.order.TaxGroup.prototype.getTaxType = function() {};

/**
 * An item containing tax information allowing a tax breakdown between a number of <a href="class_dw_order_TaxGroup.html">TaxGroup</a>s.
 * @class
 * @extends Object
 */
dw.order.TaxItem = function() {};
dw.order.TaxItem.prototype = new Object();

/**
 * Gets the amount.
 * @memberOf dw.order.TaxItem
 * @return {dw.value.Money} the amount
 */
dw.order.TaxItem.prototype.getAmount = function() {};

/**
 * Returns the <a href="class_dw_order_TaxGroup.html"> tax group</a>.
 * @memberOf dw.order.TaxItem
 * @return {dw.order.TaxGroup} the tax rate
 * @see <a href="class_dw_order_TaxGroup.html">TaxGroup</a>
 */
dw.order.TaxItem.prototype.getTaxGroup = function() {};

/**
 * Provides methods to access the tax table.
 * @class
 * @extends Object
 */
dw.order.TaxMgr = function() {};
dw.order.TaxMgr.prototype = new Object();

/**
 * Constant representing the gross taxation policy.
 * @type Number
 * @memberOf dw.order.TaxMgr
 * @static
 * @const
 */
dw.order.TaxMgr.TAX_POLICY_GROSS = 0;

/**
 * Constant representing the net taxation policy.
 * @type Number
 * @memberOf dw.order.TaxMgr
 * @static
 * @const
 */
dw.order.TaxMgr.TAX_POLICY_NET = 0;

/**
 * Returns the ID of the tax class that represents items with a custom tax rate.
 The standard order calculation process assumes that such line items
 are initialized with a tax rate and a being ignored during the tax rate
 lookup sequence of the calculation process. <p/>

 Note that this tax class does not appear in the Business Manager
 tax module.
 * @memberOf dw.order.TaxMgr
 * @return {String}
 * @static
 */
dw.order.TaxMgr.getCustomRateTaxClassID = function() {};

/**
 * Returns the ID of the default tax class defined for the site.
 This class might be used in case a product or service does not define
 a tax class. <br/>
 If no default tax class is defined, the method returns null.
 * @memberOf dw.order.TaxMgr
 * @return {String} the ID of the default tax class defined for the site or null.
 * @static
 */
dw.order.TaxMgr.getDefaultTaxClassID = function() {};

/**
 * Returns the ID of the default tax jurisdiction defined for the site.
 This jurisdiction might be used in case no jurisdiction is defined for
 a specific address. <br/>
 If no default tax jurisdiction is defined, this method returns null.
 * @memberOf dw.order.TaxMgr
 * @return {String} the ID of the default tax jurisdiction defined for the site or null.
 * @static
 */
dw.order.TaxMgr.getDefaultTaxJurisdictionID = function() {};

/**
 * Returns the taxation policy (net/gross) configured for the current site.
 * @memberOf dw.order.TaxMgr
 * @return {Number} Taxation policy configured for current site
 * @see <a href="class_dw_order_TaxMgr.html#dw_order_TaxMgr_TAX_POLICY_GROSS_DetailAnchor">TAX_POLICY_GROSS</a>
 * @see <a href="class_dw_order_TaxMgr.html#dw_order_TaxMgr_TAX_POLICY_NET_DetailAnchor">TAX_POLICY_NET</a>
 * @static
 */
dw.order.TaxMgr.getTaxationPolicy = function() {};

/**
 * Returns the ID of the tax class that represents tax exempt items.
 The tax manager will return a tax rate of 0.0 for this tax class. <p/>

 Note that this tax class does not appear in the Business Manager
 tax module.
 * @memberOf dw.order.TaxMgr
 * @return {String}
 * @static
 */
dw.order.TaxMgr.getTaxExemptTaxClassID = function() {};

/**
 * Returns the ID of the tax jurisdiction for the specified
 address.
 If no tax jurisdiction defined for the site matches the specified
 address, this method returns null.
 * @memberOf dw.order.TaxMgr
 * @param {dw.order.ShippingLocation} location - The shipping location
 * @return {String} the ID of the tax jurisdiction for the specified  address or null.
 * @static
 */
dw.order.TaxMgr.getTaxJurisdictionID = function(location) {};

/**
 * Returns the tax rate defined for the specified combination of tax class
 and tax jurisdiction. <br/>
 Method returns null if no tax rate is defined. <br/>
 Method returns 0.0 of 'nontaxable' tax rate is specified (see
 method 'getNontaxableTaxClassID'.
 * @memberOf dw.order.TaxMgr
 * @param {String} taxClassID - ID of the tax class
 * @param {String} taxJurisdictionID - ID of tax jusrisdiction
 * @return {Number} the tax rate defined for the specified combination of tax class  and tax jurisdiction.
 * @static
 */
dw.order.TaxMgr.getTaxRate = function(taxClassID, taxJurisdictionID) {};

/**
 * Provides basic information about a tracking info. An instance is identified by an ID and can be referenced from n ShippingOrderItems
 using <a href="class_dw_order_TrackingRef.html">TrackingRef</a>s. This also allows one <a href="class_dw_order_ShippingOrderItem.html">ShippingOrderItem</a> to be associated with n TrackingInfo.
 * @class
 * @extends dw.object.Extensible
 * @see <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_addTrackingInfo_String_DetailAnchor">ShippingOrder.addTrackingInfo(String)</a>
 * @see <a href="class_dw_order_ShippingOrderItem.html#dw_order_ShippingOrderItem_addTrackingRef_String_Quantity_DetailAnchor">ShippingOrderItem.addTrackingRef(String,Quantity)</a>
 * @deprecated Support for Shipping Orders and related objects will be removed in an upcoming release
 */
dw.order.TrackingInfo = function() {};
dw.order.TrackingInfo.prototype = new dw.object.Extensible();

/**
 * Get the Carrier.
 * @memberOf dw.order.TrackingInfo
 * @return {String} the Carrier
 */
dw.order.TrackingInfo.prototype.getCarrier = function() {};

/**
 * Get the service(ship method) of the used carrier.
 * @memberOf dw.order.TrackingInfo
 * @return {String} the carrier service (ship method)
 */
dw.order.TrackingInfo.prototype.getCarrierService = function() {};

/**
 * Get the mandatory identifier for this tracking information. The id allows the tracking information to be referenced from
 <a href="class_dw_order_TrackingRef.html">TrackingRef</a>s. To support short shipping a shipping-order-item can manage a list of
 TrackingRefs, each with an optional quantity value allowing individual items to ship in multiple
 parcels with known item quantity in each.
 * @memberOf dw.order.TrackingInfo
 * @return {String} the id
 * @see <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_addTrackingInfo_String_DetailAnchor">ShippingOrder.addTrackingInfo(String)</a>
 */
dw.order.TrackingInfo.prototype.getID = function() {};

/**
 * Get the ship date.
 * @memberOf dw.order.TrackingInfo
 * @return {Date} the ship date
 */
dw.order.TrackingInfo.prototype.getShipDate = function() {};

/**
 * Gets the shipping order.
 * @memberOf dw.order.TrackingInfo
 * @return {dw.order.ShippingOrder} the shipping order
 */
dw.order.TrackingInfo.prototype.getShippingOrder = function() {};

/**
 * Get the tracking number.
 * @memberOf dw.order.TrackingInfo
 * @return {String} the TrackingNumber
 */
dw.order.TrackingInfo.prototype.getTrackingNumber = function() {};

/**
 * Gets the tracking refs (shipping order items) which are assigned to this tracking info.
 * @memberOf dw.order.TrackingInfo
 * @return {dw.util.Collection} the tracking refs (shipping order items) which are assigned to this tracking info.
 */
dw.order.TrackingInfo.prototype.getTrackingRefs = function() {};

/**
 * Get the id of the shipping warehouse.
 * @memberOf dw.order.TrackingInfo
 * @return {String} the id of the shipping warehouse
 */
dw.order.TrackingInfo.prototype.getWarehouseID = function() {};

/**
 * Set the Carrier.
 * @memberOf dw.order.TrackingInfo
 * @param {String} carrier - the Carrier
 */
dw.order.TrackingInfo.prototype.setCarrier = function(carrier) {};

/**
 * Set the service(ship method) of the used carrier.
 * @memberOf dw.order.TrackingInfo
 * @param {String} carrierService - the carrier service, eg. the ship method
 */
dw.order.TrackingInfo.prototype.setCarrierService = function(carrierService) {};

/**
 * Set the ship date.
 * @memberOf dw.order.TrackingInfo
 * @param {Date} shipDate - the ship date
 */
dw.order.TrackingInfo.prototype.setShipDate = function(shipDate) {};

/**
 * Set the TrackingNumber.
 * @memberOf dw.order.TrackingInfo
 * @param {String} trackingNumber - the TrackingNumber
 */
dw.order.TrackingInfo.prototype.setTrackingNumber = function(trackingNumber) {};

/**
 * Set the id of the shipping warehouse.
 * @memberOf dw.order.TrackingInfo
 * @param {String} warehouseID - the id of the shipping warehouse
 */
dw.order.TrackingInfo.prototype.setWarehouseID = function(warehouseID) {};

/**
 * Provides basic information about the <a href="class_dw_order_TrackingInfo.html">TrackingInfo</a> a
 <a href="class_dw_order_ShippingOrderItem.html">ShippingOrderItem</a> is contained.
 * @class
 * @extends Object
 * @deprecated Support for Shipping Orders and related objects will be removed in an upcoming release
 */
dw.order.TrackingRef = function() {};
dw.order.TrackingRef.prototype = new Object();

/**
 * Gets the quantity, the shipping order item is assigned to the tracking
 info.
 * @memberOf dw.order.TrackingRef
 * @return {dw.value.Quantity} the quantity the shipping order item is assigned to the tracking          info.
 */
dw.order.TrackingRef.prototype.getQuantity = function() {};

/**
 * Gets the shipping order item which is assigned to the tracking info.
 * @memberOf dw.order.TrackingRef
 * @return {dw.order.ShippingOrderItem} the shipping order item
 */
dw.order.TrackingRef.prototype.getShippingOrderItem = function() {};

/**
 * Gets the tracking info, the shipping order item is assigned to.
 * @memberOf dw.order.TrackingRef
 * @return {dw.order.TrackingInfo} the tracking info
 */
dw.order.TrackingRef.prototype.getTrackingInfo = function() {};

/**
 * Sets the quantity, the shipping order item is assigned to the tracking
 info.
 * @memberOf dw.order.TrackingRef
 * @param {dw.value.Quantity} quantity - the quantity, the shipping order item is assigned to the             tracking info.
 */
dw.order.TrackingRef.prototype.setQuantity = function(quantity) {};

/**
 *
 * @class
 * @extends Object
 */
dw.rpc.SOAPUtil = function() {};
dw.rpc.SOAPUtil.prototype = new Object();

/**
 * WS-Security action property name.
 Allowed property values are WS_NO_SECURITY, WS_TIMESTAMP, WS_ENCRYPT, WS_SIGNATURE, WS_USERNAME_TOKEN or
 a space separated String with multiple values.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_ACTION = '';

/**
 * WS-Security encryption: the encryption/decryption keystore alias name
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_ENC_PROP_KEYSTORE_ALIAS = '';

/**
 * WS-Security encryption: the encryption/decryption keystore password
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_ENC_PROP_KEYSTORE_PW = '';

/**
 * WS-Security encryption: the encryption/decryption keystore type ( jks or pkcs12 ),
                         default is jks.
 <br/><b>Note:</b> the keystore file must have the basename of the WSDL file and the
 file extension based on the keystore type. For example: MyService.jks.
 The keystore file must be placed in the same cartridge directory
 as the WSDL file.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_ENC_PROP_KEYSTORE_TYPE = '';

/**
 * WS-Security action: encrypt the message.
 The encryption-specific parameters define how to encrypt, which keys
 to use, and other parameters.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_ENCRYPT = '';

/**
 * WS-Security encryption: defines which parts of the request are encrypted.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_ENCRYPTION_PARTS = '';

/**
 * WS-Security encryption: the user's name for encryption.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_ENCRYPTION_USER = '';

/**
 * WS-Security action: no security
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_NO_SECURITY = '';

/**
 * WS-Security password type: parameter for UsernameToken action to define the encoding
 of the password. Allowed values are PW_DIGEST or PW_TEXT.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_PASSWORD_TYPE = '';

/**
 * WS-Security password of type digest: use a password digest to send the password information.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_PW_DIGEST = '';

/**
 * WS-Security password of type text: send the password information in clear text.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_PW_TEXT = '';

/**
 * A secrets map with the username/password entries is needed to create the password
 callback object.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_SECRETS_MAP = '';

/**
 * WS-Security signature: sets the signature digest algorithm to use.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_SIG_DIGEST_ALGO = '';

/**
 * WS-Security signature: the signature keystore alias name
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_SIG_PROP_KEYSTORE_ALIAS = '';

/**
 * WS-Security signature: the signature keystore password.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_SIG_PROP_KEYSTORE_PW = '';

/**
 * WS-Security: the signature keystore type ( jks or pkcs12 ). The default is jks.
 <br/><b>Note:</b> The keystore file must have the basename of the WSDL file and the
 file extension of the keystore type. For example: MyService.jks.
 The keystore file must be placed in the same cartridge directory
 as the WSDL file.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_SIG_PROP_KEYSTORE_TYPE = '';

/**
 * WS-Security action: sign the message.
 The signature-specific parameters define how to sign, which keys
 to use, and other parameters.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_SIGNATURE = '';

/**
 * WS-Security signature: defines which parts of the request are signed.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_SIGNATURE_PARTS = '';

/**
 * WS-Security signature: the user's name for signature.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_SIGNATURE_USER = '';

/**
 * WS-Security action: add a timestamp to the security header.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_TIMESTAMP = '';

/**
 * WS-Security user name.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_USER = '';

/**
 * WS-Security action: add a UsernameToken identification.
 * @type String
 * @memberOf dw.rpc.SOAPUtil
 * @static
 * @const
 */
dw.rpc.SOAPUtil.WS_USERNAME_TOKEN = '';

/**
 * Returns an HTTP request header property value using the specified key. Null is returned
 if the key does not represent an HTTP header property.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService().
 * @param {String} key - the header property key.
 * @return {String} an HTTP request header property value using the specified key or null.
 * @static
 */
dw.rpc.SOAPUtil.getHTTPRequestHeader = function(svc, key) {};

/**
 * Returns an HTTP response header property value using the specified key. Null is returned
 if the key does not represent an HTTP response header property.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService().
 * @param {String} key - the header property key.
 * @return {String} an HTTP response header property value using the specified key or null.
 * @static
 */
dw.rpc.SOAPUtil.getHTTPResponseHeader = function(svc, key) {};

/**
 * Sets a new SOAPHeaderElement in the SOAP request with the namespace of
 the XML content.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService()
 * @param {String} xml - a string with arbitrary XML content
 * @static
 */
dw.rpc.SOAPUtil.setHeader = function(svc, xml) {};

/**
 * Sets a new SOAPHeaderElement in the SOAP request  with the namespace of
 the XML content.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService()
 * @param {String} xml - a string with arbitrary XML content
 * @param {Boolean} mustUnderstand - sets the SOAP header attribute 'mustUnderstand'
 * @static
 */
dw.rpc.SOAPUtil.setHeader = function(svc, xml, mustUnderstand) {};

/**
 * Creates a new SOAPHeaderElement with the name and namespace and places
 the given XML into it.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService()
 * @param {String} namespace - the namespace of the header element
 * @param {String} name - the element name for the header element
 * @param {Object} xml - a E4X XML object
 * @static
 */
dw.rpc.SOAPUtil.setHeader = function(svc, namespace, name, xml) {};

/**
 * Creates a new SOAPHeaderElement with the name and namespace and places
 the given XML into it.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService()
 * @param {String} namespace - the namespace of the header element
 * @param {String} name - the element name for the header element
 * @param {Object} xml - a E4X XML object
 * @param {Boolean} mustUnderstand - sets the SOAP header attribute mustUnderstand
 * @static
 */
dw.rpc.SOAPUtil.setHeader = function(svc, namespace, name, xml, mustUnderstand) {};

/**
 * Creates a new SOAPHeaderElement with the name and namespace and places
 the given XML into it.
 <br/><pre><code>
 var usernameToken : XML =
   &lt;wsse:UsernameToken xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"&gt;
       &lt;wsse:Username&gt;{merchantID}&lt;/wsse:Username&gt;
       &lt;wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"&gt;
           {merchantPassword}
       &lt;/wsse:Password&gt;
   &lt;/wsse:UsernameToken&gt;
 SOAPUtil.setHeader( service, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
  "Security", usernameToken, true, null
 </code> </pre>
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService()
 * @param {String} namespace - the namespace of the header element
 * @param {String} name - the element name for the header element
 * @param {Object} xml - a E4X XML object
 * @param {Boolean} mustUnderstand - sets the SOAP header attribute 'mustUnderstand'
 * @param {String} actor - the SOAP actor, which should be set for this header element. null removes any actor.
 * @static
 */
dw.rpc.SOAPUtil.setHeader = function(svc, namespace, name, xml, mustUnderstand, actor) {};

/**
 * Creates a new SOAPHeaderElement with the name and namespace and places
 the given XML into it.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService()
 * @param {String} namespace - the namespace of the header element
 * @param {String} name - the element name for the header element
 * @param {String} xml - a string with arbitrary XML content
 * @static
 */
dw.rpc.SOAPUtil.setHeader = function(svc, namespace, name, xml) {};

/**
 * Creates a new SOAPHeaderElement with the name and namespace and places
 the given XML into it.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService()
 * @param {String} namespace - the namespace of the header element
 * @param {String} name - the element name for the header element
 * @param {String} xml - a string with arbitrary XML content
 * @param {Boolean} mustUnderstand - sets the SOAP header attribute mustUnderstand
 * @static
 */
dw.rpc.SOAPUtil.setHeader = function(svc, namespace, name, xml, mustUnderstand) {};

/**
 * Creates a new SOAPHeaderElement with the name and namespace and places
 the given XML into it.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService()
 * @param {String} namespace - the namespace of the header element
 * @param {String} name - the element name for the header element
 * @param {String} xml - a string with arbitrary XML content
 * @param {Boolean} mustUnderstand - sets the SOAP header attribute mustUnderstand
 * @param {String} actor - the SOAP actor, which should be set for this header element. null removes any actor.
 * @static
 */
dw.rpc.SOAPUtil.setHeader = function(svc, namespace, name, xml, mustUnderstand, actor) {};

/**
 * Sets an HTTP request header property using the specified key and value.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService().
 * @param {String} key - the header property key.
 * @param {String} value - the header property value. If the value is null, the property  identified by the key is removed from the HTTP request header.
 * @static
 */
dw.rpc.SOAPUtil.setHTTPRequestHeader = function(svc, key, value) {};

/**
 * Sets the WS-Security configuration for the request and response based on the
 constants defined.
 * @memberOf dw.rpc.SOAPUtil
 * @param {Object} svc - a service stub returned from getService()
 * @param {dw.util.Map} requestConfigMap - the WS-Security request config Map
 * @param {dw.util.Map} responseConfigMap - the WS-Security response config Map
 * @static
 */
dw.rpc.SOAPUtil.setWSSecurityConfig = function(svc, requestConfigMap, responseConfigMap) {};

/**
 *
 * @class
 * @extends Object
 */
dw.rpc.Stub = function() {};
dw.rpc.Stub.prototype = new Object();

/**
 * This property allows the user to set the web service connection timeout value in milliseconds. By default,
 the web service connection timeout is 5000 milliseconds (5 seconds). The minimum allowed value is 100 milliseconds
 and the maximum allowed value is 15000 milliseconds (15 seconds).
 * @type String
 * @memberOf dw.rpc.Stub
 * @static
 * @const
 */
dw.rpc.Stub.CONNECTION_TIMEOUT = '';

/**
 * Standard property: target service endpoint address. The
 URI scheme for the endpoint address specification must
 correspond to the protocol/transport binding for this
 stub class.
 * @type String
 * @memberOf dw.rpc.Stub
 * @static
 * @const
 */
dw.rpc.Stub.ENDPOINT_ADDRESS_PROPERTY = '';

/**
 * Standard property: password for authentication.
 * @type String
 * @memberOf dw.rpc.Stub
 * @static
 * @const
 */
dw.rpc.Stub.PASSWORD_PROPERTY = '';

/**
 * Standard property: this boolean property is used by a service
 client to indicate whether or not it wants to participate in
 a session with a service endpoint. If this property is set to
 true, the service client indicates that it wants the session
 to be maintained. If set to false, the session is not maintained.
 The default value for this property is false.
 * @type String
 * @memberOf dw.rpc.Stub
 * @static
 * @const
 */
dw.rpc.Stub.SESSION_MAINTAIN_PROPERTY = '';

/**
 * Standard property: user name for authentication.
 * @type String
 * @memberOf dw.rpc.Stub
 * @static
 * @const
 */
dw.rpc.Stub.USERNAME_PROPERTY = '';

/**
 * Gets the value of a specific configuration property.
 * @memberOf dw.rpc.Stub
 * @param {String} name - Name of the property whose value is to be           retrieved
 * @return {Object} Value of the configuration property
 */
dw.rpc.Stub.prototype._getProperty = function(name) {};

/**
 * Sets the name and value of a configuration property
 for this Stub instance. If the Stub instance contains
 a value for the same property, the old value is replaced.
 <p/><b>Note:</b> the <code>_setProperty</code> method may not
 perform a validity check on a configured property value. An
 example is the standard property for the target service
 endpoint address, which is not checked for validity in the
 <code>_setProperty</code> method.
 In this case, stub configuration errors are detected at
 the remote method invocation.
 * @memberOf dw.rpc.Stub
 * @param {String} name - Name of the configuration property
 * @param {Object} value - Value of the property
 */
dw.rpc.Stub.prototype._setProperty = function(name, value) {};

/**
 * Returns the password.
 * @memberOf dw.rpc.Stub
 * @return {String} the password.  <p/>  <b>Note:</b> this method handles sensitive security-related data.  Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 */
dw.rpc.Stub.prototype.getPassword = function() {};

/**
 * Returns the current timeout value in milliseconds for this Stub.
 Setting timeout to zero (0) waits indefinitely (no timeout).
 * @memberOf dw.rpc.Stub
 * @return {Number} the current timeout value for this Stub.
 */
dw.rpc.Stub.prototype.getTimeout = function() {};

/**
 * Returns the user name.
 <p/>
 <b>Note:</b> this method handles sensitive security-related data.
 Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 * @memberOf dw.rpc.Stub
 * @return {String} the user name.
 */
dw.rpc.Stub.prototype.getUsername = function() {};

/**
 * Sets an additional SOAP header value for the next
 operation.
 * @memberOf dw.rpc.Stub
 * @param {String} namespace - the namespace to use.
 * @param {String} name - the name of the header item.
 * @param {Object} value - the value for the header item.
 */
dw.rpc.Stub.prototype.setHeader = function(namespace, name, value) {};

/**
 * Sets the password.
 * @memberOf dw.rpc.Stub
 * @param {String} password - the password to set.
 */
dw.rpc.Stub.prototype.setPassword = function(password) {};

/**
 * Sets the timeout in milliseconds for the next call through this Stub.
 Setting timeout to zero (0) waits indefinitely (no timeout).

 <p/>This timeout value controls both the "connection timeout" (how long
 it takes to connect to the remote host) and the "socket timeout" (how
 long, after connecting, it will wait without any data being read).
 * @memberOf dw.rpc.Stub
 * @param {Number} timeout - the timeout for the next call through  this stub.
 */
dw.rpc.Stub.prototype.setTimeout = function(timeout) {};

/**
 * Sets the user name.
 * @memberOf dw.rpc.Stub
 * @param {String} username - the user name to set.
 */
dw.rpc.Stub.prototype.setUsername = function(username) {};

/**
 *
 * @class
 * @extends Object
 */
dw.rpc.WebReference = function() {};
dw.rpc.WebReference.prototype = new Object();

/**
 * Returns the default service of the WebReference object. If you have more than one service
 defined in your WSDL, the default service is the first service alphabetically. If the service
 has multiple ports defined, the default service uses the SOAP port name that is first alphabetically.
 * @memberOf dw.rpc.WebReference
 * @return {dw.rpc.Stub} the default service of the WebReference object.
 */
dw.rpc.WebReference.prototype.getDefaultService = function() {};

/**
 * Returns a specific service from this WebReference.
 * @memberOf dw.rpc.WebReference
 * @param {String} service - the service to locate.
 * @param {String} port - the port name to use.  <br/><pre><code>  var port =  webref.getService("SampleServiceName","SamplePortName");  </code> </pre>
 * @return {dw.rpc.Stub} a specific service from this WebReference.
 */
dw.rpc.WebReference.prototype.getService = function(service, port) {};

/**
 * The brands suggestion container provides access to
 brands found using the suggested terms.
 <p/>
 The method <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedPhrases_DetailAnchor"> getSuggestedPhrases()</a> can be used to
 get the list of found brand names. The brand lookup
 is being executed in the current catalog and locale.
 <p/>
 Furthermore the list of suggested terms, after processing
 the original user input search query, is accessible
 through <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedTerms_DetailAnchor"> getSuggestedTerms()</a> method.
 * @class
 * @extends dw.suggest.Suggestions
 */
dw.suggest.BrandSuggestions = function() {};
dw.suggest.BrandSuggestions.prototype = new dw.suggest.Suggestions();

/**
 * The category suggestion container provides access to
 categories found using the suggested terms as search criteria.
 The method <a href="class_dw_suggest_CategorySuggestions.html#dw_suggest_CategorySuggestions_getSuggestedCategories_DetailAnchor">getSuggestedCategories()</a> can be used to
 get the list of found categories.
 <p/>
 Furthermore the list of suggested terms, after processing
 the original user input search query, is accessible
 through <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedTerms_DetailAnchor"> getSuggestedTerms()</a> method.
 * @class
 * @extends dw.suggest.Suggestions
 */
dw.suggest.CategorySuggestions = function() {};
dw.suggest.CategorySuggestions.prototype = new dw.suggest.Suggestions();

/**
 * This method returns a list of categories which were found
 using the suggested terms as search criteria.
 The category lookup is being executed in the current catalog and locale.
 * @memberOf dw.suggest.CategorySuggestions
 * @return {dw.util.Iterator} a iterator containing a {@link dw.suggest.SuggestedCategory} instance for           each found category, the iterator might be empty
 * @see <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_hasSuggestions_DetailAnchor">Suggestions.hasSuggestions()</a>
 */
dw.suggest.CategorySuggestions.prototype.getSuggestedCategories = function() {};

/**
 * The content suggestion container provides access to
 content pages found using the suggested terms as search criteria.
 The method <a href="class_dw_suggest_ContentSuggestions.html#dw_suggest_ContentSuggestions_getSuggestedContent_DetailAnchor">getSuggestedContent()</a> can be used to
 get the list of found content pages.
 <p/>
 Furthermore the list of suggested terms, after processing
 the original user input search query, is accessible
 through <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedTerms_DetailAnchor"> getSuggestedTerms()</a> method.
 * @class
 * @extends dw.suggest.Suggestions
 */
dw.suggest.ContentSuggestions = function() {};
dw.suggest.ContentSuggestions.prototype = new dw.suggest.Suggestions();

/**
 * This method returns a list of content pages which were found
 using the suggested terms as search criteria.
 The content lookup is being executed in the current library and locale.
 * @memberOf dw.suggest.ContentSuggestions
 * @return {dw.util.Iterator} a iterator containing a {@link dw.suggest.SuggestedContent} instance for           each found content, the iterator might be empty
 * @see <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_hasSuggestions_DetailAnchor">Suggestions.hasSuggestions()</a>
 */
dw.suggest.ContentSuggestions.prototype.getSuggestedContent = function() {};

/**
 * The custom suggestion container provides access to
 merchant provided search phrases
 found using the suggested terms as search criteria.
 <p/>
 The method <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedPhrases_DetailAnchor"> getSuggestedPhrases()</a> can be used to
 get the list of found search phrases. The custom phrases
 lookup is being executed in the current site.
 <p/>
 Furthermore the list of suggested terms is accessible
 through <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedTerms_DetailAnchor"> getSuggestedTerms()</a> method.
 * @class
 * @extends dw.suggest.Suggestions
 */
dw.suggest.CustomSuggestions = function() {};
dw.suggest.CustomSuggestions.prototype = new dw.suggest.Suggestions();

/**
 * The product suggestion container provides access to
 products found using the suggested terms.
 The method <a href="class_dw_suggest_ProductSuggestions.html#dw_suggest_ProductSuggestions_getSuggestedProducts_DetailAnchor">getSuggestedProducts()</a> can be used to
 get the list of found products.
 <p/>
 Furthermore the list of suggested terms, after processing
 the original user input search query, is accessible
 through <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedTerms_DetailAnchor"> getSuggestedTerms()</a> method.
 * @class
 * @extends dw.suggest.Suggestions
 */
dw.suggest.ProductSuggestions = function() {};
dw.suggest.ProductSuggestions.prototype = new dw.suggest.Suggestions();

/**
 * This method returns a list of products which were found
 using the suggested terms as search criteria.
 The product lookup is being executed in the current catalog and locale.
 * @memberOf dw.suggest.ProductSuggestions
 * @return {dw.util.Iterator} a iterator containing a {@link dw.suggest.SuggestedProduct} instance for           each found product, the iterator might be empty
 * @see <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_hasSuggestions_DetailAnchor">Suggestions.hasSuggestions()</a>
 */
dw.suggest.ProductSuggestions.prototype.getSuggestedProducts = function() {};

/**
 * This class represents a suggested catalog category.
 Use <a href="class_dw_suggest_SuggestedCategory.html#dw_suggest_SuggestedCategory_getCategory_DetailAnchor">getCategory()</a> method to get access to the actual <a href="class_dw_catalog_Category.html">Category</a> object.
 * @class
 * @extends Object
 */
dw.suggest.SuggestedCategory = function() {};
dw.suggest.SuggestedCategory.prototype = new Object();

/**
 * This method returns the actual <a href="class_dw_catalog_Category.html">Category</a> object corresponding to this suggested category.
 * @memberOf dw.suggest.SuggestedCategory
 * @return {dw.catalog.Category} the category object corresponding to this suggested category
 */
dw.suggest.SuggestedCategory.prototype.getCategory = function() {};

/**
 * This class represents a suggested content page.
 Use <a href="class_dw_suggest_SuggestedContent.html#dw_suggest_SuggestedContent_getContent_DetailAnchor">getContent()</a> method to get access to the actual <a href="class_dw_content_Content.html">Content</a> object.
 * @class
 * @extends Object
 */
dw.suggest.SuggestedContent = function() {};
dw.suggest.SuggestedContent.prototype = new Object();

/**
 * This method returns the actual <a href="class_dw_content_Content.html">Content</a> object corresponding to this suggested content.
 * @memberOf dw.suggest.SuggestedContent
 * @return {dw.content.Content} the content object corresponding to this suggested content
 */
dw.suggest.SuggestedContent.prototype.getContent = function() {};

/**
 * This class represents a suggested phrase.
 Use <a href="class_dw_suggest_SuggestedPhrase.html#dw_suggest_SuggestedPhrase_getPhrase_DetailAnchor">getPhrase()</a> method to get access to the phrase.
 * @class
 * @extends Object
 */
dw.suggest.SuggestedPhrase = function() {};
dw.suggest.SuggestedPhrase.prototype = new Object();

/**
 * This method returns the actual phrase as a string value.
 * @memberOf dw.suggest.SuggestedPhrase
 * @return {String} the phrase
 */
dw.suggest.SuggestedPhrase.prototype.getPhrase = function() {};

/**
 * This class represents a suggested product.
 Use <a href="class_dw_suggest_SuggestedProduct.html#dw_suggest_SuggestedProduct_getProductSearchHit_DetailAnchor">getProductSearchHit()</a> method to get access to the actual <a href="class_dw_catalog_ProductSearchHit.html">ProductSearchHit</a> object.
 * @class
 * @extends Object
 */
dw.suggest.SuggestedProduct = function() {};
dw.suggest.SuggestedProduct.prototype = new Object();

/**
 * This method returns the actual <a href="class_dw_catalog_ProductSearchHit.html">ProductSearchHit</a> object
 corresponding to this suggested product.
 * @memberOf dw.suggest.SuggestedProduct
 * @return {dw.catalog.ProductSearchHit} the product search hit corresponding to this suggested product
 */
dw.suggest.SuggestedProduct.prototype.getProductSearchHit = function() {};

/**
 * A single suggested term.

 Each user input term of the search phrase
 is being processed separately by the suggestion engine. For each
 original term, a list of terms will be suggested, either completed terms,
 corrected terms or even the exact term if it is known to the engine.
 <p/>
 Each suggested term is represented by a instance of this class. The list of suggested terms
 belonging to a single original term is represented by a instance of <a href="class_dw_suggest_SuggestedTerms.html">SuggestedTerms</a> class.
 <p/>
 The suggested term value can either be the completed version of the original term,
 the corrected version of the original term or exactly the original term.
 * @class
 * @extends Object
 */
dw.suggest.SuggestedTerm = function() {};
dw.suggest.SuggestedTerm.prototype = new Object();

/**
 * Returns this suggested term as String value.
 * @memberOf dw.suggest.SuggestedTerm
 * @return {String} the string representation of this suggested term
 */
dw.suggest.SuggestedTerm.prototype.getValue = function() {};

/**
 * Returns whether this suggested term is a auto completed version of the original term.
 In other words, this method returns true if the original term is a prefix of this suggested term.
 * @memberOf dw.suggest.SuggestedTerm
 * @return {Boolean} true if this suggested term is evaluated by auto completion, false otherwise
 */
dw.suggest.SuggestedTerm.prototype.isCompleted = function() {};

/**
 * Returns whether this suggested term is a corrected version of the original term.
 * @memberOf dw.suggest.SuggestedTerm
 * @return {Boolean} true if this suggested term is a corrected version of the original term, false otherwise
 */
dw.suggest.SuggestedTerm.prototype.isCorrected = function() {};

/**
 * Returns whether this suggested term is exactly matching the original term.
 * @memberOf dw.suggest.SuggestedTerm
 * @return {Boolean} true if this suggested term exactly matches the original term, false otherwise
 */
dw.suggest.SuggestedTerm.prototype.isExactMatch = function() {};

/**
 * This container represents a list of suggested terms, all belonging to a
 particular single original term of the users input search phrase.

 Each user input term of the search phrase
 is being processed separately by the suggestion engine. For each
 original term, a list of terms will be suggested, either completed terms,
 corrected terms or even the exact term if they are known to the engine as they are.

 A instance of this class refers to the original unmodified term, as well as
 to a list of <a href="class_dw_suggest_SuggestedTerm.html">SuggestedTerm</a>s objects representing a single suggested term.
 * @class
 * @extends Object
 */
dw.suggest.SuggestedTerms = function() {};
dw.suggest.SuggestedTerms.prototype = new Object();

/**
 * This method returns the suggested term which is considered best matching
 with the original term. See <a href="class_dw_suggest_SuggestedTerms.html#dw_suggest_SuggestedTerms_getTerms_DetailAnchor">getTerms()</a> for a note on ordering of
 suggested terms.
 * @memberOf dw.suggest.SuggestedTerms
 * @return {dw.suggest.SuggestedTerm} the best matching term
 * @see <a href="class_dw_suggest_SuggestedTerms.html#dw_suggest_SuggestedTerms_getOriginalTerm_DetailAnchor">getOriginalTerm()</a>
 * @see <a href="class_dw_suggest_SuggestedTerms.html#dw_suggest_SuggestedTerms_getTerms_DetailAnchor">getTerms()</a>
 */
dw.suggest.SuggestedTerms.prototype.getFirstTerm = function() {};

/**
 * Returns the original term of the user input, for which this instance
 provides a list of suggested terms. Suggested terms can either be corrected,
 or completed or exact matching.
 * @memberOf dw.suggest.SuggestedTerms
 * @return {String} the original unmodified term of the user input search phrase
 */
dw.suggest.SuggestedTerms.prototype.getOriginalTerm = function() {};

/**
 * Returns the list of <a href="class_dw_suggest_SuggestedTerm.html">SuggestedTerm</a>s suggested for the original term.
 * @memberOf dw.suggest.SuggestedTerms
 * @return {dw.util.Iterator} a iterator of suggested terms, might be empty
 * @see <a href="class_dw_suggest_SuggestedTerms.html#dw_suggest_SuggestedTerms_getOriginalTerm_DetailAnchor">getOriginalTerm()</a>
 * @see <a href="class_dw_suggest_SuggestedTerms.html#dw_suggest_SuggestedTerms_isEmpty_DetailAnchor">isEmpty()</a>
 */
dw.suggest.SuggestedTerms.prototype.getTerms = function() {};

/**
 * Returns true if this set of suggested terms is empty.
 * @memberOf dw.suggest.SuggestedTerms
 * @return {Boolean} true if no suggested term is contained in this set, false otherwise
 */
dw.suggest.SuggestedTerms.prototype.isEmpty = function() {};

/**
 * Returns a list of <a href="class_dw_suggest_SuggestedPhrase.html">SuggestedPhrase</a> objects that relates to the
 user input search phrase.
 * @memberOf dw.suggest.Suggestions
 * @return {dw.util.Iterator} a list of {@link dw.suggest.SuggestedPhrase}s
 * @see <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_hasSuggestedPhrases_DetailAnchor">hasSuggestedPhrases()</a>
 */
dw.suggest.Suggestions.prototype.getSuggestedPhrases = function() {};

/**
 * Returns a list of <a href="class_dw_suggest_SuggestedTerms.html">SuggestedTerms</a> objects. Each of the returned
 instances represents a set of terms suggested for a particular single term
 of the user input search phrase.
 * @memberOf dw.suggest.Suggestions
 * @return {dw.util.Iterator} a list of {@link dw.suggest.SuggestedTerms} for each term of the user input search phrase
 */
dw.suggest.Suggestions.prototype.getSuggestedTerms = function() {};

/**
 * Returns whether this suggestions container has any suggested phrases.
 <p/>
 Note that this method only looks for suggested phrases. It does not account
 for suggested terms or suggested objects. In other words,
 even if there are suggested terms or objects, this method
 will return false if this suggestions container has no phrases.
 <p/>
 * @memberOf dw.suggest.Suggestions
 * @return {Boolean} true only if there are phrases available
 */
dw.suggest.Suggestions.prototype.hasSuggestedPhrases = function() {};

/**
 * Returns whether this suggestions container has any suggested items, i.e. products.
 <p/>
 Note that this method only looks for concrete suggested items. It does not account
 for suggested terms. In other words, even if there are suggested terms, this method
 will return false if no matching items, like products or categories, were found
 for the suggested terms.
 <p/>
 To find out whether there are suggested terms and how they match with respect to
 the original search phrase, one can use <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedTerms_DetailAnchor">getSuggestedTerms()</a> to obtain
 a list of <a href="class_dw_suggest_SuggestedTerms.html">SuggestedTerms</a>.
 * @memberOf dw.suggest.Suggestions
 * @return {Boolean} true only if there are items found using the suggested terms
 * @see <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedTerms_DetailAnchor">getSuggestedTerms()</a>
 * @see <a href="class_dw_suggest_SuggestedTerms.html#dw_suggest_SuggestedTerms_isEmpty_DetailAnchor">SuggestedTerms.isEmpty()</a>
 */
dw.suggest.Suggestions.prototype.hasSuggestions = function() {};

/**
 * Constructs a new SuggestModel.
 * @class
 * @extends Object
 */
dw.suggest.SuggestModel = function() {};
dw.suggest.SuggestModel.prototype = new Object();

/**
 * The maximum number of suggestions that can be obtain from this model: <code>10</code>
 * @type Number
 * @memberOf dw.suggest.SuggestModel
 * @static
 * @const
 */
dw.suggest.SuggestModel.MAX_SUGGESTIONS = 0;

/**
 * Returns a <a href="class_dw_suggest_BrandSuggestions.html">BrandSuggestions</a> container for the current search phrase.
 The <a href="class_dw_suggest_BrandSuggestions.html">BrandSuggestions</a> container provides access to the found brands (if any) and
 the terms suggested by the system with respect to the known product brands in the catalog.
 * @memberOf dw.suggest.SuggestModel
 * @return {dw.suggest.BrandSuggestions} a brand suggestions container for the current search phrase,           returns <code>null</code> for insufficient search input
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setMaxSuggestions_int_DetailAnchor">setMaxSuggestions(Number)</a>
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setSearchPhrase_String_DetailAnchor">setSearchPhrase(String)</a>
 */
dw.suggest.SuggestModel.prototype.getBrandSuggestions = function() {};

/**
 * Returns a <a href="class_dw_suggest_CategorySuggestions.html">CategorySuggestions</a> container for the current search phrase.
 The <a href="class_dw_suggest_CategorySuggestions.html">CategorySuggestions</a> container provides access to the found categories (if any) and
 the terms suggested by the system with respect to the known categories in the catalog.
 * @memberOf dw.suggest.SuggestModel
 * @return {dw.suggest.CategorySuggestions} a category suggestions container for the current search phrase,           returns <code>null</code> for insufficient search input
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setMaxSuggestions_int_DetailAnchor">setMaxSuggestions(Number)</a>
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setSearchPhrase_String_DetailAnchor">setSearchPhrase(String)</a>
 */
dw.suggest.SuggestModel.prototype.getCategorySuggestions = function() {};

/**
 * Returns a <a href="class_dw_suggest_ContentSuggestions.html">ContentSuggestions</a> container for the current search phrase.
 The <a href="class_dw_suggest_ContentSuggestions.html">ContentSuggestions</a> container provides access to the found content pages (if any) and
 the terms suggested by the system with respect to the known content in the library.
 * @memberOf dw.suggest.SuggestModel
 * @return {dw.suggest.ContentSuggestions} a content suggestions container for the current search phrase,           returns <code>null</code> for insufficient search input
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setMaxSuggestions_int_DetailAnchor">setMaxSuggestions(Number)</a>
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setSearchPhrase_String_DetailAnchor">setSearchPhrase(String)</a>
 */
dw.suggest.SuggestModel.prototype.getContentSuggestions = function() {};

/**
 * Returns a <a href="class_dw_suggest_CustomSuggestions.html">CustomSuggestions</a> container for the current search phrase.
 The <a href="class_dw_suggest_CustomSuggestions.html">CustomSuggestions</a> container provides access to matching
 custom phrases (if any) and the terms suggested
 by the system with respect to the merchant provided custom phrases.
 * @memberOf dw.suggest.SuggestModel
 * @return {dw.suggest.CustomSuggestions} a custom suggestions container for the current search phrase,           returns <code>null</code> for insufficient search input
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setMaxSuggestions_int_DetailAnchor">setMaxSuggestions(Number)</a>
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setSearchPhrase_String_DetailAnchor">setSearchPhrase(String)</a>
 */
dw.suggest.SuggestModel.prototype.getCustomSuggestions = function() {};

/**
 * Returns a <a href="class_dw_suggest_ProductSuggestions.html">ProductSuggestions</a> container for the current search phrase.
 The <a href="class_dw_suggest_ProductSuggestions.html">ProductSuggestions</a> container provides access to the found products (if any) and
 the terms suggested by the system with respect to the known products in the catalog.
 * @memberOf dw.suggest.SuggestModel
 * @return {dw.suggest.ProductSuggestions} a product suggestions container for the current search phrase,           returns <code>null</code> for insufficient search input
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setMaxSuggestions_int_DetailAnchor">setMaxSuggestions(Number)</a>
 * @see <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_setSearchPhrase_String_DetailAnchor">setSearchPhrase(String)</a>
 */
dw.suggest.SuggestModel.prototype.getProductSuggestions = function() {};

/**
 * Use this method to setup the maximum number of returned suggested
 items. For example, set this to 3 in order to only retrieve the
 3 most relevant suggested products.
 <p/>
 The maximum number of suggestions that can be queried are defined as <a href="class_dw_suggest_SuggestModel.html#dw_suggest_SuggestModel_MAX_SUGGESTIONS_DetailAnchor">MAX_SUGGESTIONS</a>.
 * @memberOf dw.suggest.SuggestModel
 * @param {Number} maxSuggestions - the number of suggested items to be returned by this model instance
 */
dw.suggest.SuggestModel.prototype.setMaxSuggestions = function(maxSuggestions) {};

/**
 * Sets the user input search phrase. This search phrase is being processed
 by applying auto completion, spell correction and enhancement with alternative
 similar search terms.
 <p/>
 The resulting search phrase is used to lookup the actual items,
 like products or categories (search-as-you-type).
 <p/>
 In order to access the processed terms, one can use the
 <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedTerms_DetailAnchor">Suggestions.getSuggestedTerms()</a> method of each of the respective
 results returned by the methods in this model.
 * @memberOf dw.suggest.SuggestModel
 * @param {String} searchPhrase - the user input search phrase
 * @see <a href="class_dw_suggest_Suggestions.html#dw_suggest_Suggestions_getSuggestedTerms_DetailAnchor">Suggestions.getSuggestedTerms()</a>
 */
dw.suggest.SuggestModel.prototype.setSearchPhrase = function(searchPhrase) {};

/**
 * Represents an FTP or SFTP Service.
 * @class
 * @extends dw.svc.Service
 */
dw.svc.FTPService = function() {};
dw.svc.FTPService.prototype = new dw.svc.Service();

/**
 * Returns the underlying client object.
 <p>
 This is either an <a href="class_dw_net_FTPClient.html">FTPClient</a> or <a href="class_dw_net_SFTPClient.html">SFTPClient</a>, depending on the protocol.
 * @memberOf dw.svc.FTPService
 * @return {Object} (S)FTP Client object.
 */
dw.svc.FTPService.prototype.getClient = function() {};

/**
 * Sets a single operation to perform during the execute phase of the service.
 <p>
 The given arguments make up a method name and arguments on the underlying <a href="class_dw_svc_FTPService.html#dw_svc_FTPService_getClient_DetailAnchor">getClient()</a> object. This
 method will be invoked during execution, with the result passed into the callback's parseResponse method.
 <p>
 This is required unless the callback defines an execute method.
 * @memberOf dw.svc.FTPService
 * @param {String} name - Method name.
 * @param {Object[]} args - Method arguments.
 * @return {dw.svc.FTPService} this FTP or SFTP Service.
 * @varArgs
 */
dw.svc.FTPService.prototype.setOperation = function(name, args) {};

/**
 * Represents an FTP or SFTP Service Definition.
 <p>
 There are two basic styles of configuration for this service.
 <p>
 In the first style, <code>createRequest</code> is implemented to call the setOperation method on the Service. This
 will cause the single operation to be performed and returned as the data object in the <code>parseResponse</code>
 method. Any error status is set automatically based on the returned value of the operation.
 <p>
 In the second style, <code>execute</code> is implemented to perform one or more operations using the serviceClient
 available on the Service object. This serviceClient will be either an <a href="class_dw_net_FTPClient.html">FTPClient</a> or an
 <a href="class_dw_net_SFTPClient.html">SFTPClient</a>. The return value of execute will be passed as the data object in the
 <code>parseResponse</code> method.
 * @class
 * @extends dw.svc.ServiceDefinition
 */
dw.svc.FTPServiceDefinition = function() {};
dw.svc.FTPServiceDefinition.prototype = new dw.svc.ServiceDefinition();

/**
 * Returns the status of whether the underlying FTP connection will be disconnected after the service call.
 * @memberOf dw.svc.FTPServiceDefinition
 * @return {Boolean} The auto-disconnect flag.
 */
dw.svc.FTPServiceDefinition.prototype.isAutoDisconnect = function() {};

/**
 * Sets the auto-disconnect flag.
 <p>
 If true, the underlying FTP connection will be disconnected after the service call. If false then it will remain
 open. The default value is true.
 * @memberOf dw.svc.FTPServiceDefinition
 * @param {Boolean} b - true to enable auto-disconnect, false otherwise.
 * @return {dw.svc.FTPServiceDefinition} this FTP or SFTP Service Definition.
 */
dw.svc.FTPServiceDefinition.prototype.setAutoDisconnect = function(b) {};

/**
 * Represents an HTTP Form POST Service.
 <p>
 All arguments passed to the <a href="class_dw_svc_Service.html#dw_svc_Service_call_Object_DetailAnchor"> call</a> method will be URL-encoded and set as name/value
 pairs in the HTTP request body. The HTTP request will be a POST with a content-type of
 <code>application/x-www-form-urlencoded</code>.
 * @class
 * @extends dw.svc.HTTPService
 */
dw.svc.HTTPFormService = function() {};
dw.svc.HTTPFormService.prototype = new dw.svc.HTTPService();

/**
 * Represents an HTTP Form POST Service Definition.
 * @class
 * @extends dw.svc.HTTPServiceDefinition
 */
dw.svc.HTTPFormServiceDefinition = function() {};
dw.svc.HTTPFormServiceDefinition.prototype = new dw.svc.HTTPServiceDefinition();

/**
 * Adds an HTTP Header.
 * @memberOf dw.svc.HTTPService
 * @param {String} name - Header name.
 * @param {String} val - Header value.
 * @return {dw.svc.HTTPService} this HTTP Service.
 */
dw.svc.HTTPService.prototype.addHeader = function(name, val) {};

/**
 * Adds a query parameter that will be appended to the URL.
 * @memberOf dw.svc.HTTPService
 * @param {String} name - Parameter name.
 * @param {String} val - Parameter value.
 * @return {dw.svc.HTTPService} this HTTP Service.
 */
dw.svc.HTTPService.prototype.addParam = function(name, val) {};

/**
 * Returns the authentication type.
 * @memberOf dw.svc.HTTPService
 * @return {String} Authentication type.
 */
dw.svc.HTTPService.prototype.getAuthentication = function() {};

/**
 * Returns the caching time to live value.
 * @memberOf dw.svc.HTTPService
 * @return {Number} The caching time to live value in seconds.
 * @see <a href="class_dw_svc_HTTPService.html#dw_svc_HTTPService_setCachingTTL_int_DetailAnchor">setCachingTTL(Number)</a>
 */
dw.svc.HTTPService.prototype.getCachingTTL = function() {};

/**
 * Returns the underlying HTTP client object.
 * @memberOf dw.svc.HTTPService
 * @return {dw.net.HTTPClient} HTTP client object.
 */
dw.svc.HTTPService.prototype.getClient = function() {};

/**
 * Returns the request body encoding to declare.
 * @memberOf dw.svc.HTTPService
 * @return {String} Request encoding.
 */
dw.svc.HTTPService.prototype.getEncoding = function() {};

/**
 * Returns the output file, or null if there is none.
 * @memberOf dw.svc.HTTPService
 * @return {dw.io.File} Output file or null.
 */
dw.svc.HTTPService.prototype.getOutFile = function() {};

/**
 * Returns the request method.
 * @memberOf dw.svc.HTTPService
 * @return {String} HTTP Request method.
 */
dw.svc.HTTPService.prototype.getRequestMethod = function() {};

/**
 * Sets the type of authentication. Valid values include "BASIC" and "NONE".
 <p>
 The default value is BASIC.
 * @memberOf dw.svc.HTTPService
 * @param {String} authentication - Type of authentication.
 * @return {dw.svc.HTTPService} this HTTP Service.
 */
dw.svc.HTTPService.prototype.setAuthentication = function(authentication) {};

/**
 * Enables caching for GET requests.
 <p>
 This only caches status codes 2xx with a content length and size of less than 50k that are not immediately
 written to file. The URL and the user name are used as cache keys. The total size of cacheable content and the
 number of cached items is limited and automatically managed by the system.
 <p>
 Cache control information sent by the remote server is ignored.
 <p>
 Caching HTTP responses should be done very carefully. It is important to ensure that the response really depends
 only on the URL and doesn't contain any remote state information or time information which is independent of the
 URL. It is also important to verify that the application sends exactly the same URL multiple times.
 * @memberOf dw.svc.HTTPService
 * @param {Number} ttl - The time to live for the cached content in seconds. A value of 0 disables caching.
 * @return {dw.svc.HTTPService}
 * @see <a href="class_dw_net_HTTPClient.html#dw_net_HTTPClient_enableCaching_int_DetailAnchor">HTTPClient.enableCaching(Number)</a>
 */
dw.svc.HTTPService.prototype.setCachingTTL = function(ttl) {};

/**
 * Sets the encoding of the request body (if any).
 <p>
 The default value is UTF-8.
 * @memberOf dw.svc.HTTPService
 * @param {String} encoding - Encoding of the request body.
 * @return {dw.svc.HTTPService} this HTTP Service.
 */
dw.svc.HTTPService.prototype.setEncoding = function(encoding) {};

/**
 * Sets the output file in which to write the HTTP response body.
 <p>
 The default behavior is to not write a file.
 * @memberOf dw.svc.HTTPService
 * @param {dw.io.File} outFile - Output file, or null to disable.
 * @return {dw.svc.HTTPService} this HTTP Service.
 */
dw.svc.HTTPService.prototype.setOutFile = function(outFile) {};

/**
 * Sets the HTTP request method.
 <p>
 Valid values include GET, PUT, POST, and DELETE.
 <p>
 The default value is POST.
 * @memberOf dw.svc.HTTPService
 * @param {String} requestMethod - HTTP request method.
 * @return {dw.svc.HTTPService} this HTTP Service.
 */
dw.svc.HTTPService.prototype.setRequestMethod = function(requestMethod) {};

/**
 * Adds an HTTP Header.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @param {String} name - Header name.
 * @param {String} val - Header value.
 * @return {dw.svc.HTTPServiceDefinition} this HTTP Service Definition.
 */
dw.svc.HTTPServiceDefinition.prototype.addHeader = function(name, val) {};

/**
 * Adds a query parameter that will be appended to the URL.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @param {String} name - Parameter name.
 * @param {String} val - Parameter value.
 * @return {dw.svc.HTTPServiceDefinition} this HTTP Service Definition.
 */
dw.svc.HTTPServiceDefinition.prototype.addParam = function(name, val) {};

/**
 * Returns the authentication type.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @return {String} Authentication type.
 */
dw.svc.HTTPServiceDefinition.prototype.getAuthentication = function() {};

/**
 * Returns the caching time to live value.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @return {Number} The caching time to live value in seconds.
 * @see <a href="class_dw_svc_HTTPServiceDefinition.html#dw_svc_HTTPServiceDefinition_setCachingTTL_int_DetailAnchor">setCachingTTL(Number)</a>
 */
dw.svc.HTTPServiceDefinition.prototype.getCachingTTL = function() {};

/**
 * Returns the request body encoding to declare.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @return {String} Request encoding.
 */
dw.svc.HTTPServiceDefinition.prototype.getEncoding = function() {};

/**
 * Returns the output file, or null if there is none.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @return {dw.io.File} Output file or null.
 */
dw.svc.HTTPServiceDefinition.prototype.getOutFile = function() {};

/**
 * Returns the request method.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @return {String} HTTP Request method.
 */
dw.svc.HTTPServiceDefinition.prototype.getRequestMethod = function() {};

/**
 * Sets the type of authentication. Valid values include "BASIC" and "NONE".
 <p>
 The default value is BASIC.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @param {String} authentication - Type of authentication.
 * @return {dw.svc.HTTPServiceDefinition} this HTTP Service Definition.
 */
dw.svc.HTTPServiceDefinition.prototype.setAuthentication = function(authentication) {};

/**
 * Enables caching for GET requests.
 <p>
 This only caches status codes 2xx with a content length and size of less than 50k that are not immediately
 written to file. The URL and the user name are used as cache keys. The total size of cacheable content and the
 number of cached items is limited and automatically managed by the system.
 <p>
 Cache control information sent by the remote server is ignored.
 <p>
 Caching HTTP responses should be done very carefully. It is important to ensure that the response really depends
 only on the URL and doesn't contain any remote state information or time information which is independent of the
 URL. It is also important to verify that the application sends exactly the same URL multiple times.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @param {Number} ttl - The time to live for the cached content in seconds. A value of 0 or less disables caching.
 * @return {dw.svc.HTTPServiceDefinition}
 * @see <a href="class_dw_net_HTTPClient.html#dw_net_HTTPClient_enableCaching_int_DetailAnchor">HTTPClient.enableCaching(Number)</a>
 */
dw.svc.HTTPServiceDefinition.prototype.setCachingTTL = function(ttl) {};

/**
 * Sets the encoding of the request body (if any).
 <p>
 The default value is UTF-8.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @param {String} encoding - Encoding of the request body.
 * @return {dw.svc.HTTPServiceDefinition} this HTTP Service Definition.
 */
dw.svc.HTTPServiceDefinition.prototype.setEncoding = function(encoding) {};

/**
 * Sets the output file in which to write the HTTP response body.
 <p>
 The default behavior is to not write a file.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @param {dw.io.File} outFile - Output file, or null to disable.
 * @return {dw.svc.HTTPServiceDefinition} this HTTP Service Definition.
 */
dw.svc.HTTPServiceDefinition.prototype.setOutFile = function(outFile) {};

/**
 * Sets the HTTP request method.
 <p>
 Valid values include GET, PUT, POST, and DELETE.
 <p>
 The default value is POST.
 * @memberOf dw.svc.HTTPServiceDefinition
 * @param {String} requestMethod - HTTP request method.
 * @return {dw.svc.HTTPServiceDefinition} this HTTP Service Definition.
 */
dw.svc.HTTPServiceDefinition.prototype.setRequestMethod = function(requestMethod) {};

/**
 * Constructs a new result instance.
 * @class
 * @extends Object
 */
dw.svc.Result = function() {};
dw.svc.Result.prototype = new Object();

/**
 * Status indicating a general service error.
 * @type String
 * @memberOf dw.svc.Result
 * @static
 * @const
 */
dw.svc.Result.ERROR = '';

/**
 * Status indicating a successful service call.
 * @type String
 * @memberOf dw.svc.Result
 * @static
 * @const
 */
dw.svc.Result.OK = '';

/**
 * Status indicating the service is unavailable. This includes timeouts, rate limits, and remote server issues.
 * @type String
 * @memberOf dw.svc.Result
 * @static
 * @const
 */
dw.svc.Result.SERVICE_UNAVAILABLE = '';

/**
 * Returns an error-specific code if applicable. For example, this is the HTTP response code for an
 <a href="class_dw_svc_HTTPService.html">HTTPService</a>.
 * @memberOf dw.svc.Result
 * @return {Number} Error-specific code (if applicable).
 */
dw.svc.Result.prototype.getError = function() {};

/**
 * Returns an error message on a non-OK status.
 * @memberOf dw.svc.Result
 * @return {String} Error message.
 */
dw.svc.Result.prototype.getErrorMessage = function() {};

/**
 * Returns an extra error message on failure (if any).
 * @memberOf dw.svc.Result
 * @return {String} Error message, or null.
 */
dw.svc.Result.prototype.getMsg = function() {};

/**
 * Returns the actual object returned by the service when the status is OK.
 * @memberOf dw.svc.Result
 * @return {Object} Object returned by the service.
 */
dw.svc.Result.prototype.getObject = function() {};

/**
 * Returns the status. This is "OK" on success. Failure codes include "ERROR" and "SERVICE_UNAVAILABLE".
 * @memberOf dw.svc.Result
 * @return {String} Status code.
 * @see <a href="class_dw_svc_Result.html#dw_svc_Result_OK_DetailAnchor">OK</a>
 * @see <a href="class_dw_svc_Result.html#dw_svc_Result_ERROR_DetailAnchor">ERROR</a>
 * @see <a href="class_dw_svc_Result.html#dw_svc_Result_SERVICE_UNAVAILABLE_DetailAnchor">SERVICE_UNAVAILABLE</a>
 */
dw.svc.Result.prototype.getStatus = function() {};

/**
 * Returns the status of whether the response is the result of a "mock" service call.
 * @memberOf dw.svc.Result
 * @return {Boolean} true if this was a mock service call, false otherwise.
 */
dw.svc.Result.prototype.isMockResult = function() {};

/**
 * Returns the status of whether the service call was successful.
 * @memberOf dw.svc.Result
 * @return {Boolean} true on success, false otherwise.
 */
dw.svc.Result.prototype.isOk = function() {};

/**
 *
 * @memberOf dw.svc.Result
 * @return {String}
 */
dw.svc.Result.prototype.toString = function() {};

/**
 * Invokes the service.
 * @memberOf dw.svc.Service
 * @param {Object[]} args - Arguments to pass.
 * @return {dw.svc.Result} Result of the service.
 * @varArgs
 */
dw.svc.Service.prototype.call = function(args) {};

/**
 * Returns the Service Configuration.
 * @memberOf dw.svc.Service
 * @return {dw.svc.ServiceConfig} Service Configuration.
 */
dw.svc.Service.prototype.getConfiguration = function() {};

/**
 * Returns the ID of the currently associated Credential.
 * @memberOf dw.svc.Service
 * @return {String} Credential Name.
 */
dw.svc.Service.prototype.getCredentialID = function() {};

/**
 * Returns the property that stores the object returned by createRequest.
 * @memberOf dw.svc.Service
 * @return {Object} Object returned by createRequest.
 */
dw.svc.Service.prototype.getRequestData = function() {};

/**
 * Returns the property that stores the object returned by the service.
 <p>
 This property is only useful after the service <a href="class_dw_svc_Service.html#dw_svc_Service_call_Object_DetailAnchor">call(Object...)</a> completes, and is the same as the object
 inside the <a href="class_dw_svc_Result.html">Result</a>.
 * @memberOf dw.svc.Service
 * @return {Object} Object returned by the service.
 */
dw.svc.Service.prototype.getResponse = function() {};

/**
 * Returns the current URL, excluding any custom query parameters.
 * @memberOf dw.svc.Service
 * @return {String} URL.
 */
dw.svc.Service.prototype.getURL = function() {};

/**
 * Returns the status of whether this service is executing in mock mode.
 * @memberOf dw.svc.Service
 * @return {Boolean} true for mock mode, false otherwise.
 */
dw.svc.Service.prototype.isMock = function() {};

/**
 * Returns the status of whether this service will throw an error when encountering a problem.
 * @memberOf dw.svc.Service
 * @return {Boolean} true to throw an error, false otherwise.
 */
dw.svc.Service.prototype.isThrowOnError = function() {};

/**
 * Override the Credential by the credential object with the given ID.
 <p>
 If the URL is also overridden, that URL will continue to override the URL in this credential.
 * @memberOf dw.svc.Service
 * @param {String} id - Credential ID. It must exist.
 * @return {dw.svc.Service} this Service.
 */
dw.svc.Service.prototype.setCredentialID = function(id) {};

/**
 * Forces the mock mode to be enabled.
 * @memberOf dw.svc.Service
 * @return {dw.svc.Service} this Service.
 */
dw.svc.Service.prototype.setMock = function() {};

/**
 * Forces a Service to throw an error when there is a problem instead of returning a Result with non-OK status.
 * @memberOf dw.svc.Service
 * @return {dw.svc.Service} this Service.
 */
dw.svc.Service.prototype.setThrowOnError = function() {};

/**
 * Override the URL to the given value. Any query parameters (if applicable) will be appended to this URL.
 * @memberOf dw.svc.Service
 * @param {String} url - Force the URL to the given value.
 * @return {dw.svc.Service} this Service.
 */
dw.svc.Service.prototype.setURL = function(url) {};

/**
 * Defines callbacks for use with the <a href="class_dw_svc_ServiceRegistry.html">ServiceRegistry</a>.
 <p>
 Note this class itself is not used directly, and is present only for documentation
 of the available callback methods.
 * @class
 * @extends Object
 * @abstract
 */
dw.svc.ServiceCallback = function() {};
dw.svc.ServiceCallback.prototype = new Object();

/**
 * Creates a request object to be used when calling the service.
 <p>
 The type of the object expected is dependent on the service. For example, the <a href="class_dw_svc_HTTPServiceDefinition.html">HTTPServiceDefinition</a> expects the
 HTTP request body to be returned.
 <p>
 This is required unless the execute method is implemented.
 * @memberOf dw.svc.ServiceCallback
 * @param {dw.svc.Service} service - Service being executed.
 * @param {Object[]} params - Parameters given to the call method.
 * @return {Object} Request object to give to the execute method.
 * @abstract
 * @varArgs
 */
dw.svc.ServiceCallback.prototype.createRequest = function(service, params) {};

/**
 * Provides service-specific execution logic.
 <p>
 This can be overridden to execute a chain of FTP commands in the <a href="class_dw_svc_FTPServiceDefinition.html">FTPServiceDefinition</a>, or perform the actual remote
 call on a webservice stub in the <a href="class_dw_svc_SOAPServiceDefinition.html">SOAPServiceDefinition</a>.
 * @memberOf dw.svc.ServiceCallback
 * @param {dw.svc.Service} service - Service being executed.
 * @param {Object} request - Request object returned by <a href="class_dw_svc_ServiceCallback.html#dw_svc_ServiceCallback_createRequest_Service_Object_DetailAnchor">createRequest(Service, Object...)</a>.
 * @return {Object} Response from the underlying call, to be sent to {@link #parseResponse(Service, Object)}.
 * @throws Exception
 * @abstract
 */
dw.svc.ServiceCallback.prototype.execute = function(service, request) {};

/**
 * Allows filtering communication request and response log messages.
 <p>
 If not implemented, then no filtering will be performed and the message will be logged as-is.
 * @memberOf dw.svc.ServiceCallback
 * @param {String} msg - Original log message.
 * @return {String} Message to be logged.
 * @abstract
 */
dw.svc.ServiceCallback.prototype.filterLogMessage = function(msg) {};

/**
 * Creates a communication log message for the given request.
 <p>
 If not implemented then the default logic will be used to convert the request into a log message.
 <p>
 * @memberOf dw.svc.ServiceCallback
 * @param {Object} request - Request object.
 * @return {String} Log message, or null to create and use the default message.
 * @abstract
 */
dw.svc.ServiceCallback.prototype.getRequestLogMessage = function(request) {};

/**
 * Creates a response log message for the given request.
 <p>
 If not implemented then the default logic will be used to convert the response into a log message.
 <p>
 * @memberOf dw.svc.ServiceCallback
 * @param {Object} response - Response object.
 * @return {String} Log message, or null to create and use the default message.
 * @abstract
 */
dw.svc.ServiceCallback.prototype.getResponseLogMessage = function(response) {};

/**
 * Allows overriding the URL provided by the service configuration.
 * @memberOf dw.svc.ServiceCallback
 * @return {String} URL to use. The default behavior is to use the URL from the service configuration.
 * @abstract
 */
dw.svc.ServiceCallback.prototype.getURL = function() {};

/**
 * Creates a protocol-specific client object.
 <p>
 This does not normally need to be implemented, except in the case of SOAP services.
 <p>
 Example declaration:
 <pre>
 initServiceClient: function( svc:SOAPService ) {
 }
 </pre>
 * @memberOf dw.svc.ServiceCallback
 * @param {dw.svc.Service} service
 * @return {Object} Client object
 * @throws Exception
 * @abstract
 */
dw.svc.ServiceCallback.prototype.initServiceClient = function(service) {};

/**
 * Override this method to mock the remote portion of the service call.
 <p>
 Other callbacks like createRequest and parseResponse are still called.
 * @memberOf dw.svc.ServiceCallback
 * @param {dw.svc.Service} service - Service being executed.
 * @param {Object} requestObj - Request object returned by <a href="class_dw_svc_ServiceCallback.html#dw_svc_ServiceCallback_createRequest_Service_Object_DetailAnchor">createRequest(Service, Object...)</a>.
 * @return {Object} Mock response, to be sent to {@link #parseResponse(Service, Object)}.
 * @throws Exception
 * @abstract
 */
dw.svc.ServiceCallback.prototype.mockCall = function(service, requestObj) {};

/**
 * Override this method to mock the entire service call, including the createRequest, execute, and parseResponse phases.
 * @memberOf dw.svc.ServiceCallback
 * @param {dw.svc.Service} service - Service being executed.
 * @param {Object[]} args - Arguments from the Service call method.
 * @return {Object} Object to return in the service call's {@link dw.svc.Result}.
 * @throws Exception
 * @abstract
 * @varArgs
 */
dw.svc.ServiceCallback.prototype.mockFull = function(service, args) {};

/**
 * Creates a response object from a successful service call.
 <p>
 This response object will be the output object of the call method's Result.
 * @memberOf dw.svc.ServiceCallback
 * @param {dw.svc.Service} service - Service being executed.
 * @param {Object} response - Service-specific response object. For example, the <a href="class_dw_svc_HTTPServiceDefinition.html">HTTPServiceDefinition</a> service provides the             underlying  <a href="class_dw_net_HTTPClient.html">HTTPClient</a> object that made the HTTP call.
 * @return {Object} Object to return in the service call's {@link dw.svc.Result}.
 * @abstract
 */
dw.svc.ServiceCallback.prototype.parseResponse = function(service, response) {};

/**
 * Configuration object for Services.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.svc.ServiceConfig = function() {};
dw.svc.ServiceConfig.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the related service credentials.
 * @memberOf dw.svc.ServiceConfig
 * @return {dw.svc.ServiceCredential} Related service credentials.
 */
dw.svc.ServiceConfig.prototype.getCredential = function() {};

/**
 * Returns the unique Service ID.
 * @memberOf dw.svc.ServiceConfig
 * @return {String} unique Service ID.
 */
dw.svc.ServiceConfig.prototype.getID = function() {};

/**
 * Returns the related service profile.
 * @memberOf dw.svc.ServiceConfig
 * @return {dw.svc.ServiceProfile} Related service profile.
 */
dw.svc.ServiceConfig.prototype.getProfile = function() {};

/**
 * Returns the type of the service, such as HTTP or SOAP.
 * @memberOf dw.svc.ServiceConfig
 * @return {String} Type of the service, such as HTTP or SOAP.
 */
dw.svc.ServiceConfig.prototype.getServiceType = function() {};

/**
 * Configuration object for Service Credentials.
 * @class
 * @extends dw.customer.EncryptedObject
 */
dw.svc.ServiceCredential = function() {};
dw.svc.ServiceCredential.prototype = new dw.customer.EncryptedObject();

/**
 * Constant for specification of the public key encryption algorithm RSA.
 * @type String
 * @memberOf dw.svc.ServiceCredential
 * @see <a href="class_dw_svc_ServiceCredential.html#dw_svc_ServiceCredential_getEncryptedPassword_String_CertificateRef_DetailAnchor">getEncryptedPassword(String, CertificateRef)</a>
 * @static
 * @const
 */
dw.svc.ServiceCredential.ENCRYPTION_ALGORITHM_RSA = '';

/**
 * Encrypts the password from this object with the given algorithm
 and the public key taken from a certificate in the keystore.
 Returned is the base64-encoded representation of the result. <p/>
 See also <a href="class_dw_crypto_Cipher.html#dw_crypto_Cipher_encrypt_2_String_CertificateRef_String_String_int_DetailAnchor">Cipher.encrypt(String, CertificateRef, String, String, Number)</a> on how to generate RSA key pairs.
 * @memberOf dw.svc.ServiceCredential
 * @param {String} algorithm - The algorithm to be used for the encryption of this password.             Currently only "RSA" is supported.<p/>
 * @param {dw.crypto.CertificateRef} publicKey - A reference to a trusted certificate entry containing             the public key in the keystore.<p/>
 * @return {String} the base64-encoded representation of the password.
 */
dw.svc.ServiceCredential.prototype.getEncryptedPassword = function(algorithm, publicKey) {};

/**
 * Returns the unique Credential ID.
 * @memberOf dw.svc.ServiceCredential
 * @return {String} unique Credential ID.
 */
dw.svc.ServiceCredential.prototype.getID = function() {};

/**
 * Returns the Password in plain text.
 * @memberOf dw.svc.ServiceCredential
 * @return {String} Password.
 */
dw.svc.ServiceCredential.prototype.getPassword = function() {};

/**
 * Return the URL.
 * @memberOf dw.svc.ServiceCredential
 * @return {String} URL.
 */
dw.svc.ServiceCredential.prototype.getURL = function() {};

/**
 * Returns the User ID.
 * @memberOf dw.svc.ServiceCredential
 * @return {String} User ID.
 */
dw.svc.ServiceCredential.prototype.getUser = function() {};

/**
 * Register a callback to handle custom portions of the service.
 <p>
 This callback may declare multiple methods:

 <pre>
 {
   initServiceClient: function() {
       // Create and return the internal service client object.
       // This is usually optional, except in the case of SOAP services.
   },

   // svc is the call-specific Service instance. For example, it may be an HTTPService or FTPService.
   // params are the arguments passed to the call method (if any).
   createRequest: function(svc:Service, params) {
        // Perform any required call-time configuration.
        // Optionally return a Service-specific object
   },

   // svc is the call-specific Service instance.
   // arg is the output of createRequest.
   execute: function(svc:Service, arg:Object) {
        // Execute the service call and return a result
        // This method is not required for HTTP-related services.
   },

   // svc is the call-specific Service instance.
   // response is the output of execute.
   parseResponse: function(svc:Service, response: Object) {
        // Process the response object as needed.
        // The return value of this method will be the return value of the outer call method.
   },

   // svc is the call-specific Service instance.
   // arg is the output of createRequest.
   mockCall: function(svc:Service, arg:Object) {
        // This method takes the place of the 'execute' phase when mocking is enabled.
        // Note initServiceClient, createRequest, and parseResponse still invoked.
   },

   // svc is the call-specific Service instance.
   // params are the arguments passed to the call method (if any).
   mockFull: function(svc:Service, params) {
        // This method takes the place of the entire service call when mocking is enabled.
        // No other callbacks are invoked. The output of this method becomes the output of call.
   }

 }
 </pre>
 * @memberOf dw.svc.ServiceDefinition
 * @param {Object} config - Callback object.
 * @return {dw.svc.ServiceDefinition} this
 */
dw.svc.ServiceDefinition.prototype.configure = function(config) {};

/**
 * Returns the Service Configuration stored in the database.
 * @memberOf dw.svc.ServiceDefinition
 * @return {dw.svc.ServiceConfig} Service Configuration.
 */
dw.svc.ServiceDefinition.prototype.getConfiguration = function() {};

/**
 * Returns the name of this service.
 * @memberOf dw.svc.ServiceDefinition
 * @return {String} Service name.
 */
dw.svc.ServiceDefinition.prototype.getServiceName = function() {};

/**
 * Returns the status of whether mock mode is enabled for all instances of this definition.
 * @memberOf dw.svc.ServiceDefinition
 * @return {Boolean} true for mock mode, false otherwise.
 */
dw.svc.ServiceDefinition.prototype.isMock = function() {};

/**
 * Returns the status of whether the shared throwOnError flag is set.
 * @memberOf dw.svc.ServiceDefinition
 * @return {Boolean} throwOnError flag.
 */
dw.svc.ServiceDefinition.prototype.isThrowOnError = function() {};

/**
 * Sets the mock mode for all Service instances that use this definition.
 * @memberOf dw.svc.ServiceDefinition
 * @return {dw.svc.ServiceDefinition} this Service Definition.
 */
dw.svc.ServiceDefinition.prototype.setMock = function() {};

/**
 * Sets the throwOnError flag to true for all Service instances that use this definition.
 * @memberOf dw.svc.ServiceDefinition
 * @return {dw.svc.ServiceDefinition} this Service Definition.
 */
dw.svc.ServiceDefinition.prototype.setThrowOnError = function() {};

/**
 * Configuration object for Service Profiles.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.svc.ServiceProfile = function() {};
dw.svc.ServiceProfile.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the maximum number of errors in an interval allowed by the circuit breaker.
 * @memberOf dw.svc.ServiceProfile
 * @return {Number} Maximum number of errors in an interval allowed by the circuit breaker.
 */
dw.svc.ServiceProfile.prototype.getCbCalls = function() {};

/**
 * Returns the interval of the circuit breaker in milliseconds.
 * @memberOf dw.svc.ServiceProfile
 * @return {Number} Circuit breaker interval in milliseconds.
 */
dw.svc.ServiceProfile.prototype.getCbMillis = function() {};

/**
 * Returns the unique Service ID.
 * @memberOf dw.svc.ServiceProfile
 * @return {String} unique Service ID
 */
dw.svc.ServiceProfile.prototype.getID = function() {};

/**
 * Returns the maximum number of calls in an interval allowed by the rate limiter.
 * @memberOf dw.svc.ServiceProfile
 * @return {Number} Maximum number of calls in an interval allowed by the rate limiter.
 */
dw.svc.ServiceProfile.prototype.getRateLimitCalls = function() {};

/**
 * Returns the interval of the rate limiter in milliseconds.
 * @memberOf dw.svc.ServiceProfile
 * @return {Number} Interval of the rate limiter in milliseconds.
 */
dw.svc.ServiceProfile.prototype.getRateLimitMillis = function() {};

/**
 * Returns the service call timeout in milliseconds.
 * @memberOf dw.svc.ServiceProfile
 * @return {Number} Service call timeout in milliseconds.
 */
dw.svc.ServiceProfile.prototype.getTimeoutMillis = function() {};

/**
 * The ServiceRegistry is responsible for managing Service definitions and their instances.
 <p>
 Typical usage involves several steps:
 <ol>
 <li>The service is defined in the Business Manager and configured with necessary credentials.</li>
 <li>The service callback is configured once during cartridge initialization:

 <pre>
 ServiceRegistry.configure("MyFTPService", {
     mockExec : function(svc:FTPService, params) {
         return [
             { "name": "file1", "timestamp": new Date(2011, 02, 21)},
             { "name": "file2", "timestamp": new Date(2012, 02, 21)},
             { "name": "file3", "timestamp": new Date(2013, 02, 21)}
         ];
     },
     createRequest: function(svc:FTPService, params) {
         svc.setOperation("list", "/");
     },
     parseResponse : function(svc:FTPService, listOutput) {
         var x : Array = [];
         var resp : Array = listOutput;
         for(var i = 0; i < resp.length; i++) {
             var f = resp[i];
             x.push( { "name": f['name'], "timestamp": f['timestamp'] } );
         }
         return x;
     }
 });
 </pre>

 </li>
 <li>A new service instance is created and called in order to perform the operation:

 <pre>
 var result : Result = ServiceRegistry.get("MyFTPService").call();
 if(result.status == 'OK') {
     // The result.object is the object returned by the 'after' callback.
 } else {
     // Handle the error. See result.error for more information.
 }
 </pre>

 </li>
 </ol>

 See <a href="class_dw_svc_ServiceCallback.html">ServiceCallback</a> for all the callback options, and individual <a href="class_dw_svc_ServiceDefinition.html">ServiceDefinition</a>
 classes for customization specific to a service type.
 * @class
 * @extends Object
 */
dw.svc.ServiceRegistry = function() {};
dw.svc.ServiceRegistry.prototype = new Object();

/**
 * Configure the given serviceId with a callback.
 <p>
 This service must already exist. If it is already configured, the given callback will replace any existing one.
 * @memberOf dw.svc.ServiceRegistry
 * @param {String} serviceID - Unique Service ID.
 * @param {Object} configObj - Configuration callback. See <a href="class_dw_svc_ServiceCallback.html">ServiceCallback</a> for a description of available callback methods.
 * @return {dw.svc.ServiceDefinition} Associated {@link dw.svc.ServiceDefinition}, which can be used for further protocol-specific          configuration.
 * @static
 */
dw.svc.ServiceRegistry.configure = function(serviceID, configObj) {};

/**
 * Constructs a new instance of the given service.
 * @memberOf dw.svc.ServiceRegistry
 * @param {String} serviceID - Unique Service ID.
 * @return {dw.svc.Service} Service instance.
 * @static
 */
dw.svc.ServiceRegistry.get = function(serviceID) {};

/**
 * Returns an existing Service.
 <p>
 This Service configuration is shared across all ServiceInstances returned by <a href="class_dw_svc_ServiceRegistry.html#dw_svc_ServiceRegistry_get_String_DetailAnchor">get(String)</a>.
 * @memberOf dw.svc.ServiceRegistry
 * @param {String} serviceID - Unique Service Id
 * @return {dw.svc.ServiceDefinition} Service
 * @throws Exception if the service does not exist.
 * @static
 */
dw.svc.ServiceRegistry.getDefinition = function(serviceID) {};

/**
 * Returns the status of whether the given service has been configured with a callback.
 * @memberOf dw.svc.ServiceRegistry
 * @param {String} serviceID - Unique Service ID.
 * @return {Boolean} true if configure has already been called, false otherwise.
 * @static
 */
dw.svc.ServiceRegistry.isConfigured = function(serviceID) {};

/**
 * Represents a SOAP WebService.
 * @class
 * @extends dw.svc.Service
 */
dw.svc.SOAPService = function() {};
dw.svc.SOAPService.prototype = new dw.svc.Service();

/**
 * Returns the authentication type.
 * @memberOf dw.svc.SOAPService
 * @return {String} Authentication type.
 */
dw.svc.SOAPService.prototype.getAuthentication = function() {};

/**
 * Returns the serviceClient object.
 * @memberOf dw.svc.SOAPService
 * @return {Object} serviceClient object.
 */
dw.svc.SOAPService.prototype.getServiceClient = function() {};

/**
 * Sets the type of authentication. Valid values include "BASIC" and "NONE".
 <p>
 The default value is BASIC.
 * @memberOf dw.svc.SOAPService
 * @param {String} authentication - Type of authentication.
 * @return {dw.svc.SOAPService} this SOAP WebService.
 */
dw.svc.SOAPService.prototype.setAuthentication = function(authentication) {};

/**
 * Sets the serviceClient object. This must be set in the prepareCall method, prior to execute being called.
 * @memberOf dw.svc.SOAPService
 * @param {Object} o - serviceClient object.
 * @return {dw.svc.SOAPService} this SOAP WebService.
 */
dw.svc.SOAPService.prototype.setServiceClient = function(o) {};

/**
 * Represents a SOAP WebService definition.
 * @class
 * @extends dw.svc.ServiceDefinition
 */
dw.svc.SOAPServiceDefinition = function() {};
dw.svc.SOAPServiceDefinition.prototype = new dw.svc.ServiceDefinition();

/**
 *
 * @class
 * @extends dw.customer.AgentUserStatusCodes
 */
dw.system.AgentUserStatusCodes = function() {};
dw.system.AgentUserStatusCodes.prototype = new dw.customer.AgentUserStatusCodes();

/**
 * This class provides functionality to call hooks. A hook is an extension point in the business logic,
 where you can register scripts to customize functionality.
 * @class
 * @extends Object
 */
dw.system.HookMgr = function() {};
dw.system.HookMgr.prototype = new Object();

/**
 * Calls a hook on base of the specified extensionPoint and function. If a hook throws an exception, then
 this method will also throw an exception. If no hook and no system default implementation is provided,
 then this method will return undefined.

 <p>Sample:
 <pre>
 dw.system.HookMgr.callHook( "dw.ocapi.shop.basket.calculate", "calculate", basket );
 </pre>
 </p>
 * @memberOf dw.system.HookMgr
 * @param {String} extensionPoint - the extension point to call
 * @param {String} theFunction - the script function to call
 * @param {Object[]} args - the Array of function parameters
 * @return {Object} the object returned by the hook or undefined
 * @static
 * @varArgs
 */
dw.system.HookMgr.callHook = function(extensionPoint, theFunction, args) {};

/**
 * Checks whether a hook is registered or a system default implementation exists for this extension point.
 <p><i>extensionPoint</i> refers to the same name used to register a script as implementation. With this method it's only
 possible to check for a whole script registered but it is not possible to check, whether an individual function
 is implemented.</p>

 <p>Sample:
 <pre>
 dw.system.HookMgr.hasHook( "dw.ocapi.shop.basket.calculate" );
 </pre>
 </p>
 * @memberOf dw.system.HookMgr
 * @param {String} extensionPoint - the extension point
 * @return {Boolean} true, if a hook is registered or a default implementation exists, otherwise false
 * @static
 */
dw.system.HookMgr.hasHook = function(extensionPoint) {};

/**
 * Class used to wrap internal objects to hide them from
 DemandwareScript code.
 * @class
 * @extends Object
 */
dw.system.InternalObject = function() {};
dw.system.InternalObject.prototype = new Object();

/**
 * Returns a string representation of this object.
 * @memberOf dw.system.InternalObject
 * @return {String} a string representation of this object.
 */
dw.system.InternalObject.prototype.toString = function() {};

/**
 * Returns a string representation of this object.
 * @memberOf dw.system.InternalObject
 * @return {String} a string representation of this object.
 */
dw.system.InternalObject.prototype.valueOf = function() {};

/**
 * <b><u>Reserved for future use</u></b>.
 * @class
 * @extends Object
 * @author ldang
 */
dw.system.JobProcessMonitor = function() {};
dw.system.JobProcessMonitor.prototype = new Object();

/**
 * <b><u>Reserved for future use</u></b>. Gets the total work count.
 * @memberOf dw.system.JobProcessMonitor
 * @return {Number} the total work count.
 */
dw.system.JobProcessMonitor.prototype.getTotalWork = function() {};

/**
 * <b><u>Reserved for future use</u></b>. Gets the work message.
 * @memberOf dw.system.JobProcessMonitor
 * @return {String} the work message.
 */
dw.system.JobProcessMonitor.prototype.getWorkMessage = function() {};

/**
 * <b><u>Reserved for future use</u></b>. Sets the total work count.
 * @memberOf dw.system.JobProcessMonitor
 * @param {Number} totalWork - the total work count.
 */
dw.system.JobProcessMonitor.prototype.setTotalWork = function(totalWork) {};

/**
 * <b><u>Reserved for future use</u></b>. Sets the work message.
 * @memberOf dw.system.JobProcessMonitor
 * @param {String} msg - the messageto use. If msg is null, then an empty string will  be used.
 */
dw.system.JobProcessMonitor.prototype.setWorkMessage = function(msg) {};

/**
 * <b><u>Reserved for future use</u></b>. Increments the count of work items by the value of the specified
 parameter.
 * @memberOf dw.system.JobProcessMonitor
 * @param {Number} worked - the number of items worked.
 */
dw.system.JobProcessMonitor.prototype.worked = function(worked) {};

/**
 * A log4j like logger instance. To obtain such an instance, use the
 <a href="class_dw_system_Logger.html#dw_system_Logger_getRootLogger_DetailAnchor">Logger.getRootLogger()</a> or <a href="class_dw_system_Logger.html#dw_system_Logger_getLogger_String_DetailAnchor">Logger.getLogger(String)</a> or <a href="class_dw_system_Logger.html#dw_system_Logger_getLogger_String_String_DetailAnchor">Logger.getLogger(String,String)</a>
 methods.
 * @class
 * @extends Object
 */
dw.system.Log = function() {};
dw.system.Log.prototype = new Object();

/**
 * The method reports an debug level message. Arguments can be embedded
 into the message, e.g. like "Failure {0} in {1}". The method implements
 the Java MessageFormat.format() syntax.
 * @memberOf dw.system.Log
 * @param {String} msg - the message to log.
 * @param {Object[]} args - the arguments to insert into the message.
 * @varArgs
 */
dw.system.Log.prototype.debug = function(msg, args) {};

/**
 * The method reports an error level message. Arguments can be embedded
 into the message, e.g. like "Failure {0} in {1}". The method implements
 the Java MessageFormat.format() syntax.
 * @memberOf dw.system.Log
 * @param {String} msg - the message to log.
 * @param {Object[]} args - the arguments to insert into the message.
 * @varArgs
 */
dw.system.Log.prototype.error = function(msg, args) {};

/**
 * The method reports an warning level message. Arguments can be embedded
 into the message, e.g. like "Failure {0} in {1}". The method implements
 the Java MessageFormat.format() syntax.
 Note: Fatal log messages are always enabled and optionally send via
 E-Mail.
 * @memberOf dw.system.Log
 * @param {String} msg - the message to log.
 * @param {Object[]} args - the arguments to insert into the message.
 * @varArgs
 */
dw.system.Log.prototype.fatal = function(msg, args) {};

/**
 * Returns the Nested Diagnostic Context for this script call.
 * @memberOf dw.system.Log
 * @return {dw.system.LogNDC} the nested diagnostic context
 * @static
 */
dw.system.Log.getNDC = function() {};

/**
 * The method reports an information level message. Arguments can be embedded
 into the message, e.g. like "Failure {0} in {1}". The method implements
 the Java MessageFormat.format() syntax.
 * @memberOf dw.system.Log
 * @param {String} msg - the message to log.
 * @param {Object[]} args - the arguments to insert into the message.
 * @varArgs
 */
dw.system.Log.prototype.info = function(msg, args) {};

/**
 * This method returns true if debug logging is enabled for this logging
 instance.
 * @memberOf dw.system.Log
 * @return {Boolean} true if logging of debug messages is enabled, false otherwise.
 */
dw.system.Log.prototype.isDebugEnabled = function() {};

/**
 * This method returns true if error logging is enabled for this logging
 instance.
 * @memberOf dw.system.Log
 * @return {Boolean} true if logging of error messages is enabled, false otherwise.
 */
dw.system.Log.prototype.isErrorEnabled = function() {};

/**
 * This method returns true if information logging is enabled for this logging
 instance.
 * @memberOf dw.system.Log
 * @return {Boolean} true if logging of information messages is enabled, false otherwise.
 */
dw.system.Log.prototype.isInfoEnabled = function() {};

/**
 * This method returns true if warning logging is enabled for this logging
 instance.
 * @memberOf dw.system.Log
 * @return {Boolean} true if logging of warning messages is enabled, false otherwise.
 */
dw.system.Log.prototype.isWarnEnabled = function() {};

/**
 * The method reports an warning level message. Arguments can be embedded
 into the message, e.g. like "Failure {0} in {1}". The method implements
 the Java MessageFormat.format() syntax.
 * @memberOf dw.system.Log
 * @param {String} msg - the message to log.
 * @param {Object[]} args - the arguments to insert into the message.
 * @varArgs
 */
dw.system.Log.prototype.warn = function(msg, args) {};

/**
 * The Logger class provides logging utility methods.
 * @class
 * @extends Object
 */
dw.system.Logger = function() {};
dw.system.Logger.prototype = new Object();

/**
 * The method reports an debug level message. Arguments can be embedded
 into the message, e.g. like "Failure {0} in {1}". The method implements
 the Java MessageFormat.format() syntax.
 * @memberOf dw.system.Logger
 * @param {String} msg - the message to log.
 * @param {Object[]} args - the arguments to insert into the message.
 * @static
 * @varArgs
 */
dw.system.Logger.debug = function(msg, args) {};

/**
 * The method reports an error level message. Arguments can be embedded
 into the message, e.g. like "Failure {0} in {1}". The method implements
 the Java MessageFormat.format() syntax.
 * @memberOf dw.system.Logger
 * @param {String} msg - the message to log.
 * @param {Object[]} args - the arguments to insert into the message.
 * @static
 * @varArgs
 */
dw.system.Logger.error = function(msg, args) {};

/**
 * Returns the logger object for the given category.
 * @memberOf dw.system.Logger
 * @param {String} category - - the category to get the logger for
 * @return {dw.system.Log} the logger object for the given category.
 * @static
 */
dw.system.Logger.getLogger = function(category) {
	return dw.system.Logger;
};

/**
 * Returns the logger objecyt for the given file name prefix and category.
 Throws an exception if maximum number of custom log files per day has already been obtained.
 * @memberOf dw.system.Logger
 * @param {String} fileNamePrefix - - the file name prefix to identify the logger  must not be null or an empty string,  must be at least 3 characters long,  can contain characters a-z A-Z 0-9 '-' '_' only,  can have up to 25 characters  must not start or end with '-' or '_'  can only start or end with a-z A-Z 0-9
 * @param {String} category - - the category to get the logger for, must not be null
 * @return {dw.system.Log} the logger object for the given category.
 * @static
 */
dw.system.Logger.getLogger = function(fileNamePrefix, category) {};

/**
 * Returns the root logger object.
 * @memberOf dw.system.Logger
 * @return {dw.system.Log} the root logger object.
 * @static
 */
dw.system.Logger.getRootLogger = function() {};

/**
 * The method reports an information level message. Arguments can be embedded
 into the message, e.g. like "Failure {0} in {1}". The method implements
 the Java MessageFormat.format() syntax.
 * @memberOf dw.system.Logger
 * @param {String} msg - the message to log.
 * @param {Object[]} args - the arguments to insert into the message.
 * @static
 * @varArgs
 */
dw.system.Logger.info = function(msg, args) {};

/**
 * This method returns true if debug logging is enabled.
 * @memberOf dw.system.Logger
 * @return {Boolean} true if logging of debug messages is enabled, false otherwise.
 * @static
 */
dw.system.Logger.isDebugEnabled = function() {};

/**
 * This method returns true if error logging is enabled.
 * @memberOf dw.system.Logger
 * @return {Boolean} true if logging of error messages is enabled, false otherwise.
 * @static
 */
dw.system.Logger.isErrorEnabled = function() {};

/**
 * This method returns true if info logging is enabled.
 * @memberOf dw.system.Logger
 * @return {Boolean} true if logging of info messages is enabled, false otherwise.
 * @static
 */
dw.system.Logger.isInfoEnabled = function() {};

/**
 * This method returns true if warning logging is enabled.
 * @memberOf dw.system.Logger
 * @return {Boolean} true if logging of warn messages is enabled, false otherwise.
 * @static
 */
dw.system.Logger.isWarnEnabled = function() {};

/**
 * The method reports an warning level message. Arguments can be embedded
 into the message, e.g. like "Failure {0} in {1}". The method implements
 the Java MessageFormat.format() syntax.
 * @memberOf dw.system.Logger
 * @param {String} msg - the message to log.
 * @param {Object[]} args - the arguments to insert into the message.
 * @static
 * @varArgs
 */
dw.system.Logger.warn = function(msg, args) {};

/**
 * A Nested Diagnostic Context, or NDC in short, is an instrument to distinguish
 interleaved log output from different sources. Log output is typically
 interleaved when a server handles multiple script calls near-simultaneously.
 * @class
 * @extends Object
 */
dw.system.LogNDC = function() {};
dw.system.LogNDC.prototype = new Object();

/**
 * Looks at the last diagnostic context at the top of this NDC without
 removing it.
 The returned value is the value that was pushed last. If no context is
 available, then the empty string "" is returned.
 * @memberOf dw.system.LogNDC
 * @return {String} String The innermost diagnostic context.
 */
dw.system.LogNDC.prototype.peek = function() {};

/**
 * Clients should call this method before leaving a diagnostic context.
 The returned value is the value that was pushed last.
 If no context is available, then the empty string "" is returned.
 NOTE: The NDC is removed after every script execution.
 * @memberOf dw.system.LogNDC
 * @return {String} String The innermost diagnostic context.
 */
dw.system.LogNDC.prototype.pop = function() {};

/**
 * Push new diagnostic context information for the current script execution.
 * @memberOf dw.system.LogNDC
 * @param {String} message - - The new diagnostic context information.
 */
dw.system.LogNDC.prototype.push = function(message) {};

/**
 * Remove the diagnostic context for this script call.
 * @memberOf dw.system.LogNDC
 */
dw.system.LogNDC.prototype.remove = function() {};

/**
 * OrganizationPreferences is a container for custom global (i.e.
 organization-level) attributes. The object corresponds with system object
 definition "OrganizationPreferences". It has no system attributes and exists
 only as a place for merchants to define custom attributes which need to be
 available to all of their sites.
 <p/>
 An instance is obtained by calling <a href="class_dw_system_System.html#dw_system_System_getPreferences_DetailAnchor">System.getPreferences()</a>.
 Once an instance of the container is obtained, it is possible to read/write
 organization preference values by using the usual syntax for
 <a href="class_dw_object_ExtensibleObject.html">ExtensibleObject</a> instances. For example:
 <pre>
 var orgPrefs : OrganizationPreferences = dw.system.System.getPreferences();
 var myOrgPrefValue : String = orgPrefs.getCustom()["myOrgPref"];
 </pre>
 <p/>
 <b>Note:</b> this class allows access to sensitive security-related data.
 Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 <p/>
 Demandware defines many organization-level preferences, relating to
 locale, timezone, geolocations, etc, which can be managed within the
 "Global Preferences" module of the Business Manager, but these preferences
 are not accessible through this object.
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.system.OrganizationPreferences = function() {};
dw.system.OrganizationPreferences.prototype = new dw.object.ExtensibleObject();

/**
 * The class provides access to the values in the pipeline dictionary. You use
 dynamic properties to access values, such as pdict.myvalue or
 pdict['myvalue'];
 <p/>
 The class is used in two different contexts, one where access is limited to
 the declared input/output values and second to a context with full access.
 Inside scripts, the PipelineDictionary allows you to access declared in/out
 values (regardless of the alias used in the pipeline and the actual key under
 which the value is stored). In templates and pipelines, all values can be
 accessed. In templates the pipeline dictionary is exposed as variable pdict
 (e.g. ${pdict.Product.ID}).
 <p/>
 There are several values that are automatically stored in the
 PipelineDictionary with each request. These include but are not limited to:

 <ul>
 <li>CurrentSession</li>
 <li>CurrentRequest</li>
 <li>CurrentHttpParameterMap</li>
 <li>CurrentForms</li>
 <li>CurrentCustomer</li>
 <li>etc.</li>
 </ul>
 * @class
 * @extends Object
 */
dw.system.PipelineDictionary = function() {};
dw.system.PipelineDictionary.prototype = new Object();

/**
 * Represents a request in the Demandware system. Each pipeline dictionary contains a CurrentRequest object, which is of
 type dw.system.Request. Most requests are HTTP requests, so you can use this object to get information about the HTTP
 request, such as the HTTP headers. You can also get a list of cookies, if any, associated with the request. If the
 request is issued from a job, the request is not an HTTP request, so HTTP-related methods return null.
 * @class
 * @extends Object
 */
dw.system.Request = function() {};
dw.system.Request.prototype = new Object();

/**
 * Adds the specified cookie to the outgoing response. This method can be called multiple times to set more than one
 cookie. If a cookie with the same cookie name, domain and path is set multiple times for the same response, only
 the last set cookie with this name is send to the client. This method can be used to set, update or delete
 cookies at the client. If the cookie doesn't exist at the client, it is set initially. If a cookie with the same
 name, domain and path already exists at the client, it is updated. A cookie can be deleted at the client by
 submitting a cookie with the maxAge attribute set to 0 (see <code>Cookie.setMaxAge()
 </code> for more information).

 <pre>
 <u>Example, how a cookie can be deleted at the client:</u><br/>
 var cookie : Cookie = new Cookie("SomeName", "Simple Value");<br/>
 cookie.setMaxAge(0);<br/>
 request.addHttpCookie(cookie);<br/>
 </pre>
 * @memberOf dw.system.Request
 * @param {dw.web.Cookie} cookie - a Cookie object
 * @deprecated Use <a href="class_dw_system_Response.html#dw_system_Response_addHttpCookie_Cookie_DetailAnchor">Response.addHttpCookie(Cookie)</a> instead.
 */
dw.system.Request.prototype.addHttpCookie = function(cookie) {};

/**
 * Returns all of the custom attributes associated with the request. The attributes are stored for the life time of
 the request.
 * @memberOf dw.system.Request
 * @return {dw.object.CustomAttributes} all of the custom attributes associated with the request.
 */
dw.system.Request.prototype.getCustom = function() {};

/**
 * Returns the physical location for the current request, if available. The location is calculated based on the IP
 address of the request. Note, if the geolocation tracking feature is not enabled, this method always returns
 null.
 * @memberOf dw.system.Request
 * @return {dw.util.Geolocation} The geolocation of the current request, or null if this is not available.
 */
dw.system.Request.prototype.getGeolocation = function() {};

/**
 * Returns the Cookies object, which can be used to read cookies sent by the client. Use the method
 <code>Response.addHttpCookie()</code> to add a cookie to the outgoing response.
 * @memberOf dw.system.Request
 * @return {dw.web.Cookies} Cookies object or null if this is not an HTTP request
 */
dw.system.Request.prototype.getHttpCookies = function() {};

/**
 * Returns a Map containing all HTTP header values.
 * @memberOf dw.system.Request
 * @return {dw.util.Map} a Map containing all HTTP header values.
 */
dw.system.Request.prototype.getHttpHeaders = function() {};

/**
 * Returns the host name or null if there is no host name.
 * @memberOf dw.system.Request
 * @return {String} the host name or null if there is no host name.
 */
dw.system.Request.prototype.getHttpHost = function() {};

/**
 * Returns the locale or null if there is no associated locale.
 * @memberOf dw.system.Request
 * @return {String} the locale or null.
 */
dw.system.Request.prototype.getHttpLocale = function() {};

/**
 * Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT.
 * @memberOf dw.system.Request
 * @return {String} the HTTP method
 */
dw.system.Request.prototype.getHttpMethod = function() {};

/**
 * Returns the parameter map that contains the HTTP parameters for the current request.
 * @memberOf dw.system.Request
 * @return {dw.web.HttpParameterMap} the HTTP parameter map
 */
dw.system.Request.prototype.getHttpParameterMap = function() {};

/**
 * Returns a Map containing the raw HTTP parameters sent to the server. The Map contains name/value pairs. Each name
 is a String and each value is a String array.
 * @memberOf dw.system.Request
 * @return {dw.util.Map} a Map containing all the raw HTTP parameters send to the server.
 */
dw.system.Request.prototype.getHttpParameters = function() {};

/**
 * Returns the path.
 * @memberOf dw.system.Request
 * @return {String} the path or null.
 */
dw.system.Request.prototype.getHttpPath = function() {};

/**
 * Returns the HTTP protocol used for this request. Possible values are "http" or "https". If the current activity
 is not related to an HTTP request, for example, when the request is part of a job, this method returns null.
 * @memberOf dw.system.Request
 * @return {String} "http", "https" or null
 */
dw.system.Request.prototype.getHttpProtocol = function() {};

/**
 * Returns the query string or null if there is no query string.
 * @memberOf dw.system.Request
 * @return {String} the query string or null.
 */
dw.system.Request.prototype.getHttpQueryString = function() {};

/**
 * Returns the referer or null if there is no referer.
 * @memberOf dw.system.Request
 * @return {String} the referer or null if there is no referer.
 */
dw.system.Request.prototype.getHttpReferer = function() {};

/**
 * Returns the remote address or null if no remote address is found.
 * @memberOf dw.system.Request
 * @return {String} the remote address or null if no remote address is found.
 */
dw.system.Request.prototype.getHttpRemoteAddress = function() {};

/**
 * Returns the complete URL of the request which was received at the server.
 This URL does not include SEO optimizations.
 * @memberOf dw.system.Request
 * @return {dw.web.URL} the URL as URL object
 */
dw.system.Request.prototype.getHttpURL = function() {};

/**
 * Returns the HTTP user agent or null if there is no user agent.
 * @memberOf dw.system.Request
 * @return {String} the HTTP user agent or null if there is no user agent.
 */
dw.system.Request.prototype.getHttpUserAgent = function() {};

/**
 * Returns the locale of the current request. This locale is set by the system based on the information in the URL.
 It is different from the locale returned by getHttpLocale(), which is the preferred locale sent by the user agent
 * @memberOf dw.system.Request
 * @return {String} the locale of the current request.
 */
dw.system.Request.prototype.getLocale = function() {};

/**
 * Returns the page meta data that are associated with the current request.
 * @memberOf dw.system.Request
 * @return {dw.web.PageMetaData} the page meta data object
 */
dw.system.Request.prototype.getPageMetaData = function() {};

/**
 * Returns the unique identifier of the current request. The unique id is helpful for debugging purpose, e.g. relate
 debug messages to a particular request.
 * @memberOf dw.system.Request
 * @return {String} the unique identifier of the current request.
 */
dw.system.Request.prototype.getRequestID = function() {};

/**
 * Returns the session associated with this request.
 * @memberOf dw.system.Request
 * @return {dw.system.Session} the session associated with this request.
 */
dw.system.Request.prototype.getSession = function() {};

/**
 * Returns the form that was submitted by the client if the request represents a form submission.
 * @memberOf dw.system.Request
 * @return {dw.web.Form} the form which was triggered
 */
dw.system.Request.prototype.getTriggeredForm = function() {};

/**
 * Returns the form action that was triggered by the client if the request represents a form submission.
 * @memberOf dw.system.Request
 * @return {dw.web.FormAction} the action of the form that was triggered
 */
dw.system.Request.prototype.getTriggeredFormAction = function() {};

/**
 * Identifies if this request is an HTTP request. The method returns true, if the current processing is related to a
 HTTP request. For example during a job execution this flag is false.
 * @memberOf dw.system.Request
 * @return {Boolean} true if the current processing is related to a HTTP request, false otherwise.
 */
dw.system.Request.prototype.isHttpRequest = function() {};

/**
 * Returns whether the HTTP communication is secure, which basically means that the communication happens via https.
 If the current activity is not related to an HTTP request the method returns false.
 * @memberOf dw.system.Request
 * @return {Boolean}
 */
dw.system.Request.prototype.isHttpSecure = function() {};

/**
 * Returns true if the request represents a request for a remote include, false if it is a top-level request.
 * @memberOf dw.system.Request
 * @return {Boolean}
 */
dw.system.Request.prototype.isIncludeRequest = function() {};

/**
 * This class represents all script hooks that can be registered to receive notifications about storefront requests.
 It contains the extension points (hook names), and the functions that are called by each extension point.
 A function must be defined inside a JavaScript source and must be exported.
 The script with the exported hook function must be located inside a site cartridge.
 Inside the site cartridge a 'package.json' file with a 'hooks' entry must exist.
 <p>
 <pre>
 "hooks": "./hooks.json"
 </pre>
 </p>
 The hooks entry links to a json file, relative to the 'package.json' file.
 This file lists all registered hooks inside the hooks property:
 <p>
 <pre>
 "hooks": [
      {"name": "dw.system.request.onSession", "script": "./script.js"},
      {"name": "dw.system.request.onRequest", "script": "./script.js"},
 ]
 </pre>
 </p>
 A hook entry has a 'name' and a 'script' property.
 <ul>
 <li>The 'name' contains the extension point, the hook name.</li>
 <li>The 'script' contains the script relative to the hooks file, with the exported hook function.</li>
 </ul>
 * @class
 * @extends Object
 * @author Peter H&auml;nsgen
 * @abstract
 * @interface
 */
dw.system.RequestHooks = function() {};
dw.system.RequestHooks.prototype = new Object();

/**
 * The extension point name dw.system.request.onRequest.
 * @type String
 * @memberOf dw.system.RequestHooks
 * @static
 * @const
 */
dw.system.RequestHooks.extensionPointOnRequest = '';

/**
 * The extension point name dw.system.request.onSession.
 * @type String
 * @memberOf dw.system.RequestHooks
 * @static
 * @const
 */
dw.system.RequestHooks.extensionPointOnSession = '';

/**
 * The function is called by extension point <a href="class_dw_system_RequestHooks.html#dw_system_RequestHooks_extensionPointOnRequest_DetailAnchor">extensionPointOnRequest</a>.
 It is called when a storefront request was received from the client.
 * @memberOf dw.system.RequestHooks
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.system.RequestHooks.prototype.onRequest = function() {};

/**
 * The function is called by extension point <a href="class_dw_system_RequestHooks.html#dw_system_RequestHooks_extensionPointOnSession_DetailAnchor">extensionPointOnSession</a>.
 It is called when a new storefront session was started.
 * @memberOf dw.system.RequestHooks
 * @return {dw.system.Status} <ul><li>Status.OK for success.</li><li>Status.ERROR for error.</li></ul>
 * @abstract
 */
dw.system.RequestHooks.prototype.onSession = function() {};

/**
 * Represents an HTTP response in the Demandware system. An instance of this class is implicitly available within
 Demandware script under the variable "response". Currently the Response object only allows setting cookies and
 specific HTTP headers. It does not provide access to the output stream or allow for sending redirects.
 * @class
 * @extends Object
 */
dw.system.Response = function() {};
dw.system.Response.prototype = new Object();

/**
 * An allowed header name constant for Access-Control-Allow-Credentials
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.ACCESS_CONTROL_ALLOW_CREDENTIALS = '';

/**
 * An allowed header name constant for Access-Control-Allow-Headers
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.ACCESS_CONTROL_ALLOW_HEADERS = '';

/**
 * An allowed header name constant for Access-Control-Allow-Methods
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.ACCESS_CONTROL_ALLOW_METHODS = '';

/**
 * An allowed header name constant for Access-Control-Allow-Origin
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.ACCESS_CONTROL_ALLOW_ORIGIN = '';

/**
 * An allowed header name constant for Access-Control-Expose-Headers
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.ACCESS_CONTROL_EXPOSE_HEADERS = '';

/**
 * An allowed header name constant for Allow
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.ALLOW = '';

/**
 * An allowed header name constant for Content-Disposition
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.CONTENT_DISPOSITION = '';

/**
 * An allowed header name constant for Content-Language
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.CONTENT_LANGUAGE = '';

/**
 * An allowed header name constant for Content-Location
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.CONTENT_LOCATION = '';

/**
 * An allowed header name constant for Content-MD5
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.CONTENT_MD5 = '';

/**
 * An allowed header name constant for Content-Type
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.CONTENT_TYPE = '';

/**
 * An allowed header name constant for Location
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.LOCATION = '';

/**
 * An allowed header name constant for Platform for Privacy Preferences Project
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.PLATFORM_FOR_PRIVACY_PREFERENCES_PROJECT = '';

/**
 * An allowed header name constant for Refresh
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.REFRESH = '';

/**
 * An allowed header name constant for Retry-After
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.RETRY_AFTER = '';

/**
 * An allowed header name constant for Vary
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.VARY = '';

/**
 * An allowed header name constant for X-FRAME-OPTIONS
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.X_FRAME_OPTIONS = '';

/**
 * An allowed value DENY for X-FRAME-OPTIONS
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.X_FRAME_OPTIONS_DENY_VALUE = '';

/**
 * An allowed value SAME-ORIGIN value for X-FRAME-OPTIONS
 * @type String
 * @memberOf dw.system.Response
 * @static
 * @const
 */
dw.system.Response.X_FRAME_OPTIONS_SAMEORIGIN_VALUE = '';

/**
 * Adds the specified cookie to the outgoing response. This method can be called multiple times to set more than one
 cookie. If a cookie with the same cookie name, domain and path is set multiple times for the same response, only
 the last set cookie with this name is send to the client. This method can be used to set, update or delete
 cookies at the client. If the cookie doesn't exist at the client, it is set initially. If a cookie with the same
 name, domain and path already exists at the client, it is updated. A cookie can be deleted at the client by
 submitting a cookie with the maxAge attribute set to 0 (see <code>Cookie.setMaxAge()
 </code> for more information).

 <pre>
 <u>Example, how a cookie can be deleted at the client:</u><br/>
 var cookie : Cookie = new Cookie("SomeName", "Simple Value");<br/>
 cookie.setMaxAge(0);<br/>
 response.addHttpCookie(cookie);<br/>
 </pre>
 * @memberOf dw.system.Response
 * @param {dw.web.Cookie} cookie - a Cookie object
 */
dw.system.Response.prototype.addHttpCookie = function(cookie) {};

/**
 * Adds a response header with the given name and value. This method allows response headers to have multiple
 values.
 * @memberOf dw.system.Response
 * @param {String} name - the name to use for the response header.
 * @param {String} value - the value to use.
 */
dw.system.Response.prototype.addHttpHeader = function(name, value) {};

/**
 * Checks whether the response message header has a field with the specified name.
 * @memberOf dw.system.Response
 * @param {String} name - the name to use.
 * @return {Boolean}
 */
dw.system.Response.prototype.containsHttpHeader = function(name) {};

/**
 * Returns a print writer which can be used to print content directly to the response.
 * @memberOf dw.system.Response
 * @return {dw.io.PrintWriter}
 */
dw.system.Response.prototype.getWriter = function() {};

/**
 * Sends a temporary redirect response (HTTP status 302) to the client for the specified redirect location URL. The
 target location must be a relative or an absolute URL.
 * @memberOf dw.system.Response
 * @param {String} location - the target location as a string, must be not empty
 */
dw.system.Response.prototype.redirect = function(location) {};

/**
 * Sends a redirect response with the given status to the client for the specified redirect
 location URL.
 * @memberOf dw.system.Response
 * @param {String} location - the redirect location, must be not empty
 * @param {Number} status - the status code for this redirect, must be 301, 302 or 307
 */
dw.system.Response.prototype.redirect = function(location, status) {};

/**
 * Sends a temporary redirect response (HTTP status 302) to the client for the specified redirect location URL.
 * @memberOf dw.system.Response
 * @param {dw.web.URL} url - the URL object for the target location, must be not null
 */
dw.system.Response.prototype.redirect = function(url) {};

/**
 * Sends a redirect response with the given status to the client for the specified redirect
 location URL.
 * @memberOf dw.system.Response
 * @param {dw.web.URL} url - the URL object with the redirect location, must be not null
 * @param {Number} status - the status code for this redirect, must be 301, 302 or 307
 */
dw.system.Response.prototype.redirect = function(url, status) {};

/**
 * Sends a redirect response with the given status to the client for the specified redirect
 location URL.
 * @memberOf dw.system.Response
 * @param {dw.web.URLRedirect} redirect - the URLRedirect object with the location and status, must be not null
 */
dw.system.Response.prototype.redirect = function(redirect) {};

/**
 * Sets the content type for this response. This method may only be called before any output is written to the
 response.
 * @memberOf dw.system.Response
 * @param {String} contentType - the MIME type of the content, like "text/html", "application/json" etc.
 */
dw.system.Response.prototype.setContentType = function(contentType) {};

/**
 * Convenience method for <a href="class_dw_system_Response.html#dw_system_Response_setExpires_long_DetailAnchor">setExpires(Number)</a> which takes a Date object.
 * @memberOf dw.system.Response
 * @param {Date} expires
 */
dw.system.Response.prototype.setExpires = function(expires) {};

/**
 * Sets the cache expiration time for the response. The response will only be cached if caching was not disabled
 previously. By default, responses are not cached. This method can be called multiple times during request
 processing. If caching is enabled, the lowest expiration time, resulting from the invocations of the method
 becomes the cache expiration time. This is only used for HTTP requests. Streamed responses cannot be cached. This
 method is an alternative for setting the cache time using the &lt;iscache&gt; tag in ISML templates.
 * @memberOf dw.system.Response
 * @param {Number} expires - the expiration time in milliseconds since January 1, 1970, 00:00:00 GMT
 */
dw.system.Response.prototype.setExpires = function(expires) {};

/**
 * Adds a response header with the given name and value. If one or more value(s) have already been set, the new
 value overwrites the previous one. The containsHeader() method can be used to test for the presence of a header
 before setting its value.
 * @memberOf dw.system.Response
 * @param {String} name - the name to use for the response header.
 * @param {String} value - the value to use.
 */
dw.system.Response.prototype.setHttpHeader = function(name, value) {};

/**
 * Sets the HTTP response code.
 * @memberOf dw.system.Response
 * @param {Number} status - a standard-conform HTTP status code, for example 200 for "OK"
 */
dw.system.Response.prototype.setStatus = function(status) {};

/**
 * Represents a session in the Demandware system. The session has some well defined
 attributes like the current authenticated customer or the click stream, but also
 supports storing custom values in the session.

 The Demandware session handling works in the following way:
 <ul>
 <li>
 A session is created in the Demandware system on the first user click. This is guaranteed even if
 the Demandware system caches the HTML pages. It is not guaranteed when the pages are cached by a CDN.
 </li>
 <li>
 A session is identified with a unique ID, called the session ID.
 </li>
 <li>
 When a session is created the application server calls the pipeline OnSession-Start. It can
 be used to pre-initialize the session, before the actual request hits the server.
 </li>
 <li>
 Demandware uses session stickiness and routes request within on session always to the same
 application server.
 </li>
 <li>
 Session data is also stored in a persistent location.
 </li>
 <li>
 In case of a fail-over situation requests are re-routed to another application server, which than
 loads the session data from the persistent storage.
 </li>
 <li>
 There are two timeouts, a soft one when the session is not used anymore and a
 hard one, which renders a session id invalid if it is too old, independent whether
 it is still used or not. The soft timeout takes care of automatic logout, and clearing
 all privacy data. But it is still possible to use the session id and re-open
 the session. The hard timeout makes it basically impossible to re-open a session
 after a certain time. This hard timeout basically prevents that a session id, which
 for example is accidentally copied into a URL, can be actually used to start a session.
 </li>
 </ul>

 Certain rules apply for what and how much data can be stored in a session:
 <ul>
 <li>
 All primitive types (boolean, number, string, Number, String, Boolean, Date) are supported.
 </li>
 <li>
 All Demandware value types (Money, Quantity, Decimal, Calendar) are supported.
 </li>
 <li>
 String are limited to 2000 characters.
 </li>
 <li>
 All other types must not be stored in a session. In particular persistent object,
 collections and scripted objects can not be stored in a session. The Demandware
 system will report values, which are not supported, with a deprecation message in the log
 files. The value will be stored in the session, but the results are undefined.
 In a future version of Demandware other types then the listed will be not allowed anymore
 and an exception will be thrown.
 </li>
 <li>
 There is a 4k size limit for the overall serialized session.
 </li>
 </ul>
 * @class
 * @extends Object
 */
dw.system.Session = function() {};
dw.system.Session.prototype = new Object();

/**
 * Returns the current click stream if this is an HTTP session, null otherwise.
 * @memberOf dw.system.Session
 * @return {dw.web.ClickStream} the current click stream if this is an HTTP session, null otherwise.
 */
dw.system.Session.prototype.getClickStream = function() {};

/**
 * Get the currency associated with the current session. The session
 currency is established at session construction time and is typically
 equal to the site default currency. In the case of a multi-currency site,
 the session currency may be different than the site default currency.
 * @memberOf dw.system.Session
 * @return {dw.util.Currency} the currency associated with this storefront session, never null.
 */
dw.system.Session.prototype.getCurrency = function() {};

/**
 * Returns the session's custom attributes. The
 attributes are stored for the life time of the session and are not
 cleared when the customer logs out.
 * @memberOf dw.system.Session
 * @return {dw.object.CustomAttributes} the session's custom attributes.
 */
dw.system.Session.prototype.getCustom = function() {};

/**
 * Returns the customer associated with this storefront session. The method
 always returns <code>null</code> if called for a non-storefront session
 (e.g. within a job or within the business manager). For a storefront
 session, the method always returns a customer. The returned customer
 may be anonymous if the customer could not be identified via the
 customer cookie.
 * @memberOf dw.system.Session
 * @return {dw.customer.Customer} the customer associated with this storefront session.
 */
dw.system.Session.prototype.getCustomer = function() {};

/**
 * Returns the forms object that provides access to all current forms of a customer in the session.
 * @memberOf dw.system.Session
 * @return {dw.web.Forms} the forms
 */
dw.system.Session.prototype.getForms = function() {};

/**
 * Returns information on the last source-code handled by the session.
 This may or may not be the session's active source-code, e.g. the
 last received source-code was inactive and therefore was not
 set as the session's active source-code.
 * @memberOf dw.system.Session
 * @return {dw.campaign.SourceCodeInfo} source-code information for the last received source-code.
 */
dw.system.Session.prototype.getLastReceivedSourceCodeInfo = function() {};

/**
 * Returns the session's custom privacy attributes.
 The attributes are stored for the live time of the session and are
 automatically cleared when the customer logs out.
 * @memberOf dw.system.Session
 * @return {dw.object.CustomAttributes} the session's custom privacy attributes.
 */
dw.system.Session.prototype.getPrivacy = function() {};

/**
 * Returns the unique session id. This can safely be used as identifier
 against external systems.
 * @memberOf dw.system.Session
 * @return {String} the unique identifier for the session.
 */
dw.system.Session.prototype.getSessionID = function() {};

/**
 * Returns information on the session's active source-code.
 * @memberOf dw.system.Session
 * @return {dw.campaign.SourceCodeInfo} the session's source-code information.
 */
dw.system.Session.prototype.getSourceCodeInfo = function() {};

/**
 * Returns the current agent user name associated with this session.
 <p/>
 <b>Note:</b> this class allows access to sensitive security-related data.
 Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 * @memberOf dw.system.Session
 * @return {String} the current agent user name associated with this session.
 */
dw.system.Session.prototype.getUserName = function() {};

/**
 * Identifies if the customer associated with this session
 is authenticated or not. This call is equivalent to customer.isAuthenticated().
 * @memberOf dw.system.Session
 * @return {Boolean} true if the customer is authenticated, false otherwise.
 */
dw.system.Session.prototype.isCustomerAuthenticated = function() {};

/**
 * Identifies if the agent user associated with this session
 is authenticated or not.
 * @memberOf dw.system.Session
 * @return {Boolean} true if the agent user is authenticated, false otherwise.
 */
dw.system.Session.prototype.isUserAuthenticated = function() {};

/**
 * Sets the session currency.
 * @memberOf dw.system.Session
 * @param {dw.util.Currency} newCurrency - the new currency to change to, must not be null. Method will             throw an exception if currency not allowed by current site is             passed.
 */
dw.system.Session.prototype.setCurrency = function(newCurrency) {};

/**
 * Applies the specified source-code to the current session. This API processes the source-code exactly as if it
 were supplied on the URL query string, with the additional benefit of returning error information. If no input
 parameter is passed, then the active source code in the session is removed.
 * @memberOf dw.system.Session
 * @param {String} sourceCode - the SourceCode to set as active in the session. If null parameter is passed, then the active             source code in the session is removed.
 * @return {dw.system.Status} an OK status if the source code was applied, otherwise an ERROR status. In the latter case, the possible          error codes are: CODE_INVALID and CODE_INACTIVE. See documentation for          {@link dw.campaign.SourceCodeStatusCodes} for further descriptions.
 */
dw.system.Session.prototype.setSourceCode = function(sourceCode) {};

/**
 * This class represents a site in the Demandware system and provides access to
 several site-level configuration values which are managed from within the
 Business Manager. It is only possible to get a reference to the current site
 as determined by the current request. The static method
 <a href="class_dw_system_Site.html#dw_system_Site_getCurrent_DetailAnchor">Site.getCurrent()</a> returns a reference to the current site.
 * @class
 * @extends Object
 */
dw.system.Site = function() {};
dw.system.Site.prototype = new Object();

/**
 * Returns the allowed currencies of the current site as a collection of
 currency codes.
 * @memberOf dw.system.Site
 * @return {dw.util.List} Collection of allowed site currencies
 */
dw.system.Site.prototype.getAllowedCurrencies = function() {};

/**
 * Returns the allowed locales of the current site as a collection of
 locale ID's.
 * @memberOf dw.system.Site
 * @return {dw.util.List} Collection if allowed site locales
 */
dw.system.Site.prototype.getAllowedLocales = function() {};

/**
 * Returns all sites.
 * @memberOf dw.system.Site
 * @return {dw.util.List} all sites for the current instance
 * @static
 */
dw.system.Site.getAllSites = function() {};

/**
 * Returns a new Calendar object in the time zone of the
 current site.
 * @memberOf dw.system.Site
 * @return {dw.util.Calendar} the Calendar object in the time zone of the  current site.
 * @static
 */
dw.system.Site.getCalendar = function() {};

/**
 * Returns the default currency code for the current site.
 * @memberOf dw.system.Site
 * @return {String} the default currency code for the current site.
 * @deprecated Use <a href="class_dw_system_Site.html#dw_system_Site_getDefaultCurrency_DetailAnchor">getDefaultCurrency()</a> method instead,
 */
dw.system.Site.prototype.getCurrencyCode = function() {};

/**
 * Returns the current site.
 * @memberOf dw.system.Site
 * @return {dw.system.Site} the current site.
 * @static
 */
dw.system.Site.getCurrent = function() {};

/**
 * Returns a custom preference value. If the preference does not exist the
 method returns null.  This method is simply a shortcut method for
 accessing the value for a custom attribute defined on the
 <a href="class_dw_system_SitePreferences.html">SitePreferences</a> object.

 <pre>
 // Method #1
 var mySitePrefValue1 : String =  dw.system.Site.getCurrent().
     getCustomPreferenceValue("mySitePref");

 // Method #2
 var sitePrefs : SitePreferences = dw.system.Site.getCurrent().getPreferences();
 var mySitePrefValue2 : String = sitePrefs.getCustom()["mySitePref"];
 </pre>
 * @memberOf dw.system.Site
 * @param {String} name - preference name.
 * @return {Object} the preference value, or null if there is no preference with the          given name.
 */
dw.system.Site.prototype.getCustomPreferenceValue = function(name) {};

/**
 * Returns the default currency code for the current site.
 * @memberOf dw.system.Site
 * @return {String} the default currency code for the current site.
 */
dw.system.Site.prototype.getDefaultCurrency = function() {};

/**
 * Return default locale for the site.
 * @memberOf dw.system.Site
 * @return {String} default locale for the site.
 */
dw.system.Site.prototype.getDefaultLocale = function() {};

/**
 * Returns the configured HTTP host name. If no host name
 is configured the method returns the instance hostname.
 * @memberOf dw.system.Site
 * @return {String} the configured HTTP host name or if it is not          set the instance hostname.
 */
dw.system.Site.prototype.getHttpHostName = function() {};

/**
 * Returns the configured HTTPS host name. If no host name
 is configured the method returns the HTTP host name or the instance hostname, if
 that is not configured as well.
 * @memberOf dw.system.Site
 * @return {String} the configured HTTPS host name or HTTP host name or the instance hostname.
 */
dw.system.Site.prototype.getHttpsHostName = function() {};

/**
 * Returns the ID of the site.
 * @memberOf dw.system.Site
 * @return {String} the ID of the site.
 */
dw.system.Site.prototype.getID = function() {};

/**
 * Returns a descriptive name for the site.
 * @memberOf dw.system.Site
 * @return {String} a descriptive name for the site.
 */
dw.system.Site.prototype.getName = function() {};

/**
 * This method returns a container of all site preferences of this site.
 * @memberOf dw.system.Site
 * @return {dw.system.SitePreferences} a preferences object containing all system and custom site          preferences of this site
 */
dw.system.Site.prototype.getPreferences = function() {};

/**
 * Returns the code for the time zone in which the storefront is
 running.
 * @memberOf dw.system.Site
 * @return {String} time zone code in which the storefront is  running.
 */
dw.system.Site.prototype.getTimezone = function() {};

/**
 * Returns time zone offset in which the storefront is running.
 * @memberOf dw.system.Site
 * @return {Number} time zone offset in which the storefront is running.
 */
dw.system.Site.prototype.getTimezoneOffset = function() {};

/**
 * Whether oms is active in the current site. This depends on a general
 property which states whether oms is active for the server,
 and a site-dependent preference whether oms is available for the current site.
 * @memberOf dw.system.Site
 * @return {Boolean} whether oms is active in the site
 */
dw.system.Site.prototype.isOMSEnabled = function() {};

/**
 * The method sets a value for a custom preference. The type of the value
 must match with the declared type of the preference definition.
 * @memberOf dw.system.Site
 * @param {String} name - name of the preference
 * @param {Object} value - new value for the preference
 */
dw.system.Site.prototype.setCustomPreferenceValue = function(name, value) {};

/**
 * SitePreferences is a container for custom site-level attributes. The object
 corresponds with system object definition "SitePreferences". It has no system
 attributes and exists only as a place for merchants to define custom
 attributes which need to be available for each site.
 <p/>
 Logically there is only one SitePreferences instance per site. The instance
 is obtained by calling <a href="class_dw_system_Site.html#dw_system_Site_getPreferences_DetailAnchor">Site.getPreferences()</a>. Once an
 instance of the container is obtained, it is possible to read/write site
 preference values by using the usual syntax for
 <a href="class_dw_object_ExtensibleObject.html">ExtensibleObject</a> instances. For example:

 <pre>
 var sitePrefs : SitePreferences = dw.system.Site.getCurrent().getPreferences();
 var mySitePrefValue : String = sitePrefs.getCustom()["mySitePref"];
 </pre>
 <p/>
 <b>Note:</b> this class allows access to sensitive security-related data.
 Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 <p/>
 Demandware defines many site-level preferences, relating to
 baskets, timezone, locales, customers, etc, which can be managed within the
 "Site Preferences" module of the Business Manager, but these preferences are
 not accessible through this object. (SourceCodeURLParameterName is the one
 exception to this rule.)
 * @class
 * @extends dw.object.ExtensibleObject
 */
dw.system.SitePreferences = function() {};
dw.system.SitePreferences.prototype = new dw.object.ExtensibleObject();

/**
 * Returns the name of the source code url paremeter configured for the
 site.
 * @memberOf dw.system.SitePreferences
 * @return {String} source code url parameter name
 */
dw.system.SitePreferences.prototype.getSourceCodeURLParameterName = function() {};

/**
 * Creates a Status object with no StatusItems.
 * @class
 * @extends Object
 */
dw.system.Status = function() {};
dw.system.Status.prototype = new Object();

/**
 * Creates a Status with a single StatusItem. The status is set to the given
 value.
 * @class
 * @extends Object
 * @param {Number} status - either OK or ERROR
 */
dw.system.Status = function(status) {};
dw.system.Status.prototype = new Object();

/**
 * Creates a Status with a single StatusItem. The StatusItem is initialized
 with the given values.
 * @class
 * @extends Object
 * @param {Number} status - either OK or ERROR
 * @param {String} code - a string representing a more detailed status code, e.g. "IMPEX-120"
 */
dw.system.Status = function(status, code) {};
dw.system.Status.prototype = new Object();

/**
 * Creates a Status with a single StatusItem. The StatusItem is initialized
 with the given values.
 * @class
 * @extends Object
 * @param {Number} status - either OK or ERROR
 * @param {String} code - a string representing a more detailed status code, e.g. "IMPEX-120".
 * @param {String} message - a default human readable message
 * @param {Object[]} parameters - a list of parameters to construct a custom message
 * @varArgs
 */
dw.system.Status = function(status, code, message, parameters) {};
dw.system.Status.prototype = new Object();

/**
 * status value to indicate an ERROR status
 * @type Number
 * @memberOf dw.system.Status
 * @static
 */
dw.system.Status.ERROR = 0;

/**
 * status value to indicate an OK status
 * @type Number
 * @memberOf dw.system.Status
 * @static
 */
dw.system.Status.OK = 0;

/**
 * Add detail information for the given key of the first ERROR StatusItem
 or when there is no ERROR StatusItem, the first StatusItem in the overall list.
 * @memberOf dw.system.Status
 * @param {String} key - the key of the first ERROR StatusItem or the first StatusItem  in the list.
 * @param {Object} value - the detail value.
 */
dw.system.Status.prototype.addDetail = function(key, value) {};

/**
 * Adds an additional status item to this status instance.
 * @memberOf dw.system.Status
 * @param {dw.system.StatusItem} item - the status item to add.
 */
dw.system.Status.prototype.addItem = function(item) {};

/**
 * Returns the status code either of the first ERROR StatusItem or when there
 is no ERROR StatusITEM, the first StatusItem in the overall list.

 The status code is the unique identifier for the message and can be used by
 client programs to check for a specific status and to generate a localized
 message.
 * @memberOf dw.system.Status
 * @return {String} the status code
 */
dw.system.Status.prototype.getCode = function() {};

/**
 * Returns the detail value for the given key of the first ERROR StatusItem
 or when there is no ERROR StatusItem, the first StatusItem in the
 overall list.
 * @memberOf dw.system.Status
 * @param {String} key - the key for the detail to return.
 * @return {Object} the detail value for the given key of the first ERROR StatusItem  or when there is no ERROR StatusItem, the first StatusItem in the  overall list.
 */
dw.system.Status.prototype.getDetail = function(key) {};

/**
 * Returns the details either of the first ERROR StatusItem or when there
 is no ERROR StatusItem, the first StatusItem in the overall list.
 * @memberOf dw.system.Status
 * @return {dw.util.Map} the details either of the first ERROR StatusItem or when there  is no ERROR StatusItem, the first StatusItem in the overall list.
 */
dw.system.Status.prototype.getDetails = function() {};

/**
 * Returns all status items.
 * @memberOf dw.system.Status
 * @return {dw.util.List} all status items.
 */
dw.system.Status.prototype.getItems = function() {};

/**
 * Returns the message either of the first ERROR StatusItem or when there
 is no ERROR StatusItem, the first StatusItem in the overall list.

 Note: Custom code and client programs must not use this message to identify
 a specific status. The getCode() must be used for that purpose. The actual
 message can change from release to release.
 * @memberOf dw.system.Status
 * @return {String} the message either of the first ERROR StatusItem or when there  is no ERROR StatusItem, the first StatusItem in the overall list.
 */
dw.system.Status.prototype.getMessage = function() {};

/**
 * Returns the parameters either of the first ERROR StatusItem or when there
 is no ERROR StatusItem, the first StatusItem in the overall list.
 * @memberOf dw.system.Status
 * @return {dw.util.List} the parameters either of the first ERROR StatusItem or when there  is no ERROR StatusItem, the first StatusItem in the overall list.
 */
dw.system.Status.prototype.getParameters = function() {};

/**
 * Returns the overall status. If all StatusItems are OK, the method returns
 OK. If one StatusItem is an ERROR it returns ERROR.
 * @memberOf dw.system.Status
 * @return {Number} either OK or ERROR
 */
dw.system.Status.prototype.getStatus = function() {};

/**
 * Checks if the status is an ERROR. The Status is an ERROR if one of the
 contained StatusItems is an ERROR.
 * @memberOf dw.system.Status
 * @return {Boolean} true if status is an ERROR, false otherwise.
 */
dw.system.Status.prototype.isError = function() {};

/**
 * Constructs a new OK StatusItem.
 * @class
 * @extends Object
 */
dw.system.StatusItem = function() {};
dw.system.StatusItem.prototype = new Object();

/**
 * Constructs a new StatusItem with the given status.
 * @class
 * @extends Object
 * @param {Number} status - either <a href="class_dw_system_Status.html#dw_system_Status_OK_DetailAnchor">Status.OK</a> or   <a href="class_dw_system_Status.html#dw_system_Status_ERROR_DetailAnchor">Status.ERROR</a>.
 */
dw.system.StatusItem = function(status) {};
dw.system.StatusItem.prototype = new Object();

/**
 * Constructs a new StatusItem with the given status and code.
 * @class
 * @extends Object
 * @param {Number} status - either <a href="class_dw_system_Status.html#dw_system_Status_OK_DetailAnchor">Status.OK</a> or   <a href="class_dw_system_Status.html#dw_system_Status_ERROR_DetailAnchor">Status.ERROR</a>.
 * @param {String} code - a string representing a more detailed status code, e.g. "IMPEX-120".
 */
dw.system.StatusItem = function(status, code) {};
dw.system.StatusItem.prototype = new Object();

/**
 * Constructs a new StatusItem with the given values.
 * @class
 * @extends Object
 * @param {Number} status - <a href="class_dw_system_Status.html#dw_system_Status_OK_DetailAnchor">Status.OK</a> or   <a href="class_dw_system_Status.html#dw_system_Status_ERROR_DetailAnchor">Status.ERROR</a>.
 * @param {String} code - a string representing a more detailed status code, e.g. "IMPEX-120".
 * @param {String} message - a default human readable message
 * @param {Object[]} parameters - a list of parameters to construct a custom message
 * @varArgs
 */
dw.system.StatusItem = function(status, code, message, parameters) {};
dw.system.StatusItem.prototype = new Object();

/**
 * Add an additional detail to this StatusItem.
 * @memberOf dw.system.StatusItem
 * @param {String} key - the key for the detail.
 * @param {Object} value - the detail value.
 */
dw.system.StatusItem.prototype.addDetail = function(key, value) {};

/**
 * The status code is the unique identifier for the message and can be used by
 client programs to check for a specific status and to generate a localized
 message.
 * @memberOf dw.system.StatusItem
 * @return {String} the status code.
 */
dw.system.StatusItem.prototype.getCode = function() {};

/**
 * Returns the optional details for this StatusItem.
 * @memberOf dw.system.StatusItem
 * @return {dw.util.Map} the optional details for this StatusItem.
 */
dw.system.StatusItem.prototype.getDetails = function() {};

/**
 * Returns the default human readable message for this Status.

 Note: Custom code and client programs must not use this message to identify
 a specific status. The getCode() must be used for that purpose. The actual
 message can change from release to release.
 * @memberOf dw.system.StatusItem
 * @return {String} the default human readable message for this Status.
 */
dw.system.StatusItem.prototype.getMessage = function() {};

/**
 * Returns the parameters to construct a custom message.
 * @memberOf dw.system.StatusItem
 * @return {dw.util.List} the parameters to construct a custom message.
 */
dw.system.StatusItem.prototype.getParameters = function() {};

/**
 * Returns the status.
 * @memberOf dw.system.StatusItem
 * @return {Number} either {@link dw.system.Status#OK} or  {@link dw.system.Status#ERROR}.
 */
dw.system.StatusItem.prototype.getStatus = function() {};

/**
 * Returns whether this Status Item represents and error.
 * @memberOf dw.system.StatusItem
 * @return {Boolean} true is this item represents an error, false otherwise.
 */
dw.system.StatusItem.prototype.isError = function() {};

/**
 * Method to set the status code.
 The status code is the unique identifier for the message and can be used by
 client programs to check for a specific status and to generate a localized
 message.
 * @memberOf dw.system.StatusItem
 * @param {String} code - the status code.
 */
dw.system.StatusItem.prototype.setCode = function(code) {};

/**
 * Sets the default human readable message for this Status.
 * @memberOf dw.system.StatusItem
 * @param {String} message - the default human readable message for this Status.
 */
dw.system.StatusItem.prototype.setMessage = function(message) {};

/**
 * Sets the parameters for a custom message.
 * @memberOf dw.system.StatusItem
 * @param {Object[]} parameters - the parameters for a custom message.
 */
dw.system.StatusItem.prototype.setParameters = function(parameters) {};

/**
 * Set the status.
 * @memberOf dw.system.StatusItem
 * @param {Number} status - either  <a href="class_dw_system_Status.html#dw_system_Status_OK_DetailAnchor">Status.OK</a> or   <a href="class_dw_system_Status.html#dw_system_Status_ERROR_DetailAnchor">Status.ERROR</a>.
 */
dw.system.StatusItem.prototype.setStatus = function(status) {};

/**
 * Represents the Demandware server instance. An application server instance is configured to be of one of three types,
 "development system", "staging system" or "production system".
 * @class
 * @extends Object
 */
dw.system.System = function() {};
dw.system.System.prototype = new Object();

/**
 * Represents the development system.
 * @type Number
 * @memberOf dw.system.System
 * @static
 * @const
 */
dw.system.System.DEVELOPMENT_SYSTEM = 0;

/**
 * Represents the production system.
 * @type Number
 * @memberOf dw.system.System
 * @static
 * @const
 */
dw.system.System.PRODUCTION_SYSTEM = 0;

/**
 * Represents the staging system.
 * @type Number
 * @memberOf dw.system.System
 * @static
 * @const
 */
dw.system.System.STAGING_SYSTEM = 0;

/**
 * Returns a new Calendar object in the time zone of the
 current instance.
 * @memberOf dw.system.System
 * @return {dw.util.Calendar} a Calendar object in the time zone of the          instance.
 * @static
 */
dw.system.System.getCalendar = function() {};

/**
 * Returns instance hostname.
 * @memberOf dw.system.System
 * @return {String} instance hostname.
 * @static
 */
dw.system.System.getInstanceHostname = function() {};

/**
 * Returns the instance time zone. The instance time zone is the
 time zone in which global actions like jobs or reporting are specified
 in the system.
 * @memberOf dw.system.System
 * @return {String} the instance time zone.
 * @static
 */
dw.system.System.getInstanceTimeZone = function() {};

/**
 * Returns the type of the instance. An application server instance is configured to be of one of three types,
 "development system", "staging system" or "production system".<br/>
 This method returns a constant representing the instance type of <b>this</b>
 application server.
 * @memberOf dw.system.System
 * @return {Number} the instance type of the application server where this method was          called.
 * @see <a href="class_dw_system_System.html#dw_system_System_DEVELOPMENT_SYSTEM_DetailAnchor">DEVELOPMENT_SYSTEM</a>
 * @see <a href="class_dw_system_System.html#dw_system_System_PRODUCTION_SYSTEM_DetailAnchor">PRODUCTION_SYSTEM</a>
 * @see <a href="class_dw_system_System.html#dw_system_System_STAGING_SYSTEM_DetailAnchor">STAGING_SYSTEM</a>
 * @static
 */
dw.system.System.getInstanceType = function() {};

/**
 * This method returns a container of all global preferences of this
 organization (instance).
 * @memberOf dw.system.System
 * @return {dw.system.OrganizationPreferences} a preferences object containing all global system and custom          preferences of this instance
 * @static
 */
dw.system.System.getPreferences = function() {};

/**
 * Represents the current transaction. A transaction provides a context for performing atomic changes to persistent
 business objects. Before a business object can be created, changed, or deleted, a transaction must be started using
 the <a href="class_dw_system_Transaction.html#dw_system_Transaction_begin_DetailAnchor">begin()</a> method. All changes on the touched business objects will only be made durable when the
 transaction is committed with <a href="class_dw_system_Transaction.html#dw_system_Transaction_commit_DetailAnchor">commit()</a>. Without commit, the changes will be lost again after the request was
 served. If a transaction is rolled back, all changes so far will be reverted and the business object will have their
 previous state again. It is possible to begin a transaction multiple times in a nested way (like
 begin-begin-commit-commit). In this case, in order to commit the changes the commit method must be called
 symmetrically as often as begin. It is also possible to run multiple transactions within a single request, one after
 another (like begin-commit-begin-commit). In case of any exception while working with business objects inside of a
 transaction, the transaction cannot be committed anymore, but only be rolled back. Business code may try to take
 appropriate actions if it expects business-related problems at commit (for example, constraint violations).
 <p/>
 Example 1 - explicit control:

 <pre>
 var txn = require('dw/system/Transaction');
 txn.begin();
 // work with business objects here
 txn.commit();
 </pre>
 <p/>
 Example 2 - implicit control:

 <pre>
 var txn = require('dw/system/Transaction');
 txn.wrap(function(){
     // work with business objects here
 });
 </pre>
 * @class
 * @extends Object
 * @author Peter H&auml;nsgen
 */
dw.system.Transaction = function() {};
dw.system.Transaction.prototype = new Object();

/**
 * Begins a transaction.
 * @memberOf dw.system.Transaction
 * @static
 */
dw.system.Transaction.begin = function() {};

/**
 * Commits the current transaction. The transaction must have been started with <a href="class_dw_system_Transaction.html#dw_system_Transaction_begin_DetailAnchor">begin()</a> before.
 * @memberOf dw.system.Transaction
 * @static
 */
dw.system.Transaction.commit = function() {};

/**
 * Rolls back the current transaction. The transaction must have been started with <a href="class_dw_system_Transaction.html#dw_system_Transaction_begin_DetailAnchor">begin()</a> before.
 * @memberOf dw.system.Transaction
 * @static
 */
dw.system.Transaction.rollback = function() {};

/**
 * Encloses the provided callback function in a begin-commit transactional context. If the transaction cannot be
 committed successfully, it is rolled back instead and an exception is thrown.
 * @memberOf dw.system.Transaction
 * @param {org.mozilla.javascript.Function} callback - a function that should be executed within a transactional context
 * @return {Object} the result of the callback function, if it returns something
 * @static
 */
dw.system.Transaction.wrap = function(callback) {
	callback();
};

/**
 * Constructor for a new ArrayList.
 * @class
 * @extends dw.util.List
 */
dw.util.ArrayList = function() {};
dw.util.ArrayList.prototype = new dw.util.List();

/**
 * Constructor for a new ArrayList. The constructor initializes the
 ArrayList with the elements of the given collection.
 * @class
 * @extends dw.util.List
 * @param {dw.util.Collection} collection - the elements to insert into the list.
 */
dw.util.ArrayList = function(collection) {};
dw.util.ArrayList.prototype = new dw.util.List();

/**
 * Constructor for a new ArrayList. The constructor initializes the
 ArrayList with the elements of the given iterator.
 * @class
 * @extends dw.util.List
 * @param {dw.util.Iterator} iterator - the iterator that provides access to the elements to insert             into the list.
 */
dw.util.ArrayList = function(iterator) {};
dw.util.ArrayList.prototype = new dw.util.List();

/**
 * Constructor for a new ArrayList. The constructor initializes the
 ArrayList with the arguments given as constructor parameters. The method
 can also be called with an ECMA array as argument.

 If called with a single ECMA array as argument the individual elements of
 that array are used to initialize the ArrayList. To create an ArrayList
 with a single array as element, create an empty ArrayList and then call
 the method add1() on it.
 * @class
 * @extends dw.util.List
 * @param {Object[]} values - the set of objects to insert into the list.
 * @varArgs
 */
dw.util.ArrayList = function(values) {};
dw.util.ArrayList.prototype = new dw.util.List();

/**
 * Returns a shallow copy of this array list.
 * @memberOf dw.util.ArrayList
 * @return {dw.util.ArrayList} a shallow copy of this array list.
 */
dw.util.ArrayList.prototype.clone = function() {};

/**
 * The Assert class provides utility methods for assertion events.
 * @class
 * @extends Object
 */
dw.util.Assert = function() {};
dw.util.Assert.prototype = new Object();

/**
 * Propagates an assertion
 if the specified objects are not equal.
 * @memberOf dw.util.Assert
 * @param {Object} arg1 - the first object to check.
 * @param {Object} arg2 - the second object to check.
 * @static
 */
dw.util.Assert.areEqual = function(arg1, arg2) {};

/**
 * Propagates an assertion using the specified message
 if the specified objects are not equal.
 * @memberOf dw.util.Assert
 * @param {Object} arg1 - the first object to check.
 * @param {Object} arg2 - the second object to check.
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.areEqual = function(arg1, arg2, msg) {};

/**
 * Propagates an assertion
 if the specified objects are not the same.
 * @memberOf dw.util.Assert
 * @param {Object} arg1 - the first object to check.
 * @param {Object} arg2 - the second object to check.
 * @static
 */
dw.util.Assert.areSame = function(arg1, arg2) {};

/**
 * Propagates an assertion using the specified message
 if the specified objects are not the same.
 * @memberOf dw.util.Assert
 * @param {Object} arg1 - the first object to check.
 * @param {Object} arg2 - the second object to check.
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.areSame = function(arg1, arg2, msg) {};

/**
 * Propagates a failure assertion.
 * @memberOf dw.util.Assert
 * @static
 */
dw.util.Assert.fail = function() {};

/**
 * Propagates a failure assertion using the
 specified message.
 * @memberOf dw.util.Assert
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.fail = function(msg) {};

/**
 * Propagates an assertion
 if the specified check does not evaluate to
 an empty object.
 * @memberOf dw.util.Assert
 * @param {Object} arg - the object to check.
 * @static
 */
dw.util.Assert.isEmpty = function(arg) {};

/**
 * Propagates an assertion using the specified message
 if the specified check does not evaluate to
 an empty object.
 * @memberOf dw.util.Assert
 * @param {Object} arg - the object to check.
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.isEmpty = function(arg, msg) {};

/**
 * Propagates an assertion if the
 specified check does not evaluate to false.
 * @memberOf dw.util.Assert
 * @param {Boolean} check - the condition to check.
 * @static
 */
dw.util.Assert.isFalse = function(check) {};

/**
 * Propagates an assertion using the specified message
 if the specified check does not evaluate to false.
 * @memberOf dw.util.Assert
 * @param {Boolean} check - the condition to check.
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.isFalse = function(check, msg) {};

/**
 * Propagates an assertion if the specified object 'arg' is not an instance
 of the specified class 'clazz'.
 <br/>
 For example, the following call does not propagate an assertion:
 <pre>
 <code>
     var test = new dw.util.HashMap();
     dw.util.Assert.instanceOf(dw.util.HashMap, test);
 </code>
 </pre>
 <br/>
 But the following call will propagate an assertion:
 <pre>
 <code>
     var test = new dw.util.Set();
     dw.util.Assert.instanceOf(dw.util.HashMap, test);
 </code>
 </pre>
 <p/>
 Note that 'clazz' can only be a Demandware API Scripting class.
 * @memberOf dw.util.Assert
 * @param {Object} clazz - the scripting class to use to check the object.
 * @param {Object} arg - the object to check.
 * @static
 */
dw.util.Assert.isInstanceOf = function(clazz, arg) {};

/**
 * Propagates an assertion using the specified message
 if the specified object is not an instance of the specified class.
 <br/>
 For example, the following call does not propagate an assertion:
 <pre>
 <code>
     var test = new dw.util.HashMap();
     dw.util.Assert.instanceOf(dw.util.HashMap, test);
 </code>
 </pre>
 <br/>
 But the following call will propagate an assertion:
 <pre>
 <code>
     var test = new dw.util.Set();
     dw.util.Assert.instanceOf(dw.util.HashMap, test);
 </code>
 </pre>
 <p/>
 Note that 'clazz' can only be a Demandware API Scripting class.
 * @memberOf dw.util.Assert
 * @param {Object} clazz - the scripting class to use to check the object.
 * @param {Object} arg - the object to check.
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.isInstanceOf = function(clazz, arg, msg) {};

/**
 * Propagates an assertion
 if the specified object is empty.
 * @memberOf dw.util.Assert
 * @param {Object} arg - the object to check.
 * @static
 */
dw.util.Assert.isNotEmpty = function(arg) {};

/**
 * Propagates an assertion using the specified message
 if the specified object is empty.
 * @memberOf dw.util.Assert
 * @param {Object} arg - the object to check.
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.isNotEmpty = function(arg, msg) {};

/**
 * Propagates an assertion if the
 specified object is null.
 * @memberOf dw.util.Assert
 * @param {Object} arg - the object to check.
 * @static
 */
dw.util.Assert.isNotNull = function(arg) {};

/**
 * Propagates an assertion using the specified message
 if the specified object is null.
 * @memberOf dw.util.Assert
 * @param {Object} arg - the object to check.
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.isNotNull = function(arg, msg) {};

/**
 * Propagates an assertion
 if the specified object is not null.
 * @memberOf dw.util.Assert
 * @param {Object} arg - the object to check.
 * @static
 */
dw.util.Assert.isNull = function(arg) {};

/**
 * Propagates an assertion using the specified message
 if the specified object is not null.
 * @memberOf dw.util.Assert
 * @param {Object} arg - the object to check.
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.isNull = function(arg, msg) {};

/**
 * Propagates an assertion if the
 specified check does not evaluate to true.
 * @memberOf dw.util.Assert
 * @param {Boolean} check - the condition to check.
 * @static
 */
dw.util.Assert.isTrue = function(check) {};

/**
 * Propagates an assertion using the specified message
 if the specified check does not evaluate to true.
 * @memberOf dw.util.Assert
 * @param {Boolean} check - the condition to check.
 * @param {String} msg - the assertion message.
 * @static
 */
dw.util.Assert.isTrue = function(check, msg) {};

/**
 * Constructs a new Integer with the value 0.
 * @class
 * @extends Object
 */
dw.util.BigInteger = function() {};
dw.util.BigInteger.prototype = new Object();

/**
 * Constructs a new Integer using the specified Number value.
 * @class
 * @extends Object
 * @param {Number} value - the value to use.
 */
dw.util.BigInteger = function(value) {};
dw.util.BigInteger.prototype = new Object();

/**
 * Constructs a new Integer using the specified string representation of
 a number.
 * @class
 * @extends Object
 * @param {String} value - the value to use.
 */
dw.util.BigInteger = function(value) {};
dw.util.BigInteger.prototype = new Object();

/**
 * Returns a new Integer with the absolute value of this Integer.
 * @memberOf dw.util.BigInteger
 * @return {dw.util.BigInteger} the new Integer
 */
dw.util.BigInteger.prototype.abs = function() {};

/**
 * Adds an Integer value to this Integer and returns the new Integer.
 * @memberOf dw.util.BigInteger
 * @param {dw.util.BigInteger} value - the value to add to this Integer.
 * @return {dw.util.BigInteger} the new Integer with the value added.
 */
dw.util.BigInteger.prototype.add = function(value) {};

/**
 * Adds a Number value to this Integer and returns the new Integer.
 * @memberOf dw.util.BigInteger
 * @param {Number} value - the value to add to this Integer.
 * @return {dw.util.BigInteger} the new Integer with the value added.
 */
dw.util.BigInteger.prototype.add = function(value) {};

/**
 * Divides this Integer by the specified Integer and returns the new Integer.
 * @memberOf dw.util.BigInteger
 * @param {dw.util.BigInteger} value - the value to use to divide this Integer.
 * @return {dw.util.BigInteger} the new Integer.
 */
dw.util.BigInteger.prototype.divide = function(value) {};

/**
 * Divides this Integer by the specified Integer and returns the new Integer.
 * @memberOf dw.util.BigInteger
 * @param {Number} value - the value to use to divide this Integer.
 * @return {dw.util.BigInteger} the new Integer.
 */
dw.util.BigInteger.prototype.divide = function(value) {};

/**
 * Compares two Integer values whether they are equivalent.
 * @memberOf dw.util.BigInteger
 * @param {Object} other - the object to compare against this Integer.
 * @return {Boolean}
 */
dw.util.BigInteger.prototype.equals = function(other) {};

/**
 * Returns the value of the Integer as a Number.
 * @memberOf dw.util.BigInteger
 * @return {Number} the value of the Integer.
 */
dw.util.BigInteger.prototype.get = function() {};

/**
 * Calculates the hash code for this Integer;
 * @memberOf dw.util.BigInteger
 * @return {Number}
 */
dw.util.BigInteger.prototype.hashCode = function() {};

/**
 * Multiples the specified Integer value with this Integer and returns the new Integer.
 * @memberOf dw.util.BigInteger
 * @param {dw.util.BigInteger} value - the value to multiply with this Integer.
 * @return {dw.util.BigInteger} the new Integer.
 */
dw.util.BigInteger.prototype.multiply = function(value) {};

/**
 * Multiples the specified Number value with this Integer and returns the new Integer.
 * @memberOf dw.util.BigInteger
 * @param {Number} value - the value to multiply with this Integer.
 * @return {dw.util.BigInteger} the new Integer.
 */
dw.util.BigInteger.prototype.multiply = function(value) {};

/**
 * Returns a new Integer with the negated value of this Integer.
 * @memberOf dw.util.BigInteger
 * @return {dw.util.BigInteger} the new Integer
 */
dw.util.BigInteger.prototype.negate = function() {};

/**
 * Subtracts the specified Integer value from this Integer and returns the new Integer.
 * @memberOf dw.util.BigInteger
 * @param {dw.util.BigInteger} value - the value to add to this Integer.
 * @return {dw.util.BigInteger} the new Integer with the value subtraced.
 */
dw.util.BigInteger.prototype.subtract = function(value) {};

/**
 * Subtracts the specified Number value from this Integer and returns the new Integer.
 * @memberOf dw.util.BigInteger
 * @param {Number} value - the value to add to this Integer.
 * @return {dw.util.BigInteger} the new Integer with the value subtraced.
 */
dw.util.BigInteger.prototype.subtract = function(value) {};

/**
 * Returns a string representation of this object.
 * @memberOf dw.util.BigInteger
 * @return {String} a string representation of this object.
 */
dw.util.BigInteger.prototype.toString = function() {};

/**
 * The valueOf() method is called by the ECMAScript interpret to return
 the "natural" value of an object. The Inetger object returns its
 current value as number. With this behavior script snippets can
 be written like:

 <code>
 var i = new Integer( 10 );
 var x = 1 + d.add( 2 );
 </code>

 where x will be at the end 13.
 * @memberOf dw.util.BigInteger
 * @return {Object} the value of this object.
 */
dw.util.BigInteger.prototype.valueOf = function() {};

/**
 * Construct a Bytes object from the given string using the default
 encoding. Convenience for Bytes( string, "UTF-8" ).
 * @class
 * @extends Object
 * @param {String} string - The string to encode into a Bytes object, must not be null.
 * @throws IllegalArgumentException If the encoded byte sequence exceeds the
             maximum number of bytes.
 */
dw.util.Bytes = function(string) {};
dw.util.Bytes.prototype = new Object();

/**
 * Construct a Bytes object from the given string using the given encoding.
 This method always replaces malformed input and unmappable character
 sequences with encoding defaults.
 * @class
 * @extends Object
 * @param {String} string - The string to encode into a Bytes object, must not be null.
 * @param {String} encoding - The name of a supported encoding, or null in which case             the default encoding (UTF-8) is used.
 * @throws IllegalArgumentException If the named encoding is not supported
             or if the encoded byte sequence exceeds the maximum number of
             bytes.
 */
dw.util.Bytes = function(string, encoding) {};
dw.util.Bytes.prototype = new Object();

/**
 * The maximum number of bytes that a Bytes object can represent == 10KB
 * @type Number
 * @memberOf dw.util.Bytes
 * @static
 * @const
 */
dw.util.Bytes.MAX_BYTES = 0;

/**
 * Returns the value of the byte at position index as an integer. If index
 is out of range an exception is thrown. The byte is interpreted as signed
 and so the value returned will always be between -128 and +127.
 * @memberOf dw.util.Bytes
 * @param {Number} index - The index of the byte.
 * @return {Number} The byte value at the specified index.
 * @throws IndexOutOfBoundsException If the index argument is negative or
             not less than the length of this byte array.
 */
dw.util.Bytes.prototype.byteAt = function(index) {};

/**
 * Return a new Bytes object containing the subsequence of this object's
 bytes specified by the index and length parameters.
 * @memberOf dw.util.Bytes
 * @param {Number} index - The initial index of the range to be copied, inclusive
 * @param {Number} length - The number of bytes in the range to be copied.
 * @return {dw.util.Bytes} a new Bytes object representing a subsequence of this Bytes          object.
 * @throws ArrayIndexOutOfBoundsException If index &lt; 0 or index &gt;
             getLength() or index + length &gt; getLength()
 * @throws IllegalArgumentException If length &lt; 0
 */
dw.util.Bytes.prototype.bytesAt = function(index, length) {};

/**
 * Returns the number of bytes represented by this object.
 * @memberOf dw.util.Bytes
 * @return {Number} The number of bytes.
 */
dw.util.Bytes.prototype.getLength = function() {};

/**
 * Absolute get method for reading a signed integer value (32 bit) in
 network byte order(= big endian).
 * @memberOf dw.util.Bytes
 * @param {Number} index - The byte index at which to read the number.
 * @return {Number} The read number.
 * @throws IndexOutOfBoundsException If index is negative or not smaller
             than the number of bytes minus three.
 */
dw.util.Bytes.prototype.intAt = function(index) {};

/**
 * Return a new Bytes object which has the same bytes as this one in reverse
 order.
 * @memberOf dw.util.Bytes
 * @return {dw.util.Bytes} a new Bytes object representing the reverse of this Bytes object.
 */
dw.util.Bytes.prototype.reverse = function() {};

/**
 * Absolute get method for reading a signed short value (16 bit) in network
 byte order(= big endian).
 * @memberOf dw.util.Bytes
 * @param {Number} index - The byte index at which to read the number.
 * @return {Number} The read number.
 * @throws IndexOutOfBoundsException If index is negative or not smaller
             than the number of bytes minus one.
 */
dw.util.Bytes.prototype.shortAt = function(index) {};

/**
 * Constructs a new String by decoding this array of bytes using the
 default encoding.  Convenience for toString( "UTF-8" ).
 * @memberOf dw.util.Bytes
 * @return {String} A String representing the decoded array of bytes.
 */
dw.util.Bytes.prototype.toString = function() {};

/**
 * Constructs a new String by decoding this array of bytes using the
 specified encoding.
 * @memberOf dw.util.Bytes
 * @param {String} encoding - The name of a supported encoding.
 * @return {String} A String representing the decoded array of bytes.
 * @throws IllegalArgumentException If the named encoding is not supported.
 */
dw.util.Bytes.prototype.toString = function(encoding) {};

/**
 * Creates a new Calendar object that is set to the current
 time. The default time zone of the Calendar object is GMT.
 * @class
 * @extends Object
 */
dw.util.Calendar = function() {};
dw.util.Calendar.prototype = new Object();

/**
 * Creates a new Calendar object for the given Date object.
 The default time zone of the Calendar object is GMT.
 * @class
 * @extends Object
 * @param {Date} date - the date for which the calendar will be set.
 */
dw.util.Calendar = function(date) {};
dw.util.Calendar.prototype = new Object();

/**
 * Indicates whether the HOUR is before or after noon.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.AM_PM = 0;

/**
 * Value for the month of year field representing April.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.APRIL = 0;

/**
 * Value for the month of year field representing August.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.AUGUST = 0;

/**
 * Represents a date.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.DATE = 0;

/**
 * Represents a day of the month.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.DAY_OF_MONTH = 0;

/**
 * Represents a day of the week.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.DAY_OF_WEEK = 0;

/**
 * Represents a day of the week in a month.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.DAY_OF_WEEK_IN_MONTH = 0;

/**
 * Represents a day of the year.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.DAY_OF_YEAR = 0;

/**
 * Value for the month of year field representing December.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.DECEMBER = 0;

/**
 * Indicates the daylight savings offset in milliseconds.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.DST_OFFSET = 0;

/**
 * Indicates the era such as 'AD' or 'BC' in the Julian calendar.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.ERA = 0;

/**
 * Value for the month of year field representing February.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.FEBRUARY = 0;

/**
 * Value for the day of the week field representing Friday.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.FRIDAY = 0;

/**
 * Represents an hour.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.HOUR = 0;

/**
 * Represents an hour of the day.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.HOUR_OF_DAY = 0;

/**
 * The input date pattern, for instance MM/dd/yyyy
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.INPUT_DATE_PATTERN = 0;

/**
 * The input date time pattern, for instance MM/dd/yyyy h:mm a
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.INPUT_DATE_TIME_PATTERN = 0;

/**
 * The input time pattern, for instance h:mm a
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.INPUT_TIME_PATTERN = 0;

/**
 * Value for the month of year field representing January.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.JANUARY = 0;

/**
 * Value for the month of year field representing July.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.JULY = 0;

/**
 * Value for the month of year field representing June.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.JUNE = 0;

/**
 * The long date pattern, for instance MMM/d/yyyy
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.LONG_DATE_PATTERN = 0;

/**
 * Value for the month of year field representing March.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.MARCH = 0;

/**
 * Value for the month of year field representing May.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.MAY = 0;

/**
 * Represents a millisecond.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.MILLISECOND = 0;

/**
 * Represents a minute.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.MINUTE = 0;

/**
 * Value for the day of the week field representing Monday.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.MONDAY = 0;

/**
 * Represents a month where the first month of the year is 0.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.MONTH = 0;

/**
 * Value for the month of year field representing November.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.NOVEMBER = 0;

/**
 * Value for the month of year field representing October.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.OCTOBER = 0;

/**
 * Value for the day of the week field representing Saturday.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.SATURDAY = 0;

/**
 * Represents a second.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.SECOND = 0;

/**
 * Value for the month of year field representing September.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.SEPTEMBER = 0;

/**
 * The short date pattern, for instance M/d/yy
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.SHORT_DATE_PATTERN = 0;

/**
 * Value for the day of the week field representing Sunday.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.SUNDAY = 0;

/**
 * Value for the day of the week field representing Thursday.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.THURSDAY = 0;

/**
 * The time pattern, for instance h:mm:ss a
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.TIME_PATTERN = 0;

/**
 * Value for the day of the week field representing Tuesday.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.TUESDAY = 0;

/**
 * Value for the day of the week field representing Wednesday.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.WEDNESDAY = 0;

/**
 * Represents a week of the month.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.WEEK_OF_MONTH = 0;

/**
 * Represents a week in the year.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.WEEK_OF_YEAR = 0;

/**
 * Represents a year.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.YEAR = 0;

/**
 * Indicates the raw offset from GMT in milliseconds.
 * @type Number
 * @memberOf dw.util.Calendar
 * @static
 * @const
 */
dw.util.Calendar.ZONE_OFFSET = 0;

/**
 * Adds or subtracts the specified amount of time to the given
 calendar field, based on the calendar's rules.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the calendar field.
 * @param {Number} value - the amount of date or time to be added to the field
 */
dw.util.Calendar.prototype.add = function(field, value) {};

/**
 * Indicates if this Calendar represents a time after
 the time represented by the specified Object.
 * @memberOf dw.util.Calendar
 * @param {Object} obj - the object to test.
 * @return {Boolean} true if this Calendar represents a time after  the time represented by the specified Object, false otherwise.
 */
dw.util.Calendar.prototype.after = function(obj) {};

/**
 * Indicates if this Calendar represents a time before
 the time represented by the specified Object.
 * @memberOf dw.util.Calendar
 * @param {Object} obj - the object to test.
 * @return {Boolean} true if this Calendar represents a time before  the time represented by the specified Object, false otherwise.
 */
dw.util.Calendar.prototype.before = function(obj) {};

/**
 * Sets all the calendar field values and the time value
 (millisecond offset from the Epoch) of this Calendar undefined.
 * @memberOf dw.util.Calendar
 */
dw.util.Calendar.prototype.clear = function() {};

/**
 * Sets the given calendar field value and the time value
 (millisecond offset from the Epoch) of this Calendar undefined.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the calendar field to be cleared.
 */
dw.util.Calendar.prototype.clear = function(field) {};

/**
 * Compares the time values (millisecond offsets from the Epoch)
 represented by two Calendar objects.
 * @memberOf dw.util.Calendar
 * @param {dw.util.Calendar} anotherCalendar - the Calendar to be compared.
 * @return {Number} the value 0 if the time represented by the argument is equal  to the time represented by this Calendar; a value less than 0 if  the time of this Calendar is before the time represented by the  argument; and a value greater than 0 if the time of this Calendar  is after the time represented by the argument.
 */
dw.util.Calendar.prototype.compareTo = function(anotherCalendar) {};

/**
 * Compares two calendar values whether they are equivalent.
 * @memberOf dw.util.Calendar
 * @param {Object} other - the object to compare against this calendar.
 * @return {Boolean}
 */
dw.util.Calendar.prototype.equals = function(other) {};

/**
 * Returns the value of the given calendar field.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the calendar field to retrieve.
 * @return {Number} the value for the given calendar field.
 */
dw.util.Calendar.prototype.get = function(field) {};

/**
 * Returns the maximum value that the specified calendar
 field could have.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the calendar field.
 * @return {Number} the maximum value that the specified calendar  field could have.
 */
dw.util.Calendar.prototype.getActualMaximum = function(field) {};

/**
 * Returns the minimum value that the specified calendar
 field could have.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the calendar field.
 * @return {Number} the minimum value that the specified calendar  field could have.
 */
dw.util.Calendar.prototype.getActualMinimum = function(field) {};

/**
 * Returns the first day of the week base on locale context. For example, in the US
 the first day of the week is SUNDAY. However, in France the
 first day of the week is MONDAY.
 * @memberOf dw.util.Calendar
 * @return {Number} the first day of the week base on locale context. For example, in the US  the first day of the week is SUNDAY. However, in France the  first day of the week is MONDAY.
 */
dw.util.Calendar.prototype.getFirstDayOfWeek = function() {};

/**
 * Returns the maximum value for the given calendar
 field.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the calendar field.
 * @return {Number} the maximum value for the given calendar  field.
 */
dw.util.Calendar.prototype.getMaximum = function(field) {};

/**
 * Returns the minimum value for the given calendar
 field.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the calendar field.
 * @return {Number} the minimum value for the given calendar  field.
 */
dw.util.Calendar.prototype.getMinimum = function(field) {};

/**
 * Returns the current time stamp of this calendar. This method
 is also used to convert a Calendar into a Date.<br/>
 <br/>
 <b>WARNING:</b> Keep in mind that the returned Date object is always
          in the time zone GMT. That means that time zone information
          set at the calendar object will not be honored and gets lost.
 * @memberOf dw.util.Calendar
 * @return {Date} the current time stamp of this calendar as a Date.
 */
dw.util.Calendar.prototype.getTime = function() {};

/**
 * Returns the current time zone of this calendar.
 * @memberOf dw.util.Calendar
 * @return {String} the current time zone of this calendar.
 */
dw.util.Calendar.prototype.getTimeZone = function() {};

/**
 * Calculates the hash code for a calendar;
 * @memberOf dw.util.Calendar
 * @return {Number}
 */
dw.util.Calendar.prototype.hashCode = function() {};

/**
 * Indicates if the specified year is a leap year.
 * @memberOf dw.util.Calendar
 * @param {Number} year - the year to test.
 * @return {Boolean} true if the specified year is a leap year.
 */
dw.util.Calendar.prototype.isLeapYear = function(year) {};

/**
 * Checks, whether two calendar dates fall on the same day.

 The method does not consider differences between timezones.

 Some examples:
  28 Mar 2002 13:45 and 28 Mar 2002 06:01 would return true.
  28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.
  28 Mar 2002 13:45 and 28 Mar 1970 13:45 would return false.
 * @memberOf dw.util.Calendar
 * @param {dw.util.Calendar} other - the calendar to compare against this calendar.
 * @return {Boolean}
 */
dw.util.Calendar.prototype.isSameDay = function(other) {};

/**
 * Indicates if the field is set.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the field to test.
 * @return {Boolean} true if the field is set, false otherwise.
 */
dw.util.Calendar.prototype.isSet = function(field) {};

/**
 * Parses the string according to the date and time format pattern and set
 the time at this calendar object. For the specification of the date and
 time format pattern see the javadoc of the JDK class java.text.SimpleDateFormat.
 If a time zone is included in the format string,
 this time zone is used to interpet the time. Otherwise the currently set
 calendar time zone is used to parse the given time string.
 * @memberOf dw.util.Calendar
 * @param {String} timeString - the time string to parsed
 * @param {String} format - the time format string
 */
dw.util.Calendar.prototype.parseByFormat = function(timeString, format) {};

/**
 * Parses the string according the date format pattern of the given locale.
 If the locale name is invalid, an exception is thrown. The currently set
 calendar time zone is used to parse the given time string.
 * @memberOf dw.util.Calendar
 * @param {String} timeString - the time string to parsed
 * @param {String} locale - the locale id, which defines the date format pattern
 * @param {Number} pattern - the pattern is one of calendar pattern e.g. SHORT_DATE_PATTERN                 as defined in the regional settings for the locale
 */
dw.util.Calendar.prototype.parseByLocale = function(timeString, locale, pattern) {};

/**
 * Rolls the specified field up or down one value.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the field to roll.
 * @param {Boolean} up - if true rolls the field up, if false  rolls the field down.
 */
dw.util.Calendar.prototype.roll = function(field, up) {};

/**
 * Rolls the specified field using the specified value.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the field to roll.
 * @param {Number} amount - the amount to roll the field.
 */
dw.util.Calendar.prototype.roll = function(field, amount) {};

/**
 * Sets the given calendar field to the given value.
 * @memberOf dw.util.Calendar
 * @param {Number} field - the calendar field to set.
 * @param {Number} value - the value to set in the field.
 */
dw.util.Calendar.prototype.set = function(field, value) {};

/**
 * Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH.
 * @memberOf dw.util.Calendar
 * @param {Number} year - the value for year.
 * @param {Number} month - the value for month.
 * @param {Number} date - the value for date.
 */
dw.util.Calendar.prototype.set = function(year, month, date) {};

/**
 * Sets the values for the calendar fields YEAR, MONTH,
 DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE.
 * @memberOf dw.util.Calendar
 * @param {Number} year - the value for year.
 * @param {Number} month - the value for month.
 * @param {Number} date - the value for date.
 * @param {Number} hourOfDay - the value for hour of day.
 * @param {Number} minute - the value for minute.
 */
dw.util.Calendar.prototype.set = function(year, month, date, hourOfDay, minute) {};

/**
 * Sets the values for the calendar fields YEAR, MONTH,
 DAY_OF_MONTH, HOUR_OF_DAY, MINUTE and SECOND.
 * @memberOf dw.util.Calendar
 * @param {Number} year - the value for year.
 * @param {Number} month - the value for month.
 * @param {Number} date - the value for date.
 * @param {Number} hourOfDay - the value for hour of day.
 * @param {Number} minute - the value for minute.
 * @param {Number} second - the value for second.
 */
dw.util.Calendar.prototype.set = function(year, month, date, hourOfDay, minute, second) {};

/**
 * Sets what the first day of the week is.
 * @memberOf dw.util.Calendar
 * @param {Number} value - the day to set as the first day of the week.
 */
dw.util.Calendar.prototype.setFirstDayOfWeek = function(value) {};

/**
 * Sets the current time stamp of this calendar.<br/>
 <br/>
 <b>WARNING:</b> Keep in mind that the set Date object is always
          interpreted in the time zone GMT. That means that time zone
          information at the calendar object needs to be set separately by
          using the <a href="class_dw_util_Calendar.html#dw_util_Calendar_setTimeZone_String_DetailAnchor">setTimeZone(String)</a> method.
 * @memberOf dw.util.Calendar
 * @param {Date} date - the current time stamp of this calendar.
 */
dw.util.Calendar.prototype.setTime = function(date) {};

/**
 * Sets the current time zone of this calendar.
 * @memberOf dw.util.Calendar
 * @param {String} timeZone - the current time zone value to set.
 */
dw.util.Calendar.prototype.setTimeZone = function(timeZone) {};

/**
 * Adds the specified objects to the collection. The method can also
 be called with an ECMA array as argument.

 If called with a single ECMA array as argument the individual elements of
 that array are added to the collection. If the array object itself should
 be added use the method add1().
 * @memberOf dw.util.Collection
 * @param {Object[]} values - the values to add.
 * @return {Boolean} true if the values were added, false otherwise.
 * @synchronized
 * @varArgs
 */
dw.util.Collection.prototype.add = function(values) {};

/**
 * The method adds a single object to the collection.
 * @memberOf dw.util.Collection
 * @param {Object} object - the object to add.
 * @return {Boolean} true if the object was added, false otherwise.
 * @synchronized
 */
dw.util.Collection.prototype.add1 = function(object) {};

/**
 * Adds the collection of objects to the collection.
 * @memberOf dw.util.Collection
 * @param {dw.util.Collection} objs - the objects to add.
 * @return {Boolean} true if the objects were added, false otherwise.
 * @synchronized
 */
dw.util.Collection.prototype.addAll = function(objs) {};

/**
 * Clears the collection.
 * @memberOf dw.util.Collection
 * @synchronized
 */
dw.util.Collection.prototype.clear = function() {};

/**
 * Returns true if the collection contains the specified object.
 * @memberOf dw.util.Collection
 * @param {Object} obj - the object to locate in this collection.
 * @return {Boolean} true if the collection contains the specified object,  false otherwise.
 * @synchronized
 */
dw.util.Collection.prototype.contains = function(obj) {};

/**
 * Returns true if the collection contains all of the objects
 in the specified collection.
 * @memberOf dw.util.Collection
 * @param {dw.util.Collection} objs - the collection of objects to locate in this collection.
 * @return {Boolean} true if the collection contains all of the specified objects,  false otherwise.
 * @synchronized
 */
dw.util.Collection.prototype.containsAll = function(objs) {};

/**
 * Returns the length of the collection. This is similar to
 to a ECMA array of 'products.length'.
 * @memberOf dw.util.Collection
 * @return {Number} the length of the collection.
 */
dw.util.Collection.prototype.getLength = function() {};

/**
 * Returns true if the collection is empty.
 * @memberOf dw.util.Collection
 * @return {Boolean} true if the collection is empty, false otherwise
 * @synchronized
 */
dw.util.Collection.prototype.isEmpty = function() {};

/**
 * Returns an iterator that can be used to access
 the members of the collection.
 * @memberOf dw.util.Collection
 * @return {dw.util.Iterator} an iterator that can be used to access  the members of the collection.
 * @synchronized
 */
dw.util.Collection.prototype.iterator = function() {};

/**
 * Removes the specified object from the collection.
 * @memberOf dw.util.Collection
 * @param {Object} obj - the object to remove.
 * @return {Boolean} true if the specified object was removed,  false otherwise.
 * @synchronized
 */
dw.util.Collection.prototype.remove = function(obj) {};

/**
 * Removes all of object in the specified object from the collection.
 * @memberOf dw.util.Collection
 * @param {dw.util.Collection} objs - the collection of objects to remove.
 * @return {Boolean} true if the all of the specified objects were removed,  false otherwise.
 * @synchronized
 */
dw.util.Collection.prototype.removeAll = function(objs) {};

/**
 * Removes all of object in the collection that are not in the
 specified collection.
 * @memberOf dw.util.Collection
 * @param {dw.util.Collection} objs - the collection of objects to retain in the collection.
 * @return {Boolean} true if the collection retains all of the specified objects,  false otherwise.
 * @synchronized
 */
dw.util.Collection.prototype.retainAll = function(objs) {};

/**
 * Returns the size of the collection.
 * @memberOf dw.util.Collection
 * @return {Number} the size of the collection.
 */
dw.util.Collection.prototype.size = function() {};

/**
 * Represents a currency supported by the system.
 * @class
 * @extends Object
 */
dw.util.Currency = function() {};
dw.util.Currency.prototype = new Object();

/**
 * Returns a <code>Currency</code> instance for the given currency code,
 or <code>null</code> if there is no such currency.
 * @memberOf dw.util.Currency
 * @param {String} currencyCode - the ISO 4217 mnemonic code of the currency.
 * @return {dw.util.Currency} the <code>Currency</code> instance for the given currency code.
 * @static
 */
dw.util.Currency.getCurrency = function(currencyCode) {};

/**
 * Gets the ISO 4217 mnemonic currency code of this currency.
 * @memberOf dw.util.Currency
 * @return {String} the ISO 4217 mnemonic currency code of this currency.
 */
dw.util.Currency.prototype.getCurrencyCode = function() {};

/**
 * Gets the default number of fraction digits used with this currency.
 For example, the default number of fraction digits for the Euro is 2,
 while for the Japanese Yen it's 0.
 * @memberOf dw.util.Currency
 * @return {Number} the default number of fraction digits used with this currency.
 */
dw.util.Currency.prototype.getDefaultFractionDigits = function() {};

/**
 * Gets a long name for this currency. e.g. "United States Dollar".
 The returned name is the one stored in the system for this currency.
 Currently only English names are available, but in the future
 this method may return a locale-specific name.
 * @memberOf dw.util.Currency
 * @return {String} a long name for this currency. e.g. "United States Dollar".
 */
dw.util.Currency.prototype.getName = function() {};

/**
 * Gets the symbol of this currency. e.g. "$" for the US Dollar.
 * @memberOf dw.util.Currency
 * @return {String} the symbol of this currency.
 */
dw.util.Currency.prototype.getSymbol = function() {};

/**
 * Returns the ISO 4217 mnemonic currency code of this currency.
 * @memberOf dw.util.Currency
 * @return {String} the ISO 4217 mnemonic currency code of this currency.
 */
dw.util.Currency.prototype.toString = function() {};

/**
 * A class with several utility methods for Date objects.
 * @class
 * @extends Object
 * @deprecated See each method for additional information.
 */
dw.util.DateUtils = function() {};
dw.util.DateUtils.prototype = new Object();

/**
 * Returns the current time stamp in the time zone of the
 instance.
 * @memberOf dw.util.DateUtils
 * @return {Date} the current time stamp in the time zone of the  instance.
 * @deprecated Use <a href="class_dw_system_System.html#dw_system_System_getCalendar_DetailAnchor">System.getCalendar()</a> instead.
 * @static
 */
dw.util.DateUtils.nowForInstance = function() {};

/**
 * Returns the current timestamp in the time zone of the
 current site.
 * @memberOf dw.util.DateUtils
 * @return {Date} the current timestamp in the time zone of the  current site.
 * @deprecated Use <a href="class_dw_system_Site.html#dw_system_Site_getCalendar_DetailAnchor">Site.getCalendar()</a> instead.
 * @static
 */
dw.util.DateUtils.nowForSite = function() {};

/**
 * Returns the current time stamp in UTC.
 * @memberOf dw.util.DateUtils
 * @return {Date} the current time stamp in UTC.
 * @deprecated Create a new <a href="class_dw_util_Calendar.html">Calendar</a> object and set
             the time zone "UTC" instead.
 * @static
 */
dw.util.DateUtils.nowInUTC = function() {};

/**
 * Constructs a new Decimal with the value 0.
 * @class
 * @extends Object
 */
dw.util.Decimal = function() {};
dw.util.Decimal.prototype = new Object();

/**
 * Constructs a new decimal using the specified Number value.
 * @class
 * @extends Object
 * @param {Number} value - the value to use.
 */
dw.util.Decimal = function(value) {};
dw.util.Decimal.prototype = new Object();

/**
 * Constructs a new Decimal using the specified string representation of
 a number.
 * @class
 * @extends Object
 * @param {String} value - the value to use.
 */
dw.util.Decimal = function(value) {};
dw.util.Decimal.prototype = new Object();

/**
 * Returns a new Decimal with the absolute value of this Decimal.
 * @memberOf dw.util.Decimal
 * @return {dw.util.Decimal} the new Decimal
 */
dw.util.Decimal.prototype.abs = function() {};

/**
 * Adds a Decimal value to this Decimal and returns the new Decimal.
 * @memberOf dw.util.Decimal
 * @param {dw.util.Decimal} value - the value to add to this decimal.
 * @return {dw.util.Decimal} the new decimal with the value added.
 */
dw.util.Decimal.prototype.add = function(value) {};

/**
 * Adds a Number value to this Decimal and returns the new Decimal.
 * @memberOf dw.util.Decimal
 * @param {Number} value - the value to add to this decimal.
 * @return {dw.util.Decimal} the new decimal with the value added.
 */
dw.util.Decimal.prototype.add = function(value) {};

/**
 * Adds a percentage value to the current value of the
 decimal. For example a value of 10 represent 10% or a value of
 85 represents 85%.
 * @memberOf dw.util.Decimal
 * @param {dw.util.Decimal} value - the value to add.
 * @return {dw.util.Decimal} a new decimal with the added percentage value.
 */
dw.util.Decimal.prototype.addPercent = function(value) {};

/**
 * Adds a percentage value to the current value of the
 decimal. For example a value of 10 represent 10% or a value of
 85 represents 85%.
 * @memberOf dw.util.Decimal
 * @param {Number} value - the value to add.
 * @return {dw.util.Decimal} a new decimal with the added percentage value.
 */
dw.util.Decimal.prototype.addPercent = function(value) {};

/**
 * Divides the specified Decimal value with this decimal and returns the new
 decimal.

 When performing the division, 34 digits precision and a rounding mode of
 HALF_EVEN is used to prevent quotients with nonterminating decimal
 expansions.
 * @memberOf dw.util.Decimal
 * @param {dw.util.Decimal} value - the value to use to divide this decimal.
 * @return {dw.util.Decimal} the new decimal.
 */
dw.util.Decimal.prototype.divide = function(value) {};

/**
 * Divides the specified Number value with this decimal and returns the new
 decimal.

 When performing the division, 34 digits precision and a rounding mode of
 HALF_EVEN is used to prevent quotients with nonterminating decimal
 expansions.
 * @memberOf dw.util.Decimal
 * @param {Number} value - the value to use to divide this decimal.
 * @return {dw.util.Decimal} the new decimal.
 */
dw.util.Decimal.prototype.divide = function(value) {};

/**
 * Compares two decimal values whether they are equivalent.
 * @memberOf dw.util.Decimal
 * @param {Object} other - the object to comapre against this decimal.
 * @return {Boolean}
 */
dw.util.Decimal.prototype.equals = function(other) {};

/**
 * Returns the value of the Decimal as a Number.
 * @memberOf dw.util.Decimal
 * @return {Number} the value of the Decimal.
 */
dw.util.Decimal.prototype.get = function() {};

/**
 * Calculates the hash code for this decimal;
 * @memberOf dw.util.Decimal
 * @return {Number}
 */
dw.util.Decimal.prototype.hashCode = function() {};

/**
 * Multiples the specified Decimal value with this Decimal and returns the new Decimal.
 * @memberOf dw.util.Decimal
 * @param {dw.util.Decimal} value - the value to multiply with this decimal.
 * @return {dw.util.Decimal} the new decimal.
 */
dw.util.Decimal.prototype.multiply = function(value) {};

/**
 * Multiples the specified Number value with this Decimal and returns the new Decimal.
 * @memberOf dw.util.Decimal
 * @param {Number} value - the value to multiply with this decimal.
 * @return {dw.util.Decimal} the new decimal.
 */
dw.util.Decimal.prototype.multiply = function(value) {};

/**
 * Returns a new Decimal with the negated value of this Decimal.
 * @memberOf dw.util.Decimal
 * @return {dw.util.Decimal} the new Decimal
 */
dw.util.Decimal.prototype.negate = function() {};

/**
 * Rounds the current value of the decimal using the specified
 number of decimals. The parameter
 specifies the number of digest after the decimal point.
 * @memberOf dw.util.Decimal
 * @param {Number} decimals - the number of decimals to use.
 * @return {dw.util.Decimal} the decimal that has been rounded.
 */
dw.util.Decimal.prototype.round = function(decimals) {};

/**
 * Subtracts the specified Decimal value from this Decimal and returns the new Decimal.
 * @memberOf dw.util.Decimal
 * @param {dw.util.Decimal} value - the value to add to this decimal.
 * @return {dw.util.Decimal} the new decimal with the value subtraced.
 */
dw.util.Decimal.prototype.subtract = function(value) {};

/**
 * Subtracts the specified Number value from this Decimal and returns the new Decimal.
 * @memberOf dw.util.Decimal
 * @param {Number} value - the value to add to this decimal.
 * @return {dw.util.Decimal} the new decimal with the value subtraced.
 */
dw.util.Decimal.prototype.subtract = function(value) {};

/**
 * Subtracts a percentage value from the current value of the
 decimal. For example a value of 10 represent 10% or a value of
 85 represents 85%.
 * @memberOf dw.util.Decimal
 * @param {dw.util.Decimal} value - the value to subtract.
 * @return {dw.util.Decimal} a new decimal with the subtracted percentage value.
 */
dw.util.Decimal.prototype.subtractPercent = function(value) {};

/**
 * Subtracts a percentage value from the current value of the
 decimal. For example a value of 10 represent 10% or a value of
 85 represents 85%.
 * @memberOf dw.util.Decimal
 * @param {Number} value - the value to subtract.
 * @return {dw.util.Decimal} a new decimal with the subtracted percentage value.
 */
dw.util.Decimal.prototype.subtractPercent = function(value) {};

/**
 * Returns a string representation of this object.
 * @memberOf dw.util.Decimal
 * @return {String} a string representation of this object.
 */
dw.util.Decimal.prototype.toString = function() {};

/**
 * The valueOf() method is called by the ECMAScript interpret to return
 the "natural" value of an object. The Decimal object returns its
 current value as number. With this behavior script snippets can
 be written like:

 <code>
 var d = new Decimal( 10.0 );
 var x = 1.0 + d.add( 2.0 );
 </code>

 where x will be at the end 13.0.
 * @memberOf dw.util.Decimal
 * @return {Object} the value of this object.
 */
dw.util.Decimal.prototype.valueOf = function() {};

/**
 * <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> is an extension of
 <a href="class_dw_util_Collection.html">Collection</a> which provides possibilities to

 <ul>
 <li><i>filter</i> the elements to return a new
 <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> with a filtered set of elements</li>
 <li><i>sort</i> the elements to return a new
 <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> with a defined sort order</li>
 <li><i>transform</i> the elements to return a new
 <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> containing related elements</li>
 <li><i>provide a map</i> of the elements against a predefined key</li>
 </ul>

 <p/>
 <b>Usage</b> - In the current version each
 <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> provides a set of predefined
 <i>qualifier</i> constants which can be passed into the
 <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_select_Object_DetailAnchor">select(Object)</a> method used to <i>filter</i> the elements. Generally
 <i>qualifiers</i> have the prefix <i>QUALIFIER_</i>. A second method
 <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">sort(Object)</a> is used to create a new instance with a different
 element ordering, which takes an <i>orderB<</i> constant. Generally
 <i>orderBys</i> have the prefix ORDERBY_: examples are
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_ORDERBY_ITEMID_DetailAnchor">ShippingOrder.ORDERBY_ITEMID</a>,
 <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_ORDERBY_ITEMPOSITION_DetailAnchor">ShippingOrder.ORDERBY_ITEMPOSITION</a>, and <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_ORDERBY_REVERSE_DetailAnchor">ORDERBY_REVERSE</a> can
 be used to provide a <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> with the reverse
 ordering. An example with method <a href="class_dw_order_ShippingOrder.html#dw_order_ShippingOrder_getItems_DetailAnchor">ShippingOrder.getItems()</a>:

 <br/>
 <code>
 <br/>var allItems     : FilteringCollection = shippingOrder.items;
 <br/>var productItems : FilteringCollection = allItems.select(ShippingOrder.QUALIFIER_PRODUCTITEMS);
 <br/>var serviceItems : FilteringCollection = allItems.select(ShippingOrder.QUALIFIER_SERVICEITEMS);
 <br/>var byPosition   : FilteringCollection = productItems.sort(ShippingOrder.ORDERBY_ITEMPOSITION);
 <br/>var revByPosition: FilteringCollection = byPosition.sort(FilteringCollection.ORDERBY_REVERSE);
 <br/>var mapByItemID  : Map = allItems.asMap();
 </code>
 * @class
 * @extends dw.util.Collection
 */
dw.util.FilteringCollection = function() {};
dw.util.FilteringCollection.prototype = new dw.util.Collection();

/**
 * Pass this <i>orderBy</i> with the <a href="class_dw_util_FilteringCollection.html#dw_util_FilteringCollection_sort_Object_DetailAnchor">sort(Object)</a> method to
 obtain a new <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> with the reversed sort
 order. Only use on a <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> which has been
 previously sorted.
 * @type Object
 * @memberOf dw.util.FilteringCollection
 * @static
 * @const
 */
dw.util.FilteringCollection.ORDERBY_REVERSE = {};

/**
 * Returns a <a href="class_dw_util_Map.html">Map</a> containing the elements of this
 <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> against a predefined key. The key
 used is documented in the method returning the
 <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> and is typically the ItemID assigned
 to an element in the collection.
 * @memberOf dw.util.FilteringCollection
 * @return {dw.util.Map} a {@link dw.util.Map} containing the elements of this          {@link dw.util.FilteringCollection} against a predefined key.
 */
dw.util.FilteringCollection.prototype.asMap = function() {};

/**
 * Select a new <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> instance by passing a
 predefined <i>qualifier</i> as an argument to this method. See
 <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a>.
 * @memberOf dw.util.FilteringCollection
 * @param {Object} qualifier - - possible qualifiers are documented in the method returning             the <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a>
 * @return {dw.util.FilteringCollection} a new {@link dw.util.FilteringCollection} instance
 */
dw.util.FilteringCollection.prototype.select = function(qualifier) {};

/**
 * Select a new <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a> instance by passing a
 predefined <i>orderBy</i> as an argument to this method. See
 <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a>.
 * @memberOf dw.util.FilteringCollection
 * @param {Object} orderBy - - possible orderBys are documented in the method returning the             <a href="class_dw_util_FilteringCollection.html">FilteringCollection</a>
 * @return {dw.util.FilteringCollection} a new {@link dw.util.FilteringCollection} instance
 */
dw.util.FilteringCollection.prototype.sort = function(orderBy) {};

/**
 * Read-only class representing a position on the earth (latitude and longitude)
 and information associated with that location (e.g. country, city, etc). The
 Demandware system can provide geolocation information for a Request, if this
 feature is enabled, and this information can be used in customer group
 segmentation rules.
 <p/>
 Note: This class is not related to the store locator API (i.e. the
 GetNearestStores pipelet) which uses a static set of store locations loaded
 into the system by the merchant.
 <p/>
 This product includes GeoLite2 data created by MaxMind, available from <a
 href="http://www.maxmind.com">http://www.maxmind.com</a>.
 * @class
 * @extends Object
 */
dw.util.Geolocation = function() {};
dw.util.Geolocation.prototype = new Object();

/**
 * Get the city name in English associated with this location.
 * @memberOf dw.util.Geolocation
 * @return {String} the city that the system associates with this location on the          earth.
 */
dw.util.Geolocation.prototype.getCity = function() {};

/**
 * Get the ISO country code associated with this location.
 * @memberOf dw.util.Geolocation
 * @return {String} The <a          href="http://en.wikipedia.org/wiki/ISO_3166-1">two-character ISO          3166-1 alpha code</a> for the country.
 */
dw.util.Geolocation.prototype.getCountryCode = function() {};

/**
 * Get the country name in English that the system associates with this location on the
 earth.
 * @memberOf dw.util.Geolocation
 * @return {String} the country name that the system associates with this location on the          earth.
 */
dw.util.Geolocation.prototype.getCountryName = function() {};

/**
 * Get the latitude coordinate associated with this location which is a
 number between -90.0 and +90.0.
 * @memberOf dw.util.Geolocation
 * @return {Number} The latitude of the location as a floating point number.
 */
dw.util.Geolocation.prototype.getLatitude = function() {};

/**
 * Get the longitude coordinate associated with this location which is a
 number between -180.0 and +180.0.
 * @memberOf dw.util.Geolocation
 * @return {Number} The longitude of the location as a floating point number.
 */
dw.util.Geolocation.prototype.getLongitude = function() {};

/**
 * Get the metro code associated with this location.
 * @memberOf dw.util.Geolocation
 * @return {String} The metro code of the location if the location is in the US. See          the <a href=          "https://developers.google.com/adwords/api/docs/appendix/cities-DMAregions"          >Google AdWords API</a> for returned values.
 */
dw.util.Geolocation.prototype.getMetroCode = function() {};

/**
 * Get the postal code associated with this location.
 * @memberOf dw.util.Geolocation
 * @return {String} The postal code of the location. Postal codes are not available          for all countries. In some countries, this will only contain part          of the postal code.
 */
dw.util.Geolocation.prototype.getPostalCode = function() {};

/**
 * Get the region (e.g. province or state) code for this location.
 * @memberOf dw.util.Geolocation
 * @return {String} This is a string up to three characters long containing the          subdivision portion of the <a          href="http://en.wikipedia.org/wiki/ISO_3166-2">code</a>.
 */
dw.util.Geolocation.prototype.getRegionCode = function() {};

/**
 * Get the region (e.g. province in state) name in English that the system
 associates with this location.
 * @memberOf dw.util.Geolocation
 * @return {String} the region name that the system associates with this location on          the earth.
 */
dw.util.Geolocation.prototype.getRegionName = function() {};

/**
 * Constructs a new HashMap.
 * @class
 * @extends dw.util.Map
 */
dw.util.HashMap = function() {};
dw.util.HashMap.prototype = new dw.util.Map();

/**
 * Returns a shallow copy of this map.
 * @memberOf dw.util.HashMap
 * @return {dw.util.HashMap} a shallow copy of this map.
 */
dw.util.HashMap.prototype.clone = function() {};

/**
 * Constructs a new HashMap.
 * @class
 * @extends dw.util.Set
 */
dw.util.HashSet = function() {};
dw.util.HashSet.prototype = new dw.util.Set();

/**
 * Construct a new HashSet by
 initializing the HashSet with the elements of the
 given collection.
 * @class
 * @extends dw.util.Set
 * @param {dw.util.Collection} collection - the collection to add to the set.
 */
dw.util.HashSet = function(collection) {};
dw.util.HashSet.prototype = new dw.util.Set();

/**
 * Returns a shallow copy of this set.
 * @memberOf dw.util.HashSet
 * @return {dw.util.HashSet} a shallow copy of this set.
 */
dw.util.HashSet.prototype.clone = function() {};

/**
 * The Iterator class allows you to access items in a collection.
 * @class
 * @extends Object
 */
dw.util.Iterator = function() {};
dw.util.Iterator.prototype = new Object();

/**
 * Convert the iterator into a list. After this conversion the
 iterator is empty and hasNext() will always return false.

 Note: This method should be used with care. For example a large database
 result is pulled into memory completely with this method and can cause
 an OutOfMemory situation.
 * @memberOf dw.util.Iterator
 * @return {dw.util.List} the iterator as a list.
 */
dw.util.Iterator.prototype.asList = function() {};

/**
 * Converts a sub-sequence within the iterator into a list.

 Note: This method should be used with care. For example a large database
 result is pulled into memory completely with this method and can cause
 an OutOfMemory situation.
 * @memberOf dw.util.Iterator
 * @param {Number} start - the number of elements to iterate before adding elements to             the sublist. Negative values are treated as 0.
 * @param {Number} size - the maximum number of elements to add to the sublist.             Nonpositive values always result in empty list.
 * @return {dw.util.List} a sub-sequence within the iterator into a list.
 */
dw.util.Iterator.prototype.asList = function(start, size) {};

/**
 * Indicates if there are more elements.
 * @memberOf dw.util.Iterator
 * @return {Boolean} true if there are more elements,  false otherwise.
 */
dw.util.Iterator.prototype.hasNext = function() {};

/**
 * Returns the next element from the Iterator.
 * @memberOf dw.util.Iterator
 * @return {Object} the next element from the Iterator.
 */
dw.util.Iterator.prototype.next = function() {};

/**
 * Constructs a new LinkedHashMap.
 * @class
 * @extends dw.util.Map
 */
dw.util.LinkedHashMap = function() {};
dw.util.LinkedHashMap.prototype = new dw.util.Map();

/**
 * Returns a shallow copy of this map.
 * @memberOf dw.util.LinkedHashMap
 * @return {dw.util.LinkedHashMap} a shallow copy of this map.
 */
dw.util.LinkedHashMap.prototype.clone = function() {};

/**
 * Constructs a new LinkHashSet.
 * @class
 * @extends dw.util.Set
 */
dw.util.LinkedHashSet = function() {};
dw.util.LinkedHashSet.prototype = new dw.util.Set();

/**
 * Constructor for a new LinkedHashSet. The constructor
 initializes the LinkedHashSet with the elements of the
 given collection.
 * @class
 * @extends dw.util.Set
 * @param {dw.util.Collection} collection - the collection of items to insert into this set.
 */
dw.util.LinkedHashSet = function(collection) {};
dw.util.LinkedHashSet.prototype = new dw.util.Set();

/**
 * Returns a shallow copy of this set.
 * @memberOf dw.util.LinkedHashSet
 * @return {dw.util.LinkedHashSet} a shallow copy of this set.
 */
dw.util.LinkedHashSet.prototype.clone = function() {};

/**
 * Convenience variable, for an empty and immutable list.
 * @type dw.util.List
 * @memberOf dw.util.List
 * @static
 */
dw.util.List.EMPTY_LIST = {};

/**
 * Adds the specified object into the list at the specified index.
 * @memberOf dw.util.List
 * @param {Number} index - the index to use.
 * @param {Object} value - the object to insert.
 * @synchronized
 */
dw.util.List.prototype.addAt = function(index, value) {};

/**
 * Creates and returns a new List that is the result of concatenating this
 list with each of the specified values. This list itself is unmodified.
 If any of the specified values is itself an array or a Collection, then
 the elements of that Collection or array are appended to the new list
 rather than the object itself.
 * @memberOf dw.util.List
 * @param {Object[]} values - one or more objects to concatenate.
 * @return {dw.util.List} a new List that is the result of concatenating this  list with each of the specified values.
 * @synchronized
 * @varArgs
 */
dw.util.List.prototype.concat = function(values) {};

/**
 * Replaces all of the elements in the list with the given object.
 * @memberOf dw.util.List
 * @param {Object} obj - the object to use during replacement.
 * @synchronized
 */
dw.util.List.prototype.fill = function(obj) {};

/**
 * Returns the object at the specified index.
 * @memberOf dw.util.List
 * @param {Number} index - the index to use.
 * @return {Object} the object at the specified index.
 * @synchronized
 */
dw.util.List.prototype.get = function(index) {};

/**
 * Returns the index of the first occurrence of the specified element in
 this list, or -1 if this list does not contain the element.
 * @memberOf dw.util.List
 * @param {Object} value - the element to use.
 * @return {Number} the index of the specified object or -1 if the passed object is          not found in the list.
 * @synchronized
 */
dw.util.List.prototype.indexOf = function(value) {};

/**
 * Converts all elements of the list to a string by calling the toString()
 method and then concatenates them together, with a comma between
 elements.
 * @memberOf dw.util.List
 * @return {String} The string that results from converting each element of the list          to a string and then concatenating them together, with a comma          between elements.
 * @synchronized
 */
dw.util.List.prototype.join = function() {};

/**
 * Converts all elements of the list to a string by calling the toString()
 method and then concatenates them together, with the separator string
 between elements. If null is passed, then the comma character is used as
 a separator.
 * @memberOf dw.util.List
 * @param {String} separator - The separator string. May be null in which case the             comma character is used.
 * @return {String} The string that results from converting each element of the list          to a string and then concatenating them together, with the          separator string between elements.
 * @synchronized
 */
dw.util.List.prototype.join = function(separator) {};

/**
 * Returns the index of the last occurrence of the specified element in this
 list, or -1 if this list does not contain the element.
 * @memberOf dw.util.List
 * @param {Object} value - the element to use.
 * @return {Number} the last index of the specified object or -1 if the passed object          is not found in the list.
 * @synchronized
 */
dw.util.List.prototype.lastIndexOf = function(value) {};

/**
 * Removes and returns the last element from the list.
 * @memberOf dw.util.List
 * @return {Object} The last element of the list or null if the list is already          empty.
 * @synchronized
 */
dw.util.List.prototype.pop = function() {};

/**
 * Appends the specified values to the end of the list in order.
 * @memberOf dw.util.List
 * @param {Object[]} values - One or more values to be appended to the end of the list.
 * @return {Number} The new length of the list, after the specified values are          appended to it.
 * @synchronized
 * @varArgs
 */
dw.util.List.prototype.push = function(values) {};

/**
 * Removes the object at the specified index.
 * @memberOf dw.util.List
 * @param {Number} index - the index to use.
 * @return {Object} the object that was removed.
 * @synchronized
 */
dw.util.List.prototype.removeAt = function(index) {};

/**
 * Replaces all occurrences of oldValue with newValue.
 * @memberOf dw.util.List
 * @param {Object} oldValue - the old object.
 * @param {Object} newValue - the new object.
 * @return {Boolean} true if one or more elements were replaced, false otherwise.
 * @synchronized
 */
dw.util.List.prototype.replaceAll = function(oldValue, newValue) {};

/**
 * Reverses the order of the elements in the list.
 * @memberOf dw.util.List
 * @synchronized
 */
dw.util.List.prototype.reverse = function() {};

/**
 * Rotates the elements in the list by the specified distance.
 * @memberOf dw.util.List
 * @param {Number} distance - the distance to use.
 * @synchronized
 */
dw.util.List.prototype.rotate = function(distance) {};

/**
 * Replaces the object at the specified index in this list with the specified object.
 * @memberOf dw.util.List
 * @param {Number} index - the index to use.
 * @param {Object} value - the object to use when replacing the existing object.
 * @return {Object} the replaced object.
 * @synchronized
 */
dw.util.List.prototype.set = function(index, value) {};

/**
 * Removes and returns the first element of the list. If the list is already
 empty, this method simply returns null.
 * @memberOf dw.util.List
 * @return {Object} The former first element of the list, or null is list is already          empty.
 * @synchronized
 */
dw.util.List.prototype.shift = function() {};

/**
 * Randomly permutes the elements in the list.
 * @memberOf dw.util.List
 * @synchronized
 */
dw.util.List.prototype.shuffle = function() {};

/**
 * Returns the size of this list.
 * @memberOf dw.util.List
 * @return {Number} the size of this list.
 * @synchronized
 */
dw.util.List.prototype.size = function() {};

/**
 * Returns a slice, or sublist, of this list. The returned list contains the
 element specified by <code>from</code> and all subsequent elements up to
 the end of this list.
 * @memberOf dw.util.List
 * @param {Number} from - The index at which the slice is to begin. If negative, this             argument specifies a position measured from the end of this             list. That, -1 indicates the last element, -2 indicates the             next from the last element, and so on.
 * @return {dw.util.List} A new List that contains the elements of this list from the          element specified by <code>from</code> up to the end of this          list.
 * @synchronized
 */
dw.util.List.prototype.slice = function(from) {};

/**
 * Returns a slice, or sublist, of this list. The returned list contains the
 element specified by <code>from</code> and all subsequent elements up to,
 but not including, the element specified by <code>to</code>.
 * @memberOf dw.util.List
 * @param {Number} from - The index at which the slice is to begin. If negative, this             argument specifies a position measured from the end of this             list. That, -1 indicates the last element, -2 indicates the             next from the last element, and so on.
 * @param {Number} to - The index immediately after the end of the slice. If this             argument is negative, it specifies an element measured from             the end of this list.
 * @return {dw.util.List} A new List that contains the elements of this list from the          element specified by <code>from</code> up to, but not including,          the element specified by <code>to</code>.
 * @synchronized
 */
dw.util.List.prototype.slice = function(from, to) {};

/**
 * Sorts the elements of the list based on their natural
 order.

 <p>This sort is guaranteed to be <i>stable</i>:  equal elements will
 not be reordered as a result of the sort.
 * @memberOf dw.util.List
 * @synchronized
 */
dw.util.List.prototype.sort = function() {};

/**
 * Sorts the elements of a list. The order of the elements is
 determined with a comparator (see PropertyComparator) or with the help
 of the given function. The function must take two parameters and return
 a value &lt;0 if the first parameter is smaller than the second, a value
 of 0 if both are equal and a value if &gt;0 if the first one is greater
 than the second parameter.

 <p>This sort is guaranteed to be <i>stable</i>:  equal elements will
 not be reordered as a result of the sort.
 * @memberOf dw.util.List
 * @param {Object} comparator - an instance of a PropertyComparator or a comparison function
 * @synchronized
 */
dw.util.List.prototype.sort = function(comparator) {};

/**
 * Returns a list containing the elements in this list identified
 by the specified arguments.
 * @memberOf dw.util.List
 * @param {Number} from - the beginning index of the elements to move to the new list.
 * @param {Number} to - the ending index of the elements to move to the new list.
 * @return {dw.util.List} the new list containing the elements.
 * @synchronized
 */
dw.util.List.prototype.subList = function(from, to) {};

/**
 * Swaps the elements at the specified positions in the list.
 * @memberOf dw.util.List
 * @param {Number} i - the first element to swap.
 * @param {Number} j - the second element to swap.
 * @synchronized
 */
dw.util.List.prototype.swap = function(i, j) {};

/**
 * Inserts values at the beginning of the list.  The first argument
 becomes the new element 0;  the second argument becomes element 1;
 and so on.
 * @memberOf dw.util.List
 * @param {Object[]} values - The values to insert into the list.
 * @return {Number} The new length of the lest.
 * @synchronized
 * @varArgs
 */
dw.util.List.prototype.unshift = function(values) {};

/**
 * Represents a <code>Locale</code> supported by the system.
 * @class
 * @extends Object
 */
dw.util.Locale = function() {};
dw.util.Locale.prototype = new Object();

/**
 * Returns the country/region code for this <code>Locale</code>, which will
 either be the empty string or an upercase ISO 3166 2-letter code.
 * @memberOf dw.util.Locale
 * @return {String} the country/region code for this <code>Locale</code>, which will          either be the empty string or an upercase ISO 3166 2-letter code.
 */
dw.util.Locale.prototype.getCountry = function() {};

/**
 * Returns a name for the <code>Locale's</code> country that is appropriate for
 display to the user, or an empty string if no country has been specified
 for the <code>Locale</code>.
 The display country is returned in the language defined for this locale,
 and not in the language of the session locale.
 * @memberOf dw.util.Locale
 * @return {String} a name for the <code>Locale's</code> country that is appropriate for          display to the user, or an empty string if no country has been          specified for the <code>Locale</code>.
 */
dw.util.Locale.prototype.getDisplayCountry = function() {};

/**
 * Returns a name for the <code>Locale's</code> language that is appropriate for
 display to the user, or an empty string if no language has been specified
 for the <code>Locale</code>.
 The display language is returned in the language defined for this locale,
 and not in the language of the session locale.
 * @memberOf dw.util.Locale
 * @return {String} a name for the <code>Locale's</code> language that is appropriate for          display to the user, or an empty string if no language has been          specified for the <code>Locale</code>.
 */
dw.util.Locale.prototype.getDisplayLanguage = function() {};

/**
 * Returns a name for the <code>Locale</code> that is appropriate for
 display to the user, or an empty string if no display name has been
 specified for the <code>Locale</code>.
 The display name is returned in the language defined for this locale,
 and not in the language of the session locale.
 * @memberOf dw.util.Locale
 * @return {String} a name for the <code>Locale</code>that is appropriate for display          to the user, or an empty string if no display name has been          specified for the <code>Locale</code>.
 */
dw.util.Locale.prototype.getDisplayName = function() {};

/**
 * Returns the String representation of the 'localeID'.
 <p/>

 The identifier of the <code>Locale</code>. Contains a combination of the
 language and the country key, concatenated by "_", e.g. "en_US". This
 attribute is the primary key of the class.
 * @memberOf dw.util.Locale
 * @return {String} the String representation of the 'localeID'.
 */
dw.util.Locale.prototype.getID = function() {};

/**
 * Returns a three-letter abbreviation for this <code>Locale's</code> country, or an
 empty string if no country has been specified for the <code>Locale</code>
 .
 * @memberOf dw.util.Locale
 * @return {String} a three-letter abbreviation for this l<code>Locale's</code> country, or an          empty string if no country has been specified for the          <code>Locale</code>.
 */
dw.util.Locale.prototype.getISO3Country = function() {};

/**
 * Returns a three-letter abbreviation for this <code>Locale's</code> language, or an
 empty string if no language has been specified for the
 <code>Locale</code>.
 * @memberOf dw.util.Locale
 * @return {String} a three-letter abbreviation for this <code>Locale's</code> language, or an          empty string if no language has been specified for the          <code>Locale</code>.
 */
dw.util.Locale.prototype.getISO3Language = function() {};

/**
 * Returns the language code for this <code>Locale</code>, which will either
 be the empty string or a lowercase ISO 639 code.
 * @memberOf dw.util.Locale
 * @return {String} the language code for this <code>Locale</code>, which will either          be the empty string or a lowercase ISO 639 code.
 */
dw.util.Locale.prototype.getLanguage = function() {};

/**
 * Returns a <code>Locale</code> instance for the given localeId, or
 <code>null</code> if no such<code>Locale</code> could be found.
 * @memberOf dw.util.Locale
 * @param {String} localeId - the localeID of the desired <code>Locale</code>
 * @return {dw.util.Locale} the <code>Locale</code> instance for the given localeId, or          <code>null</code> if no such<code>Locale</code> could be found.
 * @static
 */
dw.util.Locale.getLocale = function(localeId) {};

/**
 * Returns the String representation of the 'localeID'.

 The identifier of the <code>Locale</code>. Contains a combination of the
 language and the country key, concatenated by "_", e.g. "en_US". This
 attribute is the primary key of the class.
 * @memberOf dw.util.Locale
 * @return {String} the String representation of the 'localeID'.
 */
dw.util.Locale.prototype.toString = function() {};

/**
 * Convenience variable, for an empty and immutable list.
 * @type dw.util.Map
 * @memberOf dw.util.Map
 * @static
 */
dw.util.Map.EMPTY_MAP = {};

/**
 * Clears the map of all objects.
 * @memberOf dw.util.Map
 * @synchronized
 */
dw.util.Map.prototype.clear = function() {};

/**
 * Identifies if this map contains an element identfied
 by the specified key.
 * @memberOf dw.util.Map
 * @param {Object} key - the key to use.
 * @return {Boolean} true if this map contains an element whose key is  equal to the specified key.
 * @synchronized
 */
dw.util.Map.prototype.containsKey = function(key) {};

/**
 * Identifies if this map contains an element identfied
 by the specified value.
 * @memberOf dw.util.Map
 * @param {Object} value - the value to use.
 * @return {Boolean} true if this map contains an element whose value is  equal to the specified value.
 * @synchronized
 */
dw.util.Map.prototype.containsValue = function(value) {};

/**
 * Returns a set of the map's entries.
 * @memberOf dw.util.Map
 * @return {dw.util.Set} a set of the map's entries.
 * @synchronized
 */
dw.util.Map.prototype.entrySet = function() {};

/**
 * Returns the object associated with the key or null.
 * @memberOf dw.util.Map
 * @param {Object} key - the key to use.
 * @return {Object} the object associated with the key or null.
 * @synchronized
 */
dw.util.Map.prototype.get = function(key) {};

/**
 * REturns the size of the map. This is a bean attribute method and
 supports the access to the collections
 length similar to a ECMA array, such as 'products.length'.
 * @memberOf dw.util.Map
 * @return {Number} the number of objects in the map.
 */
dw.util.Map.prototype.getLength = function() {};

/**
 * Identifies if this map is empty.
 * @memberOf dw.util.Map
 * @return {Boolean} true if the map is empty, false otherwise.
 * @synchronized
 */
dw.util.Map.prototype.isEmpty = function() {};

/**
 * Returns a set of the map's keys.
 * @memberOf dw.util.Map
 * @return {dw.util.Set} a set of the map's keys.
 * @synchronized
 */
dw.util.Map.prototype.keySet = function() {};

/**
 * Puts the specified value into the map using the
 specified key to identify it.
 * @memberOf dw.util.Map
 * @param {Object} key - the key to use to identify the value.
 * @param {Object} value - the object to put into the map.
 * @return {Object} previous value associated with specified key, or null if there was no mapping for key.
 * @synchronized
 */
dw.util.Map.prototype.put = function(key, value) {};

/**
 * Copies all of the objects inside the specified map
 into this map.
 * @memberOf dw.util.Map
 * @param {dw.util.Map} other - the map whose contents are copied into this map.
 * @synchronized
 */
dw.util.Map.prototype.putAll = function(other) {};

/**
 * Removes the object from the map that is identified by the key.
 * @memberOf dw.util.Map
 * @param {Object} key - the key that identifies the object to remove.
 * @return {Object} the removed object or null.
 * @synchronized
 */
dw.util.Map.prototype.remove = function(key) {};

/**
 * Returns the size of the map.
 * @memberOf dw.util.Map
 * @return {Number} the number of objects in the map.
 * @synchronized
 */
dw.util.Map.prototype.size = function() {};

/**
 * Returns a collection of the values contained in this map.
 * @memberOf dw.util.Map
 * @return {dw.util.Collection} a collection of the values contained in this map
 * @synchronized
 */
dw.util.Map.prototype.values = function() {};

/**
 * The class represent an entry within a Map.
 * @class
 * @extends Object
 */
dw.util.MapEntry = function() {};
dw.util.MapEntry.prototype = new Object();

/**
 * Returns the entry's key.
 * @memberOf dw.util.MapEntry
 * @return {Object} the entry's key.
 */
dw.util.MapEntry.prototype.getKey = function() {};

/**
 * Returns the entry's value.
 * @memberOf dw.util.MapEntry
 * @return {Object} the entry's value.
 */
dw.util.MapEntry.prototype.getValue = function() {};

/**
 * Instantiates a new key using compound key components. A key can consist of a single string (e.g. product id) or
 multiple string components (e.g. product id and site). Ctor accepts single string or multiple components for a
 compound key.
 * @class
 * @extends Object
 * @param {String[]} keyComponents - the key components
 * @varArgs
 */
dw.util.MappingKey = function(keyComponents) {};
dw.util.MappingKey.prototype = new Object();

/**
 * Gets the (possible compound) key. If the key consists of only of a single value, the string array
 will simply contain a single element.
 * @memberOf dw.util.MappingKey
 * @return {String[]} the key
 */
dw.util.MappingKey.prototype.getKeyComponents = function() {};

/**
 * Gets a key that contains only a single key component (i.e. that is not a compound key). Returns null if this is
 not a single component key.
 * @memberOf dw.util.MappingKey
 * @return {String} the single key
 */
dw.util.MappingKey.prototype.getSingleComponentKey = function() {};

/**
 * Used to manage and interface with mappings loaded into the system via the ImportKeyValueMapping pipelet. Class can be
 used to retrieve values for known keys, iterate over all keys known in a mapping or list all known mappings.
 <p>
 Mappings are read into the system using the ImportKeyValueMapping pipelet.
 <p>
 Generic mapping capability enables you to map keys to values, with the mapping stored in a high-performance data
 store that is independent of the database. This supports large datasets, with high performance for lookup. An example
 of using this feature is to map SKUs from a backend system to Demandware SKUs on-the-fly in Demandware script, so
 that interaction with the backend system is transparent and does not require adding Demandware SKUs to the third
 party system.
 * @class
 * @extends Object
 */
dw.util.MappingMgr = function() {};
dw.util.MappingMgr.prototype = new Object();

/**
 * Returns a map containing value(s) associated to the specified key for the specified mapping.
 * @memberOf dw.util.MappingMgr
 * @param {String} mappingName - the mapping name
 * @param {dw.util.MappingKey} key - the key
 * @return {dw.util.Map}
 * @exception IllegalArgumentException if mappingName is unknown
 * @static
 */
dw.util.MappingMgr.get = function(mappingName, key) {};

/**
 * Gets the first string value of a mapping by name and key. Ordering is determined by the input CSV file. Throws an
 exception if mappingName does not exist.
 * @memberOf dw.util.MappingMgr
 * @param {String} mappingName - the mapping name
 * @param {dw.util.MappingKey} key - the key
 * @return {String} the value if a single value. The first value sequentially if a compound value.
 * @exception IllegalArgumentException if mappingName is unknown
 * @static
 */
dw.util.MappingMgr.getFirst = function(mappingName, key) {};

/**
 * List all known mappings.
 * @memberOf dw.util.MappingMgr
 * @return {dw.util.Collection} the collection of mapping names
 * @static
 */
dw.util.MappingMgr.getMappingNames = function() {};

/**
 * Key iterator over known mapping keys by mapping name. Throws an exception if mappingName does not exist.
 * @memberOf dw.util.MappingMgr
 * @param {String} mappingName - the mapping name
 * @return {dw.util.SeekableIterator} the seekable iterator
 * @exception IllegalArgumentException if mappingName is unknown
 * @static
 */
dw.util.MappingMgr.keyIterator = function(mappingName) {};

/**
 * Constructs the comparator from the variable length argument list. The
 parameters are property names that are to be used for the comparison.
 When comparing two objects, the comparator first compares them by the
 first property. If the two objects have equal values for the first
 property, the comparator then compares them by the second property,
 etc, until one object is determined to be less than the other or they are
 equal. Each parameter must be either a simple name like "totalSum" or can
 be a reference to a custom attribute like "custom.mytotal". Each
 parameter may also be prefixed with an optional '+' or '-' character to
 indicate that the objects should be sorted ascending or descending
 respectively by that property. If not specified for a given property then
 '+' (ascending sort) is assumed.

 For example: new PropertyComparator("+prop1", "-prop2", "prop3")
 constructs a Comparator which sorts by prop1 ascending, prop2 descending,
 and finally prop3 ascending.

 The comparator created with this constructor treats null values as
 greater than any other value.
 * @class
 * @extends Object
 * @param {String} property - The property name to compare by first.
 * @param {String[]} otherProperties - Additional property names to sort by if two             objects have the same values for the first property.
 * @varArgs
 */
dw.util.PropertyComparator = function(property, otherProperties) {};
dw.util.PropertyComparator.prototype = new Object();

/**
 * Constructs the comparator. The specified parameter is the name of the
 property that is used for the comparison. The parameter must be either a
 simple name like "totalSum" or can be a reference to a custom attribute
 like "custom.mytotal".

 The comparator created with this constructor is setup with ascending or
 descending sort order depending on value of sortOrder and null values
 being greater than any other value.
 * @class
 * @extends Object
 * @param {String} propertyName - the name of the property that is used for the             comparison.
 * @param {Boolean} sortOrder - the sort order to use where true means ascending and             false means descending.
 */
dw.util.PropertyComparator = function(propertyName, sortOrder) {};
dw.util.PropertyComparator.prototype = new Object();

/**
 * Constructs the comparator. The specified parameter is the name of the
 property that is used for the comparison. The parameter must be either a
 simple name like "totalSum" or can be a reference to a custom attribute
 like "custom.mytotal".
 * @class
 * @extends Object
 * @param {String} propertyName - the name of the property that is used for the             comparison.
 * @param {Boolean} sortOrder - the sort order to use where true means ascending and             false means descending.
 * @param {Boolean} nullGreater - true means null is greater than any other value
 */
dw.util.PropertyComparator = function(propertyName, sortOrder, nullGreater) {};
dw.util.PropertyComparator.prototype = new Object();

/**
 * Compares its two arguments for order. Returns a negative integer, zero,
 or a positive integer as the first argument is less than, equal to, or
 greater than the second. By default a null value is treated always
 greater than any other value. In the constructor of a PropertyComparator
 this default behavior can be changed.
 * @memberOf dw.util.PropertyComparator
 * @param {Object} arg1 - the first object to compare.
 * @param {Object} arg2 - the second object to compare.
 * @return {Number} a negative integer, zero, or a positive integer as the first          argument is less than, equal to, or greater than the second.
 */
dw.util.PropertyComparator.prototype.compare = function(arg1, arg2) {};

/**
 * A special Iterator, which is returned by the system to iterate through large
 sets of data. The iterator supports seeking forward to a random position.
 This is a typical action when paging forward in a result set. The Iterator is
 primarily returned from search operations.<br/><br/>
 Starting with API version 2.10.6, these iterators can only
 be iterated once to avoid possible memory problems for really large
 result sets. Putting them into the pipeline dictionary and trying to loop them
 multiple times is no longer possible because this would require buffering the
 iterated elements internally.<br/><br/>
 Prior to 2.10.6, and for all customers still running API version 2.10.4
 (compatibility mode), SeekableIterator instances stored in the pipeline
 dictionary could be iterated multiple times (for example, by several loop
 nodes).
 * @class
 * @extends dw.util.Iterator
 */
dw.util.SeekableIterator = function() {};
dw.util.SeekableIterator.prototype = new dw.util.Iterator();

/**
 * Returns a list representing a subsequence within the iterator. The underlying
 system resources of the iterator will be closed at the end. The start
 position must be 0 or a positive number.
 * @memberOf dw.util.SeekableIterator
 * @param {Number} start - the position from which to start the subsequence.
 * @param {Number} size - the number of items to collect.
 * @return {dw.util.List} the list containing the subsequence.
 */
dw.util.SeekableIterator.prototype.asList = function(start, size) {};

/**
 * Closes all system resources associated with this iterator.
 <p>
 Calling this method is strongly recommended if not all elements of this iterator are
 retrieved. This will allow the system to release system resources immediately.
 The <code>SeekableIterator</code> is closed automatically if all elements are retrieved.
 Then calling method <code>close()</code> is optional.
 </p>
 * @memberOf dw.util.SeekableIterator
 */
dw.util.SeekableIterator.prototype.close = function() {};

/**
 * Returns the first element of this iterator and closes it.
 <p>
 If the iterator does not contain another element <code>null</code> is returned.
 If any of the methods next(), forward(int) or forward(int,int) have been called before
 <code>null</code> is returned.
 This method is useful if only the first element of an iterator is needed.
 </p>
 A possible example for the use of first() is:

 <code>OrderMgr.queryOrders("queryString", "sortString", args).first()</code>
 * @memberOf dw.util.SeekableIterator
 * @return {Object} the first element of an iterator and closes the iterator  or returns <code>null</code> if the iterator doesn't have another element  or the methods next(), forward(int) or forward(int,int) have already been called.
 */
dw.util.SeekableIterator.prototype.first = function() {};

/**
 * Seeks forward by the given number of elements. The number of
 seek steps must be 0 or a positive number.
 * @memberOf dw.util.SeekableIterator
 * @param {Number} n - the number of elements to seek forward.
 */
dw.util.SeekableIterator.prototype.forward = function(n) {};

/**
 * Seeks forward by the given number of elements and limits the
 iteration to the given number of elements. The method is typically
 used to position and trim an iterator for paging. The getCount()
 method will still return the total count of the underlying data
 collection.
 * @memberOf dw.util.SeekableIterator
 * @param {Number} n - the number of elements to seek forward.
 * @param {Number} size - the maximum number of elements return from the iterator
 */
dw.util.SeekableIterator.prototype.forward = function(n, size) {};

/**
 * Returns the total element count for this iterator. The
 method returns -1, if the total count is not known.
 * @memberOf dw.util.SeekableIterator
 * @return {Number} the total element count for this iterator or -1.
 */
dw.util.SeekableIterator.prototype.getCount = function() {};

/**
 *
 * @memberOf dw.util.SeekableIterator
 * @return {Boolean}
 */
dw.util.SeekableIterator.prototype.hasNext = function() {};

/**
 *
 * @memberOf dw.util.SeekableIterator
 * @return {Object}
 */
dw.util.SeekableIterator.prototype.next = function() {};

/**
 * Convenience variable, for an empty and immutable list.
 * @type dw.util.Set
 * @memberOf dw.util.Set
 * @static
 */
dw.util.Set.EMPTY_SET = {};

/**
 * Constructor to create a new SortedMap.
 * @class
 * @extends dw.util.Map
 */
dw.util.SortedMap = function() {};
dw.util.SortedMap.prototype = new dw.util.Map();

/**
 * Constructor to create a new SortedMap.

 The constructor takes a compare function as additional parameter. The
 order of the elements is determined with a comparator (see PropertyComparator)
 or with the help of the given function. The function must take two parameters
 and return a value &lt;0 if the first parameter is smaller than the second,
 a value of 0 if both are equal and a value if &gt;0 if the first one is greater
 than the second parameter.
 * @class
 * @extends dw.util.Map
 * @param {Object} comparator - an instance of a PropertyComparator or a comparision function
 */
dw.util.SortedMap = function(comparator) {};
dw.util.SortedMap.prototype = new dw.util.Map();

/**
 * Returns a shallow copy of this map.
 * @memberOf dw.util.SortedMap
 * @return {dw.util.SortedMap} a shallow copy of this map.
 */
dw.util.SortedMap.prototype.clone = function() {};

/**
 * Returns the first (lowest) key currently in this sorted map.
 * @memberOf dw.util.SortedMap
 * @return {Object} the first (lowest) key currently in this sorted map.
 */
dw.util.SortedMap.prototype.firstKey = function() {};

/**
 * Returns a view of the portion of this map whose keys are strictly less than toKey.
 * @memberOf dw.util.SortedMap
 * @param {Object} key - high endpoint (exclusive) of the headMap.
 * @return {dw.util.SortedMap} a view of the portion of this map whose keys are strictly less than toKey.
 */
dw.util.SortedMap.prototype.headMap = function(key) {};

/**
 * Returns the last (highest) key currently in this sorted map.
 * @memberOf dw.util.SortedMap
 * @return {Object} the last (highest) key currently in this sorted map.
 */
dw.util.SortedMap.prototype.lastKey = function() {};

/**
 * Returns a view of the portion of this map whose keys range from fromKey, inclusive,
 to toKey, exclusive. (If fromKey and toKey are equal, the returned sorted map is empty.)
 * @memberOf dw.util.SortedMap
 * @param {Object} from - low endpoint (inclusive) of the subMap.
 * @param {Object} to - high endpoint (exclusive) of the subMap.
 * @return {dw.util.SortedMap} a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive.
 */
dw.util.SortedMap.prototype.subMap = function(from, to) {};

/**
 * Returns a view of the portion of this map whose keys are greater than or equal
 to fromKey. The returned sorted map is backed by this map, so changes in the
 returned sorted map are reflected in this map, and vice-versa. The returned
 sorted map supports all optional map operations.
 * @memberOf dw.util.SortedMap
 * @param {Object} key - low endpoint (inclusive) of the tailMap.
 * @return {dw.util.SortedMap} a view of the portion of this map whose keys are greater than or equal to fromKey.
 */
dw.util.SortedMap.prototype.tailMap = function(key) {};

/**
 * Constructor to create a new SortedSet.
 * @class
 * @extends dw.util.Set
 */
dw.util.SortedSet = function() {};
dw.util.SortedSet.prototype = new dw.util.Set();

/**
 * Constructor to create a new SortedSet.

 The constructor takes a compare function as additional parameter. The
 order of the elements is determined with a comparator (see PropertyComparator)
 or with the help of the given function. The function must take two parameters
 and return a value &lt;0 if the first parameter is smaller than the second,
 a value of 0 if both are equal and a value if &gt;0 if the first one is greater
 than the second parameter.
 * @class
 * @extends dw.util.Set
 * @param {Object} comparator - an instance of a PropertyComparator or a comparision function
 */
dw.util.SortedSet = function(comparator) {};
dw.util.SortedSet.prototype = new dw.util.Set();

/**
 * Constructor for a new SortedSet. The constructor
 initializes the SortedSet with the elements of the
 given collection.
 * @class
 * @extends dw.util.Set
 * @param {dw.util.Collection} collection - the collection of objects that are  inserted into the set.
 */
dw.util.SortedSet = function(collection) {};
dw.util.SortedSet.prototype = new dw.util.Set();

/**
 * Returns a shallow copy of this set.
 * @memberOf dw.util.SortedSet
 * @return {dw.util.SortedSet} a shallow copy of this set.
 */
dw.util.SortedSet.prototype.clone = function() {};

/**
 * Returns the first (lowest) element currently in this sorted set.
 * @memberOf dw.util.SortedSet
 * @return {Object} the first (lowest) element currently in this sorted set.
 */
dw.util.SortedSet.prototype.first = function() {};

/**
 * Returns a view of the portion of this sorted set whose elements
 are strictly less than toElement. The returned sorted set is
 backed by this sorted set, so changes in the returned sorted
 set are reflected in this sorted set, and vice-versa. The returned
 sorted set supports all optional set operations.
 * @memberOf dw.util.SortedSet
 * @param {Object} key - high endpoint (exclusive) of the headSet.
 * @return {dw.util.SortedSet} a view of the specified initial range of this sorted set.
 */
dw.util.SortedSet.prototype.headSet = function(key) {};

/**
 * Returns the last (highest) element currently in this sorted set.
 * @memberOf dw.util.SortedSet
 * @return {Object} the last (highest) element currently in this sorted set.
 */
dw.util.SortedSet.prototype.last = function() {};

/**
 * Returns a view of the portion of this sorted set whose elements
 range from fromElement, inclusive, to toElement, exclusive. (If
 fromElement and toElement are equal, the returned sorted set is empty.)
 The returned sorted set is backed by this sorted set, so changes in
 the returned sorted set are reflected in this sorted set, and vice-versa.
 The returned sorted set supports all optional set operations that this
 sorted set supports.
 * @memberOf dw.util.SortedSet
 * @param {Object} from - low endpoint (inclusive) of the subSet.
 * @param {Object} to - high endpoint (exclusive) of the subSet.
 * @return {dw.util.SortedSet} a view of the specified range within this sorted set.
 */
dw.util.SortedSet.prototype.subSet = function(from, to) {};

/**
 * Returns a view of the portion of this sorted set whose elements
 are greater than or equal to fromElement. The returned sorted set
 is backed by this sorted set, so changes in the returned sorted
 set are reflected in this sorted set, and vice-versa. The returned
 sorted set supports all optional set operations.
 * @memberOf dw.util.SortedSet
 * @param {Object} key - low endpoint (inclusive) of the tailSet.
 * @return {dw.util.SortedSet} a view of the specified final range of this sorted set.
 */
dw.util.SortedSet.prototype.tailSet = function(key) {};

/**
 * String utility class.
 * @class
 * @extends Object
 */
dw.util.StringUtils = function() {};
dw.util.StringUtils.prototype = new Object();

/**
 * String encoding type HTML.
 * @type Number
 * @memberOf dw.util.StringUtils
 * @see <a href="class_dw_util_StringUtils.html#dw_util_StringUtils_encodeString_String_int_DetailAnchor">encodeString(String, Number)</a>
 * @static
 * @const
 */
dw.util.StringUtils.ENCODE_TYPE_HTML = 0;

/**
 * String encoding type WML.
 * @type Number
 * @memberOf dw.util.StringUtils
 * @see <a href="class_dw_util_StringUtils.html#dw_util_StringUtils_encodeString_String_int_DetailAnchor">encodeString(String, Number)</a>
 * @deprecated Don't use this constant anymore.
 * @static
 * @const
 */
dw.util.StringUtils.ENCODE_TYPE_WML = 0;

/**
 * String encoding type XML.
 * @type Number
 * @memberOf dw.util.StringUtils
 * @see <a href="class_dw_util_StringUtils.html#dw_util_StringUtils_encodeString_String_int_DetailAnchor">encodeString(String, Number)</a>
 * @static
 * @const
 */
dw.util.StringUtils.ENCODE_TYPE_XML = 0;

/**
 * String truncate mode 'char'. Truncate string to the nearest character. Default mode if no truncate mode is specified.
 * @type String
 * @memberOf dw.util.StringUtils
 * @see <a href="class_dw_util_StringUtils.html#dw_util_StringUtils_truncate_String_int_String_String_DetailAnchor">truncate(String, Number, String, String)</a>
 * @static
 * @const
 */
dw.util.StringUtils.TRUNCATE_CHAR = '';

/**
 * String truncate mode 'sentence'. Truncate string to the nearest sentence.
 * @type String
 * @memberOf dw.util.StringUtils
 * @see <a href="class_dw_util_StringUtils.html#dw_util_StringUtils_truncate_String_int_String_String_DetailAnchor">truncate(String, Number, String, String)</a>
 * @static
 * @const
 */
dw.util.StringUtils.TRUNCATE_SENTENCE = '';

/**
 * String truncate mode 'word'. Truncate string to the nearest word.
 * @type String
 * @memberOf dw.util.StringUtils
 * @see <a href="class_dw_util_StringUtils.html#dw_util_StringUtils_truncate_String_int_String_String_DetailAnchor">truncate(String, Number, String, String)</a>
 * @static
 * @const
 */
dw.util.StringUtils.TRUNCATE_WORD = '';

/**
 * Interprets a Base64 encoded string as byte stream of an UTF-8 encoded string.

 The method throws an IllegalArgumentException in case the encoding
 failed because of a mismatch between the input string and the character encoding.
 * @memberOf dw.util.StringUtils
 * @param {String} base64 - the Base64 encoded string - should not be empty or <code>null</code>.
 * @return {String} the decoded string.
 * @static
 */
dw.util.StringUtils.decodeBase64 = function(base64) {};

/**
 * Interprets a Base64 encoded string as the byte stream representation of a string.
 The given character encoding is used for decoding the byte stream into the
 character representation.

 The method throws an IllegalArgumentException in case the encoding
 failed because of a mismatch between the input String and the character encoding.
 * @memberOf dw.util.StringUtils
 * @param {String} base64 - the Base64 encoded string - should not be empty or <code>null</code>.
 * @param {String} characterEncoding - the character encoding to read the input string -                 should not be empty or <code>null</code>.
 * @return {String} the decoded string.
 * @static
 */
dw.util.StringUtils.decodeBase64 = function(base64, characterEncoding) {};

/**
 * Convert a given syntax-safe string to a string according to the
 selected character entity encoding type.
 * @memberOf dw.util.StringUtils
 * @param {String} str - String to be decoded
 * @param {Number} type - decode type
 * @return {String} decoded string
 * @static
 */
dw.util.StringUtils.decodeString = function(str, type) {};

/**
 * Encodes the byte representation of the given string as Base64.
 The string is converted into the byte representation with UTF-8 encoding.

 The method throws an IllegalArgumentException in case the encoding
 failed because of a mismatch between the input string and the character encoding.
 * @memberOf dw.util.StringUtils
 * @param {String} str - the string to encode - should not be empty or <code>null</code>.
 * @return {String} the encoded string.
 * @static
 */
dw.util.StringUtils.encodeBase64 = function(str) {};

/**
 * Encodes the byte representation of the given string as Base64.
 The string is converted into the byte representation using the given
 character encoding.

 The method throws an IllegalArgumentException in case the encoding
 failed because of a mismatch between the input string and the character encoding.
 * @memberOf dw.util.StringUtils
 * @param {String} str - the string to encode - should not be empty or <code>null</code>.
 * @param {String} characterEncoding - the character encoding to read the input string -                should not be empty or <code>null</code>.
 * @return {String} the encoded string.
 * @static
 */
dw.util.StringUtils.encodeBase64 = function(str, characterEncoding) {};

/**
 * Convert a given string to a syntax-safe string according to the
 selected character entity encoding type.
 * @memberOf dw.util.StringUtils
 * @param {String} str - String to be encoded
 * @param {Number} type - encode type
 * @return {String} encoded string
 * @static
 */
dw.util.StringUtils.encodeString = function(str, type) {};

/**
 * Returns a formatted string using the specified format and arguments.
 The formatting string is a Java MessageFormat expression, e.g.
 format( "Message: {0}, {1}", "test", 10 ) would result in "Message: test, 10".

 If a Collection is passed as the only argument, the elements of this collection
 are used as arguments for the formatting.
 * @memberOf dw.util.StringUtils
 * @param {String} format - Java like formatting string.
 * @param {Object[]} args - optional list of arguments or a collection, which are included into the result string
 * @return {String} the formatted result string.
 * @static
 * @varArgs
 */
dw.util.StringUtils.format = function(format, args) {};

/**
 * Formats a Calendar object with Calendar.INPUT_DATE_TIME_PATTERN format
 of the current request locale, for example "MM/dd/yyyy h:mm a" for the
 locale en_US. The used time zone is the time zone of the calendar object.
 * @memberOf dw.util.StringUtils
 * @param {dw.util.Calendar} calendar - the calendar object.
 * @return {String} a string representation of the formatted calendar object.
 * @static
 */
dw.util.StringUtils.formatCalendar = function(calendar) {};

/**
 * Formats a Calendar object with the provided date format. The format is a
 Java date format, like "yyy-MM-dd". The used time zone is the time zone
 of the calendar object.
 * @memberOf dw.util.StringUtils
 * @param {dw.util.Calendar} calendar - the calendar object to be printed
 * @param {String} format - the format to use.
 * @return {String} a string representation of the formatted calendar object.
 * @static
 */
dw.util.StringUtils.formatCalendar = function(calendar, format) {};

/**
 * Formats a Calendar object with the date format defined by the provided locale
 and Calendar pattern.  The locale can be for instance the request.getLocale().
 The used time  zone is the time zone of the calendar object.
 * @memberOf dw.util.StringUtils
 * @param {dw.util.Calendar} calendar - the calendar object to be printed
 * @param {String} locale - the locale, which defines the date format to be used
 * @param {Number} pattern - the pattern is one of a calendar pattern e.g. SHORT_DATE_PATTERN                 as defined in the regional settings for the locale
 * @return {String} a string representation of the formatted calendar object.
 * @static
 */
dw.util.StringUtils.formatCalendar = function(calendar, locale, pattern) {};

/**
 * Formats a date with the default date format of the current site.
 * @memberOf dw.util.StringUtils
 * @param {Date} date - the date to format.
 * @return {String} a string representation of the formatted date.
 * @deprecated Use <a href="class_dw_util_StringUtils.html#dw_util_StringUtils_formatCalendar_Calendar_String_DetailAnchor">formatCalendar(Calendar, String)</a> instead.
 * @static
 */
dw.util.StringUtils.formatDate = function(date) {};

/**
 * Formats a date with the provided date format. The format is the
 Java date format, like "YYYY-MM-DD". The locale of the calling context
 request is used in formatting.
 * @memberOf dw.util.StringUtils
 * @param {Date} date - the date to format.
 * @param {String} format - the format to use.
 * @return {String} a string representation of the formatted date.
 * @deprecated Use <a href="class_dw_util_StringUtils.html#dw_util_StringUtils_formatCalendar_Calendar_String_DetailAnchor">formatCalendar(Calendar, String)</a> instead.
 * @static
 */
dw.util.StringUtils.formatDate = function(date, format) {};

/**
 * Formats a date with the provided date format in specified locale. The format is
 Java date format, like "YYYY-MM-DD".
 * @memberOf dw.util.StringUtils
 * @param {Date} date - the date to format.
 * @param {String} format - the format to use.
 * @param {String} locale - the locale to use.
 * @return {String} a string representation of the formatted date.
 * @deprecated Use <a href="class_dw_util_StringUtils.html#dw_util_StringUtils_formatCalendar_Calendar_String_DetailAnchor">formatCalendar(Calendar, String)</a> instead.
 * @static
 */
dw.util.StringUtils.formatDate = function(date, format, locale) {};

/**
 * Returns a formatted integer number using the default integer format of the current
 site. The method can be also called to format a floating number as integer.
 * @memberOf dw.util.StringUtils
 * @param {Number} number - the number to format.
 * @return {String} a formatted an integer number with the default integer format of the current  site.
 * @static
 */
dw.util.StringUtils.formatInteger = function(number) {};

/**
 * Formats a Money Object with the default money format of the current request locale.
 * @memberOf dw.util.StringUtils
 * @param {dw.value.Money} money - The Money instance that should be formatted.
 * @return {String} The formatted String representation of the passed             money. In case of an error the string 'N/A' is returned.
 * @static
 */
dw.util.StringUtils.formatMoney = function(money) {};

/**
 * Returns a formatted number using the default number format of the current site.
 * @memberOf dw.util.StringUtils
 * @param {Number} number - the number to format.
 * @return {String} a formatted number using the default number format of the current site.
 * @static
 */
dw.util.StringUtils.formatNumber = function(number) {};

/**
 * Returns a formatted string using the specified number and format. The format is
 Java number format, like "#,###.00". To format as an integer
 number provide "0" as format string. The locale of the calling context
 request is used in formatting.
 * @memberOf dw.util.StringUtils
 * @param {Number} number - the number to format.
 * @param {String} format - the format to use.
 * @return {String} a formatted string using the specified number and format.
 * @static
 */
dw.util.StringUtils.formatNumber = function(number, format) {};

/**
 * Returns a formatted number as a string using the specified number format in specified locale. The format is
 Java number format, like "#,###.00". To format as an integer
 number provide "0" as format string.
 * @memberOf dw.util.StringUtils
 * @param {Number} number - the number to format.
 * @param {String} format - the format to use.
 * @param {String} locale - the locale to use.
 * @return {String} a formatted number as a string using the specified number format in specified locale.
 * @static
 */
dw.util.StringUtils.formatNumber = function(number, format, locale) {};

/**
 * Return a string in which specified number of characters in the suffix is not changed
 and the rest of the characters replaced with specified character.
 * @memberOf dw.util.StringUtils
 * @param {String} str - String to garble
 * @param {String} replaceChar - character to use as a replacement
 * @param {Number} suffixLength - length of the suffix
 * @return {String} the garbled string.
 * @static
 */
dw.util.StringUtils.garble = function(str, replaceChar, suffixLength) {};

/**
 * Returns the string with leading white space removed.
 * @memberOf dw.util.StringUtils
 * @param {String} str - the String to remove characters from.
 * @return {String} the string with leading white space removed.
 * @static
 */
dw.util.StringUtils.ltrim = function(str) {};

/**
 * This method provides cell padding functionality to the template.
 * @memberOf dw.util.StringUtils
 * @param {String} str - the string to process
 * @param {Number} width - The absolute value of this number defines the                       width of the cell. A possitive number forces left,                       a negative number right alignment.                       A '0' doesn't change the string.
 * @return {String} the processed string.
 * @static
 */
dw.util.StringUtils.pad = function(str, width) {};

/**
 * Returns the string with trailing white space removed.
 * @memberOf dw.util.StringUtils
 * @param {String} str - the String to remove characters from.
 * @return {String} the string with trailing white space removed.
 * @static
 */
dw.util.StringUtils.rtrim = function(str) {};

/**
 * Convert a given string to an HTML-safe string.
 This method substitutes characters that conflict with HTML syntax
 (&lt;,&gt;,&amp;,&quot;) and characters that are beyond the ASCII
 chart (Unicode 160-255) to HTML 3.2 named character entities.
 * @memberOf dw.util.StringUtils
 * @param {String} str - String to be converted.
 * @return {String} converted string.
 * @static
 */
dw.util.StringUtils.stringToHtml = function(str) {};

/**
 * Converts a given string to a WML-safe string.
 This method substitutes characters that conflict with WML syntax
 (&lt;,&gt;,&amp;,&apos;,&quot;$) to WML named character entities.
 * @memberOf dw.util.StringUtils
 * @param {String} str - String to be converted.
 * @return {String} the converted string.
 * @deprecated Don't use this method anymore
 * @static
 */
dw.util.StringUtils.stringToWml = function(str) {};

/**
 * Converts a given string to a XML-safe string.
 This method substitutes characters that conflict with XML syntax
 (&lt;,&gt;,&amp;,&apos;,&quot;) to XML named character entities.
 * @memberOf dw.util.StringUtils
 * @param {String} str - String to be converted.
 * @return {String} the converted string.
 * @static
 */
dw.util.StringUtils.stringToXml = function(str) {};

/**
 * Returns the string with leading and trailing white space removed.
 * @memberOf dw.util.StringUtils
 * @param {String} str - the string to trim.
 * @return {String} the string with leading and trailing white space removed.
 * @static
 */
dw.util.StringUtils.trim = function(str) {};

/**
 * Truncate the string to the specified length using specified truncate mode. Optionally,
 append suffix to truncated string.
 * @memberOf dw.util.StringUtils
 * @param {String} str - string to truncate
 * @param {Number} maxLength - maximum length of the truncated string, not including suffix
 * @param {String} mode - truncate mode (TRUNCATE_CHAR, TRUNCATE_WORD, TRUNCATE_SENTENCE), if null TRUNCATE_CHAR is assumed
 * @param {String} suffix - suffix append to the truncated string
 * @return {String} the truncated string.
 * @static
 */
dw.util.StringUtils.truncate = function(str, maxLength, mode, suffix) {};

/**
 * Creates a new template. Doesn't render the template until
 <a href="class_dw_util_Template.html#dw_util_Template_render_DetailAnchor">Template.render()</a> or <a href="class_dw_util_Template.html#dw_util_Template_render_Map_DetailAnchor">Template.render(Map)</a>
 is invoked. The current request localeID will be used for Rendering.
 * @class
 * @extends Object
 * @param {String} templateName - file system path to the ISML template
 */
dw.util.Template = function(templateName) {};
dw.util.Template.prototype = new Object();

/**
 * Creates a new template with the locale being set to the given localeID.
 Rendering doesn't happen until <a href="class_dw_util_Template.html#dw_util_Template_render_DetailAnchor">Template.render()</a> or
 <a href="class_dw_util_Template.html#dw_util_Template_render_Map_DetailAnchor">Template.render(Map)</a> is invoked.
 * @class
 * @extends Object
 * @param {String} templateName - file system path to the ISML template
 * @param {String} localeID - localeID to be used for Rendering
 */
dw.util.Template = function(templateName, localeID) {};
dw.util.Template.prototype = new Object();

/**
 * Renders the template specified at instantiation time, without any
 substitution parameters. Any isprint tags referring to param/pdict will
 be unresolved and will be replaced with empty strings. If there's an
 explicit localeID set through <a href="class_dw_util_Template.html#dw_util_Template_setLocale_String_DetailAnchor">Template.setLocale(String)</a>,
 it takes precedence over the localeID associated with the current
 request.
 * @memberOf dw.util.Template
 * @return {dw.value.MimeEncodedText} MimeEncodedText with isprint tags referring to param/pdict          replaced with an empty String
 */
dw.util.Template.prototype.render = function() {};

/**
 * Renders the template specified at instantiation time with the given
 substitution parameters. These parameters are available to ISML templates
 through variables named 'param' and 'pdict'. Note that in this context,
 pdict is not referring to the system PipelineDictionary, as the System
 Pipeline Dictionary is not accessible from this script API. If there's an
 explicit localeID set through <a href="class_dw_util_Template.html#dw_util_Template_setLocale_String_DetailAnchor">Template.setLocale(String)</a>,
 it takes precedence over the localeID associated with the current
 request.
 * @memberOf dw.util.Template
 * @param {dw.util.Map} params - Map of substitution parameters which are specified within the             ISML template. Access is available from within the ISML             template through named variables param or pdict.
 * @return {dw.value.MimeEncodedText} MimeEncodedText containing the rendered template. Variables in          the template referring to param/pdict are replaced with the value          from the params map or empty if the value isn't found in the map
 */
dw.util.Template.prototype.render = function(params) {};

/**
 * Sets an optional localeID which is used instead of the current requests
 localeID.
 * @memberOf dw.util.Template
 * @param {String} localeID - to be used for processing this template. Throws an exception             if localeID is blank
 * @return {dw.util.Template} this Template object
 */
dw.util.Template.prototype.setLocale = function(localeID) {};

/**
 * Utility methods around generating unique IDs.
 * @class
 * @extends Object
 */
dw.util.UUIDUtils = function() {};
dw.util.UUIDUtils.prototype = new Object();

/**
 * The method generates a unique id.
 * @memberOf dw.util.UUIDUtils
 * @return {String} the generated unique id
 * @static
 */
dw.util.UUIDUtils.createUUID = function() {};

/**
 * The class represents a single value for an Enumeration type. Enumeration
 types can be configured through the business manager for custom attributes.
 Some system attributes, e.g. the order status, are also of Enumeration types.

 <p>Each EnumValue has a base value and a display value.  The type of the base
 value can be either String or Integer. Every EnumValue has a display value.</p>

 <p>If the value of an Enumeration type object attribute is
 <code>null</code>, when that attribute is accessed an EnumValue is returned
 that has a base value of <code>null</code>, rather than <code>null</code>
 itself.  This means that <code>empty(object.attribute)</code> would be
 <code>false</code>, and <code>empty(object.attribute.value)</code> would be
 <code>true</code></p>.
 * @class
 * @extends Object
 */
dw.value.EnumValue = function() {};
dw.value.EnumValue.prototype = new Object();

/**
 * Returns the display value of the enumeration value. If no display value
 is configured the method return the string representation of the value.
 * @memberOf dw.value.EnumValue
 * @return {String}
 */
dw.value.EnumValue.prototype.getDisplayValue = function() {};

/**
 * Returns the value of the enumeration value. This is either an integer
 value or a string.
 * @memberOf dw.value.EnumValue
 * @return {Object}
 */
dw.value.EnumValue.prototype.getValue = function() {};

/**
 * Same as getDisplayValue().
 * @memberOf dw.value.EnumValue
 * @return {String}
 */
dw.value.EnumValue.prototype.toString = function() {};

/**
 * According the ECMA specification, this method returns the "natural"
 primitive value of this object. Here it is equivalent to getValue().
 * @memberOf dw.value.EnumValue
 * @return {Object}
 */
dw.value.EnumValue.prototype.valueOf = function() {};

/**
 * Creates a new MimeEncodedText with explicit values for mime type and
 encoding.
 * @class
 * @extends Object
 * @param {String} text - text to be stored
 * @param {String} mimeType - mime type of the text. For example, "text/plain" or             "text/html"
 * @param {String} encoding - Encoding of the text. For example, "UTF-8" or "ISO-8859-1"
 */
dw.value.MimeEncodedText = function(text, mimeType, encoding) {};
dw.value.MimeEncodedText.prototype = new Object();

/**
 * Creates a new MimeEncodedText with the given String as text, mime type of
 "text/plain;charset=UTF-8" and encoding of "UTF-8"
 * @class
 * @extends Object
 * @param {String} text - text to be stored
 */
dw.value.MimeEncodedText = function(text) {};
dw.value.MimeEncodedText.prototype = new Object();

/**
 * Returns the encoding of the text. Encoding is set at creation time and
 can't be changed afterwards
 * @memberOf dw.value.MimeEncodedText
 * @return {String} encoding of the text
 */
dw.value.MimeEncodedText.prototype.getEncoding = function() {};

/**
 * Returns the mime type of the text. Mime type is set at creation time and
 can't be changed afterwards.
 * @memberOf dw.value.MimeEncodedText
 * @return {String} the MimeType of the text
 */
dw.value.MimeEncodedText.prototype.getMimeType = function() {};

/**
 * Returns the text. Text is set at creation time and can't be changed
 afterwards.
 * @memberOf dw.value.MimeEncodedText
 * @return {String} text stored
 */
dw.value.MimeEncodedText.prototype.getText = function() {};

/**
 * Constructs a new money instance with the specified amount for the specified
 currency. Note that each currency has a precision (number of digits after the
 decimal point) and that values beyond the precision are "rounded up" to their
 "nearest neighbor" following the rules of <code>java.math.RoundingMode.HALF_UP</code>.
 * @class
 * @extends Object
 * @param {Number} value - The value of the money instance. Must not be <code>null</code>.
 * @param {String} currencyCode - The ISO 4217 mnemonic of currency the amount                      is specified in.  Must not be <code>null</code>.
 */
dw.value.Money = function(value, currencyCode) {};
dw.value.Money.prototype = new Object();

/**
 * Represents that there is no money available.
 * @type dw.value.Money
 * @memberOf dw.value.Money
 * @static
 * @const
 */
dw.value.Money.NOT_AVAILABLE = {};

/**
 * Returns a Money instance by adding
 the specified Money object to the current object. Only objects representing the
 same currency can be added. If one of the Money values is N/A, the
 result is N/A.
 * @memberOf dw.value.Money
 * @param {dw.value.Money} value - the Money object to add to this Money instance.
 * @return {dw.value.Money} the Money object representing the sum of the operands.
 */
dw.value.Money.prototype.add = function(value) {};

/**
 * Adds a certain percentage to the money object. The percent value is given
 as true percent value, so for example 10 represent 10%. If this Money is
 N/A the result is also N/A.
 * @memberOf dw.value.Money
 * @param {Number} percent - the percent value
 * @return {dw.value.Money} new Money object with the result of the calculation
 */
dw.value.Money.prototype.addPercent = function(percent) {};

/**
 * Adds a rate (e.g. 0.05) to the money object. This is typically for example
 to add a tax rate.
 * @memberOf dw.value.Money
 * @param {Number} value - the rate to add.
 * @return {dw.value.Money} a new Money object with rate added.
 */
dw.value.Money.prototype.addRate = function(value) {};

/**
 * Compares two Money values. An exception is thrown if the two Money values
 are of different currency. If one of the Money values represents the N/A value
 it is treated as 0.0.
 * @memberOf dw.value.Money
 * @param {dw.value.Money} other - the money instance to comare against this money instance.
 * @return {Number} the comparison of 0 if the money instances are equal or non-0 if they are different.
 */
dw.value.Money.prototype.compareTo = function(other) {};

/**
 * Divide Money object by specified divisor. If this Money is
 N/A the result is also N/A.
 * @memberOf dw.value.Money
 * @param {Number} divisor - the divisor.
 * @return {dw.value.Money} Money object representing division result
 */
dw.value.Money.prototype.divide = function(divisor) {};

/**
 * Compares two money values whether they are equivalent.
 * @memberOf dw.value.Money
 * @param {Object} other - the object to compare against this money instance.
 * @return {Boolean} true if equal, false otherwise.
 */
dw.value.Money.prototype.equals = function(other) {};

/**
 * Returns the ISO 4217 currency mnemonic (such as 'USD', 'EUR') of the currency the
 money value relates to.

 Note a money instance may also describe a price that is 'not available'.
 In this case the value of this attribute is <code>N/A</code>.
 * @memberOf dw.value.Money
 * @return {String} the value of the currency code.
 */
dw.value.Money.prototype.getCurrencyCode = function() {};

/**
 * Returns the money as <a href="class_dw_util_Decimal.html">Decimal</a>, <code>null</code> is returned when the money is not available.
 * @memberOf dw.value.Money
 * @return {dw.util.Decimal} the money as {@link dw.util.Decimal}
 */
dw.value.Money.prototype.getDecimalValue = function() {};

/**
 * Returns the value of the money instance.
 * @memberOf dw.value.Money
 * @return {Number} the value of the money instance.
 * @see <a href="class_dw_value_Money.html#dw_value_Money_getDecimalValue_DetailAnchor">getDecimalValue()</a>
 */
dw.value.Money.prototype.getValue = function() {};

/**
 * Return the value of the money instance or null if the
 Money instance is NOT_AVAILABLE.
 * @memberOf dw.value.Money
 * @return {Number} Value of money instance or null.
 */
dw.value.Money.prototype.getValueOrNull = function() {};

/**
 * Calculates the hash code for a money;
 * @memberOf dw.value.Money
 * @return {Number}
 */
dw.value.Money.prototype.hashCode = function() {};

/**
 * Identifies if the instance contains settings for value and currency.
 * @memberOf dw.value.Money
 * @return {Boolean} true if the instance is initialized with value and          currency, false if the state is 'not available'.
 */
dw.value.Money.prototype.isAvailable = function() {};

/**
 * Identifies if two Money value have the same currency.
 * @memberOf dw.value.Money
 * @param {dw.value.Money} value - the Money value passed to be tested
 * @return {Boolean} true if both instances have the same currency, false otherwise.
 */
dw.value.Money.prototype.isOfSameCurrency = function(value) {};

/**
 * Multiply Money object by specified factor. If this Money is
 N/A the result is also N/A.
 * @memberOf dw.value.Money
 * @param {Number} factor - multiplication factor
 * @return {dw.value.Money} Money object representing multiplication result.
 */
dw.value.Money.prototype.multiply = function(factor) {};

/**
 * Multiplies the Money object with the given quantity. If this Money is
 N/A the result is also N/A.
 * @memberOf dw.value.Money
 * @param {dw.value.Quantity} quantity - the quantity to multiply the value by
 * @return {dw.value.Money} a new Money representing the multiplication result.
 */
dw.value.Money.prototype.multiply = function(quantity) {};

/**
 * Method returns a new instance of Money with the same currency but
 different value. An N/A instance is returned if value is null.
 * @memberOf dw.value.Money
 * @param {dw.util.Decimal} value - as a decimal
 * @return {dw.value.Money} new Money instance with same currency
 */
dw.value.Money.prototype.newMoney = function(value) {};

/**
 * Convenience method.
 Calculates and returns the percentage off this price represents in
 relation to the passed base price.  The result is generally equal to
 <code>100.0 - this.percentOf(value)</code>.  For example, if this value
 is $30 and the passed value is $50, then the return
 value will be 40.0, representing a 40% discount.
 <p/>
 This method will return null if the compare value is null, this value or
 the compare value is unavailable, or the compare value equals 0.0.
 * @memberOf dw.value.Money
 * @param {dw.value.Money} value - The price to compare to this price
 * @return {Number} The percentage discount this price represents in relation to the  passed base price.
 * @throws IllegalArgumentException If the currencies are not comparable.
 * @see <a href="class_dw_value_Money.html#dw_value_Money_percentOf_Money_DetailAnchor">percentOf(Money)</a>
 */
dw.value.Money.prototype.percentLessThan = function(value) {};

/**
 * Convenience method.
 Calculates and returns the percentage of the passed value this
 price represents.  For example, if this value is $30 and
 the passed value is $50, then the return value will be 60.0 (i.e. 60%).
 <p/>
 This method will return null if the compare value is null, this value or
 the compare value is unavailable, or the compare value equals 0.0.
 * @memberOf dw.value.Money
 * @param {dw.value.Money} value - The price to compare to this price
 * @return {Number} The percentage of the compare price this price represents, or  null.
 * @throws IllegalArgumentException If the currencies are not comparable.
 */
dw.value.Money.prototype.percentOf = function(value) {};

/**
 * Prorates the specified values using the specified discount.
 * @memberOf dw.value.Money
 * @param {dw.value.Money} dist - the proration discount.
 * @param {dw.value.Money[]} values - the values to prorate.
 * @return {dw.value.Money[]} the prorated values.
 * @static
 */
dw.value.Money.prorate = function(dist, values) {};

/**
 * Returns a new Money instance by substracting the specified Money object
 from the current object. Only objects representing the
 same currency can be subtracted. If one of the Money values is N/A, the
 result is N/A.
 * @memberOf dw.value.Money
 * @param {dw.value.Money} value - the Money object to subtract
 * @return {dw.value.Money} the Money object representing the result of subtraction.
 */
dw.value.Money.prototype.subtract = function(value) {};

/**
 * Subtracts a certain percentage from the money object. The percent value is given
 as true percent value, so for example 10 represent 10%. If this Money is
 N/A the result is also N/A.
 * @memberOf dw.value.Money
 * @param {Number} percent - the percent value
 * @return {dw.value.Money} new Money object with the result of the calculation
 */
dw.value.Money.prototype.subtractPercent = function(percent) {};

/**
 * Subtracts a rate (e.g. 0.05) from the money object. This is typically for example
 to subtract a tax rates.
 * @memberOf dw.value.Money
 * @param {Number} value - the rate to subtract.
 * @return {dw.value.Money} a new Money object with rate subtracted.
 */
dw.value.Money.prototype.subtractRate = function(value) {};

/**
 * Returns a string representation of Money according to the regional settings configured for current request
 locale, for example '$59.00' or 'USD 59.00'.
 * @memberOf dw.value.Money
 * @return {String} The formatted String representation of the passed money. In case of an error the string 'N/A' is          returned.
 */
dw.value.Money.prototype.toFormattedString = function() {};

/**
 * Returns a string representation for the numeric value of this money.
 The number is formatted with the decimal symbols of the platforms
 default locale.
 * @memberOf dw.value.Money
 * @return {String} a string representation for the numeric value of this money.
 */
dw.value.Money.prototype.toNumberString = function() {};

/**
 * Returns a string representation of this Money object.
 * @memberOf dw.value.Money
 * @return {String} a string representation of this Money object.
 */
dw.value.Money.prototype.toString = function() {};

/**
 * According to the ECMA spec returns the "natural" primitve value. Here
 the value portion of the Money is returned.
 * @memberOf dw.value.Money
 * @return {Object}
 */
dw.value.Money.prototype.valueOf = function() {};

/**
 * Creates a new quantity instance with the specified value and unit.
 * @class
 * @extends Object
 * @param {Number} value - the actual quantity, must not be <code>null</code>
 * @param {String} unit - the unit identifier for the quantity, must not be <code>null</code>
 */
dw.value.Quantity = function(value, unit) {};
dw.value.Quantity.prototype = new Object();

/**
 * Add Quantity object to the current object. Only objects representing the same unit can be added.
 * @memberOf dw.value.Quantity
 * @param {dw.value.Quantity} value - Quantity object
 * @return {dw.value.Quantity} Quantity object representing the sum of the operands
 */
dw.value.Quantity.prototype.add = function(value) {};

/**
 * Compares two Quantity values. An exception is thrown if the two Quantities values
 are of different unit. If one of the Quantity values represents the N/A value
 it is treated as 0.0.
 * @memberOf dw.value.Quantity
 * @param {dw.value.Quantity} other - the other quantity to compare.
 * @return {Number} the comparison.
 */
dw.value.Quantity.prototype.compareTo = function(other) {};

/**
 * Divide Quantity object by specified divisor.
 * @memberOf dw.value.Quantity
 * @param {Number} divisor - divisor
 * @return {dw.value.Quantity} Quantity object representing division result
 */
dw.value.Quantity.prototype.divide = function(divisor) {};

/**
 * Compares two decimal values whether they are equivalent.
 * @memberOf dw.value.Quantity
 * @param {Object} other - the object to compare against this quantity instance.
 * @return {Boolean} true if equal, false otherwise.
 */
dw.value.Quantity.prototype.equals = function(other) {};

/**
 * Returns the quantity as <a href="class_dw_util_Decimal.html">Decimal</a>, <code>null</code> is returned when the quantity is not available.
 * @memberOf dw.value.Quantity
 * @return {dw.util.Decimal} the quantity as {@link dw.util.Decimal}
 */
dw.value.Quantity.prototype.getDecimalValue = function() {};

/**
 * Returns the value for unit which identifies the
 unit of measure for the quantity. Examples of unit
 are 'inches' or 'pounds'.
 * @memberOf dw.value.Quantity
 * @return {String} the unit value.
 */
dw.value.Quantity.prototype.getUnit = function() {};

/**
 * Returns the quantity value.
 * @memberOf dw.value.Quantity
 * @return {Number} the quantity value.
 * @see <a href="class_dw_value_Quantity.html#dw_value_Quantity_getDecimalValue_DetailAnchor">getDecimalValue()</a>
 */
dw.value.Quantity.prototype.getValue = function() {};

/**
 * Calculates the hash code for a decimal.
 * @memberOf dw.value.Quantity
 * @return {Number} the hash code.
 */
dw.value.Quantity.prototype.hashCode = function() {};

/**
 * Identifies if the instance contains settings for value and unit.
 * @memberOf dw.value.Quantity
 * @return {Boolean} true if the instance is initialized with value and          unit, false if the state is 'not available'.
 */
dw.value.Quantity.prototype.isAvailable = function() {};

/**
 * Identifies if two Quantities have the same unit.
 * @memberOf dw.value.Quantity
 * @param {dw.value.Quantity} value - the second quantity for the comparison.
 * @return {Boolean} true if both quantities have the same unit, false otherwise.
 */
dw.value.Quantity.prototype.isOfSameUnit = function(value) {};

/**
 * Multiply Quantity object by specified factor.
 * @memberOf dw.value.Quantity
 * @param {Number} factor - multiplication factor
 * @return {dw.value.Quantity} Quantity object representing multiplication result
 */
dw.value.Quantity.prototype.multiply = function(factor) {};

/**
 * Method returns a new instance of Quantity with the same unit but
 different value. An N/A instance is returned if value is null.
 * @memberOf dw.value.Quantity
 * @param {dw.util.Decimal} value - as a decimal
 * @return {dw.value.Quantity} new Quantity instance with same unit
 */
dw.value.Quantity.prototype.newQuantity = function(value) {};

/**
 * Rounds the Quantity value to the number of specified decimal digits.
 * @memberOf dw.value.Quantity
 * @param {Number} precision - number of decimal digits after the decimal point
 * @return {dw.value.Quantity} the new rounded Quantity value
 */
dw.value.Quantity.prototype.round = function(precision) {};

/**
 * Subtract Quantity object from the current object. Only objects representing the same unit can be subtracted.
 * @memberOf dw.value.Quantity
 * @param {dw.value.Quantity} value - Quantity object to subtract
 * @return {dw.value.Quantity} Quantity object representing the result of subtraction
 */
dw.value.Quantity.prototype.subtract = function(value) {};

/**
 * Returns a string representation of this quantity object.
 * @memberOf dw.value.Quantity
 * @return {String} a string representation of this quantity object.
 */
dw.value.Quantity.prototype.toString = function() {};

/**
 * According to the ECMA spec returns the "natural" primitive value. Here
 the value portion of the Quantity is returned.
 * @memberOf dw.value.Quantity
 * @return {Object}
 */
dw.value.Quantity.prototype.valueOf = function() {};

/**
 * Represents the click stream in the session. A maximum number of 50 clicks is
 recorded per session. After the maximum is reached, each time the customer
 clicks on a new link, the oldest click stream entry is purged. The
 ClickStream always remembers the first click.
 <p/>
 The click stream is consulted when the GetLastVisitedProducts pipelet is
 called to retrieve the products that the customer has recently visited.
 * @class
 * @extends Object
 */
dw.web.ClickStream = function() {};
dw.web.ClickStream.prototype = new Object();

/**
 * Returns a collection with all clicks. The first entry is the oldest
 entry. The last entry is the latest entry. The method returns a copy of
 the click stream, which makes it safe to work with the click stream,
 while it might be modified.
 * @memberOf dw.web.ClickStream
 * @return {dw.util.List} a collection of ClickStreamEntry instances, sorted          chronologically.
 * @synchronized
 */
dw.web.ClickStream.prototype.getClicks = function() {};

/**
 * Returns the first click within this session. This first click
 is stored independent of whether entries are purged.
 * @memberOf dw.web.ClickStream
 * @return {dw.web.ClickStreamEntry} the first click within this session.
 */
dw.web.ClickStream.prototype.getFirst = function() {};

/**
 * Returns the last recorded click stream, which is also typically
 the current click. In where rare cases (e.g. RedirectURL pipeline) this
 is not the current click, but instead the last recorded click.
 * @memberOf dw.web.ClickStream
 * @return {dw.web.ClickStreamEntry} the last recorded click stream, which is also typically  the current click.
 */
dw.web.ClickStream.prototype.getLast = function() {};

/**
 * Identifies if this is only a partial click stream. If the maximum number
 of clicks (50) is recorded, the oldest entry is automatically purged with
 each additional click. In this case, this flag indicates that the click
 stream is only partial.
 * @memberOf dw.web.ClickStream
 * @return {Boolean} true if this click stream is partial, false otherwise.
 */
dw.web.ClickStream.prototype.isPartial = function() {};

/**
 * Represent an entry in the click stream.
 * @class
 * @extends Object
 */
dw.web.ClickStreamEntry = function() {};
dw.web.ClickStreamEntry.prototype = new Object();

/**
 * Returns the host.
 * @memberOf dw.web.ClickStreamEntry
 * @return {String} the host.
 */
dw.web.ClickStreamEntry.prototype.getHost = function() {};

/**
 * Returns the locale sent from the user agent.
 * @memberOf dw.web.ClickStreamEntry
 * @return {String} the locale sent from the user agent.
 */
dw.web.ClickStreamEntry.prototype.getLocale = function() {};

/**
 * Returns a specific parameter value from the stored query
 string. The method can be used to extract a source code or
 affiliate id out of the URLs in the click stream.

 The method returns null if there is no parameter with the given name.
 * @memberOf dw.web.ClickStreamEntry
 * @param {String} name - the name of the parameter.
 * @return {String} the value associated with the specified parameter,  or null.
 */
dw.web.ClickStreamEntry.prototype.getParameter = function(name) {};

/**
 * Returns the path.
 * @memberOf dw.web.ClickStreamEntry
 * @return {String} the path.
 */
dw.web.ClickStreamEntry.prototype.getPath = function() {};

/**
 * Returns the name of the called pipeline. In most cases the
 name can be derived from the path, but not in all cases. If with
 URL rewritting a special landing page is defined for a DNS name, than
 the system internally might use a specific pipeline associated with
 this landing page.
 * @memberOf dw.web.ClickStreamEntry
 * @return {String} the name of the called pipeline.
 */
dw.web.ClickStreamEntry.prototype.getPipelineName = function() {};

/**
 * Returns the query string.
 * @memberOf dw.web.ClickStreamEntry
 * @return {String} the query string.
 */
dw.web.ClickStreamEntry.prototype.getQueryString = function() {};

/**
 * Returns the referer.
 * @memberOf dw.web.ClickStreamEntry
 * @return {String} the referer.
 */
dw.web.ClickStreamEntry.prototype.getReferer = function() {};

/**
 * Returns the remote address.
 * @memberOf dw.web.ClickStreamEntry
 * @return {String} the remote address.
 */
dw.web.ClickStreamEntry.prototype.getRemoteAddress = function() {};

/**
 * Returns the entry's timestamp.
 * @memberOf dw.web.ClickStreamEntry
 * @return {Number} the entry's timestamp.
 */
dw.web.ClickStreamEntry.prototype.getTimestamp = function() {};

/**
 * Returns the full URL for this click. The URL is returned as relative
 URL.
 * @memberOf dw.web.ClickStreamEntry
 * @return {String} the full URL for this click.
 */
dw.web.ClickStreamEntry.prototype.getUrl = function() {};

/**
 * Returns the user agent.
 * @memberOf dw.web.ClickStreamEntry
 * @return {String} the user agent.
 */
dw.web.ClickStreamEntry.prototype.getUserAgent = function() {};

/**
 * Constructs a new cookie using the specified name and value.
 * @class
 * @extends Object
 * @param {String} name - the name for the cookie.
 * @param {String} value - the cookie's value.
 */
dw.web.Cookie = function(name, value) {};
dw.web.Cookie.prototype = new Object();

/**
 *
 * @type String
 * @memberOf dw.web.Cookie
 * @static
 * @const
 */
dw.web.Cookie.EMPTYNAME = '';

/**
 * Returns the comment associated with the cookie.
 * @memberOf dw.web.Cookie
 * @return {String} the comment associated with the cookie.
 */
dw.web.Cookie.prototype.getComment = function() {};

/**
 * Returns the domain associated with the cookie.
 * @memberOf dw.web.Cookie
 * @return {String} the domain associated with the cookie.
 */
dw.web.Cookie.prototype.getDomain = function() {};

/**
 * Returns the maximum age of the cookie, specified in seconds.
 By default, -1 indicating the cookie will persist until client shutdown.
 * @memberOf dw.web.Cookie
 * @return {Number} an integer specifying the maximum age of the cookie in seconds;          if negative, means the cookie persists until client shutdown
 */
dw.web.Cookie.prototype.getMaxAge = function() {};

/**
 * Returns the cookie's name.
 * @memberOf dw.web.Cookie
 * @return {String} the cookie's name.
 */
dw.web.Cookie.prototype.getName = function() {};

/**
 * Returns the path for the cookie.
 * @memberOf dw.web.Cookie
 * @return {String} the path for the cookie.
 */
dw.web.Cookie.prototype.getPath = function() {};

/**
 * Identifies if the cookie is secure.
 * @memberOf dw.web.Cookie
 * @return {Boolean} true if the cookie is secure, false otherwise.
 */
dw.web.Cookie.prototype.getSecure = function() {};

/**
 * Returns the cookie's value.
 * @memberOf dw.web.Cookie
 * @return {String} the cookie's value.
 */
dw.web.Cookie.prototype.getValue = function() {};

/**
 * Returns the version for the cookie. 0 means original Netscape cookie and
 1 means RFC 2109 compliant cookie.
 * @memberOf dw.web.Cookie
 * @return {Number} the version for the cookie.
 */
dw.web.Cookie.prototype.getVersion = function() {};

/**
 * Sets the comment associated with the cookie.

 Setting a comment automatically changes the cookie to be a RFC 2109
 (set-cookie2) compliant cookie, because comments are only supported with
 RFC cookies and not with Netscapes original cookie.
 * @memberOf dw.web.Cookie
 * @param {String} comment - the comment associated with the cookie.
 */
dw.web.Cookie.prototype.setComment = function(comment) {};

/**
 * Sets the domain associated with the cookie.
 * @memberOf dw.web.Cookie
 * @param {String} domain - the comment associated with the cookie.
 */
dw.web.Cookie.prototype.setDomain = function(domain) {};

/**
 * Sets the maximum age of the cookie in seconds.

 A positive value indicates that the cookie will expire after that many
 seconds have passed. Note that the value is the maximum age when the
 cookie will expire, not the cookie's current age.

 A negative value means that the cookie is not stored persistently and
 will be deleted when the client exits. A zero value causes the
 cookie to be deleted.
 * @memberOf dw.web.Cookie
 * @param {Number} age - an integer specifying the maximum age of the cookie in seconds;             if negative, means the cookie is not stored; if zero, deletes             the cookie
 */
dw.web.Cookie.prototype.setMaxAge = function(age) {};

/**
 * Sets the path for the cookie.
 * @memberOf dw.web.Cookie
 * @param {String} path - the path for the cookie.
 */
dw.web.Cookie.prototype.setPath = function(path) {};

/**
 * Sets the secure state for the cookie.
 * @memberOf dw.web.Cookie
 * @param {Boolean} secure - sets secure state for the cookie.
 */
dw.web.Cookie.prototype.setSecure = function(secure) {};

/**
 * Sets the cookie's value.
 * @memberOf dw.web.Cookie
 * @param {String} value - the value to set in the cookie.
 */
dw.web.Cookie.prototype.setValue = function(value) {};

/**
 * Sets the version for the cookie. 0 means original Netscape cookie and
 1 means RFC 2109 compliant cookie. The default is 0.
 * @memberOf dw.web.Cookie
 * @param {Number} version - the version for the cookie.
 */
dw.web.Cookie.prototype.setVersion = function(version) {};

/**
 * The class provides an index and associative array like access to the Cookies
 of the current request. Cookies can be retrieved by calling
 dw.system.Request.getHttpCookies().
 <p/>
 <b>Note:</b> this class allows access to sensitive security-related data.
 Pay special attention to PCI DSS v3. requirements 2, 4, and 12.
 <p/>
 See <a href="class_dw_system_Request.html#dw_system_Request_getHttpCookies_DetailAnchor">Request.getHttpCookies()</a>.
 * @class
 * @extends Object
 */
dw.web.Cookies = function() {};
dw.web.Cookies.prototype = new Object();

/**
 * Returns the number of known cookies.
 * @memberOf dw.web.Cookies
 * @return {Number} the number of cookies
 */
dw.web.Cookies.prototype.getCookieCount = function() {};

/**
 * The class is the top level element in the form instance hierachy.
 * @class
 * @extends dw.web.FormGroup
 */
dw.web.Form = function() {};
dw.web.Form.prototype = new dw.web.FormGroup();

/**
 * Returns the secure key html name to be used for the hidden input field
 that will contain the secure key value.
 * @memberOf dw.web.Form
 * @return {String} the secure key html name
 */
dw.web.Form.prototype.getSecureKeyHtmlName = function() {};

/**
 * Returns the secure key value that is generated for the form to use
 in a hidden input field for authentication.
 * @memberOf dw.web.Form
 * @return {String} the secure key value
 */
dw.web.Form.prototype.getSecureKeyValue = function() {};

/**
 * The FormAction class represents the action in form instance hierarchy.
 * @class
 * @extends dw.web.FormElement
 */
dw.web.FormAction = function() {};
dw.web.FormAction.prototype = new dw.web.FormElement();

/**
 * Returns the optional description for the action. The description could be used
 as tooltip for the action.
 * @memberOf dw.web.FormAction
 * @return {String} the optional description for the action.
 */
dw.web.FormAction.prototype.getDescription = function() {};

/**
 * Returns the optional label for the action. The label would be typically used
 as button text.
 * @memberOf dw.web.FormAction
 * @return {String} the optional label for the action.
 */
dw.web.FormAction.prototype.getLabel = function() {};

/**
 * Returns the object that was bound to the form in which the action
 is contained. The method is a convenience method for getParent().getObject().
 In most cases this is actually the object for which
 the specific action is triggered.
 * @memberOf dw.web.FormAction
 * @return {Object} the object that was bound to the form in which the action  is contained.
 */
dw.web.FormAction.prototype.getObject = function() {};

/**
 * In case of an image button, returns the x coordinate of the last click.
 * @memberOf dw.web.FormAction
 * @return {Number} the x coordinate of the last click.
 */
dw.web.FormAction.prototype.getX = function() {};

/**
 * In case of an image button, returns the y coordinate of the last click.
 * @memberOf dw.web.FormAction
 * @return {Number} the y coordinate of the last click.
 */
dw.web.FormAction.prototype.getY = function() {};

/**
 * Identifies if the form action was submitted from
 the client to the server.
 * @memberOf dw.web.FormAction
 * @return {Boolean} true if the form action was submitted, false otherwise.
 */
dw.web.FormAction.prototype.isSubmitted = function() {};

/**
 * Identifies that this action is triggerd. An
 action is only triggered if it was submitted and the constraints, regarding
 a valid form, are met.
 * @memberOf dw.web.FormAction
 * @return {Boolean} true if the action is triggered, false otherwise.
 */
dw.web.FormAction.prototype.isTriggered = function() {};

/**
 * This method clears the whole form. After clearing a form it
 contains no value or the default value, is not bound to any business
 object and has the status of being valid.
 * @memberOf dw.web.FormElement
 */
dw.web.FormElement.prototype.clearFormElement = function() {};

/**
 * Returns a dynamic html name for the field. It can be used to suppress any autocompletion
 support from a browser, e.g. for credit card related fields. It can be also
 used for a unique form name, if one form is used multiple times in a page.
 * @memberOf dw.web.FormElement
 * @return {String} a dynamic html name.
 */
dw.web.FormElement.prototype.getDynamicHtmlName = function() {};

/**
 * The ID of the form element. The is is unique within the parent
 element of the form.
 * @memberOf dw.web.FormElement
 * @return {String} the ID of the form.
 */
dw.web.FormElement.prototype.getFormId = function() {};

/**
 * Returns the global unique name of the field, which can be used as name
 in the html form. For radio buttons this name is not unique.
 * @memberOf dw.web.FormElement
 * @return {String} the global unique name of the field.
 */
dw.web.FormElement.prototype.getHtmlName = function() {};

/**
 * The parent within the form.
 * @memberOf dw.web.FormElement
 * @return {dw.web.FormElement} the parent within the form.
 */
dw.web.FormElement.prototype.getParent = function() {};

/**
 * The method can be called to explicitly invalidate a form element. The
 error text will be set to the one of two possible preconfigured custom
 error messages associated with the form definition. The "value-error"
 message will be used for FormField instances and "form-error" will be
 used for FormGroup instances.
 * @memberOf dw.web.FormElement
 */
dw.web.FormElement.prototype.invalidateFormElement = function() {};

/**
 * The method can be called to explicitly invalidate a field. The error
 text is set to the given error message.
 * @memberOf dw.web.FormElement
 * @param {String} error - the error text to use.
 */
dw.web.FormElement.prototype.invalidateFormElement = function(error) {};

/**
 * Identifies if this element and all its children elements are
 valid. A form element, which was not submitted in the last
 request is always valid.
 * @memberOf dw.web.FormElement
 * @return {Boolean} true if this element and all its children elements are valid,  false otherwise.
 */
dw.web.FormElement.prototype.isValid = function() {};

/**
 * Represents a field in a form.
 * @class
 * @extends dw.web.FormElement
 */
dw.web.FormField = function() {};
dw.web.FormField.prototype = new dw.web.FormElement();

/**
 * indicates a boolean/checkbox field in the form definition
 * @type Number
 * @memberOf dw.web.FormField
 * @static
 */
dw.web.FormField.FIELD_TYPE_BOOLEAN = 0;

/**
 * indicates a date field in the form definition
 * @type Number
 * @memberOf dw.web.FormField
 * @static
 */
dw.web.FormField.FIELD_TYPE_DATE = 0;

/**
 * indicates an integer field in the form definition
 * @type Number
 * @memberOf dw.web.FormField
 * @static
 */
dw.web.FormField.FIELD_TYPE_INTEGER = 0;

/**
 * indicates a number field in the form definition
 * @type Number
 * @memberOf dw.web.FormField
 * @static
 */
dw.web.FormField.FIELD_TYPE_NUMBER = 0;

/**
 * indicates a string field in the form definition
 * @type Number
 * @memberOf dw.web.FormField
 * @static
 */
dw.web.FormField.FIELD_TYPE_STRING = 0;

/**
 * Returns an optinal description for the field.
 * @memberOf dw.web.FormField
 * @return {String} an optional description for the field.
 */
dw.web.FormField.prototype.getDescription = function() {};

/**
 * Returns the error text that will be shown to the user when the field is
 invalid. The error messages that may be returned by this method are
 defined in the form field definition under the following attribute names:

 <ul>
 <li>missing-error</li>
 <li>parse-error</li>
 <li>range-error</li>
 <li>value-error</li>
 </ul>

 The framework performs error checks in a specific order, and so if there
 are multiple errors for a single FormField, the following sequence
 defines which error is returned:

 <ul>
 <li>When submitting a form entry, whitespace is first trimmed from user
 entry and the entry is parsed into native data type (boolean, date,
 integer, number, or string). A regex, if defined, is also matched against
 the input. If there is an error while parsing or matching with regex,
 "parse-error" is set as error.</li>
 <li>If field was marked as "mandatory" but there is no entry,
 "missing-error" is returned</li>
 <li>The min/max and minlength/maxlength checks are performed. If test
 failed, "range-error" is returned.</li>
 <li>value-error or form-error are returned when "invalidate()" was called
 programatically (or pipelet InvalidateFormElement is used)</li>
 </ul>

 If the field is valid, this method returns null. If no error message was
 specified in the form field definition, this method also returns null.
 * @memberOf dw.web.FormField
 * @return {String} the error text that will be shown to the user when the field is          invalid.
 */
dw.web.FormField.prototype.getError = function() {};

/**
 * Returns the current external string representation of the
 value in this field.
 * @memberOf dw.web.FormField
 * @return {String} the current external string representation of the  value in this field.
 */
dw.web.FormField.prototype.getHtmlValue = function() {};

/**
 * Returns an optional label text for the field.
 * @memberOf dw.web.FormField
 * @return {String} an optional label text for the field.
 */
dw.web.FormField.prototype.getLabel = function() {};

/**
 * Returns the maximum length for the form field. A maximum length can
 be specified for all form data types, but is only used to validate fields
 of type "string". For other data types the value is just provided as an
 easy way to dynamically format the user interface. If not specified in
 the form definition the default minimum length is Integer.MAX_VALUE.
 * @memberOf dw.web.FormField
 * @return {Number} maximum length or MAX_VALUE
 */
dw.web.FormField.prototype.getMaxLength = function() {};

/**
 * Returns the maximum value for a form field. A maximum value is only
 applicable for fields with the data type "int", "number" and "date".
 If a maximum value was not specified in the form definition the method
 returns null.
 * @memberOf dw.web.FormField
 * @return {Object} maximum value or null
 */
dw.web.FormField.prototype.getMaxValue = function() {};

/**
 * Returns the minimum length for the form field. A minimum length can
 be specified for all form data types, but is only used to validate fields
 of type "string". For other data types the value is just provided as an
 easy way to dynamically format the user interface. If not specified in
 the form definition the default minimum length is 0.
 * @memberOf dw.web.FormField
 * @return {Number} minimum length or 0
 */
dw.web.FormField.prototype.getMinLength = function() {};

/**
 * Returns the minimum value for a form field. A minimum value is only
 applicable for fields with the data type "int", "number" and "date".
 If a minimum value was not specified in the form definition the method
 returns null.
 * @memberOf dw.web.FormField
 * @return {Object} minimum value or null
 */
dw.web.FormField.prototype.getMinValue = function() {};

/**
 * Returns a list of possible values for this field. The method
 is typically used to render a selection list or to render radio buttons.
 * @memberOf dw.web.FormField
 * @return {dw.web.FormFieldOptions} a list of possible values for this field.
 */
dw.web.FormField.prototype.getOptions = function() {};

/**
 * Returns an optional regular expression pattern, which was set in the form
 definition. A pattern is only used for validation only for string fields.
 If no pattern was set, the method returns null.
 * @memberOf dw.web.FormField
 * @return {String} the regular expression used for validation or null
 */
dw.web.FormField.prototype.getRegEx = function() {};

/**
 * Returns the selected options or null if the field has no option
 or non is selected.
 * @memberOf dw.web.FormField
 * @return {dw.web.FormFieldOption} the selected options or null if the field has no option  or non is selected.
 */
dw.web.FormField.prototype.getSelectedOption = function() {};

/**
 * Returns the object that was optionally associated with the
 currently selected option.
 * @memberOf dw.web.FormField
 * @return {Object} the object that was optionally associated with the  currently selected option.
 */
dw.web.FormField.prototype.getSelectedOptionObject = function() {};

/**
 * The method returns the type of the field. The type is one of the
 FIELD_TYPE constants defined in this class.
 * @memberOf dw.web.FormField
 * @return {Number} the type of the form field
 */
dw.web.FormField.prototype.getType = function() {};

/**
 * Returns the internal value representation, which can be a string, a
 number, a boolean or a date.
 * @memberOf dw.web.FormField
 * @return {Object} the internal value representation, which can be a string, a  number, a boolean or a date.
 */
dw.web.FormField.prototype.getValue = function() {};

/**
 * Identifies if the current selected state of this field is checked. In case of
 a boolean field the method directly represent the boolean value. In case
 of a string or int field, the method returns true if the current value
 matched with the value specified as "selected-value". In this way a
 selected status can be as determined for non-boolean fields.
 * @memberOf dw.web.FormField
 * @return {Boolean} true if current selected state of this field is checked.
 */
dw.web.FormField.prototype.isChecked = function() {};

/**
 * Indicates if the field is mandatory.
 * @memberOf dw.web.FormField
 * @return {Boolean} true if the field is mandatory, false otherwise.
 */
dw.web.FormField.prototype.isMandatory = function() {};

/**
 * Identifies if the current selected state of this field is selected. In case of
 a boolean field the method directly represent the boolean value. In case
 of a string or int field, the method returns true if the current value
 matched with the value specified as "selected-value". In this way a
 selected status can be as determined for non-boolean fields.
 * @memberOf dw.web.FormField
 * @return {Boolean} true if current selected state of this field is checked.
 */
dw.web.FormField.prototype.isSelected = function() {};

/**
 * A form field has two value representations, the HTML value and the plain
 value. The HTML value is always a string representation of the field value.
 The plain value is the fully typed and validated field value.

 The sets the HTML value for a field. The method is typically called from
 the HTTP POST processing framework. The method than parses, validates
 and assigns the value to the typed field value (see getValue()). If the
 value is invalid the typed field value is set to null and the valid
 flag is set to false. The error property contains an error message
 for the form.
 * @memberOf dw.web.FormField
 * @param {String} htmlValue - the HTML value to use.
 */
dw.web.FormField.prototype.setHtmlValue = function(htmlValue) {};

/**
 * The method can be called to update an option list based on the
 given iterator with objects.
 * @memberOf dw.web.FormField
 * @param {dw.util.Iterator} optionValues - an iterator whose elements are used as option values
 */
dw.web.FormField.prototype.setOptions = function(optionValues) {};

/**
 * The method can be called to update an option list based on the
 given iterator with objects. The option list is updated using
 the bindings specified in the form definition. If no bindings are
 specified in the form definition the elements are interpreted as
 pure strings.
 * @memberOf dw.web.FormField
 * @param {dw.util.Iterator} optionValues - an iterator hows elements are used as option values
 * @param {Number} begin - the index of the first element to use as option value
 * @param {Number} end - the last of the last element to use as option value
 */
dw.web.FormField.prototype.setOptions = function(optionValues, begin, end) {};

/**
 * The method can be called to update an option list based on the
 given key and values in the given map.
 * @memberOf dw.web.FormField
 * @param {dw.util.Map} optionValues - a Map with the values for the option list
 */
dw.web.FormField.prototype.setOptions = function(optionValues) {};

/**
 * The method can be called to update an option list based on the
 given key and values in the given map. The method also expects
 and index range. This index range only makes sense when the Map is
 a SortedMap.
 * @memberOf dw.web.FormField
 * @param {dw.util.Map} optionValues - a Map with the values for the option list.
 * @param {Number} begin - the index of the first element to use as option value.
 * @param {Number} end - the last of the last element to use as option value.
 */
dw.web.FormField.prototype.setOptions = function(optionValues, begin, end) {};

/**
 * Sets the typed value of the field. The value is than immediately
 formatted into the external string representation, which is availble
 through the getHtmlValue() method. Also the valid flag is set
 to true. The actual value is not validated against the rules defined
 in the form definition. The method is typically used to directly set
 a typed value and to circumvent the validation rules.

 The type of the argument must match with the type of the field.
 * @memberOf dw.web.FormField
 * @param {Object} value - the value to set.
 */
dw.web.FormField.prototype.setValue = function(value) {};

/**
 * Represents an option for a form field.
 * @class
 * @extends Object
 */
dw.web.FormFieldOption = function() {};
dw.web.FormFieldOption.prototype = new Object();

/**
 * Returns the value for the HTML value attribute of a HTML option element.
 * @memberOf dw.web.FormFieldOption
 * @return {String} the value for the HTML value attribute of a HTML option element.
 */
dw.web.FormFieldOption.prototype.getHtmlValue = function() {};

/**
 * Returns the value for the HTML label attribute of the HTML option element.
 If not specified in the form option definition the label is identical with
 the string representation of option value (see getValue()).
 * @memberOf dw.web.FormFieldOption
 * @return {String} the value for the HTML label attribute of the HTML option element.
 */
dw.web.FormFieldOption.prototype.getLabel = function() {};

/**
 * Returns the object that was bound to this option value.
 * @memberOf dw.web.FormFieldOption
 * @return {Object} the object that was bound to this option value.
 */
dw.web.FormFieldOption.prototype.getObject = function() {};

/**
 * Returns the ID of the option. This is an internal ID used to uniquely
 reference this option. If not specified in the form option definition
 the ID is identical with the string representation of the option value
 (see getValue()).
 * @memberOf dw.web.FormFieldOption
 * @return {String} the ID of the option.
 */
dw.web.FormFieldOption.prototype.getOptionId = function() {};

/**
 * The parent, which is a field element.
 * @memberOf dw.web.FormFieldOption
 * @return {dw.web.FormField} the parent form field.
 */
dw.web.FormFieldOption.prototype.getParent = function() {};

/**
 * The actual value associated with this option. This value is formatted
 and than returned as HTML value with the method getHtmlValue().
 * @memberOf dw.web.FormFieldOption
 * @return {Object} the value associated with this option
 */
dw.web.FormFieldOption.prototype.getValue = function() {};

/**
 * Identifies if this option is checked.
 * @memberOf dw.web.FormFieldOption
 * @return {Boolean} true if this option is checked, false otherwise.
 */
dw.web.FormFieldOption.prototype.isChecked = function() {};

/**
 * Identifies if this option is selected.
 * @memberOf dw.web.FormFieldOption
 * @return {Boolean} true if this option is selected, false otherwise.
 */
dw.web.FormFieldOption.prototype.isSelected = function() {};

/**
 * Sets the label attribute for this option.
 * @memberOf dw.web.FormFieldOption
 * @param {String} label - the label value.
 */
dw.web.FormFieldOption.prototype.setLabel = function(label) {};

/**
 * The class represents the list of options for a field. The class supports
 an index style access to the options, e.g. myfield.options[2] or
 myfield.options.red.
 * @class
 * @extends Object
 */
dw.web.FormFieldOptions = function() {};
dw.web.FormFieldOptions.prototype = new Object();

/**
 * Returns the number of option values.
 * @memberOf dw.web.FormFieldOptions
 * @return {Number}
 */
dw.web.FormFieldOptions.prototype.getOptionsCount = function() {};

/**
 * The method copies the value from a form into the object, which was previously
 bound to the form. The method is equivalent to the pipelet AcceptForm.

 This method is equivalent to the call formgroup.copyFrom( formgroup.object ).
 * @memberOf dw.web.FormGroup
 */
dw.web.FormGroup.prototype.accept = function() {};

/**
 * The method updates the form with the values from the given object. The
 method call is basically equivalent to the pipelet UpdateFormWithObject.

 The method not only copies the value, it also binds the object to the form.
 Binding means that the form keeps the information from which objects the
 values were taken. This can be used for two purposed, first for lists it
 makes it easier in the code to find the associated object, for example in
 case of a relate action, and it allows to copy back the values from the form
 into the object (see accept()).

 Because of this bind behavior, the operation is also sometimes called a
 bind-operation.
 * @memberOf dw.web.FormGroup
 * @param {Object} obj - the object from, which the values are read
 */
dw.web.FormGroup.prototype.copyFrom = function(obj) {};

/**
 * The method updates the object with the values from the form. The method
 call is basically equivalent to the pipelet UpdateObjectWithForm.
 * @memberOf dw.web.FormGroup
 * @param {Object} obj - the object, which is updated from the form
 */
dw.web.FormGroup.prototype.copyTo = function(obj) {};

/**
 * Returns the number of elements in the form.
 * @memberOf dw.web.FormGroup
 * @return {Number} the number of elements in the form.
 */
dw.web.FormGroup.prototype.getChildCount = function() {};

/**
 * Returns a form-wide error message. If no error message
 is present the method returns null.
 * @memberOf dw.web.FormGroup
 * @return {String} a form-wide error message or null.
 */
dw.web.FormGroup.prototype.getError = function() {};

/**
 * The object that was bound to this form group.
 * @memberOf dw.web.FormGroup
 * @return {Object} the bound object.
 */
dw.web.FormGroup.prototype.getObject = function() {};

/**
 * Returns the action that was submitted with the last request. The action is
 set independent whether the form must be valid for this action. The method
 returns null if no action at all was submitted with the last request for this
 form group.
 * @memberOf dw.web.FormGroup
 * @return {dw.web.FormAction} the action that was submitted with the last request or null.
 */
dw.web.FormGroup.prototype.getSubmittedAction = function() {};

/**
 * Returns the action that was triggered with the last request. An action is
 only marked as triggered if the constraints regarding form validation are
 meet. The method returns null if no action was marked as triggered.
 * @memberOf dw.web.FormGroup
 * @return {dw.web.FormAction} the action that was triggered with the last request.
 */
dw.web.FormGroup.prototype.getTriggeredAction = function() {};

/**
 * Represents a list of forms.
 * @class
 * @extends dw.web.FormGroup
 */
dw.web.FormList = function() {};
dw.web.FormList.prototype = new dw.web.FormGroup();

/**
 * returns the selected list items if the list is
 configured to support selection of items.
 * @memberOf dw.web.FormList
 * @return {dw.util.List} a List of FormListItem elements or null if no selection was configured for the form.
 */
dw.web.FormList.prototype.getSelectManyItems = function() {};

/**
 * Returns a list of all selected objects if the list is configured
 to support the selection of items. The objects are the objects that were
 bound to each row.
 * @memberOf dw.web.FormList
 * @return {dw.util.List} a List of objects or null if no selection was configured for the form.
 */
dw.web.FormList.prototype.getSelectManyObjects = function() {};

/**
 * Returns the default list item if the list is configured to
 support the selection of a default item.
 * @memberOf dw.web.FormList
 * @return {dw.web.FormListItem} the default FormListItem elements or null if no selection was configured
 */
dw.web.FormList.prototype.getSelectOneItem = function() {};

/**
 * Returns the selected object if the list is configured to
 support the selection of a default item. The object is the object
 bound to the item.
 * @memberOf dw.web.FormList
 * @return {Object} the selected object.
 */
dw.web.FormList.prototype.getSelectOneObject = function() {};

/**
 * Represents an item in a form list.
 * @class
 * @extends dw.web.FormGroup
 */
dw.web.FormListItem = function() {};
dw.web.FormListItem.prototype = new dw.web.FormGroup();

/**
 * Returns the index of this item with the list.
 * @memberOf dw.web.FormListItem
 * @return {Number} the index of this item with the list.
 */
dw.web.FormListItem.prototype.getItemIndex = function() {};

/**
 * The Forms object provides access to all current forms in the session.
 It is typically retrieved from the PipelineDictionary via 'pdict.CurrentForms'.
 Forms are retrieved as an dynamic property, for example 'forms.searchform'.
 * @class
 * @extends Object
 */
dw.web.Forms = function() {};
dw.web.Forms.prototype = new Object();

/**
 * Represents an HTTP parameter.
 * @class
 * @extends Object
 */
dw.web.HttpParameter = function() {};
dw.web.HttpParameter.prototype = new Object();

/**
 * Identifies if the given value is part of the actual values.
 * @memberOf dw.web.HttpParameter
 * @param {String} value - the value to check.
 * @return {Boolean} true if the value is among the actual values, false otherwise.
 */
dw.web.HttpParameter.prototype.containsStringValue = function(value) {};

/**
 * Returns the value of the current HttpParameter attribute as a boolean. If
 there is more than one value defined, only the first one is returned. For an
 undefined attribute it returns null.
 * @memberOf dw.web.HttpParameter
 * @return {Boolean} the actual value as a boolean or null of no value is available.
 */
dw.web.HttpParameter.prototype.getBooleanValue = function() {};

/**
 * Returns the value of the current HttpParameter attribute as a boolean. If there
 is more than one value defined, only the first one is returned. For an
 undefined attribute it returns the given default value.
 * @memberOf dw.web.HttpParameter
 * @param {Boolean} defaultValue - the default value to use.
 * @return {Boolean} the value of the parameter or the default value if empty.
 */
dw.web.HttpParameter.prototype.getBooleanValue = function(defaultValue) {};

/**
 * Returns the value of the current HttpParameter attribute as a date. If
 there is more than one value defined, only the first one is returned. For
 an undefined attribute and if attribute is not a date it return null.
 * @memberOf dw.web.HttpParameter
 * @return {Date} the actual value as date or null if empty.
 */
dw.web.HttpParameter.prototype.getDateValue = function() {};

/**
 * Returns the value of the current HttpParameter attribute as a date. If
 there is more than one value defined, only the first one is returned. For
 an undefined attribute it returns the given default value and if
 the attributes is not a date it returns null.
 * @memberOf dw.web.HttpParameter
 * @param {Date} defaultValue - the default value to use.
 * @return {Date} the data value of the attribute or the default value if empty
 */
dw.web.HttpParameter.prototype.getDateValue = function(defaultValue) {};

/**
 * Returns the value of the current HttpParameter attribute as a number. If
 there is more than one value defined, only the first one is returned. For
 an undefined attribute it returns 0.0.
 * @memberOf dw.web.HttpParameter
 * @return {Number} the actual value as double or null if the parameter has no value.
 */
dw.web.HttpParameter.prototype.getDoubleValue = function() {};

/**
 * Returns the value of the current HttpParameter attribute as a number. If
 there is more than one value defined, only the first one is returned. For
 an undefined attribute it returns the given default value.
 * @memberOf dw.web.HttpParameter
 * @param {Number} defaultValue - the default value to use.
 * @return {Number} the actual value as double or the default value if empty.
 */
dw.web.HttpParameter.prototype.getDoubleValue = function(defaultValue) {};

/**
 * Returns the value of the current HttpParameter attribute as int. If there
 is more than one value defined, only the first one is returned. For an
 undefined attribute it returns null.
 * @memberOf dw.web.HttpParameter
 * @return {Number} the actual value as an integer or null of no value is available.
 */
dw.web.HttpParameter.prototype.getIntValue = function() {};

/**
 * Returns the value of the current HttpParameter attribute as an integer. If there
 is more than one value defined, only the first one is returned. For an
 undefined attribute it returns the given default value.
 * @memberOf dw.web.HttpParameter
 * @param {Number} defaultValue - the default value to use.
 * @return {Number} the value of the parameter or the default value if empty.
 */
dw.web.HttpParameter.prototype.getIntValue = function(defaultValue) {};

/**
 * Returns the raw value for this HttpParameter instance.
 The raw value is the not trimmed String value of this HTTP parameter.
 If there is more than one value defined, only the first one is returned. For an
 undefined attribute the method returns a null.
 * @memberOf dw.web.HttpParameter
 * @return {String} the actual value or null.
 * @see <a href="class_dw_web_HttpParameter.html#dw_web_HttpParameter_getStringValue_DetailAnchor">getStringValue()</a>
 */
dw.web.HttpParameter.prototype.getRawValue = function() {};

/**
 * Returns a Collection of all raw values for this HTTP parameter.
 The raw value is the not trimmed String value of this HTTP parameter.
 * @memberOf dw.web.HttpParameter
 * @return {dw.util.Collection} the raw values as a Collection of String, might be empty
 * @see <a href="class_dw_web_HttpParameter.html#dw_web_HttpParameter_getStringValues_DetailAnchor">getStringValues()</a>
 */
dw.web.HttpParameter.prototype.getRawValues = function() {};

/**
 * Returns the value of the current HttpParameter attribute. If there is
 more than one value defined, only the first one is returned. For an
 undefined attribute the method returns a null.
 * @memberOf dw.web.HttpParameter
 * @return {String} the actual value or null.
 */
dw.web.HttpParameter.prototype.getStringValue = function() {};

/**
 * Returns the value of the current HttpParameter attribute. If there is
 more than one value defined, only the first one is returned. For an
 undefined attribute the method returns the given default value.
 * @memberOf dw.web.HttpParameter
 * @param {String} defaultValue - the default value to use.
 * @return {String} the actual value or the default value.
 */
dw.web.HttpParameter.prototype.getStringValue = function(defaultValue) {};

/**
 * Returns a Collection of all defined values for this HTTP parameter.
 * @memberOf dw.web.HttpParameter
 * @return {dw.util.Collection} the actual values as Collection.
 */
dw.web.HttpParameter.prototype.getStringValues = function() {};

/**
 * Returns the value of the current HttpParameter attribute. If there is
 more than one value defined, only the first one is returned. For an
 undefined attribute the method returns null.
 * @memberOf dw.web.HttpParameter
 * @return {String} the actual value or null.
 */
dw.web.HttpParameter.prototype.getValue = function() {};

/**
 * Returns a Collection of all defined values for this current HTTP parameter.
 * @memberOf dw.web.HttpParameter
 * @return {dw.util.Collection} the actual values as Collection.
 * @see <a href="class_dw_web_HttpParameter.html#dw_web_HttpParameter_getStringValues_DetailAnchor">getStringValues()</a>
 */
dw.web.HttpParameter.prototype.getValues = function() {};

/**
 * Identifies if the given String is an actual value of this http parameter.
 * @memberOf dw.web.HttpParameter
 * @param {String} value - the value to check.
 * @return {Boolean} true if the value is among the actual values, false otherwise.
 */
dw.web.HttpParameter.prototype.isChecked = function(value) {};

/**
 * Identifies if there is a value for the http parameter attribute
 and whether the value is empty.
 A value is treated as empty if it's not blank.
 * @memberOf dw.web.HttpParameter
 * @return {Boolean} true if a value is empty, false otherwise.
 */
dw.web.HttpParameter.prototype.isEmpty = function() {};

/**
 * Identifies if the parameter was submitted. This is equivalent to the
 check, whether the parameter has a value.
 * @memberOf dw.web.HttpParameter
 * @return {Boolean} true if a value is there, false otherwise.
 */
dw.web.HttpParameter.prototype.isSubmitted = function() {};

/**
 * Returns the value of the current HttpParameter attribute. If there is
 more than one value defined, only the first one is returned. For an
 undefined attribute the method returns an empty string.
 * @memberOf dw.web.HttpParameter
 * @return {String} the actual value or an empty String.
 */
dw.web.HttpParameter.prototype.toString = function() {};

/**
 * A map of HTTP parameters.
 * @class
 * @extends Object
 */
dw.web.HttpParameterMap = function() {};
dw.web.HttpParameterMap.prototype = new Object();

/**
 * Returns the http parameter for the given key or an empty http parameter,
 if no parameter is defined for that key. An empty parameter returns
 false for the method isDefined().
 * @memberOf dw.web.HttpParameterMap
 * @param {Object} name - the key whose associated http parameter is to be returned.
 * @return {dw.web.HttpParameter} the http parameter or an empty http parameter.
 */
dw.web.HttpParameterMap.prototype.get = function(name) {};

/**
 * Returns the number of paramters in this http parameter map.
 * @memberOf dw.web.HttpParameterMap
 * @return {Number} the number parameters.
 */
dw.web.HttpParameterMap.prototype.getParameterCount = function() {};

/**
 * Returns a sub-map containing all parameters that start with the given
 prefix. The prefix will be removed from the parameter names in the returned
 sub-map. For example with the parameters "pre_P1" and "pre_p2" a call with
 "pre_" as parameter will return a HttpParameterMap containing "P1" and "P2".
 * @memberOf dw.web.HttpParameterMap
 * @param {String} prefix - the prefix to use when creating the sub-map.
 * @return {dw.web.HttpParameterMap} the sub-map containing the target parameters.
 */
dw.web.HttpParameterMap.prototype.getParameterMap = function(prefix) {};

/**
 * Returns a collection of all parameter names.
 * @memberOf dw.web.HttpParameterMap
 * @return {dw.util.Set} a set of all parameter names
 */
dw.web.HttpParameterMap.prototype.getParameterNames = function() {};

/**
 * Returns the HTTP request body as string (e.g. useful for XML posts). A body
 is only returned if the request is a POST or PUT request and was not send
 with "application/x-www-form-urlencoded" encoding. If the request was send
 with that encoding it is interpreted as form data and the body will be empty.
 * @memberOf dw.web.HttpParameterMap
 * @return {String} the http request body
 */
dw.web.HttpParameterMap.prototype.getRequestBodyAsString = function() {};

/**
 * Identifies if the parameter has been submitted.
 * @memberOf dw.web.HttpParameterMap
 * @param {String} key - the parameter to check.
 * @return {Boolean} true if the parameter has been submitted, false otherwise.
 */
dw.web.HttpParameterMap.prototype.isParameterSubmitted = function(key) {};

/**
 * This method can be called to process a form submission for an HTML form
 with encoding type "multipart/form-data". Such a form can have a mixture
 of "regular" HTML form fields and also file uploads. When such a form is
 submitted, the request handler framework does not automatically populate
 CurrentHttpParameterMap with field values and so it necessary to call
 this method first to access these values. When called, the system parses
 the request body. For each form field the HttpParameterMap is immediately
 updated. For each file upload the provided callback function is called.

 This callback function is called for each file upload part in the request.
 The parameters are the field name, the content type and the original file
 name. The function can return either a null, which means that the upload
 of this part should be skipped, or return a dw.io.File instance. If the
 file is an existing directory the system will automatically generate a
 unique file name. If the file is not an existing directory the uploaded
 content will be directly stored into that file. An existing file with the
 same name will be deleted. An automatically generated file name consists
 of the the prefix "upload", a time stamp, a unique id and the extension
 tmp. Here an example:
 "upload_20070114221535_bc7H1aOadI9qYaaacovPd3lqna.tmp".

 The return value of the processMultipart() function is a LinkedHashMap
 with all upload files. The entries are order in the sequence of the
 upload. The keys are the field names and the values are references to the
 file (instances of dw.io.File).

 During the multipart processing the HttpParameterMap is updated with
 every parsed form field. This allows the callback function to read the
 HttpParameter for example to construct the file name for storage based on
 a previous form field. Here an example:

 <pre>
 var params : HttpParameterMap = pdict.CurrentHttpParameterMap;

 // Get the file name from the first field. This is works because the
 // parameter map is updated before the file part is parsed.
 var files : LinkedHashMap = params.processMultipart( (function( field, ct, oname ){
     return new File( File.IMPEX + &quot;/&quot; + params.firstField );
 }) );
 </pre>
 * @memberOf dw.web.HttpParameterMap
 * @param {Object} callback - a callback function, which takes the field name, content type and             original file name as input
 * @return {dw.util.LinkedHashMap} a list with all uploaded files or null if this is not a multipart          request
 */
dw.web.HttpParameterMap.prototype.processMultipart = function(callback) {};

/**
 * Iterator used in &lt;ISLOOP&gt; implementation. It defines properties used to determine loop status.
 LoopIterator object is assigned to variable declared in "status" attribute of the &lt;ISLOOP&gt; tag.
 * @class
 * @extends dw.util.Iterator
 */
dw.web.LoopIterator = function() {};
dw.web.LoopIterator.prototype = new dw.util.Iterator();

/**
 * Return begin iteration index. By default begin index is 0.
 * @memberOf dw.web.LoopIterator
 * @return {Number} the begin iteration index.
 */
dw.web.LoopIterator.prototype.getBegin = function() {};

/**
 * Return iteration count, starting with 1.
 * @memberOf dw.web.LoopIterator
 * @return {Number} the iteration count.
 */
dw.web.LoopIterator.prototype.getCount = function() {};

/**
 * Return end iteration index. By default end index equals 'length - 1', provided that length is determined.
 If length cannot be determined end index is -1.
 * @memberOf dw.web.LoopIterator
 * @return {Number}
 * @retrurn the end iteration index.
 */
dw.web.LoopIterator.prototype.getEnd = function() {};

/**
 * Return iteration index, which is the position of the iterator in the underlying iteratable object.
 Index is 0-based and is calculated according the following formula: Index = (Count - 1) * Step.
 * @memberOf dw.web.LoopIterator
 * @return {Number} the iteration index.
 */
dw.web.LoopIterator.prototype.getIndex = function() {};

/**
 * Return the length of the object. If length cannot be determined, -1 is returned.
 * @memberOf dw.web.LoopIterator
 * @return {Number} the length of the object
 */
dw.web.LoopIterator.prototype.getLength = function() {};

/**
 * Return iterator step.
 * @memberOf dw.web.LoopIterator
 * @return {Number} the iterator step.
 */
dw.web.LoopIterator.prototype.getStep = function() {};

/**
 * Identifies if count is an even value.
 * @memberOf dw.web.LoopIterator
 * @return {Boolean} true if count is even, false otherwise.
 */
dw.web.LoopIterator.prototype.isEven = function() {};

/**
 * Identifies if the iterator is positioned at first iteratable item.
 * @memberOf dw.web.LoopIterator
 * @return {Boolean} true if the iterator is at first item, false otherwise.
 */
dw.web.LoopIterator.prototype.isFirst = function() {};

/**
 * Identifies if the iterator is positioned at last iteratable item.
 * @memberOf dw.web.LoopIterator
 * @return {Boolean} true if iterator is at last item, false otherwise.
 */
dw.web.LoopIterator.prototype.isLast = function() {};

/**
 * Identifies if count is an odd value.
 * @memberOf dw.web.LoopIterator
 * @return {Boolean} true if count is odd, false otherwise.
 */
dw.web.LoopIterator.prototype.isOdd = function() {};

/**
 * Contains meta data about the page.

 For each request an instance of this class will be placed in the pipeline
 dictionary under the key &quot;CurrentPageMetaData&quot;.
 The information stored in CurrentPageMetaData can be referenced in templates
 and rendered in an HTML head section:
 for example:
 <pre>
 <code>
 &lt;head&gt;
 &lt;title&gt;${pdict.CurrentPageMetaData.title}&lt;/title&gt;
 &lt;meta name="description" content="${pdict.CurrentPageMetaData.description}"/&gt;
 .
 .
 .
 &lt;/head&gt;
 </code>
 </pre>

 To update the CurrentPageMetaData there is the pipelet UpdatePageMetaData
 provided.
 * @class
 * @extends Object
 */
dw.web.PageMetaData = function() {};
dw.web.PageMetaData.prototype = new Object();

/**
 * Returns the page's description.
 * @memberOf dw.web.PageMetaData
 * @return {String} the page's description.
 */
dw.web.PageMetaData.prototype.getDescription = function() {};

/**
 * Returns the page's key words.
 * @memberOf dw.web.PageMetaData
 * @return {String} the page's key words.
 */
dw.web.PageMetaData.prototype.getKeywords = function() {};

/**
 * Returns the page's title.
 * @memberOf dw.web.PageMetaData
 * @return {String} the page's title.
 */
dw.web.PageMetaData.prototype.getTitle = function() {};

/**
 * Sets the page's description.
 * @memberOf dw.web.PageMetaData
 * @param {String} description - the page's description.
 */
dw.web.PageMetaData.prototype.setDescription = function(description) {};

/**
 * Sets the page's key words.
 * @memberOf dw.web.PageMetaData
 * @param {String} keywords - the page's key words.
 */
dw.web.PageMetaData.prototype.setKeywords = function(keywords) {};

/**
 * Sets the page's title.
 * @memberOf dw.web.PageMetaData
 * @param {String} title - the page's title.
 */
dw.web.PageMetaData.prototype.setTitle = function(title) {};

/**
 * Constructs the PagingModel using the specified iterator and count value.
 Count must not be negative.

 Note: A valid count must be provided. The PageModel class can not be used
 if the number of elements is unknown. Without knowning the number of
 elements it still would be possible to return the elements of a particular
 page, but it would be not possible to calculate data like the total number
 of pages or to construct an URL to jump to a particular page.
 * @class
 * @extends Object
 * @param {dw.util.Iterator} elements - the iterator containing the model elements.
 * @param {Number} count - the count of elements.
 */
dw.web.PagingModel = function(elements, count) {};
dw.web.PagingModel.prototype = new Object();

/**
 * Constructs the PagingModel using the specified collection.
 * @class
 * @extends Object
 * @param {dw.util.Collection} elements - the collection containing the model elements.
 */
dw.web.PagingModel = function(elements) {};
dw.web.PagingModel.prototype = new Object();

/**
 * The default page size.
 * @type Number
 * @memberOf dw.web.PagingModel
 * @static
 * @const
 */
dw.web.PagingModel.DEFAULT_PAGE_SIZE = 0;

/**
 * The maximum supported page size.
 * @type Number
 * @memberOf dw.web.PagingModel
 * @static
 * @const
 */
dw.web.PagingModel.MAX_PAGE_SIZE = 0;

/**
 * The URL Parameter used for the page size.
 * @type String
 * @memberOf dw.web.PagingModel
 * @static
 * @const
 */
dw.web.PagingModel.PAGING_SIZE_PARAMETER = '';

/**
 * The URL parameter used for the start position.
 * @type String
 * @memberOf dw.web.PagingModel
 * @static
 * @const
 */
dw.web.PagingModel.PAGING_START_PARAMETER = '';

/**
 * Returns an URL containing the page size parameter appended to the
 specified url. The name of the page size parameter is 'sz' (see
 PAGE_SIZE_PARAMETER). The start position parameter is not appended to the
 returned URL.
 * @memberOf dw.web.PagingModel
 * @param {dw.web.URL} url - the URL to append the page size parameter to.
 * @param {Number} pageSize - the page size
 * @return {dw.web.URL} an URL that contains the page size parameter.
 * @static
 */
dw.web.PagingModel.appendPageSize = function(url, pageSize) {};

/**
 * Returns an URL by appending the current page start position and the
 current page size to the URL.
 * @memberOf dw.web.PagingModel
 * @param {dw.web.URL} url - the URL to append the current paging position to.
 * @return {dw.web.URL} an URL containing the current paging position.
 */
dw.web.PagingModel.prototype.appendPaging = function(url) {};

/**
 * Returns an URL by appending the paging parameters for a desired
 page start position and the current page size to the specified url. The name of
 the page start position parameter is 'start' (see PAGING_START_PARAMETER)
 and the page size parameter is 'sz' (see PAGE_SIZE_PARAMETER).
 * @memberOf dw.web.PagingModel
 * @param {dw.web.URL} url - the URL to append the paging parameter to.
 * @param {Number} position - the start position.
 * @return {dw.web.URL} an URL that contains the paging parameters.
 */
dw.web.PagingModel.prototype.appendPaging = function(url, position) {};

/**
 * Returns the count of the number of items in the model.
 * @memberOf dw.web.PagingModel
 * @return {Number} the count of the number of items in the model.
 */
dw.web.PagingModel.prototype.getCount = function() {};

/**
 * Returns the index number of the current page. The page
 counting starts with 0. The method also works with a miss-aligned
 start. In that case the start is always treated as the start of
 a page.
 * @memberOf dw.web.PagingModel
 * @return {Number} the index number of the current page.
 */
dw.web.PagingModel.prototype.getCurrentPage = function() {};

/**
 * Returns the index of the last element on the current page.
 * @memberOf dw.web.PagingModel
 * @return {Number} the index of the last element on the current page.
 */
dw.web.PagingModel.prototype.getEnd = function() {};

/**
 * Returns the maximum possible page number. Counting for pages starts
 with 0.  The method also works with a miss-aligned start. In that case
 the returned number might be higher than ((count-1) / pageSize).
 * @memberOf dw.web.PagingModel
 * @return {Number} the maximum possible page number.
 */
dw.web.PagingModel.prototype.getMaxPage = function() {};

/**
 * Returns the total page count. The method also works
 with a miss-aligned start. In that case the returned number might
 be higher than (count / pageSize).
 * @memberOf dw.web.PagingModel
 * @return {Number} the total page count.
 */
dw.web.PagingModel.prototype.getPageCount = function() {};

/**
 * Returns an iterator that can be used to iterate through the elements of
 the current page.

 In case of a collection as the page models source, the method can be
 called multiple times. Each time a fresh iterator is returned.

 In case of an iterator as the page models source, the method must be
 called only once. The method will always return the same iterator,
 which means the method amy return an exhausted iterator.
 * @memberOf dw.web.PagingModel
 * @return {dw.util.Iterator} an iterator that you use to iterate through  the elements of the current page.
 */
dw.web.PagingModel.prototype.getPageElements = function() {};

/**
 * Returns the size of the page.
 * @memberOf dw.web.PagingModel
 * @return {Number} the size of the page.
 */
dw.web.PagingModel.prototype.getPageSize = function() {};

/**
 * Returns the current start position from which iteration will start.
 * @memberOf dw.web.PagingModel
 * @return {Number} the current start position from which iteration will start.
 */
dw.web.PagingModel.prototype.getStart = function() {};

/**
 * Identifies if the model is empty.
 * @memberOf dw.web.PagingModel
 * @return {Boolean} true if the model is empty, false otherwise.
 */
dw.web.PagingModel.prototype.isEmpty = function() {};

/**
 * Sets the size of the page. The page size must be greater or
 equal to 1.
 * @memberOf dw.web.PagingModel
 * @param {Number} pageSize - the size of the page.
 */
dw.web.PagingModel.prototype.setPageSize = function(pageSize) {};

/**
 * Sets the current start position from which iteration will start.
 * @memberOf dw.web.PagingModel
 * @param {Number} start - the current start position from which iteration will start.
 */
dw.web.PagingModel.prototype.setStart = function(start) {};

/**
 * Library class which provides methods for retrieving messages from properties
 resource bundles which contain locale-specific strings. When your program
 needs a locale-specific String, it loads it from the resource bundle that is
 appropriate for the user's current locale. In this way, the program code is
 largely independent of the user's locale.
 <p/>
 In Demandware, resources are associated with the templates of a cartridge.
 These bundles consist of properties files with a common name defined in the
 template/resources directory of a site cartridge. For example:

 <ul>
 <li>templates/resources/message.properties</li>
 <li>templates/resources/message_en.properties</li>
 <li>templates/resources/message_en_US.properties</li>
 <li>templates/resources/message_de_DE.properties</li>
 </ul>

 Resource bundle lookup generally follows the same rules as the Java
 ResourceBundle class, where the locale used for lookup is based on the
 current request. See method javadoc for additional details.
 <p/>
 Properties resource files are assumed to use the ISO 8859-1 character
 encoding; that is each byte is one Latin1 character. Characters not in
 Latin1, and certain special characters, are represented in keys and elements
 using Unicode escapes.
 * @class
 * @extends Object
 */
dw.web.Resource = function() {};
dw.web.Resource.prototype = new Object();

/**
 * Returns the message from the default properties resource bundle (base
 name "message") corresponding to the specified key and the request
 locale.

 This method is equivalent to msg(String, null).
 * @memberOf dw.web.Resource
 * @param {String} key - resource bundle message key
 * @return {String} the resource bundle message or the key itself if no message is          defined.
 * @see <a href="class_dw_web_Resource.html#dw_web_Resource_msg_String_String_DetailAnchor">msg(String, String)</a>
 * @static
 */
dw.web.Resource.msg = function(key) {};

/**
 * Returns the message from the default properties resource bundle (base
 name "message") corresponding to the specified key and the request
 locale. If no message for the key is found, returns the default message
 if it is not null, otherwise returns the key itself.

 This method is equivalent to msg(key, null, defaultMessage).
 * @memberOf dw.web.Resource
 * @param {String} key - resource bundle message key
 * @param {String} defaultMessage - default message to return if no message             corresponding to the key is found
 * @return {String} the resource bundle message or default message
 * @see <a href="class_dw_web_Resource.html#dw_web_Resource_msg_String_String_String_DetailAnchor">msg(String, String, String)</a>
 * @static
 */
dw.web.Resource.msg = function(key, defaultMessage) {};

/**
 * Returns the message from the specified properties resource bundle. The
 resource bundle is located by iterating the site cartridges and looking
 for a bundle with the specified name in the cartridge template/resources
 directory. If it finds a bundle, it tries to return a message from the
 bundle using standard Java ResourceBundle logic. If a message is found in
 that cartridge's bundle, it is returned, otherwise, the next cartridge is
 examined.

 The method throws an exception if the key is null.
 * @memberOf dw.web.Resource
 * @param {String} key - resource bundle message key
 * @param {String} bundleName - base bundle name, if null, default bundle name,             "message", is used
 * @param {String} defaultMessage - default message to return if no message             corresponding to the key is found and defaultMessage is not             null
 * @return {String} the resource bundle message or default message
 * @static
 */
dw.web.Resource.msg = function(key, bundleName, defaultMessage) {};

/**
 * Returns the message from the specified properties resource bundle, with
 the provided arguments substituted for the message argument placeholders
 (specified using the Java MessageFormat approach).

 If null is passed for the varargs argument, this method is equivalent to
 msg(key, bundleName, defaultMessage).
 * @memberOf dw.web.Resource
 * @param {String} key - resource bundle message key
 * @param {String} bundleName - base bundle name, if null, default bundle name,             "message", is used
 * @param {String} defaultMessage - default message to return if no message             corresponding to the key is found and defaultMessage is not             null
 * @param {Object[]} args - optional list of arguments or a collection, which are             included into the result string
 * @return {String} the resource bundle message or default message
 * @see <a href="class_dw_web_Resource.html#dw_web_Resource_msg_String_String_String_DetailAnchor">msg(String, String, String)</a>
 * @static
 * @varArgs
 */
dw.web.Resource.msgf = function(key, bundleName, defaultMessage, args) {};

/**
 * Represents URL in Demandware system.
 * @class
 * @extends Object
 */
dw.web.URL = function() {};
dw.web.URL.prototype = new Object();

/**
 * Makes the URL absolute and ensures that the protocol of the request is used
 or http in a mail context.
 Note: This method is not applicable for Akamai or image transformation
 URLs. In this case a runtime exception is thrown.
 * @memberOf dw.web.URL
 * @return {dw.web.URL} A new URL instance.
 */
dw.web.URL.prototype.abs = function() {};

/**
 * Append a request parameter to this URL.
 * @memberOf dw.web.URL
 * @param {String} name - The parameter name.  Must not be null.
 * @param {String} value - The parameter value.  If null, then treated as empty value.
 * @return {dw.web.URL} A reference to this URL.
 */
dw.web.URL.prototype.append = function(name, value) {};

/**
 * Updates the URL with the specified host name
 Note: This method is not applicable for Akamai or image transformation
 URLs. In this case a runtime exception is thrown.
 * @memberOf dw.web.URL
 * @param {String} host - The host name that is used to update the URL.
 * @return {dw.web.URL} A new URL instance.
 */
dw.web.URL.prototype.host = function(host) {};

/**
 * Makes the URL absolute and ensures that the protocol http is used.
 Note: This method is not applicable for Akamai or image transformation
 URLs. In this case a runtime exception is thrown.
 * @memberOf dw.web.URL
 * @return {dw.web.URL} A new URL instance.
 */
dw.web.URL.prototype.http = function() {};

/**
 * Makes the URL absolute and ensures that the protocol https is used.
 Note: This method is not applicable for Akamai or image transformation
 URLs. In this case a runtime exception is thrown.
 * @memberOf dw.web.URL
 * @return {dw.web.URL} A new URL instance.
 */
dw.web.URL.prototype.https = function() {};

/**
 * Makes the URL relative.
 Note: This method is not applicable for Akamai or image transformation
 URLs. In this case a runtime exception is thrown.
 * @memberOf dw.web.URL
 * @return {dw.web.URL} A new URL instance.
 */
dw.web.URL.prototype.relative = function() {};

/**
 * Remove a request parameter from this URL. If the parameter is not part
 of the URL, nothing is done.
 * @memberOf dw.web.URL
 * @param {String} name - The parameter name.  Must not be null.
 * @return {dw.web.URL} A reference to this URL.
 */
dw.web.URL.prototype.remove = function(name) {};

/**
 * Updates the URL with the site host name
 Note: This method is not applicable for Akamai or image transformation
 URLs. In this case a runtime exception is thrown.
 * @memberOf dw.web.URL
 * @return {dw.web.URL} A new URL instance.
 */
dw.web.URL.prototype.siteHost = function() {};

/**
 * Return String representation of the URL.
 * @memberOf dw.web.URL
 * @return {String} the URL as a string.
 */
dw.web.URL.prototype.toString = function() {};

/**
 * Constructs an action for the current site and locale.
 * @class
 * @extends Object
 * @param {String} action - the target pipeline, e.g. 'Pipeline-StartNode'
 */
dw.web.URLAction = function(action) {};
dw.web.URLAction.prototype = new Object();

/**
 * Constructs an action for the specified site and the current locale.
 * @class
 * @extends Object
 * @param {String} action - the target pipeline, e.g. 'Pipeline-StartNode'
 * @param {String} siteName - the target site, e.g. 'SampleSite'
 */
dw.web.URLAction = function(action, siteName) {};
dw.web.URLAction.prototype = new Object();

/**
 * Constructs an action for the specified site and locale.
 * @class
 * @extends Object
 * @param {String} action - the target pipeline, e.g.: 'Pipeline-StartNode'
 * @param {String} siteName - the target site, e.g. 'SampleSite'
 * @param {String} locale - the target locale, e.g. 'Default'
 */
dw.web.URLAction = function(action, siteName, locale) {};
dw.web.URLAction.prototype = new Object();

/**
 * Constructs the parameter using the specified name and value and endocded
 in the form "name=value".
 * @class
 * @extends Object
 * @param {String} aName - the name
 * @param {String} aValue - the value
 */
dw.web.URLParameter = function(aName, aValue) {};
dw.web.URLParameter.prototype = new Object();

/**
 * Constructs the parameter using the specified name and value. If the "encodeName" is set to true,
 the parameter is encoded in the form "name=value". Otherwise, it only
 contains the "value" (needed for URL patterns).
 * @class
 * @extends Object
 * @param {String} aName - the name
 * @param {String} aValue - the value
 * @param {Boolean} encodeName - if true, the name will be part of the string form
 */
dw.web.URLParameter = function(aName, aValue, encodeName) {};
dw.web.URLParameter.prototype = new Object();

/**
 * Represents URLRedirect in Demandware system.
 * @class
 * @extends Object
 */
dw.web.URLRedirect = function() {};
dw.web.URLRedirect.prototype = new Object();

/**
 * Returns the URL which was calculated to be the redirect URL.
 The Location parameter can be directly used as value for an redirect location.
 * @memberOf dw.web.URLRedirect
 * @return {String} redirect location
 */
dw.web.URLRedirect.prototype.getLocation = function() {};

/**
 * Returns the corresponding status code for the redirect location.
 * @memberOf dw.web.URLRedirect
 * @return {Number} status code
 */
dw.web.URLRedirect.prototype.getStatus = function() {};

/**
 * URLRedirect manager class. Methods in this class generate URLRedirects based on the
 current configuration for Static, Dynamic and URLRedirect mappings in the Demandware
 system.

 Information used to calculate URLRedirects are determined from the current HTTP
 request. The URL which is used to find a redirect can be accessed with <a href="class_dw_web_URLRedirectMgr.html#dw_web_URLRedirectMgr_getRedirectOrigin_DetailAnchor">getRedirectOrigin()</a>.
 * @class
 * @extends Object
 */
dw.web.URLRedirectMgr = function() {};
dw.web.URLRedirectMgr.prototype = new Object();

/**
 * Returns an URLRedirect object, containing a location and status. The redirect is calculated
 based on origin url of current request and the configured Static, Dynamic and URLRedirect mappings for
 the requested site.
 * @memberOf dw.web.URLRedirectMgr
 * @return {dw.web.URLRedirect} URLRedirect containing the location and status code,    null in case of no redirect was found
 * @static
 */
dw.web.URLRedirectMgr.getRedirect = function() {};

/**
 * Returns the relative origin url (without protocol, port, hostname and site path information)
 which will be used in <a href="class_dw_web_URLRedirectMgr.html#dw_web_URLRedirectMgr_getRedirect_DetailAnchor">getRedirect()</a> to calculate a redirect location for.
 * @memberOf dw.web.URLRedirectMgr
 * @return {String} relative origin url
 * @static
 */
dw.web.URLRedirectMgr.getRedirectOrigin = function() {};

/**
 * URL utility class. Methods in this class generate URLs used in the Demandware system.

 Site related information in the generated URLs is determined from the current HTTP request.

 Methods belong to two groups: generating absolute and relative URLs. Absolute URL methods
 are further subdivided into those creating URLs with specified protocol and those
 using protocol information from the request. Corresponding to the protocol, the host name
 from the HTTP/HTTPS host preference is used. If preference is not set, the host name from the
 current request is included in resulting absolute URL.

 URLs do not include a session ID anymore. The appendSID argument therefore does not have any effect.

 When creating a pipeline URL with one of the methods url(), http(), https() or abs() by default
 the generated URL is a Demandware URL ("/on/demandware.store/..."). If search friendly URLs are
 enabled (old or new) the methods generate search friendly URLs. Search friendly URLs are only generated for
 certain pipeline names. Here a list of these pipeline names:
 <ul>
 <li>Product-Show with a 'pid' parameter [productID] - search friendly URL for a product</li>
 <li>Product-ShowInCategory with the 'cgid' parameter [categoryID] and 'pid' parameter [productID] - search friendly URL for a product shown in a specific category</li>
 <li>Search-Show with a 'cgid' parameter [categoryID] - search friendly URL for a category</li>
 <li>Search-Show with a 'pid' parameter [productID] - search friendly URL for a product</li>
 <li>Search-ShowContent with a 'fdid' parameter [folderID] - search friendly URL for a folder (ONLY works with new storefront URLs)</li>
 <li>Page-Show with a 'cid' parameter [contentID] - search friendly URL for a content page</li>
 </ul>
 * @class
 * @extends Object
 */
dw.web.URLUtils = function() {};
dw.web.URLUtils.prototype = new Object();

/**
 * ID for a catalog context. See staticURL() method.
 * @type String
 * @memberOf dw.web.URLUtils
 * @static
 * @const
 */
dw.web.URLUtils.CONTEXT_CATALOG = '';

/**
 * ID for a library context. See staticURL() method.
 * @type String
 * @memberOf dw.web.URLUtils
 * @static
 * @const
 */
dw.web.URLUtils.CONTEXT_LIBRARY = '';

/**
 * ID for a site context (= assigned cartridges). See staticURL() method.
 * @type String
 * @memberOf dw.web.URLUtils
 * @static
 * @const
 */
dw.web.URLUtils.CONTEXT_SITE = '';

/**
 * Return an absolute URL with protocol and host from current request.

 Note: The use of this method is deprecated, because session URL rewriting
       is no longer supported. Use the corresponding method abs() without the
       appendSID parameter instead.
 * @memberOf dw.web.URLUtils
 * @param {Boolean} appendSID - when true the resulting URL will include session ID.
 * @param {String} action - the pipeline, which should be invoked, e.g.: 'Pipeline-StartNode'
 * @param {String[]} namesAndParams - several strings with name=value pairs, e.g.: 'pid', 'value1', 'cgid', value2'.
 * @return {dw.web.URL} an absolute URL with protocol and host from current request.
 * @deprecated Use <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_abs_String_String_DetailAnchor">abs(String, String...)</a> instead.
 * @static
 * @varArgs
 */
dw.web.URLUtils.abs = function(appendSID, action, namesAndParams) {};

/**
 * Return an absolute URL with protocol and host from current request.

 Note: The use of this method is deprecated, because session URL rewriting
       is no longer supported. Use the corresponding abs() method without the
       appendSID parameter instead.
 * @memberOf dw.web.URLUtils
 * @param {Boolean} appendSID - when true the resulting URL will include session ID.
 * @param {dw.web.URLAction} action - URL action
 * @param {dw.web.URLParameter[]} params - URL parameters
 * @return {dw.web.URL} an absolute URL with protocol and host from current request.
 * @deprecated Use <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_abs_URLAction_URLParameter_DetailAnchor">abs(URLAction, URLParameter...)</a> instead.
 * @static
 * @varArgs
 */
dw.web.URLUtils.abs = function(appendSID, action, params) {};

/**
 * Return an absolute URL with protocol and host from current request.
 * @memberOf dw.web.URLUtils
 * @param {String} action - the pipeline, which should be invoked, e.g.: 'Pipeline-StartNode'
 * @param {String[]} namesAndParams - several strings with name=value pairs, for example: 'pid', 'value1', 'cgid', value2'.
 * @return {dw.web.URL} an absolute URL with protocol and host from current request.
 * @static
 * @varArgs
 */
dw.web.URLUtils.abs = function(action, namesAndParams) {};

/**
 * Return an absolute URL with protocol and host from the current request.
 * @memberOf dw.web.URLUtils
 * @param {dw.web.URLAction} action - URL action
 * @param {dw.web.URLParameter[]} params - URL parameters
 * @return {dw.web.URL} an absolute URL with protocol and host from the current request.
 * @static
 * @varArgs
 */
dw.web.URLUtils.abs = function(action, params) {};

/**
 * Similar to absStatic( String ) this method returns a static URL for a resource
 in the current site. The method assumes, that the URL refers to an image an
 supports an additional parameter with optional image transformation parameters.
 The image transformation parameters must be specified as JavaScript object literal.
 * @memberOf dw.web.URLUtils
 * @param {String} relPath - the relative path of the file
 * @param {Object} transform - Object with transformation parameters
 * @return {dw.web.URL} the URL for the specified image resource
 * @static
 */
dw.web.URLUtils.absImage = function(relPath, transform) {};

/**
 * Similar to absStatic( String, String, String ) this method returns a static URL for a resource
 in the current site. The method assumes, that the URL refers to an image an
 supports an additional parameter with optional image transformation parameters.
 The image transformation parameters must be specified as JavaScript object literal.
 * @memberOf dw.web.URLUtils
 * @param {String} context - Either CONTEXT_CATALOG, CONTEXT_LIBRARY or CONTEXT_SITE
 * @param {String} contextID - Optional context id, currently only used to specify a catalog id
 * @param {String} relPath - Relative path within the catalog or library
 * @param {Object} transform - Object with transformation parameters
 * @return {dw.web.URL} URL for the specified location
 * @static
 */
dw.web.URLUtils.absImage = function(context, contextID, relPath, transform) {};

/**
 * The method returns a static URL for a resource in the current site. Site
 resources are actually located in the cartridges associated with the site.
 This resources are typically logos, button images, CSS files and JavaScript
 files. The method will transform the given relative path to include cache
 related information, which enables better cache control.

 The created URL is an absolute URL with same protocol as the current incoming
 request.

 Note: This method replaces the original mechanisms of using the webroot()
 method to construct a URL. The new method is better integrated into the
 overall cache management.
 * @memberOf dw.web.URLUtils
 * @param {String} relPath - the relative path of the file
 * @return {dw.web.URL} the URL for the specified location
 * @static
 */
dw.web.URLUtils.absStatic = function(relPath) {};

/**
 * Returns the absolute URL to the static location of the specified context. The context
 can be either a specific catalog (URLUtils.CONTEXT_CATALOG),
 a content library (URLUtils.CONTEXT_LIBRARY) or a site (URLUtils.CONTEXT_SITE).
 Respectively either a URL to images in a catalog, a library or a site are created.
 <p/>
 The contextID parameter is optional and only used for context CONTEXT_CATALOG, where
 is specifies the ID of a specific catalog. If defined, the static URL for the specified
 catalog is returned. If not defined, the static URL for the current site catalog
 is returned (or null if no site catalog is defined). <br/>
 For context CONTEXT_SITE and context CONTEXT_LIBRARY, the contextID parameter is
 ignored and the static URL for the current site / site library is returned.
 <p/>
 Parameter relPath can be defined to specify the relative path within the context-specific
 path.
 <p/>
 The method returns an absolute URL with the same protocol as the current request.
 * @memberOf dw.web.URLUtils
 * @param {String} context - Either CONTEXT_CATALOG, CONTEXT_LIBRARY or CONTEXT_SITE
 * @param {String} contextID - Optional context id, currently only used to specify a catalog id
 * @param {String} relPath - Relative path within the catalog or library
 * @return {dw.web.URL} URL for the specified location
 * @static
 */
dw.web.URLUtils.absStatic = function(context, contextID, relPath) {};

/**
 * Return an absolute web root URL with protocol and host same as the current request.

 Note: The use of this method is deprecated. The method absStatic() should
 be used instead. It provides better cache integration.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} an absolute web root URL with protocol, host from current request.
 * @deprecated Use <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_absStatic_String_DetailAnchor">absStatic(String)</a> or  <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_absStatic_String_String_String_DetailAnchor">absStatic(String,String,String)</a> instead.
 * @static
 */
dw.web.URLUtils.absWebRoot = function() {};

/**
 * Return a URL, which can be used in combination with an Interaction Continue Node, to
 continue the user interface flow.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} an absolute URL with protocol and host from current context request.
 * @static
 */
dw.web.URLUtils.continueURL = function() {};

/**
 * Generates a hostname-only url if an alias is set, or an url to the Home-Show
   pipeline in the default format using the protocol of the incoming request.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} a hostname-only url if an alias is set, or an url to the Home-Show    pipeline in the default format using the protocol of the incoming request.
 * @static
 */
dw.web.URLUtils.home = function() {};

/**
 * Return an absolute URL with HTTP protocol. If an HTTP host is configured in the preferences
 the returned URL will include that host, otherwise, the host from current request is used.

 Note: The use of this method is deprecated, because session URL rewriting
       is no longer supported. Use the corresponding http() method without the
       appendSID parameter instead.
 * @memberOf dw.web.URLUtils
 * @param {Boolean} appendSID - when true the resulting URL will include session ID.
 * @param {String} action - the pipeline, which should be invoked, e.g.: 'Pipeline-StartNode'
 * @param {String[]} namesAndParams - several strings with name=value pairs, e.g.: 'pid', 'value1', 'cgid', value2'.
 * @return {dw.web.URL} an absolute URL with HTTP protocol.
 * @deprecated Use <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_http_String_String_DetailAnchor">http(String, String...)</a> instead.
 * @static
 * @varArgs
 */
dw.web.URLUtils.http = function(appendSID, action, namesAndParams) {};

/**
 * Return an absolute URL with HTTP protocol. If an HTTP host is configured in the preferences
 the returned URL will include that host, otherwise, the host from current request is used.

 Note: The use of this method is deprecated, because session URL rewriting
       is no longer supported. Use the corresponding http() method without the
       appendSID parameter instead.
 * @memberOf dw.web.URLUtils
 * @param {Boolean} appendSID - when true the resulting URL will include session ID.
 * @param {dw.web.URLAction} action - URL action
 * @param {dw.web.URLParameter[]} params - URL parameters
 * @return {dw.web.URL} an absolute URL with HTTP protocol.
 * @deprecated Use <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_http_URLAction_URLParameter_DetailAnchor">http(URLAction, URLParameter...)</a> instead.
 * @static
 * @varArgs
 */
dw.web.URLUtils.http = function(appendSID, action, params) {};

/**
 * Return an absolute URL with HTTP protocol. If an HTTP host is configured in the preferences
 the returned URL will include that host, otherwise, the host from current request is used.
 * @memberOf dw.web.URLUtils
 * @param {String} action - the pipeline, which should be invoked, e.g.: 'Pipeline-StartNode'
 * @param {String[]} namesAndParams - several strings with name=value pairs, e.g.: 'pid', 'value1', 'cgid', value2'.
 * @return {dw.web.URL} an absolute URL with HTTP protocol.
 * @static
 * @varArgs
 */
dw.web.URLUtils.http = function(action, namesAndParams) {};

/**
 * Return an absolute URL with HTTP protocol. If an HTTP host is configured in the preferences
 the returned URL will include that host, otherwise, the host from current request is used.
 * @memberOf dw.web.URLUtils
 * @param {dw.web.URLAction} action - URL action
 * @param {dw.web.URLParameter[]} params - URL parameters
 * @return {dw.web.URL} an absolute URL with HTTP protocol.
 * @static
 * @varArgs
 */
dw.web.URLUtils.http = function(action, params) {};

/**
 * Return a URL, which can be used in combination with an Interaction Continue Node, to
 continue the user interface flow. For security reasons the httpContinue() function returns
 a HTTPS continue URL if the interaction flow has started with a HTTPS request. Otherwise a
 HTTP continue URL is returned.
 If an HTTP/HTTPS host is configured in the preferences the returned URL will include that
 host, otherwise, the host from current request is used.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} an absolute URL with HTTP protocol.
 * @static
 */
dw.web.URLUtils.httpContinue = function() {};

/**
 * Generates a hostname-only url if an alias is set, or an url to the Home-Show
   pipeline in the default format using the HTTP protocol.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} a hostname-only url if an alias is set, or an url to the Home-Show    pipeline in the default format using the HTTP protocol.
 * @static
 */
dw.web.URLUtils.httpHome = function() {};

/**
 * Similar to httpStatic( String ) this method returns a static URL for a resource
 in the current site. The method assumes, that the URL refers to an image an
 supports an additional parameter with optional image transformation parameters.
 The image transformation parameters must be specified as JavaScript object literal.
 * @memberOf dw.web.URLUtils
 * @param {String} relPath - the relative path of the file
 * @param {Object} transform - Object with transformation parameters
 * @return {dw.web.URL} the URL for the specified location
 * @static
 */
dw.web.URLUtils.httpImage = function(relPath, transform) {};

/**
 * Similar to httpStatic( String, String, String ) this method returns a static URL for a resource
 in the current site. The method assumes, that the URL refers to an image an
 supports an additional parameter with optional image transformation parameters.
 The image transformation parameters must be specified as JavaScript object literal.
 * @memberOf dw.web.URLUtils
 * @param {String} context - Either CONTEXT_CATALOG, CONTEXT_LIBRARY or CONTEXT_SITE
 * @param {String} contextID - Optional context id, currently only used to specify a catalog id
 * @param {String} relPath - Relative path within the catalog or library
 * @param {Object} transform - Object with transformation parameters
 * @return {dw.web.URL} URL for the specified location
 * @static
 */
dw.web.URLUtils.httpImage = function(context, contextID, relPath, transform) {};

/**
 * Return an absolute URL with HTTPS protocol. If an HTTPS host is configured in the preferences
 the returned URL will include that host, otherwise, the host from current request is used.

 Note: The use of this method is deprecated, because session URL rewriting
       is no longer supported. Use the corresponding https() method without the
       appendSID parameter instead.
 * @memberOf dw.web.URLUtils
 * @param {Boolean} appendSID - when true the resulting URL will include session ID
 * @param {String} action - the pipeline, which should be invoked, e.g.: 'Pipeline-StartNode'
 * @param {String[]} namesAndParams - several strings with name=value pairs, e.g.: 'pid', 'value1', 'cgid', value2'.
 * @return {dw.web.URL} an absolute URL with HTTPS protocol.
 * @deprecated Use the <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_https_String_String_DetailAnchor">https(String,String...)</a> method instead.
 * @static
 * @varArgs
 */
dw.web.URLUtils.https = function(appendSID, action, namesAndParams) {};

/**
 * Return an absolute URL with HTTPS protocol. If an HTTPS host is configured in the preferences
 the returned URL will include that host, otherwise, the host from current request is used.

 Note: The use of this method is deprecated, because session URL rewriting
       is no longer supported. Use the corresponding https() method without the
       appendSID parameter instead.
 * @memberOf dw.web.URLUtils
 * @param {Boolean} appendSID - when true the resulting URL will include session ID.
 * @param {dw.web.URLAction} action - URL action
 * @param {dw.web.URLParameter[]} params - URL parameters
 * @return {dw.web.URL} an absolute URL with HTTPS protocol.
 * @deprecated Use the <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_https_URLAction_URLParameter_DetailAnchor">https(URLAction, URLParameter...)</a> method instead.
 * @static
 * @varArgs
 */
dw.web.URLUtils.https = function(appendSID, action, params) {};

/**
 * Return an absolute URL with HTTPS protocol. If an HTTPS host is configured in the preferences
 the returned URL will include that host, otherwise, the host from current request is used.
 * @memberOf dw.web.URLUtils
 * @param {String} action - the pipeline, which should be invoked, e.g.: 'Pipeline-StartNode'
 * @param {String[]} namesAndParams - several strings with name=value pairs, e.g.: 'pid', 'value1', 'cgid', value2'.
 * @return {dw.web.URL} an absolute URL with HTTPS protocol.
 * @static
 * @varArgs
 */
dw.web.URLUtils.https = function(action, namesAndParams) {};

/**
 * Return an absolute URL with HTTPS protocol. If an HTTPS host is configured in the preferences
 the returned URL will include that host, otherwise, the host from current request is used.
 * @memberOf dw.web.URLUtils
 * @param {dw.web.URLAction} action - URL action
 * @param {dw.web.URLParameter[]} params - URL parameters
 * @return {dw.web.URL} an absolute URL with HTTPS protocol.
 * @static
 * @varArgs
 */
dw.web.URLUtils.https = function(action, params) {};

/**
 * Return a URL, which can be used in combination with an Interaction Continue Node, to
 continue the user interface flow. An absolute URL with HTTPS protocol is returned.
 If an HTTPS host is configured in the preferences the returned URL will include that
 host, otherwise, the host from current request is used.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} an absolute URL with HTTPS protocol.
 * @static
 */
dw.web.URLUtils.httpsContinue = function() {};

/**
 * Generates a hostname-only url if an alias is set, or an url to the Home-Show
   pipeline in the default format using the HTTPS protocol.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} a hostname-only url if an alias is set, or an url to the Home-Show    pipeline in the default format using the HTTPS protocol..
 * @static
 */
dw.web.URLUtils.httpsHome = function() {};

/**
 * Similar to httpsStatic( String ) this method returns a static URL for a resource
 in the current site. The method assumes, that the URL refers to an image an
 supports an additional parameter with optional image transformation parameters.
 The image transformation parameters must be specified as JavaScript object literal.
 * @memberOf dw.web.URLUtils
 * @param {String} relPath - the relative path of the file
 * @param {Object} transform - Object with transformation parameters
 * @return {dw.web.URL} the URL for the specified location
 * @static
 */
dw.web.URLUtils.httpsImage = function(relPath, transform) {};

/**
 * Similar to httpsStatic( String, String, String ) this method returns a static URL for a resource
 in the current site. The method assumes, that the URL refers to an image an
 supports an additional parameter with optional image transformation parameters.
 The image transformation parameters must be specified as JavaScript object literal.
 * @memberOf dw.web.URLUtils
 * @param {String} context - Either CONTEXT_CATALOG, CONTEXT_LIBRARY or CONTEXT_SITE
 * @param {String} contextID - Optional context id, currently only used to specify a catalog id
 * @param {String} relPath - Relative path within the catalog or library
 * @param {Object} transform - Object with transformation parameters
 * @return {dw.web.URL} URL for the specified location
 * @static
 */
dw.web.URLUtils.httpsImage = function(context, contextID, relPath, transform) {};

/**
 * The method returns a static URL for a resource in the current site. Site
 resources are actually located in the cartridges associated with the site.
 This resources are typically logos, button images, CSS files and JavaScript
 files. The method will transform the given relative path to include cache
 related information, which enables better cache control.

 The created URL is an absolute URL with HTTPS protocol.

 Note: This method replaces the original mechanisms of using the webroot()
 method to construct a URL. The new method is better integrated into the
 overall cache management.
 * @memberOf dw.web.URLUtils
 * @param {String} relPath - the relative path of the file
 * @return {dw.web.URL} the URL for the specified location
 * @static
 */
dw.web.URLUtils.httpsStatic = function(relPath) {};

/**
 * Returns the absolute URL to the static location of the specified context. The context
 can be either a specific catalog (URLUtils.CONTEXT_CATALOG),
 a content library (URLUtils.CONTEXT_LIBRARY) or a site (URLUtils.CONTEXT_SITE).
 Respectively either a URL to images in a catalog, a library or a site are created.
 <p/>
 The contextID parameter is optional and only used for context CONTEXT_CATALOG, where
 is specifies the ID of a specific catalog. If defined, the static URL for the specified
 catalog is returned. If not defined, the static URL for the current site catalog
 is returned (or null if no site catalog is defined). <br/>
 For context CONTEXT_SITE and context CONTEXT_LIBRARY, the contextID parameter is
 ignored and the static URL for the current site / site library is returned.
 <p/>
 Parameter relPath can be defined to specify the relative path within the context-specific
 path.
 <p/>
 The method returns an absolute URL with HTTPS protocol.
 * @memberOf dw.web.URLUtils
 * @param {String} context - Either CONTEXT_CATALOG, CONTEXT_LIBRARY or CONTEXT_SITE
 * @param {String} contextID - Optional context id, currently only used to specify a catalog id
 * @param {String} relPath - Relative path within the catalog or library
 * @return {dw.web.URL} URL for the specified location
 * @static
 */
dw.web.URLUtils.httpsStatic = function(context, contextID, relPath) {};

/**
 * The method returns a static URL for a resource in the current site. Site
 resources are actually located in the cartridges associated with the site.
 This resources are typically logos, button images, CSS files and JavaScript
 files. The method will transform the given relative path to include cache
 related information, which enables better cache control.

 The created URL is an absolute URL with HTTP protocol.

 Note: This method replaces the original mechanisms of using the webroot()
 method to construct a URL. The new method is better integrated into the
 overall cache management.
 * @memberOf dw.web.URLUtils
 * @param {String} relPath - the relative path of the file
 * @return {dw.web.URL} the URL for the specified location
 * @static
 */
dw.web.URLUtils.httpStatic = function(relPath) {};

/**
 * Returns the absolute URL to the static location of the specified context. The context
 can be either a specific catalog (URLUtils.CONTEXT_CATALOG),
 a content library (URLUtils.CONTEXT_LIBRARY) or a site (URLUtils.CONTEXT_SITE).
 Respectively either a URL to images in a catalog, a library or a site are created.
 <p/>
 The contextID parameter is optional and only used for context CONTEXT_CATALOG, where
 is specifies the ID of a specific catalog. If defined, the static URL for the specified
 catalog is returned. If not defined, the static URL for the current site catalog
 is returned (or null if no site catalog is defined). <br/>
 For context CONTEXT_SITE and context CONTEXT_LIBRARY, the contextID parameter is
 ignored and the static URL for the current site / site library is returned.
 <p/>
 Parameter relPath can be defined to specify the relative path within the context-specific
 path.
 <p/>
 The method returns an absolute URL with HTTP protocol.
 * @memberOf dw.web.URLUtils
 * @param {String} context - Either CONTEXT_CATALOG, CONTEXT_LIBRARY or CONTEXT_SITE
 * @param {String} contextID - Optional context id, currently only used to specify a catalog id
 * @param {String} relPath - Relative path within the catalog or library
 * @return {dw.web.URL} URL for the specified location
 * @static
 */
dw.web.URLUtils.httpStatic = function(context, contextID, relPath) {};

/**
 * Return an absolute web root URL with HTTPS protocol and host and domain information from the current
 request. If an HTTP host is configured in the preferences the returned URL will include that host.

 Note: The use of this method is deprecated. The method httpsStatic() should
 be used instead. It provides better cache integration.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} an absolute web root URL with HTTPS protocol and host information from the current  request.
 * @deprecated Use the <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_httpsStatic_String_DetailAnchor">httpsStatic(String)</a> or  <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_httpsStatic_String_String_String_DetailAnchor">httpsStatic(String, String, String)</a> method instead.
 * @static
 */
dw.web.URLUtils.httpsWebRoot = function() {};

/**
 * Return an absolute web root URL with HTTP protocol and host information from current
 request. If an HTTP host is configured in the preferences the returned URL will include
 that host.

 Note: The use of this method is deprecated. The method httpStatic() should
 be used instead. It provides better cache integration.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} an absolute web root URL with HTTP protocol and host information from the current  request.
 * @deprecated Use the <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_httpStatic_String_DetailAnchor">httpStatic(String)</a> or  <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_httpStatic_String_String_String_DetailAnchor">httpStatic(String, String, String)</a> methods instead.
 * @static
 */
dw.web.URLUtils.httpWebRoot = function() {};

/**
 * Similar to staticURL( String ) this method returns a static URL for a resource
 in the current site. The method assumes, that the URL refers to an image an
 supports an additional parameter with optional image transformation parameters.
 The image transformation parameters must be specified as JavaScript object literal.

 The URL returned is always an absolute URL.
 * @memberOf dw.web.URLUtils
 * @param {String} relPath - the relative path of the file
 * @param {Object} transform - Object with transformation parameters
 * @return {dw.web.URL} the URL for the specified location
 * @static
 */
dw.web.URLUtils.imageURL = function(relPath, transform) {};

/**
 * Similar to staticURL( String, String, String ) this method returns a static URL for a resource
 in the current site. The method assumes, that the URL refers to an image an
 supports an additional parameter with optional image transformation parameters.
 The image transformation parameters must be specified as JavaScript object literal.

 The URL returned is always an absolute URL.
 * @memberOf dw.web.URLUtils
 * @param {String} context - Either CONTEXT_CATALOG, CONTEXT_LIBRARY or CONTEXT_SITE
 * @param {String} contextID - Optional context id, currently only used to specify a catalog id
 * @param {String} relPath - Relative path within the catalog or library
 * @param {Object} transform - Object with transformation parameters <table>           <th>             <tr>               <td>Type of transformation</td>               <td>Parameters</td>               <td>Description</td>             </tr>           </th>             <tr>               <td>Scale an image</td>               <td>scaleWidth (sw), scaleHeight (sh), scaleMode (sm)</td>               <td>The scaleWidth and scaleHeight parameters are both               integers; setting one of these parameters triggers a scaling               operation. If both are provided, the one that scales the image               less is used to calculate the scale factor. The image is then               automatically cropped accord to the second dimension, with a               centered position of the cropped area. If the parameter would               scale the image larger, only this operation is applied, if the               image remains in the size of 2000x2000. Valid values for these               parameters are 10-2000. The scaleMode parameter can be set to               "cut" or "fit." The default scaleMode is "cut," the behavior of which               is explained above. If you specify "fit" as the scaleMode, the               system scales the image into the given box of dimensions while               keeping the aspect ratio (possibly resulting in a smaller image               in one dimension).</td>             </tr>             <tr>               <td>Overlay an image</td>               <td>imageX (ox), imageY (oy), imageURI (oimg)</td>               <td>The imageX and imageY parameters are both integers. Valid               values for these parameters are 0 or greater. The imageURI               parameter can be set to the absolute path of the overlayed               image. The value of the imageURI parameter must be given in               proper URL encoding, and it cannot exceed 400 characters in               length. The path must support query string               parameters, which supports dynamically generating the overlayed               image itself through this service; that is, the overlayed image               can itself be a transformed image. If the overlayed image               extends over the primary image's boundaries, the overlayed image               is cropped so that it fits directly over the primary               image.</td>             </tr>             <tr>               <td>Crop an image</td>               <td>cropX (cx), cropY (cy), cropWidth (cw), cropHeight               (ch)</td>               <td>The cropX, cropY, cropWidth, cropHeight parameters are               integers. All four parameters must be specified to trigger a               cropping operation. Valid values for the cropX and cropY               parameters are 0 or greater. If the crop location defined by               cropX and cropY is outside the image area, nothing is cropped.               Valid values for the cropWidth and cropHeight parameters are 10               or greater. If the cropWidth and cropHeight parameters specify a               size that is greater than the original image, the crop area is               reduced to the actual image area. If cropWidth and cropHeight               are 0 or less, no transformation is applied.</td>             </tr>             <tr>               <td>Format an image</td>               <td>format (sfrm)</td>               <td>The format parameter specifies the format of the source               image. Valid values are "tif", "tiff", "jpg", "jpeg", "png", or "gif". The               desired target format (which must be "png", "jpg", or "gif") is               retrieved from the path, not from a transformation parameter. If               no source format is specified, the source format must be the               same as the target format. Providing the source format as a               parameter ensures that the final image is loaded from a URL with               a matching file extension.</td>             </tr>       </table>       <p><b>Example: calling URLUtils.imageURL</b></p>       <p><code>URLUtils.imageURL( "/<static image path>/image.png", {scaleWidth:100, format:jpg} );</code></p>       <p>Returns:</p>       <p><code>http://(image server host name)/dw/image/v2/.../on/demandware.static/-/-/(static image path)/image.png?sw=100&sfrm=jpg</code></p>
 * @return {dw.web.URL} URL for the specified location
 * @static
 */
dw.web.URLUtils.imageURL = function(context, contextID, relPath, transform) {};

/**
 * This method is used to create a URL that redirects to a location in
 the current site with another host name. When the URL is submitted,
 the system copies all system cookies, such that user, session and basket
 information are shared across different hosts. <br/>
 The specified host name must be defined in the alias settings for the site,
 otherwise an exception will be thrown when submitting the redirect URL.<br/>
 If the specified host is the same as the current host, the method will return
 a "normal" URL because no redirect is required.
 * @memberOf dw.web.URLUtils
 * @param {String} host - Target host with or without a site-path
 * @param {dw.web.URL} url - Target URL on current site (relative or absolute),  pass null to redirect to new host only
 * @return {dw.web.URL} an absolute secure URL to the redirect mechanism
 * @static
 */
dw.web.URLUtils.sessionRedirect = function(host, url) {};

/**
 * This method is used to create a URL that redirects to a location in
 the current site with another host name. When the URL is submitted,
 the system copies all system cookies, such that user, session and basket
 information are shared across different hosts. <br/>
 The specified host name must be defined in the alias settings for the site,
 otherwise an exception will be thrown when submitting the redirect URL.<br/>
 If the specified host is the same as the current host, the method will return
 a "normal" URL because no redirect is required.<br/>

 <b>Note:</b> since this method generates a non-secure (HTTP) link, no
 HTTPS Cookies are copied, which might lead to sessions being incorrectly being
 detected as hijacked. It is strongly recommended to use <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_sessionRedirect_String_URL_DetailAnchor">sessionRedirect(String, URL)</a>
 where possible.
 * @memberOf dw.web.URLUtils
 * @param {String} host - Target host with or without a site-path
 * @param {dw.web.URL} url - Target URL on current site (relative or absolute),  pass null to redirect to new host only
 * @return {dw.web.URL} an absolute URL to the redirect mechanism
 * @static
 */
dw.web.URLUtils.sessionRedirectHttpOnly = function(host, url) {};

/**
 * The method returns a static URL for a resource in the current site. Site
 resources are actually located in the cartridges associated with the site.
 This resources are typically logos, button images, CSS files and JavaScript
 files. The method will transform the given relative path to include cache
 related information, which enables better cache control.

 The created URL is a relative URL.

 Note: This method replaces the original mechanisms of using the webroot()
 method to construct a URL. The new method is better integrated into the
 overall cache management.
 * @memberOf dw.web.URLUtils
 * @param {String} relPath - the relative path of the file
 * @return {dw.web.URL} the URL for the specified location
 * @static
 */
dw.web.URLUtils.staticURL = function(relPath) {};

/**
 * Returns the relative URL to the static location of the specified context. The context
 can be either a specific catalog (URLUtils.CONTEXT_CATALOG),
 a content library (URLUtils.CONTEXT_LIBRARY) or a site (URLUtils.CONTEXT_SITE).
 Respectively either a URL to images in a catalog, a library or a site are created.
 <p/>
 The contextID parameter is optional and can be used with context either CONTEXT_CATALOG or CONTEXT_LIBRARY, where
 it specifies the ID of a specific catalog or a shared library respectively. If defined, the static URL for the specified
 catalog/shared library is returned. If not defined, the static URL for the current site catalog/site library
 is returned (or null if no site catalog/site library is defined). <br/>
 For context CONTEXT_SITE, the contextID parameter is ignored and the static URL for the current site is returned.
 <p/>
 Parameter relPath can be defined to specify the relative path within the context-specific
 path.
 <p/>
 The method returns an relative URL with the same protocol as the current request.
 * @memberOf dw.web.URLUtils
 * @param {String} context - Either CONTEXT_CATALOG, CONTEXT_LIBRARY or CONTEXT_SITE
 * @param {String} contextID - Optional context id, currently only used to specify a catalog id or a shared library id
 * @param {String} relPath - Relative path within the catalog or library or site
 * @return {dw.web.URL} URL for the specified location
 * @static
 */
dw.web.URLUtils.staticURL = function(context, contextID, relPath) {};

/**
 * Return a relative URL.

 Note: The use of this method is deprecated, because session URL rewriting
       is no longer supported. Use the corresponding url() method without the
       appendSID parameter instead.
 * @memberOf dw.web.URLUtils
 * @param {Boolean} appendSID - when true the resulting URL will include session ID.
 * @param {String} action - the pipeline, which should be invoked, e.g.: 'Pipeline-StartNode'
 * @param {String[]} namesAndParams - several strings with name=value pairs, e.g.: 'pid', 'value1', 'cgid', value2'.
 * @return {dw.web.URL} a relative URL.
 * @deprecated Use <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_url_String_String_DetailAnchor">url(String, String...)</a> instead.
 * @static
 * @varArgs
 */
dw.web.URLUtils.url = function(appendSID, action, namesAndParams) {};

/**
 * Return a relative URL.

 Note: The use of this method is deprecated, because session URL rewriting
       is no longer supported. Use the corresponding url() method without the
       appendSID parameter instead.
 * @memberOf dw.web.URLUtils
 * @param {Boolean} appendSID - when true the resulting URL will include session ID.
 * @param {dw.web.URLAction} action - URL action
 * @param {dw.web.URLParameter[]} params - URL parameters
 * @return {dw.web.URL} a relative URL.
 * @deprecated Use <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_url_URLAction_URLParameter_DetailAnchor">url(URLAction, URLParameter...)</a> instead.
 * @static
 * @varArgs
 */
dw.web.URLUtils.url = function(appendSID, action, params) {};

/**
 * Return a relative URL.
 * @memberOf dw.web.URLUtils
 * @param {String} action - the pipeline, which should be invoked, e.g.: 'Pipeline-StartNode'
 * @param {String[]} namesAndParams - several strings with name=value pairs , e.g.: 'pid', 'value1', 'cgid', value2'.
 * @return {dw.web.URL} a relative URL.
 * @static
 * @varArgs
 */
dw.web.URLUtils.url = function(action, namesAndParams) {};

/**
 * Return a relative URL.
 * @memberOf dw.web.URLUtils
 * @param {dw.web.URLAction} action - URL action
 * @param {dw.web.URLParameter[]} params - URL parameters
 * @return {dw.web.URL} a relative URL.
 * @static
 * @varArgs
 */
dw.web.URLUtils.url = function(action, params) {};

/**
 * Return a relative web root URL. A web root URL is used to access all static
 media context for the site. The actual media file can be referenced by appending
 a relative path.

 Note: The use of this method is deprecated. The method staticURL() should
 be used instead. It provides better cache integration.
 * @memberOf dw.web.URLUtils
 * @return {dw.web.URL} a relative web root URL.
 * @deprecated Use the <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_staticURL_String_DetailAnchor">staticURL(String)</a> or the  <a href="class_dw_web_URLUtils.html#dw_web_URLUtils_staticURL_String_String_String_DetailAnchor">staticURL(String, String, String)</a> method instead.
 * @static
 */
dw.web.URLUtils.webRoot = function() {};

/**
 *
 * @class
 * @extends Object
 */
dw.ws.Port = function() {};
dw.ws.Port.prototype = new Object();

/**
 * Property constant for controlling the content type encoding of an outgoing message.
 * @type String
 * @memberOf dw.ws.Port
 * @see <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setProperty_String_Object_Object_DetailAnchor">WSUtil.setProperty(String, Object, Object)</a>
 * @static
 * @const
 */
dw.ws.Port.ENCODING = '';

/**
 * The target service endpoint address. When using this property, the URI
 scheme for the endpoint address specification must correspond to the
 protocol/transport binding for the binding in use.
 * @type String
 * @memberOf dw.ws.Port
 * @see <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setProperty_String_Object_Object_DetailAnchor">WSUtil.setProperty(String, Object, Object)</a>
 * @static
 * @const
 */
dw.ws.Port.ENDPOINT_ADDRESS_PROPERTY = '';

/**
 * Password for authentication. This property is used with the USERNAME_PROPERTY.
 You can also use the  <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setUserNamePassword_String_String_Object_DetailAnchor">WSUtil.setUserNamePassword(String, String, Object)</a> method instead of using these
 properties.
 * @type String
 * @memberOf dw.ws.Port
 * @see <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setUserNamePassword_String_String_Object_DetailAnchor">WSUtil.setUserNamePassword(String, String, Object)</a>
 * @see <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setProperty_String_Object_Object_DetailAnchor">WSUtil.setProperty(String, Object, Object)</a>
 * @static
 * @const
 */
dw.ws.Port.PASSWORD_PROPERTY = '';

/**
 * This boolean property is used by a service client to indicate whether or not it wants to
 participate in a session with a service endpoint. If this property is set to true, the service client indicates
 that it wants the session to be maintained. If set to false, the session is not maintained. The default value
 for this property is false.
 * @type String
 * @memberOf dw.ws.Port
 * @see <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setProperty_String_Object_Object_DetailAnchor">WSUtil.setProperty(String, Object, Object)</a>
 * @static
 * @const
 */
dw.ws.Port.SESSION_MAINTAIN_PROPERTY = '';

/**
 * User name for authentication. This property is used with the PASSWORD_PROPERTY.
 You can also use the <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setUserNamePassword_String_String_Object_DetailAnchor">WSUtil.setUserNamePassword(String, String, Object)</a> method instead of using these
 properties.
 * @type String
 * @memberOf dw.ws.Port
 * @see <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setUserNamePassword_String_String_Object_DetailAnchor">WSUtil.setUserNamePassword(String, String, Object)</a>
 * @see <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setProperty_String_Object_Object_DetailAnchor">WSUtil.setProperty(String, Object, Object)</a>
 * @static
 * @const
 */
dw.ws.Port.USERNAME_PROPERTY = '';

/**
 *
 * @class
 * @extends Object
 */
dw.ws.WebReference2 = function() {};
dw.ws.WebReference2.prototype = new Object();

/**
 * Returns the default service endpoint interface port of the web reference. The default service is
 determined as the first service based on the alphabetic order of the service name, and within
 the service the first SOAP port based on the alphabetic order of the port name.
 * @memberOf dw.ws.WebReference2
 * @return {dw.ws.Port} the default service of the web reference.
 */
dw.ws.WebReference2.prototype.getDefaultService = function() {};

/**
 * Returns a specific service from this web reference.
 * @memberOf dw.ws.WebReference2
 * @param {String} service - the service to locate.
 * @param {String} portName - the name of the port to use.
 * @return {dw.ws.Port} a specific service from this web reference.
 */
dw.ws.WebReference2.prototype.getService = function(service, portName) {};

/**
 *
 * @class
 * @extends Object
 */
dw.ws.WSUtil = function() {};
dw.ws.WSUtil.prototype = new Object();

/**
 * WS-Security action property name.
 Allowed property values are WS_NO_SECURITY, WS_TIMESTAMP, WS_ENCRYPT,
 WS_SIGNATURE, WS_USERNAME_TOKEN or a space separated list of these values.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_ACTION = '';

/**
 * WS-Security Encryption: The encryption and decryption keystore alias name
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_ENC_PROP_KEYSTORE_ALIAS = '';

/**
 * WS-Security Encryption: The encryption and decryption keystore password
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_ENC_PROP_KEYSTORE_PW = '';

/**
 * WS-Security Encryption: The encryption/decryption keystore type ( jks or pkcs12 ),
                         default is jks.
 Note: The keystore file has the basename of the WSDL file and the
 file extension based on the keystore type (e.g. MyService.jks).
 The keystore file has to be placed in the same cartridge directory
 as the WSDL file.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_ENC_PROP_KEYSTORE_TYPE = '';

/**
 * WS-Security action: Encrypt the message.
 The encryption specific parameters define how to encrypt.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_ENCRYPT = '';

/**
 * WS-Security Encryption: Defines which parts of the request shall be encrypted.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_ENCRYPTION_PARTS = '';

/**
 * WS-Security Encryption: The user's name for encryption.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_ENCRYPTION_USER = '';

/**
 * WS-Security action: No security.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_NO_SECURITY = '';

/**
 * WS-Security password type: Parameter for UsernameToken action to define the encoding
 of the password. Allowed values are PW_DIGEST or PW_TEXT.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_PASSWORD_TYPE = '';

/**
 * WS-Security password type "digest": Use a password digest to send the password information.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_PW_DIGEST = '';

/**
 * WS-Security password type "text": Send the password information in clear.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_PW_TEXT = '';

/**
 * A secrets map with the username and password entries needed to create the password
 callback object.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_SECRETS_MAP = '';

/**
 * WS-Security Signature: Defines which signature digest algorithm to use.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_SIG_DIGEST_ALGO = '';

/**
 * WS-Security Signature: The signature keystore alias name.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_SIG_PROP_KEYSTORE_ALIAS = '';

/**
 * WS-Security Signature: The signature keystore password.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_SIG_PROP_KEYSTORE_PW = '';

/**
 * WS-Security: The signature keystore type ( jks or pkcs12 ), default is jks.
 Note: The keystore file has the basename of the WSDL file and the
 file extension based on the keystore type (e.g. MyService.jks).
 The keystore file has to be placed in the same cartridge directory
 as the WSDL file.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_SIG_PROP_KEYSTORE_TYPE = '';

/**
 * WS-Security action: Sign the message.
 The signature specific parameters define how to sign and which keys
 to use.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_SIGNATURE = '';

/**
 * WS-Security Signature: Defines which parts of the request shall be signed.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_SIGNATURE_PARTS = '';

/**
 * WS-Security Signature: The user's name for signature.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_SIGNATURE_USER = '';

/**
 * WS-Security action: Add a timestamp to the security header.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_TIMESTAMP = '';

/**
 * WS-Security user name.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_USER = '';

/**
 * WS-Security action: Add a UsernameToken identification.
 * @type String
 * @memberOf dw.ws.WSUtil
 * @static
 * @const
 */
dw.ws.WSUtil.WS_USERNAME_TOKEN = '';

/**
 * Adds a header element to the SOAP Header. Each header element should be XML and
 it should typically contain a namespace URI.
 * @memberOf dw.ws.WSUtil
 * @param {Object} port - the port.
 * @param {Object} xml - the header element XML. The XML should contain a namespace URI.
 * @param {Boolean} mustUnderstand - directs target endpoint to validate payload.
 * @param {String} actor - an URI that identifies that intended recipient of this header element.
 * @static
 */
dw.ws.WSUtil.addSOAPHeader = function(port, xml, mustUnderstand, actor) {};

/**
 * Adds a header element to the SOAP Header. Each header element should be XML and
 it should typically contain a namespace URI.
 * @memberOf dw.ws.WSUtil
 * @param {Object} port - the port.
 * @param {String} xml - the header element XML as a String. The XML should contain a namespace URI.
 * @param {Boolean} mustUnderstand - directs target endpoint to validate payload.
 * @param {String} actor - an URI that identifies that intended recipient of this header element.
 * @static
 */
dw.ws.WSUtil.addSOAPHeader = function(port, xml, mustUnderstand, actor) {};

/**
 * Removes all SOAP header elements from the port's request context.
 * @memberOf dw.ws.WSUtil
 * @param {Object} port - a port returned from one of the WebReference2 getService methods.
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.clearSOAPHeaders = function(port) {};

/**
 * Creates an javax.xml.ws.Holder instance that wraps the specified element. When a WSDL operation is
 defined to have an input and output message using the same type, the operation may require the operation's
 object to be wrapped in a holder.
 * @memberOf dw.ws.WSUtil
 * @param {Object} element - the element to be wrapped in the Holder.
 * @return {Object} the holder.
 * @static
 */
dw.ws.WSUtil.createHolder = function(element) {};

/**
 * Returns the connection timeout value for the port.
 * @memberOf dw.ws.WSUtil
 * @param {Object} port - a port returned from one of the WebReference2 getService methods.
 * @return {Number} the connection timeout value.
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.getConnectionTimeout = function(port) {};

/**
 * Returns the value of the SOAP request property using the specified key on a port
 returned from one of the WebReference2 getService methods. The property
 keys are defined as constants in <a href="class_dw_ws_Port.html">Port</a>.
 * @memberOf dw.ws.WSUtil
 * @param {String} key - the key to use.
 * @param {Object} port - the port on which the property is set.
 * @return {Object} the property using the specified key and port.
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.getProperty = function(key, port) {};

/**
 * Returns the read timeout value for a request made on the specified port.
 If the request exceeds the timeout value, an error is thrown.
 * @memberOf dw.ws.WSUtil
 * @param {Object} port - a port returned from one of the WebReference2 getService methods.
 * @return {Number} the request timeout value for the port.
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.getRequestTimeout = function(port) {};

/**
 * Returns the property value using the specified key and on a port returned from one of
 the WebReference2 getService methods.
 * @memberOf dw.ws.WSUtil
 * @param {String} key - the key to use.
 * @param {Object} port - the port on which the property is set
 * @return {Object} the property using the specified key and port.
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.getResponseProperty = function(key, port) {};

/**
 * Sets the connection timeout for the port.
 * @memberOf dw.ws.WSUtil
 * @param {Number} timeoutInMilliseconds - the connection timeout.
 * @param {Object} port - a port returned from one of the WebReference2 getService methods.
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.setConnectionTimeout = function(timeoutInMilliseconds, port) {};

/**
 * Set the SOAP request property using the specified key and value on a port
 returned from one of the WebReference2 getService() methods. The property
 keys are defined as constants in <a href="class_dw_ws_Port.html">Port</a>.
 * @memberOf dw.ws.WSUtil
 * @param {String} key - the key to use.
 * @param {Object} value - the value.
 * @param {Object} port - the port on which the property is set.
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.setProperty = function(key, value, port) {};

/**
 * Sets the read timeout value for a request made on the specified port.
 If the request exceeds the timeout value, an error is thrown.
 * @memberOf dw.ws.WSUtil
 * @param {Number} timeoutInMilliseconds - the timeout.
 * @param {Object} port - a port returned from one of the WebReference2 getService methods.
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.setRequestTimeout = function(timeoutInMilliseconds, port) {};

/**
 * Set the user name and password to use with Basic authentication. For stronger
 authentication, use the <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setWSSecurityConfig_Object_Map_Map_DetailAnchor">setWSSecurityConfig(Object, Map, Map)</a> method.
 * @memberOf dw.ws.WSUtil
 * @param {String} userName - the user name.
 * @param {String} password - the password.
 * @param {Object} port - a port returned from one of the WebReference2 getService methods.
 * @see <a href="class_dw_ws_WSUtil.html#dw_ws_WSUtil_setWSSecurityConfig_Object_Map_Map_DetailAnchor">setWSSecurityConfig(Object, Map, Map)</a>
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.setUserNamePassword = function(userName, password, port) {};

/**
 * Set the WS-Security configuration for the request and response based on the
 constants defined (see above).
 * @memberOf dw.ws.WSUtil
 * @param {Object} port - a port returned from one of the WebReference2 getService methods.
 * @param {dw.util.Map} requestConfigMap - the WS-Security request configuration Map.
 * @param {dw.util.Map} responseConfigMap - the WS-Security response configuration Map.
 * @see <a href="class_dw_ws_WebReference2.html">WebReference2</a>
 * @see <a href="class_dw_ws_Port.html">Port</a>
 * @static
 */
dw.ws.WSUtil.setWSSecurityConfig = function(port, requestConfigMap, responseConfigMap) {};

/**
 *
 * @class
 * @extends Object
 */
function arguments() {};
arguments.prototype = new Object();

/**
 * A reference to the function that is currently executing.
 * @type Object
 * @memberOf arguments
 */
arguments.callee = {};

/**
 * The number of arguments passed to the function.
 * @type Number
 * @memberOf arguments
 */
arguments.length = 0;

/**
 * Constructs an Array.
 * @class
 * @extends Object
 */
function Array() {};
Array.prototype = new Object();

/**
 * Constructs an Array of the specified
 length.
 * @class
 * @extends Object
 * @param {Number} length - the length of the Array.
 */
function Array(length) {};
Array.prototype = new Object();

/**
 * Constructs an Array using the specified values.
 * @class
 * @extends Object
 * @param {Object[]} values - zero or more values that are stored in the Array.
 * @varArgs
 */
function Array(values) {};
Array.prototype = new Object();

/**
 * The length of the Array.
 * @type Number
 * @memberOf Array
 */
Array.length = 0;

/**
 * Constructs an Array by concatenating multiple values.
 * @param {Object[]} values - one or more Array values.
 * @return {Array} a new Array containing the concatenated values.
 * @varArgs
 */
Array.prototype.concat = function(values) {};

/**
 * Returns true if every element in this array satisfies the test
 performed in the callback function.  The callback function is
 invoked with three arguments: the value of the element,
 the index of the element, and the Array object being traversed.
 * @param {Function} callback - the function to call to determine if every element  in this array satisfies the test defined by the function.  The callback function is  invoked with three arguments: the value of the element,  the index of the element, and the Array object being traversed.
 * @return {Boolean} true if every element in this array satisfies the test  performed in the callback function.
 * @see <a href="class_TopLevel_Function.html">Function</a>
 */
Array.prototype.every = function(callback) {};

/**
 * Returns true if every element in the thisObject argument satisfies the
 test performed in the callback function, false otherwise.
 The callback function is invoked with three arguments: the value of the
 element, the index of the element, and the Array object being traversed.
 * @param {Function} callback - the function to call to determine if every element  in this array satisfies the test defined by the function. The callback  function is invoked with three arguments: the value of the element,  the index of the element, and the Array object being traversed.
 * @param {Array} thisObject - the Object to use as 'this' when executing callback.
 * @return {Boolean} true if every element in thisObject satisfies the test  performed in the callback function, false otherwise.
 * @see <a href="class_TopLevel_Function.html">Function</a>
 */
Array.prototype.every = function(callback, thisObject) {};

/**
 * Returns a new Array with all of the elements that pass the test
 implemented by the callback function. The callback function is
 invoked with three arguments: the value of the element,
 the index of the element, and the Array object being traversed.
 * @param {Function} callback - the function that is called on this Array and  which returns a new Array containing the elements that satisfy the  function's test. The callback function is  invoked with three arguments: the value of the element,  the index of the element, and the Array object being traversed.
 * @return {Array} a new Array containing the elements that satisfy the  function's test.
 */
Array.prototype.filter = function(callback) {};

/**
 * Returns a new Array with all of the elements that pass the test
 implemented by the callback function that is run against the
 specified Array, thisObject. The callback function is
 invoked with three arguments: the value of the element,
 the index of the element, and the Array object being traversed.
 * @param {Function} callback - the function that is called on the thisObject Array and  which returns a new Array containing the elements that satisfy the  function's test. The callback function is  invoked with three arguments: the value of the element,  the index of the element, and the Array object being traversed.
 * @param {Array} thisObject - the Object to use as 'this' when executing callback.
 * @return {Array} a new Array containing the elements that satisfy the  function's test.
 */
Array.prototype.filter = function(callback, thisObject) {};

/**
 * Runs the provided callback function once for each element present in
 the Array. The callback function is invoked only for indexes of the
 Array which have assigned values; it is not invoked for indexes which
 have been deleted or which have never been assigned a value.
 * @param {Function} callback - the function to call, which is invoked with three  arguments: the value of the element, the index of the element, and the  Array object being traversed.
 */
Array.prototype.forEach = function(callback) {};

/**
 * Runs the provided callback function once for each element present in
 the specified Array, thisObject. The callback function is invoked only
 for indexes of the Array which have assigned values; it is not invoked
 for indexes which have been deleted or which have never been assigned
 a value.
 * @param {Function} callback - the function to call, which is invoked with three  arguments: the value of the element, the index of the element, and the  Array object being traversed.
 * @param {Array} thisObject - the Object to use as 'this' when executing callback.
 */
Array.prototype.forEach = function(callback, thisObject) {};

/**
 * Returns the first index at which a given element can be found in the
 array, or -1 if it is not present.
 * @param {Object} elementToLocate - the element to locate in the Array.
 * @return {Number} the index of the element or -1 if it is no preset.
 */
Array.prototype.indexOf = function(elementToLocate) {};

/**
 * Returns the first index at which a given element can be found in the
 array starting at fromIndex, or -1 if it is not present.
 * @param {Object} elementToLocate - the element to locate in the Array.
 * @param {Number} fromIndex - the index from which to start looking for the element.
 * @return {Number} the index of the element or -1 if it is no preset.
 */
Array.prototype.indexOf = function(elementToLocate, fromIndex) {};

/**
 * Converts all Array elements to Strings and concatenates them.
 * @return {String} a concatenated list of all Array elements as a String.
 */
Array.prototype.join = function() {};

/**
 * Converts all array elements to Strings and concatenates them.
 * @param {String} separator - an optional character or string used to separate one element  of the Array from the next element in the return String.
 * @return {String} a concatenated list of all Array elements as a String where the  specified delimiter is used to separate elements.
 */
Array.prototype.join = function(separator) {};

/**
 * Returns the last index at which a given element can be found in the
 array, or -1 if it is not present. The array is searched backwards.
 * @param {Object} elementToLocate - the element to locate in the Array.
 * @return {Number} the index of the element or -1 if it is no preset.
 */
Array.prototype.lastIndexOf = function(elementToLocate) {};

/**
 * Returns the last index at which a given element can be found in the
 array starting at fromIndex, or -1 if it is not present.
 The array is searched backwards.
 * @param {Object} elementToLocate - the element to locate in the Array.
 * @param {Number} fromIndex - the index from which to start looking for the element.  The array is searched backwards.
 * @return {Number} the index of the element or -1 if it is no present.
 */
Array.prototype.lastIndexOf = function(elementToLocate, fromIndex) {};

/**
 * Creates a new Array with the results of calling the specified function
 on every element in this Array. The callback function is invoked only
 for indexes of the Array which have assigned values; it is not invoked
 for indexes which have been deleted or which have never been assigned
 values.
 * @param {Function} callback - the function to call, which is invoked with three  arguments: the value of the element, the index of the element, and the  Array object being traversed.
 * @return {Array} a new Array with the results of calling the specified function  on every element in this Array.
 */
Array.prototype.map = function(callback) {};

/**
 * Creates a new Array with the results of calling the specified function
 on every element in the specified Array. The callback function is invoked only
 for indexes of the Array which have assigned values; it is not invoked
 for indexes which have been deleted or which have never been assigned
 values.
 * @param {Function} callback - the function to call, which is invoked with three  arguments: the value of the element, the index of the element, and the  Array object being traversed.
 * @param {Array} thisObject - the Object to use as 'this' when executing callback.
 * @return {Array} a new Array with the results of calling the specified function  on every element in this Array.
 */
Array.prototype.map = function(callback, thisObject) {};

/**
 * Removes and returns the last element of the Array.
 * @return {Object} the last element of the Array.
 */
Array.prototype.pop = function() {};

/**
 * Appends elements to the Array.
 * @param {Object[]} values - one or more values that will be appended to the Array.
 * @return {Number} the new length of the Array.
 * @varArgs
 */
Array.prototype.push = function(values) {};

/**
 * Reverses the order of the elements in the Array.
 */
Array.prototype.reverse = function() {};

/**
 * Shifts elements down in the Array and returns the
 former first element.
 * @return {Object} the former first element.
 */
Array.prototype.shift = function() {};

/**
 * Returns a new Array containing a portion of the
 Array using the specified start and end positions.
 * @param {Number} start - the location in the Array to start the slice  operation.
 * @param {Number} end - the location in the Array to stop the slice  operation.
 * @return {Array} a new Array containing the members bound by  start and end.
 */
Array.prototype.slice = function(start, end) {};

/**
 * Returns true if any of the elements in the Array pass the test
 defined in the callback function, false otherwise.
 * @param {Function} callback - the function to call, which is invoked with three  arguments: the value of the element, the index of the element, and the  Array object being traversed.
 * @return {Boolean} true if any of the elements in the Array pass the test  defined in the callback function, false otherwise.
 */
Array.prototype.some = function(callback) {};

/**
 * Returns true if any of the elements in the specified Array pass the test
 defined in the callback function, false otherwise.
 * @param {Function} callback - the function to call, which is invoked with three  arguments: the value of the element, the index of the element, and the  Array object being traversed.
 * @param {Array} thisObject - the Object to use as 'this' when executing callback.
 * @return {Boolean} true if any of the elements in the Array pass the test  defined in the callback function, false otherwise.
 */
Array.prototype.some = function(callback, thisObject) {};

/**
 * Sorts the elements of the Array in alphabetical
 order based on character encoding.

 <p>This sort is not guaranteed to be <i>stable</i>:  equal elements might
 be reordered as a result of the sort.
 * @return {Array} a reference to the Array.
 */
Array.prototype.sort = function() {};

/**
 * Sorts the elements of the Array in alphabetical
 order based on character encoding.

 <p>This sort is not guaranteed to be <i>stable</i>:  equal elements might
 be reordered as a result of the sort.
 * @param {Function} theFunction - a Function used to specify the sorting  order.
 * @return {Array} a reference to the Array.
 * @see <a href="class_TopLevel_Function.html">Function</a>
 */
Array.prototype.sort = function(theFunction) {};

/**
 * Deletes the specified number of elements from the Array at the specified position,
 and then inserts values into the Array at that location.
 * @param {Number} start - the start location.
 * @param {Number} deleteCount - the number of items to delete.
 * @param {Object[]} values - zero or more values to be inserted into the Array.
 * @return {Array}
 * @varArgs
 */
Array.prototype.splice = function(start, deleteCount, values) {};

/**
 * Converts the Array to a localized String.
 * @return {String} a localized String representing the Array.
 */
Array.prototype.toLocaleString = function() {};

/**
 * Converts the Array to a String.
 * @return {String} a String representation of the Array.
 */
Array.prototype.toString = function() {};

/**
 * Inserts elements at the beginning of the Array.
 * @param {Object[]} values - one or more vales that will be inserted  into the beginning of the Array.
 * @return {Number} the new length of the Array.
 * @varArgs
 */
Array.prototype.unshift = function(values) {};

/**
 * Constructs the Boolean using the specified
 String value.
 * @class
 * @extends Object
 * @param {String} value - the String value to use to construct the   Boolean. If <i>value</i> is null or an empty String,   the Boolean is set to false.
 */
function Boolean(value) {};
Boolean.prototype = new Object();

/**
 * Constructs the Boolean using the specified
 Number value.
 * @class
 * @extends Object
 * @param {Number} value - the Number value to use to construct the   Boolean. If <i>value</i> is null or 0,   the Boolean is set to false.
 */
function Boolean(value) {};
Boolean.prototype = new Object();

/**
 * Returns true or false depending on the value used to create
 the Boolean.
 * @return {String} true or false depending on the value used to create   the Boolean.
 */
Boolean.prototype.toString = function() {};

/**
 * Returns the primitive boolean contained in the Boolean
 object.
 * @return {Object} the primitive boolean contained in the Boolean   object.
 */
Boolean.prototype.valueOf = function() {};

/**
 * Constructs the error.
 * @class
 * @extends Error
 */
function ConversionError() {};
ConversionError.prototype = new Error();

/**
 * Constructs the error with the
 specified message.
 * @class
 * @extends Error
 * @param {String} msg - the conversion error message.
 */
function ConversionError(msg) {};
ConversionError.prototype = new Error();

/**
 * Constructs the Date instance using the current
 date and time.
 * @class
 * @extends Object
 */
function Date() {};
Date.prototype = new Object();

/**
 * Constructs the Date instance using the specified
 milliseconds.
 * @class
 * @extends Object
 * @param {Number} millis - the number of milliseconds between  the desired date and January 1, 1970 (UTC). For example,  value of 10000 would create a Date instance representing  10 seconds past midnight on January 1, 1970.
 */
function Date(millis) {};
Date.prototype = new Object();

/**
 * Constructs the Date instance using the specified year and
 month. Optionally, you can pass up to five additional arguments
 representing date, hours, minutes, seconds, and milliseconds.
 * @class
 * @extends Object
 * @param {Number} year - a number representing the year.
 * @param {Number} month - a number representing the month.
 * @param {Number[]} args - a set of numbers representing the date, hours,  minutes, seconds, and milliseconds.
 * @varArgs
 */
function Date(year, month, args) {};
Date.prototype = new Object();

/**
 * Constructs the Date instance by parsing the specified String.
 * @class
 * @extends Object
 * @param {String} dateString - represents a Date in a valid date format.
 */
function Date(dateString) {};
Date.prototype = new Object();

/**
 * Returns the day of the month where the value is a Number from 1
 to 31.
 * @return {Number} the day of the month where the value is a Number from 1  to 31.
 */
Date.prototype.getDate = function() {};

/**
 * Returns the day of the week where the value is a Number from 0
 to 6.
 * @return {Number} the day of the month where the value is a Number from 0  to 6.
 */
Date.prototype.getDay = function() {};

/**
 * Returns the year of the Date in four-digit format.
 * @return {Number} the year of the Date in four-digit format.
 */
Date.prototype.getFullYear = function() {};

/**
 * Return the hours field of the Date where the value is a Number from
 0 (midnight) to 23 (11 PM).
 * @return {Number} the hours field of the Date where the value is a Number from  0 (midnight) to 23 (11 PM).
 */
Date.prototype.getHours = function() {};

/**
 * Returns the milliseconds field of the Date.
 * @return {Number} the milliseconds field of the Date.
 */
Date.prototype.getMilliseconds = function() {};

/**
 * Return the minutes field of the Date where the value is a Number from
 0 to 59.
 * @return {Number} the minutes field of the Date where the value is a Number from  0  to 59.
 */
Date.prototype.getMinutes = function() {};

/**
 * Returns the month of the year as a value between 0 and 11.
 * @return {Number} the month of the year as a value between 0 and 11.
 */
Date.prototype.getMonth = function() {};

/**
 * Return the seconds field of the Date where the value is a Number from
 0 to 59.
 * @return {Number} the seconds field of the Date where the value is a Number from  0  to 59.
 */
Date.prototype.getSeconds = function() {};

/**
 * Returns the internal, millisecond representation of the Date object.
 This value is independent of time zone.
 * @return {Number} the internal, millisecond representation of the Date object.
 */
Date.prototype.getTime = function() {};

/**
 * Returns the difference between local time and Greenwich Mean Time (GMT) in minutes.
 * @return {Number} the difference between local time and Greenwich Mean Time (GMT) in minutes.
 */
Date.prototype.getTimezoneOffset = function() {};

/**
 * Returns the day of the month where the value is a Number from 1
 to 31 when date is expressed in universal time.
 * @return {Number} the day of the month where the value is a Number from 1  to 31 when date is expressed in universal time.
 */
Date.prototype.getUTCDate = function() {};

/**
 * Returns the day of the week where the value is a Number from 0
 to 6 when date is expressed in universal time.
 * @return {Number} the day of the week where the value is a Number from 0  to 6 when date is expressed in universal time.
 */
Date.prototype.getUTCDay = function() {};

/**
 * Returns the year when the Date is expressed in
 universal time. The return value is a four-digit format.
 * @return {Number} the year of the Date in four-digit form.
 */
Date.prototype.getUTCFullYear = function() {};

/**
 * Return the hours field, expressed in universal time, of the Date where the value is a Number from
 0 (midnight) to 23 (11 PM).
 * @return {Number} the hours field, expressed in universal time, of the Date where the value is a Number from  0 (midnight) to 23 (11 PM).
 */
Date.prototype.getUTCHours = function() {};

/**
 * Returns the milliseconds field, expressed in universal time, of the Date.
 * @return {Number} the milliseconds field, expressed in universal time, of the Date.
 */
Date.prototype.getUTCMilliseconds = function() {};

/**
 * Return the minutes field, expressed in universal time, of the Date where the value is a Number from
 0 to 59.
 * @return {Number} the minutes field, expressed in universal time, of the Date where the value is a Number from  0  to 59.
 */
Date.prototype.getUTCMinutes = function() {};

/**
 * Returns the month of the year that results when the Date is expressed
 in universal time. The return value is a Number betwee 0 and 11.
 * @return {Number} the month of the year as a value between 0 and 11.
 */
Date.prototype.getUTCMonth = function() {};

/**
 * Return the seconds field, expressed in universal time, of the Date where the value is a Number from
 0 to 59.
 * @return {Number} the seconds field, expressed in universal time, of the Date where the value is a Number from  0  to 59.
 */
Date.prototype.getUTCSeconds = function() {};

/**
 * Takes a date string and returns the number of
 milliseconds since midnight of January 1, 1970.
 * @param {String} dateString - represents a Date in a valid date format.
 * @return {Number} the number of milliseconds since midnight of January 1, 1970.
 * @static
 */
Date.parse = function(dateString) {};

/**
 * Sets the day of the month where the value is a Number from 1 to 31.
 * @param {Number} date - the day of the month.
 * @return {Number} the millisecond representation of the adjusted date.
 */
Date.prototype.setDate = function(date) {};

/**
 * Sets the full year of Date where the value must be a four-digit Number. Optionally, you can set the month and date.
 * @param {Number} year - the year as a four-digit Number.
 * @param {Number[]} args - the month and day of the month.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setFullYear = function(year, args) {};

/**
 * Sets the hours field of this Date instance. The minutes value should
 be a Number from 0 to 23. Optionally, hours, seconds and milliseconds can
 also be provided.
 * @param {Number} hours - the minutes field of this Date instance.
 * @param {Number[]} args - the hours, seconds and milliseconds values for this Date instance.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setHours = function(hours, args) {};

/**
 * Sets the milliseconds field of this Date instance.
 * @param {Number} millis - the milliseconds field of this Date instance.
 * @return {Number} the millisecond representation of the adjusted date.
 */
Date.prototype.setMilliseconds = function(millis) {};

/**
 * Sets the minutes field of this Date instance. The minutes value should
 be a Number from 0 to 59. Optionally, seconds and milliseconds can
 also be provided.
 * @param {Number} minutes - the minutes field of this Date instance.
 * @param {Number[]} args - the seconds and milliseconds value for this Date instance.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setMinutes = function(minutes, args) {};

/**
 * Sets the month of the year where the value is a Number from 0 to 11.
 Optionally, you can set the day of the month.
 * @param {Number} month - the month of the year.
 * @param {Number[]} date - the day of the month.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setMonth = function(month, date) {};

/**
 * Sets the seconds field of this Date instance. The seconds value should
 be a Number from 0 to 59. Optionally, milliseconds can also be provided.
 * @param {Number} seconds - the seconds field of this Date instance.
 * @param {Number[]} millis - the milliseconds field of this Date instance.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setSeconds = function(seconds, millis) {};

/**
 * Sets the number of milliseconds between the desired date and time
 and January 1, 1970.
 * @param {Number} millis - the number of milliseconds between the desired date and time  and January 1, 1970.
 * @return {Number} the millisecond representation of the adjusted date.
 */
Date.prototype.setTime = function(millis) {};

/**
 * Sets the day of the month, expressed in universal time, where the value is a Number from 1 to 31.
 * @param {Number} date - the day of the month, expressed in universal time.
 * @return {Number} the millisecond representation of the adjusted date.
 */
Date.prototype.setUTCDate = function(date) {};

/**
 * Sets the full year, expressed in universal time, of Date where the value must be a four-digit Number. Optionally, you can set the month and date.
 * @param {Number} year - the year as a four-digit Number, expressed in universal time.
 * @param {Number[]} args - the month and day of the month.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setUTCFullYear = function(year, args) {};

/**
 * Sets the hours field, expressed in universal time, of this Date instance. The minutes value should
 be a Number from 0 to 23. Optionally, seconds and milliseconds can
 also be provided.
 * @param {Number} hours - the minutes field, expressed in universal time, of this Date instance.
 * @param {Number[]} args - the seconds and milliseconds value, expressed in universal time, for this Date instance.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setUTCHours = function(hours, args) {};

/**
 * Sets the milliseconds field, expressed in universal time, of this Date instance.
 * @param {Number} millis - the milliseconds field, expressed in universal time, of this Date instance.
 * @return {Number} the millisecond representation of the adjusted date.
 */
Date.prototype.setUTCMilliseconds = function(millis) {};

/**
 * Sets the minutes field, expressed in universal time, of this Date instance. The minutes value should
 be a Number from 0 to 59. Optionally, seconds and milliseconds can
 also be provided.
 * @param {Number} minutes - the minutes field, expressed in universal time, of this Date instance.
 * @param {Number[]} args - the seconds and milliseconds values, expressed in universal time, for this Date instance.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setUTCMinutes = function(minutes, args) {};

/**
 * Sets the month of the year, expressed in universal time, where the value is a Number from 0 to 11.
 Optionally, you can set the day of the month.
 * @param {Number} month - the month of the year, expressed in universal time.
 * @param {Number[]} date - the day of the month.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setUTCMonth = function(month, date) {};

/**
 * Sets the seconds field, expressed in universal time, of this Date instance. The seconds value should
 be a Number from 0 to 59. Optionally, milliseconds can also be provided.
 * @param {Number} seconds - the seconds field, expressed in universal time, of this Date instance.
 * @param {Number[]} millis - the milliseconds field, expressed in universal time, of this Date instance.
 * @return {Number} the millisecond representation of the adjusted date.
 * @varArgs
 */
Date.prototype.setUTCSeconds = function(seconds, millis) {};

/**
 * Returns the Date as a String value where the value represents
 the <i>date</i> portion of the Date in the default locale (en_US).
 To format a calendar object in an alternate format use the
 <code>dw.util.StringUtils.formatCalendar()</code> functions instead.
 * @return {String} the Date as a String value.
 */
Date.prototype.toDateString = function() {};

/**
 * This function returns a string value represent the instance in time represented
 by this Date object. The date is formatted with the Simplified ISO 8601 format as
 follows: YYYY-MM-DDTHH:mm:ss.sssTZ. The time zone is always UTC, denoted by the
 suffix Z.
 * @return {String} string representation of this date
 */
Date.prototype.toISOString = function() {};

/**
 * This function returns the same string as Date.prototype.toISOString(). The method is
 called when a Date object is stringified.
 * @param {String} key - the name of the key, which is stringified
 * @return {Object} JSON string representation of this date
 */
Date.prototype.toJSON = function(key) {};

/**
 * Returns the Date as a String value where the value represents
 the <i>date</i> portion of the Date in the default locale (en_US).
 To format a calendar object in an alternate format use the
 <code>dw.util.StringUtils.formatCalendar()</code> functions instead.
 * @return {String} returns the <i>date</i> portion of the Date as a String.
 */
Date.prototype.toLocaleDateString = function() {};

/**
 * Returns the Date as a String using the default locale (en_US).
 To format a calendar object in an alternate format use the
 <code>dw.util.StringUtils.formatCalendar()</code> functions instead.
 * @return {String} the Date as a String using the default locale en_US
 */
Date.prototype.toLocaleString = function() {};

/**
 * Returns the Date as a String value where the value represents
 the <i>time</i> portion of the Date in the default locale (en_US).
 To format a calendar object in an alternate format use the
 <code>dw.util.StringUtils.formatCalendar()</code> functions instead.
 * @return {String} returns the <i>time</i> time's portion of the Date as a String.
 */
Date.prototype.toLocaleTimeString = function() {};

/**
 * Returns the Date as a String value where the value represents
 the <i>time</i> portion of the Date in the default locale (en_US).
 To format a calendar object in an alternate format use the
 <code>dw.util.StringUtils.formatCalendar()</code> functions instead.
 * @return {String} the Date's time.
 */
Date.prototype.toTimeString = function() {};

/**
 * Returns a String representation of this Date, expressed in universal time.
 * @return {String} a String representation of this Date, expressed in universal time.
 */
Date.prototype.toUTCString = function() {};

/**
 * Returns the number of milliseconds since midnight of January 1, 1970
 according to universal time.
 Optionally, you can pass up to five additional arguments
 representing date, hours, minutes, seconds, and milliseconds.
 * @param {Number} year - a number representing the year.
 * @param {Number} month - a number representing the month.
 * @param {Number[]} args - a set of numbers representing the date, hours,  minutes, seconds, and milliseconds.
 * @return {Number} the number of milliseconds since midnight of January 1, 1970          according to universal time.
 * @static
 * @varArgs
 */
Date.UTC = function(year, month, args) {};

/**
 * Returns the value of this Date represented in milliseconds.
 * @return {Object} the value of this Date represented in milliseconds.
 */
Date.prototype.valueOf = function() {};

/**
 * Constructs the Error object.
 * @class
 * @extends Object
 */
function Error() {};
Error.prototype = new Object();

/**
 * Constructs the Error object
 using the specified message.
 * @class
 * @extends Object
 * @param {String} msg - the message to use,.
 */
function Error(msg) {};
Error.prototype = new Object();

/**
 * An error message that provides details about the exception.
 * @type String
 * @memberOf Error
 */
Error.message = '';

/**
 * The name of the error based on the constructor used.
 * @type String
 * @memberOf Error
 */
Error.name = '';

/**
 * Returns a String representation of the Error.
 * @return {String} a String representation of the Error.
 */
Error.prototype.toString = function() {};

/**
 * Constructs the error.
 * @class
 * @extends Error
 */
function EvalError() {};
EvalError.prototype = new Error();

/**
 * Constructs the error with the
 specified message.
 * @class
 * @extends Error
 * @param {String} msg - the evaluation error message.
 */
function EvalError(msg) {};
EvalError.prototype = new Error();

/**
 *
 * @class
 * @extends Error
 */
function Fault() {};
Fault.prototype = new Error();

/**
 * If the exception is associated with a root cause, the property
 contains the full name of the associated Java exception.
 * @type String
 * @memberOf Fault
 */
Fault.causeFullName = '';

/**
 * If the exception is associated with a root cause, the property
 contains the message of the associated Java exception.
 * @type String
 * @memberOf Fault
 */
Fault.causeMessage = '';

/**
 * If the exception is associated with a root cause, the property
 contains the simplified name of the associated Java exception.
 * @type String
 * @memberOf Fault
 */
Fault.causeName = '';

/**
 * Provides some information on who cause the fault along the message
 path.
 * @type String
 * @memberOf Fault
 */
Fault.faultActor = '';

/**
 * An identifier for the specific fault.
 * @type String
 * @memberOf Fault
 */
Fault.faultCode = '';

/**
 * More detailed information about the fault.
 * @type String
 * @memberOf Fault
 */
Fault.faultDetail = '';

/**
 * A human readable description for the fault.
 * @type String
 * @memberOf Fault
 */
Fault.faultString = '';

/**
 * The full name of the underlying Java exception.
 * @type String
 * @memberOf Fault
 */
Fault.javaFullName = '';

/**
 * The message of the underlying Java exception.
 * @type String
 * @memberOf Fault
 */
Fault.javaMessage = '';

/**
 * The simplified name of the underlying Java exception.
 * @type String
 * @memberOf Fault
 */
Fault.javaName = '';

/**
 * Constructs the function with the specified arguments where the
 last argument represents the function body and all preceeding arguments represent
 the function parameters.
 * @class
 * @extends Object
 * @param {String[]} args - one or more Strings where the last argument in the list  represents the function body and all preceeding arguments represent  the function parameters.
 * @varArgs
 */
function Function(args) {};
Function.prototype = new Object();

/**
 * The number of named arguments that were specified
 when the function was declared.
 * @type Number
 * @memberOf Function
 */
Function.length = 0;

/**
 * An object that defines properties and methods
 shared by all objects created with that
 constructor function.
 * @type Object
 * @memberOf Function
 */
Function.prototype = {};

/**
 * Invokes this function as a method of the specified object
 passing the specified Array of arguments.
 * @param {Object} thisobj - the object to which the function is applied.
 * @param {Array} args - Array of values or an arguments object to be passed  as arguments to the function.
 * @return {Object} whatever value is returned by the invocation of the function.
 */
Function.prototype.apply = function(thisobj, args) {};

/**
 * Invokes this function as a method of the specified object
 passing the specified optional arguments.
 * @param {Object} thisobj - the object to which the function is applied.
 * @param {Object[]} args - an optional list of one or more arguments values  that are passed as arguments  to the function.
 * @return {Object} whatever value is returned by the invocation of the function.
 * @varArgs
 */
Function.prototype.call = function(thisobj, args) {};

/**
 * Returns a String representation of this function object.
 * @return {String} a String representation of this function object.
 */
Function.prototype.toString = function() {};

/**
 *
 * @class
 * @extends Object
 */
function Generator() {};
Generator.prototype = new Object();

/**
 * Closes the iteration of the generator. Any finally clauses active in
 the generator function are run. If a finally clause throws any
 exception other than StopIteration, the exception is propagated to
 the caller of the close() method.
 */
Generator.prototype.close = function() {};

/**
 * Resumes the iteration of the generator by continuing the function
 at the statement after the <b>yield</b> statement. This function throws a
 StopIterator exception when there are no additional iterative steps.
 * @return {Object} the result of resuming the iterative algorithm or a StopIterator  exception if the sequence is exhausted.
 * @see <a href="class_TopLevel_StopIteration.html">StopIteration</a>
 */
Generator.prototype.next = function() {};

/**
 * Allows you to control the resumption of the iterative algorithm. Once a
 generator has been started by calling its next() method, you can use
 send() and pass a specific value that will be treated as the result
 of the last <b>yield</b>. The generator will then return the operand of the
 subsequent <b>yield</b>.

 You can't start a generator at an arbitrary point; you must start
 it with next() before you can send() it a specific value. Note that
 calling send(undefined) is equivalent to calling next(). However,
 starting a newborn generator with any value other than 'undefined' when
 calling send() will result in a TypeError exception.
 * @param {Object} value - the value to use.
 * @return {Object}
 */
Generator.prototype.send = function(value) {};

/**
 * The current customer or null if this request is not associated with any customer.
 * @type dw.customer.Customer
 */
var customer;

/**
 * representation for Infinity as an Integer
 * @type Number
 */
var Infinity;

/**
 * representation for Not a Number as an Integer
 * @type Number
 */
var NaN;

/**
 * represents an error during pipelet execution
 * @type Number
 */
var PIPELET_ERROR;

/**
 * represents the next pipelet to fire
 * @type Number
 */
var PIPELET_NEXT;

/**
 * The current request.
 * @type dw.system.Request
 */
var request;

/**
 * The current response.
 * @type dw.system.Response
 */
var response;

/**
 * The current session.
 * @type dw.system.Session
 */
var session;

/**
 * Provides access to the SlotContent object.  Available only in ISML
 templates that are defined as the Slot's template.  For example,
 &lt;isprint value="${slotcontent.callout}"&gt; will print out the callout message
 of the active Slot.
 * @type Object
 */
var slotcontent;

/**
 * representation for undefined
 * @type Object
 */
var undefined;

/**
 * Provides access to WSDL definition files in a Cartridge's webreferences
 folder. For example, webreferences.mywebservice loads the
 mywebservice.wsdl file and returns an instance of dw.rpc.WebReference.
 The WebReference instance enables you to access the actual web service
 via the WebReference.getDefaultService() method.
 * @type Object
 */
var webreferences;

/**
 * Provides access to WSDL definition files in a Cartridge's webreferences2
 folder. For example, webreferences2.mywebservice loads the
 mywebservice.wsdl file and returns an instance of dw.ws.WebReference2.
 The WebReference2 instance enables you to access the actual web service
 via the WebReference2.getDefaultService() method.
 * @type Object
 */
var webreferences2;

/**
 * Unescapes characters in a URI component.
 * @param {String} uri - a string that contains an encoded URI or other text to be decoded.
 * @return {String} A copy of <i>uri</i> with any hexadecimal escape sequences replaced with the  characters they represent
 * @static
 */
function decodeURI(uri) {};

/**
 * Unescapes characters in a URI component.
 * @param {String} uriComponent - a string that contains an encoded URI component or other text to be decoded.
 * @return {String} A copy of <i>uriComponent</i> with any hexadecimal escape sequences replaced with the  characters they represent
 * @static
 */
function decodeURIComponent(uriComponent) {};

/**
 * The method tests, whether the given object is empty. The interpretation
 of empty is the following.
 - null is always empty
 - undefined is always empty
 - a string with zero length is empty
 - an array with no elements is empty
 - a collection with no elements is empty
 * @param {Object} obj - the object to be thested
 * @return {Boolean} true if the object is interpreted as being empty
 * @static
 */
function empty(obj) {};

/**
 * Escapes characters in a URI.
 * @param {String} uri - a String that contains the URI or other text to be encoded.
 * @return {String} a copy of <i>uri</i> with certain characters replaced by  hexadecimal escape sequences.
 * @static
 */
function encodeURI(uri) {};

/**
 * Escapes characters in a URI component.
 * @param {String} uriComponent - a String that contains a portion of a URI or other text to be encoded.
 * @return {String} a copy of <i>uriComponent</i> with certain characters replaced by  hexadecimal escape sequences.
 * @static
 */
function encodeURIComponent(uriComponent) {};

/**
 * Encodes a String.
 * @param {String} s - the String to be encoded.
 * @return {String} a copy of <i>s</i> where characters have been replace by  hexadecimal escape sequences.
 * @static
 */
function escape(s) {};

/**
 * Execute JavaScript code from a String.
 * @param {String} code - a String that contains the JavaScript expression to be  evaluated or the statements to be executed.
 * @return {Object} the value of the executed call or null.
 * @deprecated The eval() function is deprecated, because it's potential security risk for server side code injection.
 * @static
 */
function eval(code) {};

/**
 * Import the specified class and make it
 available at the top level. It's equivalent in effect to the
 Java import declaration.
 * @param {Object} classPath - the fully qualified class path.
 * @static
 */
function importClass(classPath) {};

/**
 * Import all the classes in the specified package
 available at the top level. It's equivalent in effect to the
 Java import declaration.
 * @param {Object} packagePath - the fully qualified package path.
 * @static
 */
function importPackage(packagePath) {};

/**
 * Imports all functions from the specified script. Variables are not imported
 from the script and must be accessed through helper functions.

 The script path has the following syntax: [cartridgename:]scriptname, where
 cartridgename identifies a cartridge where the script file is located. If
 cartridgename is omitted the script file is loaded from the same cartridge
 in which the importing component is located.

 Examples:
 importScript( 'example.ds' ) imports the script file example.ds from the same cartridge
 importScript( 'abc:example.ds' ) imports the script file example.ds from the cartridge 'abc'
 * @param {String} scriptPath - the path to the script.
 * @static
 */
function importScript(scriptPath) {};

/**
 * Returns true if the specified Number is finite.
 * @param {Number} number - the Number to test.
 * @return {Boolean} true if the specified Number is finite,  false otherwise.
 * @static
 */
function isFinite(number) {};

/**
 * Test the specified value to determine if it
 is not a Number.
 * @param {Object} object - the Object to be tested as a number
 * @return {Boolean} True if the object is not a number
 * @static
 */
function isNaN(object) {};

/**
 * Determines whether the specified string is a valid name for an
 XML element or attribute.
 * @param {String} name - the String specified
 * @return {Boolean} True if the string is a valid name
 */
function isXMLName(name) {};

/**
 * Parses a String into an float Number.
 * @param {String} s - the String to parse.
 * @return {Number} Returns the float as a Number.
 * @static
 */
function parseFloat(s) {};

/**
 * Parses a String into an integer Number.<br>
 This function is a short form for the call to <a href="class_TopLevel_global.html#TopLevel_global_parseInt_String_int_DetailAnchor">parseInt(String, Number)</a> with automatic determination of the radix.
 If the string starts with "0x" or "0X" then the radix is 16. If the string starts with "0" the the radix is 8. In all other cases the radix is 10.
 * @param {String} s - the String to parse.
 * @return {Number} Returns the integer as a Number.
 * @static
 */
function parseInt_1(s) {};

/**
 * Parses a String into an integer Number.
 This function is a short form for the call to <a href="class_TopLevel_global.html#TopLevel_global_parseInt_String_int_DetailAnchor">parseInt(String, Number)</a> with automatic determination of the radix.
 If the string starts with "0x" or "0X" then the radix is 16. In all other cases the radix is 10.
 * @param {String} s - the String to parse.
 * @return {Number} Returns the integer as a Number.
 * @static
 */
function parseInt_2(s) {};

/**
 * Parses a String into an integer Number using the
 specified radix.
 * @param {String} s - the String to parse.
 * @param {Number} radix - the radix to use.
 * @return {Number} Returns the integer as a Number.
 * @static
 */
function parseInt(s, radix) {};

/**
 * The require() supports loading modules in JavaScript. The function works similar to the require() function
 in commonjs. The general module loading works the same way, but the exact path lookup is slightly different
 and better fits into Demandware concepts. Here the details for the lookup:
 <ul>
 <li>If the module name starts with "./" or "../" then load it relative to the current module. The module can be a file or a directory. A file
 extension is acknowledged, but not required. If it's a directory a 'package.json' or a 'main' file is expected.
 If the 'package.json' does not contains a main entry, then default to main file in the directory.
 Access to parent files can't go beyond the cartridges directory. Access to other cartridges is explicitly allowed.</li>
 <li>If the module name starts with "~/" it's a path relative to the current cartridge.</li>
 <li>A module with the name "dw" or which starts with "dw/" references Demandware builtin functions and classes.
 For example <code>var u = require( 'dw/util' );</code> loads the classes in the util package, which can be then used like
 <code>var h = new u.HashMap();</code></li>
 <li>A module, which doesn't start with "./" or "../" is resolved as top level module.
 <ul>
 <li>The module name is used to find a folder in the top cartridge directory, typically a cartridge itself, but it can also be a simple folder.</li>
 <li>If nothing is found, the module name is used to look into a special folder called "modules" in the top cartridge directory. That folder
 can be used by a developer to manage different modules. For example a developer could drop a module like "less.js" just into that folder.</li>
 </ul>
 </ul>
 If the require function is used to reference a file then an optional file extension is used to determine the content of the file. Currently
 supported are the extensions ordered by priority:
 <ul>
 <li>js - JavaScript file</li>
 <li>ds - Demandware Script file</li>
 <li>json - JSON file</li>
 </ul>
 * @param {String} path - the path to the JavaScript module.
 * @return {Object} an object with the exported functions and properties.
 * @static
 */
function require(path) {};

/**
 * Formats and prints the message using the specified params and returns
 the formatted message. The format message is a Java MessageFormat
 expression. Printing happens in the script log output.
 * @param {String} msg - the message to format.
 * @param {Object[]} params - one, or multiple parameters that are used  to format the message.
 * @static
 * @varArgs
 */
function trace(msg, params) {};

/**
 * Decode an escaped String.
 * @param {String} string - the String to decode.
 * @return {String} a copy of the String where hexadecimal character sequences  are replace by Unicode characters.
 * @static
 */
function unescape(string) {};

/**
 * Constructs the error.
 * @class
 * @extends Error
 */
function InternalError() {};
InternalError.prototype = new Error();

/**
 * Constructs the error with the
 specified message.
 * @class
 * @extends Error
 * @param {String} msg - the internal error message.
 */
function InternalError(msg) {};
InternalError.prototype = new Error();

/**
 *
 * @class
 * @extends Error
 */
function IOError() {};
IOError.prototype = new Error();

/**
 * If the exception is associated with a root cause, the property
 contains the full name of the associated Java exception.
 * @type String
 * @memberOf IOError
 */
IOError.causeFullName = '';

/**
 * If the exception is associated with a root cause, the property
 contains the message of the associated Java exception.
 * @type String
 * @memberOf IOError
 */
IOError.causeMessage = '';

/**
 * If the exception is associated with a root cause, the property
 contains the simplified name of the associated Java exception.
 * @type String
 * @memberOf IOError
 */
IOError.causeName = '';

/**
 * The full name of the underlying Java exception.
 * @type String
 * @memberOf IOError
 */
IOError.javaFullName = '';

/**
 * The message of the underlying Java exception.
 * @type String
 * @memberOf IOError
 */
IOError.javaMessage = '';

/**
 * The simplified name of the underlying Java exception.
 * @type String
 * @memberOf IOError
 */
IOError.javaName = '';

/**
 * Creates an Iterator instance for the specified object.
 The Iterator for the object is created by calling the
 object's __iterator__ method. If there is no __iterator__ method,
 a default iterator is created. The default iterator provides access to
 the object's properties, according to the usual for...in and for
 each...in model.

 If you want to provide a custom iterator, you should override
 the __iterator__ method to return an instance of your custom iterator.
 * @class
 * @extends Object
 * @param {Object} object - the object whose values will be accessible via the   Iterator.
 */
function Iterator(object) {};
Iterator.prototype = new Object();

/**
 * Creates an Iterator instance for the specified object's keys.
 The Iterator for the object is created by calling the
 object's __iterator__ method. If there is no __iterator__ method,
 a default iterator is created. The default iterator provides access to
 the object's properties, according to the usual for...in and for
 each...in model.

 If you want to provide a custom iterator, you should override
 the __iterator__ method to return an instance of your custom iterator.
 * @class
 * @extends Object
 * @param {Object} object - the object whose keys or values will be accessible   via the Iterator.
 * @param {Boolean} keysOnly - if true, provides access to the object's keys. If false,   provides access to the object's values.
 */
function Iterator(object, keysOnly) {};
Iterator.prototype = new Object();

/**
 * Returns the next item in the iterator. If there are no items left,
 the StopIteration exception is thrown. You should generally use this method
 in the context of a try...catch block to handle the StopIteration case.
 There is no guaranteed ordering of the data.
 * @return {Object} the next item in the iterator.
 * @see <a href="class_TopLevel_StopIteration.html">StopIteration</a>
 */
Iterator.prototype.next = function() {};

/**
 *
 * @class
 * @extends Object
 */
function JSON() {};
JSON.prototype = new Object();

/**
 * The parse function parses a JSON text (a JSON formatted string) and produces an ECMAScript
 value. The JSON format is a restricted form of ECMAScript literal. JSON objects are realized
 as ECMAScript objects. JSON Arrays are realized as ECMAScript arrays. JSON strings, numbers,
 booleans, and null are realized as ECMAScript strings, numbers, booleans, and null.
 * @param {String} json - a JSON formatted string
 * @return {Object} the object produced from the JSON string
 * @static
 */
JSON.parse = function(json) {};

/**
 * The parse function parses a JSON text (a JSON formatted string) and produces an ECMAScript
 value. The JSON format is a restricted form of ECMAScript literal. JSON objects are realized
 as ECMAScript objects. JSON Arrays are realized as ECMAScript arrays. JSON strings, numbers,
 booleans, and null are realized as ECMAScript strings, numbers, booleans, and null.

 The optional reviver parameter is a function that takes two parameters, (key, value). It can
 filter and transform the results. It is called with each of the key/value pairs produced by the
 parse, and its return value is used instead of the original value. If it returns what it
 received, the structure is not modified. If it returns undefined then the member is deleted
 from the result.
 * @param {String} json - a JSON formatted string
 * @param {Function} reviver - a function, which is called with each key, value pair during parsing
 * @return {Object} the object produced from the JSON string
 * @static
 */
JSON.parse = function(json, reviver) {};

/**
 * The stringify function produces a JSON formatted string that captures information
 from a JavaScript value. The value parameter is a JavaScript value is usually an
 object or array, although it can also be a string, boolean, number or null.

 Note: Stringifying API objects is not yet supported. An API object will be stringified
 into an empty object {}.
 * @param {Object} value - the value which is stringified
 * @return {String} the JSON string
 * @static
 */
JSON.stringify = function(value) {};

/**
 * The stringify function produces a JSON formatted string that captures information
 from a JavaScript value. The value parameter is a JavaScript value is usually an
 object or array, although it can also be a string, boolean, number or null. The
 optional replacer parameter is either a function that alters the way objects and
 arrays are stringified, or an array of strings that acts as a white list for selecting
 the keys that will be stringified.

 Note: Stringifying API objects is not yet supported. An API object will be stringified
 into an empty object {}.
 * @param {Object} value - the value which is stringified
 * @param {Object} replacer - either a function, which is called with a key and value as parameter, or an array with a white list
 * @return {String} the JSON string
 * @static
 */
JSON.stringify = function(value, replacer) {};

/**
 * The stringify function produces a JSON formatted string that captures information
 from a JavaScript value. The value parameter is a JavaScript value is usually an
 object or array, although it can also be a string, boolean, number or null. The
 optional replacer parameter is either a function that alters the way objects and
 arrays are stringified, or an array of strings that acts as a white list for selecting
 the keys that will be stringified. The optional space parameter is a string or number
 that allows the result to have white space injected into it to improve human readability.

 Note: Stringifying API objects is not yet supported. An API object will be stringified
 into an empty object {}.
 * @param {Object} value - the value which is stringified
 * @param {Object} replacer - either a function, which is called with a key and value as parameter, or an array with a white list
 * @param {Number} space - the number of space for indenting
 * @return {String} the JSON string
 * @static
 */
JSON.stringify = function(value, replacer, space) {};

/**
 * The stringify function produces a JSON formatted string that captures information
 from a JavaScript value. The value parameter is a JavaScript value is usually an
 object or array, although it can also be a string, boolean, number or null. The
 optional replacer parameter is either a function that alters the way objects and
 arrays are stringified, or an array of strings that acts as a white list for selecting
 the keys that will be stringified. The optional space parameter is a string or number
 that allows the result to have white space injected into it to improve human readability.

 Note: Stringifying API objects is not yet supported. An API object will be stringified
 into an empty object {}.
 * @param {Object} value - the value which is stringified
 * @param {Object} replacer - either a function, which is called with a key and value as parameter, or an array with a white list
 * @param {String} space - a string for indentation
 * @return {String} the JSON string
 * @static
 */
JSON.stringify = function(value, replacer, space) {};

/**
 *
 * @class
 * @extends Object
 */
function Math() {};
Math.prototype = new Object();

/**
 * The constant <i>e</i>, which is the base
 of natural logarithms.
 * @type Number
 * @memberOf Math
 * @static
 * @const
 */
Math.E = 0;

/**
 * The natural logarithm of 10.
 * @type Number
 * @memberOf Math
 * @static
 * @const
 */
Math.LN10 = 0;

/**
 * The natural logarithm of 2.
 * @type Number
 * @memberOf Math
 * @static
 * @const
 */
Math.LN2 = 0;

/**
 * The base-10 logarithm of <i>e</i>.
 * @type Number
 * @memberOf Math
 * @static
 * @const
 */
Math.LOG10E = 0;

/**
 * The base-2 logarithm of <i>e</i>.
 * @type Number
 * @memberOf Math
 * @static
 * @const
 */
Math.LOG2E = 0;

/**
 * The constant for PI.
 * @type Number
 * @memberOf Math
 * @static
 * @const
 */
Math.PI = 0;

/**
 * 1 divided by the square root of 2.
 * @type Number
 * @memberOf Math
 * @static
 * @const
 */
Math.SQRT1_2 = 0;

/**
 * The square root of 2.
 * @type Number
 * @memberOf Math
 * @static
 * @const
 */
Math.SQRT2 = 0;

/**
 * Returns the absolute value of <i>x</i>. The result has the same magnitude as <i>x</i> but has positive sign.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is -0, the result is +0.</li>
 <li>If <i>x</i> is -&#8734;, the result is +&#8734;.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} the absolute value of <i>x</i>.
 * @static
 */
Math.abs = function(x) {};

/**
 * Returns an approximation to the arc cosine of <i>x</i>.
 The result is expressed in radians and ranges from +0 to +p.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is greater than 1, the result is NaN.</li>
 <li>If <i>x</i> is less than -1, the result is NaN.</li>
 <li>If <i>x</i> is exactly 1, the result is +0.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} an approximation to the arc cosine of <i>x</i>.
 * @static
 */
Math.acos = function(x) {};

/**
 * Returns an approximation to the arc sine of <i>x</i>.
 The result is expressed in radians and ranges from -p/2 to +p/2.
 <ul>
 <li>If <i>i</i> is NaN, the result is NaN</li>
 <li>If <i>i</i> is greater than 1, the result is NaN.</li>
 <li>If <i>i</i> is less than -1, the result is NaN.</li>
 <li>If <i>i</i> is +0, the result is +0.</li>
 <li>If <i>i</i> is -0, the result is -0.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} an approximation to the arc sine of <i>x</i>.
 * @static
 */
Math.asin = function(x) {};

/**
 * Returns an approximation to the arc tangent of <i>x</i>.
 The result is expressed in radians and ranges from -p/2 to +p/2.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is +0, the result is +0.</li>
 <li>If <i>x</i> is -0, the result is -0.</li>
 <li>If <i>x</i> is +&#8734;, the result is an approximation to +p/2.</li>
 <li>If <i>x</i> is -&#8734;, the result is an approximation to -p/2.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} an approximation to the arc tangent of <i>x</i>.
 * @static
 */
Math.atan = function(x) {};

/**
 * Returns an approximation to the arc tangent of the quotient y/x of
 the arguments <i>y</i> and <i>x</i>, where the signs of <i>y</i> and <i>x</i> are used to determine
 the quadrant of the result. Note that it is intentional and traditional
 for the two-argument arc tangent function that the argument named <i>y</i> be
 first and the argument named <i>x</i> be second. The result is expressed in
 radians and ranges from -p to +p.
 <ul>
 <li>If either <i>x</i> or <i>y</i> is NaN, the result is NaN.</li>
 <li>If <i>y</i>&gt;0 and <i>x</i> is +0, the result is an implementation-dependent approximation to +p/2.</li>
 <li>If <i>y</i>&gt;0 and <i>x</i> is -0, the result is an implementation-dependent approximation to +p/2.</li>
 <li>If <i>y</i> is +0 and <i>x</i>&gt;0, the result is +0.</li>
 <li>If <i>y</i> is +0 and <i>x</i> is +0, the result is +0.</li>
 <li>If <i>y</i> is +0 and <i>x</i> is -0, the result is an implementation-dependent approximation to +p.</li>
 <li>If <i>y</i> is +0 and <i>X</i>&lt;0, the result is an implementation-dependent approximation to +p.</li>
 <li>If <i>y</i> is -0 and <i>x</i>&gt;0, the result is -0.</li>
 <li>If <i>y</i> is -0 and <i>x</i> is +0, the result is -0.</li>
 <li>If <i>y</i> is -0 and <i>x</i> is -0, the result is an implementation-dependent approximation to -p.</li>
 <li>If <i>y</i> is -0 and <i>X</i>&lt;0, the result is an implementation-dependent approximation to -p.</li>
 <li>If <i>y</i>&lt;0 and <i>x</i> is +0, the result is an implementation-dependent approximation to -p/2.</li>
 <li>If <i>y</i>&lt;0 and <i>x</i> is -0, the result is an implementation-dependent approximation to -p/2.</li>
 <li>If <i>y</i>&gt;0 and <i>y</i> is finite and <i>x</i> is +&#8734;, the result is +0.</li>
 <li>If <i>y</i>&gt;0 and <i>y</i> is finite and <i>x</i> is -&#8734;, the result if an implementation-dependent approximation to +p.</li>
 <li>If <i>y</i>&lt;0 and <i>y</i> is finite and <i>x</i> is +&#8734;, the result is -0.</li>
 <li>If <i>y</i>&lt;0 and <i>y</i> is finite and <i>x</i> is -&#8734;, the result is an implementation-dependent approximation to -p.</li>
 <li>If <i>y</i> is +&#8734; and <i>x</i> is finite, the result is an implementation-dependent approximation to +p/2.</li>
 <li>If <i>y</i> is -&#8734; and <i>x</i> is finite, the result is an implementation-dependent approximation to -p/2.</li>
 <li>If <i>y</i> is +&#8734; and <i>x</i> is +&#8734;, the result is an implementation-dependent approximation to +p/4.</li>
 <li>If <i>y</i> is +&#8734; and <i>x</i> is -&#8734;, the result is an implementation-dependent approximation to +3p/4.</li>
 <li>If <i>y</i> is -&#8734; and <i>x</i> is +&#8734;, the result is an implementation-dependent approximation to -p/4.</li>
 <li>If <i>y</i> is -&#8734; and <i>x</i> is -&#8734;, the result is an implementation-dependent approximation to -3p/4.</li>
 </ul>
 * @param {Number} y - the first argument.
 * @param {Number} x - the second argument.
 * @return {Number} approximation to the arc tangent of the quotient <i>y/x</i> of   the arguments <i>y</i> and x, where the signs of <i>y</i> and <i>x</i> are used to determine   the quadrant of the result.
 * @static
 */
Math.atan2 = function(y, x) {};

/**
 * Returns the smallest (closest to -&#8734;) number value that is not less than <i>x</i> and is
 equal to a mathematical integer. If <i>x</i> is already an integer, the result is <i>x</i>.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is +0, the result is +0.</li>
 <li>If <i>x</i> is -0, the result is -0.</li>
 <li>If <i>x</i> is +&#8734;, the result is +&#8734;.</li>
 <li>If <i>x</i> is -&#8734;, the result is -&#8734;.</li>
 <li>If <i>x</i> is less than 0 but greater than -1, the result is -0.</li>
 </ul>

 The value of Math.ceil(x) is the same as the value of -Math.floor(-x).
 * @param {Number} x - the Number to operate on.
 * @return {Number} the smallest (closest to -&#8734;) number value that is not less than <i>x</i> and is   equal to a mathematical integer.
 * @static
 */
Math.ceil = function(x) {};

/**
 * Returns an approximation to the cosine of <i>x</i>. The argument
 is expressed in radians.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is +0, the result is 1.</li>
 <li>If <i>x</i> is -0, the result is 1.</li>
 <li>If <i>x</i> is +&#8734;, the result is NaN.</li>
 <li>If <i>x</i> is -&#8734;, the result is NaN.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} an approximation to the cosine of <i>x</i>.
 * @static
 */
Math.cos = function(x) {};

/**
 * Returns an implementation-dependent approximation to the
 exponential function of <i>x</i> (e raised to the
 power of x, where e is the base of the natural logarithms).
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is +0, the result is 1.</li>
 <li>If <i>x</i> is -0, the result is 1.</li>
 <li>If <i>x</i> is +&#8734;, the result is +&#8734;.</li>
 <li>If <i>x</i> is -&#8734;, the result is +0.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} an implementation-dependent approximation to the   exponential function of <i>x</i>.
 * @static
 */
Math.exp = function(x) {};

/**
 * Returns the greatest (closest to +&#8734;) number value that is
 not greater than <i>x</i> and is equal to a
 mathematical integer. If <i>x</i> is already an integer, the result is <i>x</i>.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is +0, the result is +0.</li>
 <li>If <i>x</i> is -0, the result is -0.</li>
 <li>If <i>x</i> is +&#8734;, the result is +&#8734;.</li>
 <li>If <i>x</i> is -&#8734;, the result is -&#8734;.</li>
 <li>If <i>x</i> is greater than 0 but less than 1, the result is +0.</li>
 </ul>

 The value of Math.floor(<i>x</i>) is the same as the value of -Math.ceil(<i>-x</i>).
 * @param {Number} x - the Number to operate on.
 * @return {Number} the greatest (closest to +&#8734;) number value that is   not greater than <i>x</i> and is equal to a  mathematical integer.
 * @static
 */
Math.floor = function(x) {};

/**
 * Returns an implementation-dependent approximation to the
 natural logarithm of <i>x</i>.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is less than 0, the result is NaN.</li>
 <li>If <i>x</i> is +0 or -0, the result is -&#8734;.</li>
 <li>If <i>x</i> is 1, the result is +0.</li>
 <li>If <i>x</i> is +&#8734;, the result is +&#8734;.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} an implementation-dependent approximation to the  natural logarithm of <i>x</i>.
 * @static
 */
Math.log = function(x) {};

/**
 * Returns the largest specified values.
 If no arguments are given, the result is -&#8734;.
 If any value is NaN, the result is NaN.
 * @param {Number[]} values - zero or more values.
 * @return {Number} the largest of the specified values.
 * @static
 * @varArgs
 */
Math.max = function(values) {};

/**
 * Returns the smallest of the specified values.
 If no arguments are given, the result is +&#8734;.
 If any value is NaN, the result is NaN.
 * @param {Number[]} values - zero or more values.
 * @return {Number} the smallest of the specified values.
 * @static
 * @varArgs
 */
Math.min = function(values) {};

/**
 * Returns an approximation to the
 result of raising <i>x</i> to the power <i>y</i>.
 <ul>
 <li>If <i>y</i> is NaN, the result is NaN.</li>
 <li>If <i>y</i> is +0, the result is 1, even if <i>x</i> is NaN.</li>
 <li>If <i>y</i> is -0, the result is 1, even if <i>x</i> is NaN.</li>
 <li>If <i>x</i> is NaN and <i>y</i> is nonzero, the result is NaN.</li>
 <li>If abs(<i>x</i>)&gt;1 and <i>y</i> is +&#8734;, the result is +&#8734;.</li>
 <li>If abs(<i>x</i>)&gt;1 and <i>y</i> is -&#8734;, the result is +0.</li>
 <li>If abs(<i>x</i>)==1 and <i>y</i> is +&#8734;, the result is NaN.</li>
 <li>If abs(<i>x</i>)==1 and <i>y</i> is -&#8734;, the result is NaN.</li>
 <li>If abs(<i>x</i>)&lt;1 and <i>y</i> is +&#8734;, the result is +0.</li>
 <li>If abs(<i>x</i>)&lt;1 and <i>y</i> is -&#8734;, the result is +&#8734;.</li>
 <li>If <i>x</i> is +&#8734; and <i>y</i>&gt;0, the result is +&#8734;.</li>
 <li>If <i>x</i> is +&#8734; and <i>y</i>&lt;0, the result is +0.</li>
 <li>If <i>x</i> is -&#8734; and <i>y</i>&gt;0 and <i>y</i> is an odd integer, the result is -&#8734;.</li>
 <li>If <i>x</i> is -&#8734; and <i>y</i>&gt;0 and <i>y</i> is not an odd integer, the result is +&#8734;.</li>
 <li>If <i>x</i> is -&#8734; and <i>y</i>&lt;0 and <i>y</i> is an odd integer, the result is -0.</li>
 <li>If <i>x</i> is -&#8734; and <i>y</i>&lt;0 and <i>y</i> is not an odd integer, the result is +0.</li>
 <li>If <i>x</i> is +0 and <i>y</i>&gt;0, the result is +0.</li>
 <li>If <i>x</i> is +0 and <i>y</i>&lt;0, the result is +&#8734;.</li>
 <li>If <i>x</i> is -0 and <i>y</i>&gt;0 and <i>y</i> is an odd integer, the result is -0.</li>
 <li>If <i>x</i> is -0 and <i>y</i>&gt;0 and <i>y</i> is not an odd integer, the result is +0.</li>
 <li>If <i>x</i> is -0 and <i>y</i>&lt;0 and <i>y</i> is an odd integer, the result is -&#8734;.</li>
 <li>If <i>x</i> is -0 and <i>y</i>&lt;0 and <i>y</i> is not an odd integer, the result is +&#8734;.</li>
 <li>If <i>X</i>&lt;0 and <i>x</i> is finite and <i>y</i> is finite and <i>y</i> is not an integer, the result is NaN.</li>
 </ul>
 * @param {Number} x - a Number that will be raised to the power of <i>y</i>.
 * @param {Number} y - the power by which <i>x</i> will be raised.
 * @return {Number} an approximation to the   result of raising <i>x</i> to the power <i>y</i>.
 * @static
 */
Math.pow = function(x, y) {};

/**
 * Returns a number value with positive sign, greater
 than or equal to 0 but less than 1, chosen randomly
 or pseudo randomly with approximately uniform distribution
 over that range, using an implementation-dependent algorithm
 or strategy.
 * @return {Number} a Number greater than or equal to 0 but less than 1.
 * @static
 */
Math.random = function() {};

/**
 * Returns the number value that is closest to <i>x</i> and is equal
 to a mathematical integer. If two integer number values are
 equally close to x, then the result is the number value that
 is closer to +&#8734;. If <i>x</i> is already an integer, the result is <i>x</i>.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is +0, the result is +0.</li>
 <li>If <i>x</i> is -0, the result is -0.</li>
 <li>If <i>x</i> is +&#8734;, the result is +&#8734;.</li>
 <li>If <i>x</i> is -&#8734;, the result is -&#8734;.</li>
 <li>If <i>x</i> is greater than 0 but less than 0.5, the result is +0.</li>
 <li>If <i>x</i> is less than 0 but greater than or equal to -0.5, the result is -0.</li>
 </ul>

 Math.round(3.5) returns 4, but Math.round(-3.5) returns -3.

 The value of Math.round(<i>x</i>) is the same as the value of
 Math.floor(<i>x</i>+0.5), except when <i>x</i> is -0 or is less than 0
 but greater than or equal to -0.5; for these cases
 Math.round(<i>x</i>) returns -0, but Math.floor(<i>x</i>+0.5) returns +0.
 * @param {Number} x - the Number to operate on.
 * @return {Number} the number value that is closest to <i>x</i> and is equal   to a mathematical integer.
 * @static
 */
Math.round = function(x) {};

/**
 * Returns an approximation to the
 sine of <i>x</i>. The argument is expressed in radians.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is +0, the result is +0.</li>
 <li>If <i>x</i> is -0, the result is -0.</li>
 <li>If <i>x</i> is +&#8734; or -&#8734;, the result is NaN.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} an approximation to the   sine of <i>x</i>.
 * @static
 */
Math.sin = function(x) {};

/**
 * Returns an approximation to the square root of <i>x</i>.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> isless than 0, the result is NaN.</li>
 <li>If <i>x</i> is +0, the result is +0.</li>
 <li>If <i>x</i> is -0, the result is -0.</li>
 <li>If <i>x</i> is +&#8734;, the result is +&#8734;.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} an approximation to the square root of <i>x</i>.
 * @static
 */
Math.sqrt = function(x) {};

/**
 * Returns an approximation to the tangent of <i>x</i>.
 The argument is expressed in radians.
 <ul>
 <li>If <i>x</i> is NaN, the result is NaN.</li>
 <li>If <i>x</i> is +0, the result is +0.</li>
 <li>If <i>x</i> is -0, the result is -0.</li>
 <li>If <i>x</i> is +&#8734; or -&#8734;, the result is NaN.</li>
 </ul>
 * @param {Number} x - the Number to operate on.
 * @return {Number} an approximation to the tangent of <i>x</i>.
 * @static
 */
Math.tan = function(x) {};

/**
 * Constructs a simple namespace where the
 <i>uri</i> and <i>prefix</i> properties are set to an empty string.
 A namespace with URI set to the empty string represents no namespace.
 No namespace is used in XML objects to explicitly specify
 that a name is not inside a namespace and may never be
 associated with a prefix other than the empty string.
 * @class
 * @extends Object
 */
function Namespace() {};
Namespace.prototype = new Object();

/**
 * Constructs a Namespace object and assigns values to the
 <i>uri</i> and <i>prefix</i> properties based on the type
 of <i>uriValue</i>. If <i>uriValue</i> is a
 Namespace object, a copy of the Namespace is constructed.
 If <i>uriValue</i> is a QName object, the <i>uri</i> property is
 set to the QName object's <i>uri</i> property.
 Otherwise, <i>uriValue</i> is converted into a string and
 assigned to the <i>uri</i> property.
 * @class
 * @extends Object
 * @param {Object} uriValue - the value to use when constructing the Namespace.
 */
function Namespace(uriValue) {};
Namespace.prototype = new Object();

/**
 * Constructs a Namespace object and assigns values to the
 <i>uri</i> and <i>prefix</i> properties.

 The value of the <i>prefixValue</i> parameter is assigned to the
 <i>prefix</i> property in the following manner:
 <ol>
 <li>If undefined is passed, prefix is set to undefined.</li>
 <li>If the argument is a valid XML name, it is converted
 to a string and assigned to the prefix property.</li>
 <li>If the argument is not a valid XML name, the prefix
 property is set to undefined.</li>
 </ol>
 The value of the <i>uriValue</i> parameter is assigned
 to the <i>uri</i> property in the following manner:
 <ol>
 <li>If a QName object is passed for the uriValue parameter,
 the uri property is set to the value of the QName object's uri property.</li>
 <li>If a QName object is not passed for the uriValue parameter,
 the uriValue parameter is converted to a string and assigned to the uri property. </li>
 </ol>
 * @class
 * @extends Object
 * @param {Object} prefixValue - the prefix value to use when constructing the Namespace.
 * @param {Object} uriValue - the value to use when constructing the Namespace.
 */
function Namespace(prefixValue, uriValue) {};
Namespace.prototype = new Object();

/**
 * The prefix of the namespace.
 * @type String
 * @memberOf Namespace
 */
Namespace.prefix = '';

/**
 * The Uniform Resource Identifier (URI) of the namespace.
 * @type String
 * @memberOf Namespace
 */
Namespace.uri = '';

/**
 * Returns the prefix of the Namespace object.
 * @return {String} the prefix of the Namespace object.
 */
Namespace.prototype.getPrefix = function() {};

/**
 * Returns the Uniform Resource Identifier (URI) of the Namespace object.
 * @return {String} the Uniform Resource Identifier (URI) of the Namespace object.
 */
Namespace.prototype.getUri = function() {};

/**
 * Returns a string representation of this Namespace object.
 * @return {String} a string representation of this Namespace object.
 */
Namespace.prototype.toString = function() {};

/**
 * Constructs a Number.
 * @class
 * @extends Object
 */
function Number() {};
Number.prototype = new Object();

/**
 * Constructs a new Number using the specified Number.
 * @class
 * @extends Object
 * @param {Number} num - the Number to use.
 */
function Number(num) {};
Number.prototype = new Object();

/**
 * Constructs a Number using the specified value.
 * @class
 * @extends Object
 * @param {String} value - the value to use when creating the Number.
 */
function Number(value) {};
Number.prototype = new Object();

/**
 * The largest representable Number.
 * @type Number
 * @memberOf Number
 * @static
 * @const
 */
Number.MAX_VALUE = 0;

/**
 * The smallest representable Number.
 * @type Number
 * @memberOf Number
 * @static
 * @const
 */
Number.MIN_VALUE = 0;

/**
 * Not a Number.
 * @type Number
 * @memberOf Number
 * @static
 * @const
 */
Number.NaN = 0;

/**
 * Negative infinite value; returned on overflow;
 * @type Number
 * @memberOf Number
 * @static
 * @const
 */
Number.NEGATIVE_INFINITY = 0;

/**
 * Negative infinite value; returned on overflow;
 * @type Number
 * @memberOf Number
 * @static
 * @const
 */
Number.POSITIVE_INFINITY = 0;

/**
 * Converts this Number to a String using exponential notation.
 * @return {String} a String using exponential notation.
 */
Number.prototype.toExponential = function() {};

/**
 * Converts this Number to a String using exponential notation with
 the specified number of digits after the decimal place.
 * @param {Number} digits - the number of digits after the decimal place.
 * @return {String} a String using exponential notation with  the specified number of digits after the decimal place.
 */
Number.prototype.toExponential = function(digits) {};

/**
 * Converts a Number to a String that contains a no fractional part.
 * @return {String} a String representation of the number
 */
Number.prototype.toFixed = function() {};

/**
 * Converts a Number to a String that contains a specified number
 of digits after the decimal place.
 * @param {Number} digits - the number of digits after the decimal place.
 * @return {String} a String that contains a specified number  of digits after the decimal place.
 */
Number.prototype.toFixed = function(digits) {};

/**
 * Converts this Number to a String using local number
 formatting conventions.
 * @return {String} a String using local number  formatting conventions.
 */
Number.prototype.toLocaleString = function() {};

/**
 * Converts a Number to a String using the specified number
 of signigicant digits. Uses exponential or fixed point
 notation depending on the size of the number and the nimber of
 significant digits specified.
 * @param {Number} precision - the precision to use when converting the Number  to a String.
 * @return {String} a String using the specified number  of signigicant digits.
 */
Number.prototype.toPrecision = function(precision) {};

/**
 * A String representation of this Number.
 * @return {String} a String representation of this Number.
 */
Number.prototype.toString = function() {};

/**
 * Converts the number into a string using the specified radix (base).
 * @param {Number} radix - the radix to use.
 * @return {String} a String representation of this Number.
 */
Number.prototype.toString = function(radix) {};

/**
 * Object constructor.
 * @class
 * @extends Object
 */
function Object() {};
Object.prototype = new Object();

/**
 * Returns Boolean true if at the time the current object's instance was created
 its constructor (or literal assignment) contained a property with a name that
 matches the parameter value.
 * @param {String} propName - the property name of the object's property.
 * @return {Boolean} true if at the object contains a property that matches the parameter,  false otherwise.
 */
Object.prototype.hasOwnProperty = function(propName) {};

/**
 * Returns true if the current object and the object passed as a prameter conincide
 at some point along each object's prototype inheritance chain.
 * @param {Object} prototype - the object to test.
 * @return {Boolean} true if the current object and the object passed as a prameter conincide  at some point, false otherwise.
 */
Object.prototype.isPrototypeOf = function(prototype) {};

/**
 * Return true if the specified property exposes itself to for/in property
 inspection through the object.
 * @param {String} propName - the property to test.
 * @return {Boolean} true if the specified property exposes itself to for/in property  inspection through the object, false otherwise.
 */
Object.prototype.propertyIsEnumerable = function(propName) {};

/**
 * Converts the object to a localized String.
 * @return {String} a localized version of the object.
 */
Object.prototype.toLocaleString = function() {};

/**
 * Converts the object to a String.
 * @return {String} the String representation of the object.
 */
Object.prototype.toString = function() {};

/**
 * Returns the object's value.
 * @return {Object} the object's value.
 */
Object.prototype.valueOf = function() {};

/**
 * Constructs a QName object where <i>localName</i>
 is set to an empty String.
 * @class
 * @extends Object
 */
function QName() {};
QName.prototype = new Object();

/**
 * Constructs a QName object that is a copy of the specified
 <i>qname</i>. If the argument is not
 a QName object, the argument is converted to a string and assigned
 to the localName property of the new QName instance.
 * @class
 * @extends Object
 * @param {QName} qname - the QName from which this QName will    be constructed.
 */
function QName(qname) {};
QName.prototype = new Object();

/**
 * Creates a QName object with a uri from a Namespace object and
 a localName from a QName object. If either argument is not
 the expected data type, the argument is converted to a string
 and assigned to the corresponding property of the new QName object.
 * @class
 * @extends Object
 * @param {Namespace} uri - a Namespace object from which to copy the uri value.   An argument of any other type is converted to a string.
 * @param {QName} localName - a QName object from which to copy the   localName value. An argument of any other type is converted to a string.
 */
function QName(uri, localName) {};
QName.prototype = new Object();

/**
 * The local name of the QName.
 * @type String
 * @memberOf QName
 */
QName.localName = '';

/**
 * The Uniform Resource Identifier (URI) of the namespace.
 * @type String
 * @memberOf QName
 */
QName.uri = '';

/**
 * Returns the local name of the QName object.
 * @return {String} the local name of the QName object.
 */
QName.prototype.getLocalName = function() {};

/**
 * Returns the Uniform Resource Identifier (URI) of the QName object.
 * @return {String} the Uniform Resource Identifier (URI) of the QName object.
 */
QName.prototype.getUri = function() {};

/**
 * Returns a string composed of the URI, and the local name for the QName
 object, separated by "::". The format depends on the uri property of
 the QName object:
 If uri == ""
 	  toString returns localName
 else if uri == null
 	  toString returns *::localName
 else
    toString returns uri::localNam
 * @return {String} a string composed of the URI, and the local name for the QName   object, separated by "::".
 */
QName.prototype.toString = function() {};

/**
 * Constructs the error.
 * @class
 * @extends Error
 */
function RangeError() {};
RangeError.prototype = new Error();

/**
 * Constructs the error with the
 specified message.
 * @class
 * @extends Error
 * @param {String} msg - the range error message.
 */
function RangeError(msg) {};
RangeError.prototype = new Error();

/**
 * Constructs the error.
 * @class
 * @extends Error
 */
function ReferenceError() {};
ReferenceError.prototype = new Error();

/**
 * Constructs the error with the
 specified message.
 * @class
 * @extends Error
 * @param {String} msg - the reference error message.
 */
function ReferenceError(msg) {};
ReferenceError.prototype = new Error();

/**
 * Constructs the regular expression using the specified
 pattern.
 * @class
 * @extends Object
 * @param {String} pattern - the regular expression pattern to use.
 */
function RegExp(pattern) {};
RegExp.prototype = new Object();

/**
 * Constructs the regular expression using the specified
 pattern and attributes. See the class documentation for more information
 on the pattern and attributes.
 * @class
 * @extends Object
 * @param {String} pattern - the regular expression pattern to use.
 * @param {String} attributes - one or more attributes that control  how the regular expression is executed.
 */
function RegExp(pattern, attributes) {};
RegExp.prototype = new Object();

/**
 * If the regular expression instance has the <i>g</i> modifier, then
 this property is set to true.
 * @type Boolean
 * @memberOf RegExp
 */
RegExp.global = false;

/**
 * If the regular expression instance has the <i>i</i> modifier, then
 this property is set to true.
 * @type Boolean
 * @memberOf RegExp
 */
RegExp.ignoreCase = false;

/**
 * This is the zero-based index value of the character within the
 String where the next search for the pattern begins. In a new
 search, the value is zero.
 * @type Number
 * @memberOf RegExp
 */
RegExp.lastIndex = 0;

/**
 * If a search extends across multiple lines of test, the <i>multiline</i>
 property is set to true.
 * @type Boolean
 * @memberOf RegExp
 */
RegExp.multiline = false;

/**
 * A String version of the characters used to create the regular
 expression. The value does not include the forward slash delimiters that
 surround the expression.
 * @type String
 * @memberOf RegExp
 */
RegExp.source = '';

/**
 * Performs a search through the specified parameter for the
 current regular expression and returns an array of match
 information if successful. Returns null if the search produces
 no results.
 * @param {String} string - the String to apply the regular expression.
 * @return {Array} an array of match information if successful, null otherwise.
 */
RegExp.prototype.exec = function(string) {};

/**
 * Returns true if there is a match of the regular expression anywhere in the
 specified parameter. No additional information is
 available about the results of the search.
 * @param {String} string - the String to apply the regular expression.
 * @return {Boolean} true if there is a match of the regular expression anywhere in the  specified parameter, false otherwise.
 */
RegExp.prototype.test = function(string) {};

/**
 *
 * @class
 * @extends Object
 */
function StopIteration() {};
StopIteration.prototype = new Object();

/**
 * Constructs the String.
 * @class
 * @extends Object
 */
function String() {};
String.prototype = new Object();

/**
 * Constructs the String from the specified
 Number object.
 * @class
 * @extends Object
 * @param {Number} num - the number that will  be converted to a String.
 */
function String(num) {};
String.prototype = new Object();

/**
 * Constructs a new String from the specified
 String object.
 * @class
 * @extends Object
 * @param {String} str - the String that will  be converted to a new String.
 */
function String(str) {};
String.prototype = new Object();

/**
 * The length of the String object.
 * @type Number
 * @memberOf String
 */
String.length = 0;

/**
 * Returns a string containing the character at position <i>index</i>.
 You should use this method instead
 of substring when you need only a single character.
 * @param {Number} index - the index at which the character string is located.
 * @return {String} a string containing the character at position <i>index</i>.
 */
String.prototype.charAt = function(index) {};

/**
 * Returns a number representing the code point value of the
 character at position index. The returned value is a non-negative
 integer less than 216 of if there is no character at that position,
 the result is NaN.
 * @param {Number} index - the index in the string from which to produce  the character code.
 * @return {Number} a non-negative integer less than 216 or NaN.
 */
String.prototype.charCodeAt = function(index) {};

/**
 * Returns a new String created by concatenating the string arguments together.
 * @param {String[]} strings - zero, one, or more String arguments
 * @return {String} a new String created by concatenating the string arguments together.
 * @varArgs
 */
String.prototype.concat = function(strings) {};

/**
 * Returns true if this string is equal to the string representation of the
 passed objects.
 * @param {Object} obj - another object, typically another string
 * @return {Boolean}
 */
String.prototype.equals = function(obj) {};

/**
 * Returns true if this string is equal to the string representation of the
 passed objects. The comparison is done case insensitive.
 * @param {Object} obj - another object, typically another string
 * @return {Boolean}
 */
String.prototype.equalsIgnoreCase = function(obj) {};

/**
 * Returns a new String from one or more characters with Unicode values.
 * @param {int[]} c - zero, one, or more character arguments.
 * @return {String}
 * @static
 * @varArgs
 */
String.fromCharCode = function(c) {};

/**
 * Returns the index of <i>substring</i> in this String object.
 If there is no match, <i>-1</i> is returned.
 * @param {String} substring - the String to search for in this String.
 * @return {Number} the index of <i>substring</i> or <i>-1</i>.
 */
String.prototype.indexOf = function(substring) {};

/**
 * Returns the index of <i>substring</i> in this String object using
 the specified <i>start</i> value as the location to begin searching.
 If there is no match, <i>-1</i> is returned.
 * @param {String} substring - the String to search for in this String.
 * @param {Number} start - the location in the String from which to  begin the search.
 * @return {Number} the index of <i>substring</i> or <i>-1</i>.
 */
String.prototype.indexOf = function(substring, start) {};

/**
 * Returns the last index of <i>substring</i> in this String object.
 If there is no match, <i>-1</i> is returned.
 * @param {String} substring - the String to search for in this String.
 * @return {Number} the last index of <i>substring</i> or <i>-1</i>.
 */
String.prototype.lastIndexOf = function(substring) {};

/**
 * Returns the last index of <i>substring</i> in this String object,
 using the specified <i>start</i> position as the location from which
 to begin the search.
 If there is no match, <i>-1</i> is returned.
 * @param {String} substring - the String to search for in this String.
 * @param {Number} start - the location from which to begin the search.
 * @return {Number} the last index of <i>substring</i> or <i>-1</i>.
 */
String.prototype.lastIndexOf = function(substring, start) {};

/**
 * Returns a number indicating whether the current String sorts before, the same as,
 or after the parameter <i>other</i>, based on browser and system-dependent
 string localization.
 * @param {String} other - the String to compare against this String.
 * @return {Number} a number indicating whether the current String sorts before, the same as,  or after the parameter <i>other</i>.
 */
String.prototype.localeCompare = function(other) {};

/**
 * Returns an array of strings that match the regular expression
 <i>regexp</i>.
 * @param {RegExp} regexp - the regular expression to use.
 * @return {String[]} an array of strings that match the regular expression.
 */
String.prototype.match = function(regexp) {};

/**
 * Returns a new String that results when matches of the <i>regexp</i>
 parameter are replaced by using the specified <i>function</i>. The
 original String is not modified so you must capture the new String
 in a variable to preserve changes. When you specify a function as the
 second parameter, the function is invoked after the match has been performed.
 * @param {RegExp} regexp - the regular expression to use.
 * @param {Function} theFunction - a Function that operates on matches of  <i>regexp</i> in the current String.
 * @return {String} a new String that results when matches of the <i>regexp</i>  parameter are replaced by the <i>function</i>.
 */
String.prototype.replace = function(regexp, theFunction) {};

/**
 * Returns a new String that results when matches of the <i>regexp</i>
 parameter are replaced by the <i>replacement</i> parameter. The
 original String is not modified so you must capture the new String
 in a variable to preserve changes. If regexp has the global flag set,
 all occurrences are replaced, if the global flag is not set only the
 first occurrence is replaced.
 * @param {RegExp} regexp - the regular expression to use.
 * @param {String} replacement - a String that is to take the place of all matches of  <i>regexp</i> in the current String.
 * @return {String} a new String that results when matches of the <i>regexp</i>  parameter are replaced by the <i>replacement</i>.
 */
String.prototype.replace = function(regexp, replacement) {};

/**
 * Returns a new String that results when matches of the <i>literal</i>
 parameter are replaced by using the specified <i>function</i>. The
 original String is not modified so you must capture the new String
 in a variable to preserve changes. When you specify a function as the
 second parameter, the function is invoked after the match has been
 performed.
 * @param {String} literal - the literal string to locate.
 * @param {Function} theFunction - a Function that operates on the match of  <i>literal</i> in the current String.
 * @return {String} a new String that results when the first match of the <i>literal</i>  parameter is replaced by the specified <i>function</i>.
 */
String.prototype.replace = function(literal, theFunction) {};

/**
 * Returns a new String that results when matches of the <i>literal</i>
 parameter are replaced by using the specified <i>function</i>. The
 original String is not modified so you must capture the new String
 in a variable to preserve changes. When you specify a function as the
 second parameter, the function is invoked after the match has been
 performed.
 * @param {String} literal - the literal string to locate.
 * @param {Function} theFunction - a Function that operates on the match of  <i>literal</i> in the current String.
 * @param {String} flags - a String containing any combination of the Regular  Expression flags of g - global match, i - ignore case, m - match over  multiple lines.
 * @return {String} a new String that results when the first match of the <i>literal</i>  parameter is replaced by the specified <i>function</i>.
 */
String.prototype.replace = function(literal, theFunction, flags) {};

/**
 * Returns a new String that results when matches of the <i>literal</i>
 parameter are replaced by the <i>replacement</i> parameter. The
 original String is not modified so you must capture the new String
 in a variable to preserve changes. This method only replaces the first
 occurrence of the literal. To replace all occurrences see the polymorphic
 method with a regular expression as argument.
 * @param {String} literal - the literal string to locate.
 * @param {String} replacement - a String that is to take the place of all matches of  <i>regexp</i> in the current String.
 * @return {String} a new String that results when the first match of the <i>literal</i>  parameter is replaced by the <i>replacement</i> parameter.
 */
String.prototype.replace = function(literal, replacement) {};

/**
 * Returns a new String that results when matches of the <i>literal</i>
 parameter are replaced by the <i>replacement</i> parameter. The
 original String is not modified so you must capture the new String
 in a variable to preserve changes. This method only replaces the first
 occurrence of the literal. To replace all occurrences see the polymorphic
 method with a regular expression as argument. Note that if flags
 * @param {String} literal - the literal string to locate.
 * @param {String} replacement - a String that is to take the place of all matches of  <i>regexp</i> in the current String.
 * @param {String} flags - a String containing any combination of the Regular  Expression flags of g - global match, i - ignore case, m - match over  multiple lines.
 * @return {String} a new String that results when the first match of the <i>literal</i>  parameter is replaced by the <i>replacement</i> parameter.
 */
String.prototype.replace = function(literal, replacement, flags) {};

/**
 * Searches for a match between the passed regular expression and this
 string and returns the zero-based index of the match, or -1 if no match
 is found.
 * @param {RegExp} regexp - the regular expression to use.
 * @return {Number} the zero-based indexed value of the first character in the          current string that matches the pattern of the regular expression          <i>regexp</i>, or -1 if no match is found.
 */
String.prototype.search = function(regexp) {};

/**
 * Returns a substring of the current String where the
 specified <i>start</i> and <i>end</i> locations are used
 to delimit the String.
 * @param {Number} start - the start position in the current  String from which the slice will begin.
 * @param {Number} end - the end position in the current  String from which the slice will terminate.
 * @return {String} the String between the <i>start</i> and <i>end</i> positions.
 */
String.prototype.slice = function(start, end) {};

/**
 * Returns an array of String instances created by splitting the current
 String based on the regular expression.
 * @param {RegExp} regexp - the regular expression to use to split the string.
 * @return {String[]} an array of String instances created by splitting the current  String based on the regular expression.
 */
String.prototype.split = function(regexp) {};

/**
 * Returns an array of String instances created by splitting the current
 String based on the regular expression and limited in size by the <i>limit</i>
 parameter.
 * @param {RegExp} regexp - the regular expression to use to split the string.
 * @param {Number} limit - controls the maximum number of items that will  be returned.
 * @return {String[]} an array of String instances created by splitting the current  String based on the regular expression and limited in size by the <i>limit</i>  parameter.
 */
String.prototype.split = function(regexp, limit) {};

/**
 * Returns an array of String instances created by splitting the current
 String based on the delimiter.
 * @param {String} delimiter - the delimiter to use to split the string.
 * @return {String[]} an array of String instances created by splitting the current  String based on the delimiter.
 */
String.prototype.split = function(delimiter) {};

/**
 * Returns an array of String instances created by splitting the current
 String based on the delimiter and limited in size by the <i>limit</i>
 parameter.
 * @param {String} delimiter - the delimiter to use to split the string.
 * @param {Number} limit - controls the maximum number of items that will  be returned.
 * @return {String[]} an array of String instances created by splitting the current  String based on the delimiter and limited in size by the <i>limit</i>  parameter.
 */
String.prototype.split = function(delimiter, limit) {};

/**
 * Creates and returns a new String by splitting the current string
 at the specified <i>start</i> location until the end of the String.
 * @param {Number} start - the start position in the current string from which  the new string will be created.
 * @return {String} a new String created by splitting the current string  starting at the specified <i>start</i> location until the end of the String.
 */
String.prototype.substr = function(start) {};

/**
 * Creates and returns a new String by splitting the current string
 at the specified <i>start</i> location and limited by the <i>length</i>
 value.
 * @param {Number} start - the start position in the current string from which  the new string will be created.
 * @param {Number} length - controls the length of the new string.
 * @return {String} a new String created by splitting the current string  starting at the specified <i>start</i> location and limited by the <i>length</i>  value.
 */
String.prototype.substr = function(start, length) {};

/**
 * Creates and returns a new String by splitting the current string
 at the specified <i>from</i> location until the end of the String.
 * @param {Number} from - the start position in the current string from which  the new string will be created.
 * @return {String} a new String created by splitting the current string  starting at the specified <i>from</i> location until the end of the String.
 */
String.prototype.substring = function(from) {};

/**
 * Creates and returns a new String by splitting the current string
 at the specified <i>from</i> location until the specified <i>to</i> location.
 * @param {Number} from - the start position in the current string from which  the new string will be created.
 * @param {Number} to - the end position in the current string from which the  new string will be created.
 * @return {String} a new String created by splitting the current string  starting at the specified <i>from</i> location until the specified  <i>to</i> location.  value.
 */
String.prototype.substring = function(from, to) {};

/**
 * Returns a copy of the current string in all lower-case letters.
 * @return {String} a copy of the current string in all lower-case letters.
 */
String.prototype.toLocaleLowerCase = function() {};

/**
 * Returns a copy of the current string in all upper-case letters.
 * @return {String} a copy of the current string in all upper-case letters.
 */
String.prototype.toLocaleUpperCase = function() {};

/**
 * Returns a copy of the current string in all lower-case letters.
 * @return {String} a copy of the current string in all lower-case letters.
 */
String.prototype.toLowerCase = function() {};

/**
 * Returns a String value of this object.
 * @return {String} a String value of this object.
 */
String.prototype.toString = function() {};

/**
 * Returns a copy of the current string in all upper-case letters.
 * @return {String} a copy of the current string in all upper-case letters.
 */
String.prototype.toUpperCase = function() {};

/**
 * Returns a String value of this object.
 * @return {String} a String value of this object.
 */
String.prototype.valueOf = function() {};

/**
 * Constructs the error.
 * @class
 * @extends Error
 */
function SyntaxError() {};
SyntaxError.prototype = new Error();

/**
 * Constructs the error with the
 specified message.
 * @class
 * @extends Error
 * @param {String} msg - the syntax error message.
 */
function SyntaxError(msg) {};
SyntaxError.prototype = new Error();

/**
 *
 * @class
 * @extends Error
 */
function SystemError() {};
SystemError.prototype = new Error();

/**
 * If the exception is associated with a root cause, the property
 contains the full name of the associated Java exception.
 * @type String
 * @memberOf SystemError
 */
SystemError.causeFullName = '';

/**
 * If the exception is associated with a root cause, the property
 contains the message of the associated Java exception.
 * @type String
 * @memberOf SystemError
 */
SystemError.causeMessage = '';

/**
 * If the exception is associated with a root cause, the property
 contains the simplified name of the associated Java exception.
 * @type String
 * @memberOf SystemError
 */
SystemError.causeName = '';

/**
 * The full name of the underlying Java exception.
 * @type String
 * @memberOf SystemError
 */
SystemError.javaFullName = '';

/**
 * The message of the underlying Java exception.
 * @type String
 * @memberOf SystemError
 */
SystemError.javaMessage = '';

/**
 * The simplified name of the underlying Java exception.
 * @type String
 * @memberOf SystemError
 */
SystemError.javaName = '';

/**
 * Constructs the error.
 * @class
 * @extends Error
 */
function TypeError() {};
TypeError.prototype = new Error();

/**
 * Constructs the error with the
 specified message.
 * @class
 * @extends Error
 * @param {String} msg - the type error message.
 */
function TypeError(msg) {};
TypeError.prototype = new Error();

/**
 * Constructs the error.
 * @class
 * @extends Error
 */
function URIError() {};
URIError.prototype = new Error();

/**
 * Constructs the error with the
 specified message.
 * @class
 * @extends Error
 * @param {String} msg - the URI error message.
 */
function URIError(msg) {};
URIError.prototype = new Error();

/**
 * Creates a new XML object.
 * @class
 * @extends Object
 */
function XML() {};
XML.prototype = new Object();

/**
 * Creates a new XML object.
 You must use the constructor to create an XML object before you
 call any of the methods of the XML class.
 Use the toXMLString() method to return a string representation
 of the XML object regardless of whether the XML object has simple
 content or complex content.
 * @class
 * @extends Object
 * @param {Object} value - any Object that can be converted to XML via  the top-level XML() function.
 */
function XML(value) {};
XML.prototype = new Object();

/**
 * The ignoreComments property determines whether or not XML comments are
 ignored when XML objects parse the source XML data.
 * @type Boolean
 * @memberOf XML
 * @static
 */
XML.ignoreComments = false;

/**
 * The ignoreProcessingInstructions property determines whether or not XML
 processing instructions are ignored when XML objects parse the source XML data.
 * @type Boolean
 * @memberOf XML
 * @static
 */
XML.ignoreProcessingInstructions = false;

/**
 * The ignoreWhitespace property determines whether or not white space
 characters at the beginning and end of text nodes are ignored during parsing.
 * @type Boolean
 * @memberOf XML
 * @static
 */
XML.ignoreWhitespace = false;

/**
 * The prettyIndent property determines the amount of indentation applied by
 the toString() and toXMLString() methods when the XML.prettyPrinting
 property is set to true.
 * @type Number
 * @memberOf XML
 * @static
 */
XML.prettyIndent = 0;

/**
 * The prettyPrinting property determines whether the toString() and toXMLString()
 methods normalize white space characters between some tags.
 * @type Boolean
 * @memberOf XML
 * @static
 */
XML.prettyPrinting = false;

/**
 * Adds a namespace to the set of in-scope namespaces for the XML object.
 If the namespace already exists in the in-scope namespaces for the XML
 object, then the prefix of the existing namespace is set to <i>undefined</i>.
 If <i>ns</i> is a Namespace instance, it is used directly.
 However, if <i>ns</i> is a QName instance, the input parameter's URI is used
 to create a new namespace. If <i>ns</i> is not a Namespace or QName instance,
 <i>ns</i> is converted to a String and a namespace is created from the String.
 * @param {Object} ns - the namespace to add to the XML object.
 * @return {XML} a new XML object, with the namespace added.
 */
XML.prototype.addNamespace = function(ns) {};

/**
 * Appends the specified child to the end of the object's properties.
 <i>child</i> should be a XML object, an XMLList object or any other
 data type that will then be converted to a String.
 * @param {Object} child - the object to append to this XML object.
 * @return {XML} the XML object with the child appended.
 */
XML.prototype.appendChild = function(child) {};

/**
 * Returns the attribute associated with this XML object that
 is identified by the specified name.
 * @param {String} attributeName - the name of the attribute.
 * @return {XMLList} the value of the attribute as either an XMLList or an empty XMLList
 */
XML.prototype.attribute = function(attributeName) {};

/**
 * Returns an XMList of the attributes in this XML Object.
 * @return {XMLList} an XMList of the attributes in this XML Object.
 */
XML.prototype.attributes = function() {};

/**
 * Returns the children of the XML object based on the specified
 property name.
 * @param {Object} propertyName - the property name representing the  children of this XML object.
 * @return {XMLList} an XMLList of children that match the property name  parameter.
 */
XML.prototype.child = function(propertyName) {};

/**
 * Identifies the zero-based index of this XML object within
 the context of its parent, or -1 if this object has no parent.
 * @return {Number} the index of this XML object in the context of  its parent, or -1 if this object has no parent.
 */
XML.prototype.childIndex = function() {};

/**
 * Returns an XMLList containing the children of this XML object, maintaing
 the sequence in which they appear.
 * @return {XMLList} an XMLList containing the children of this XML object.
 */
XML.prototype.children = function() {};

/**
 * Returns the properties of the XML object that contain comments.
 * @return {XMLList} properties of the XML object that contain comments.
 */
XML.prototype.comments = function() {};

/**
 * Returns true if this XML object contains the specified
 XML object, false otherwise.
 * @param {XML} value - the object to locate in this XML object.
 * @return {Boolean} true if this XML object contains the specified  XML object, false otherwise.
 */
XML.prototype.contains = function(value) {};

/**
 * Returns a copy of the this XML object including
 duplicate copies of the entire tree of nodes.
 The copied XML object has no parent.
 * @return {XML} the copy of the object.
 */
XML.prototype.copy = function() {};

/**
 * Returns a new Object with the following properties set to the default values:
 ignoreComments, ignoreProcessingInstructions, ignoreWhitespace, prettyIndent,
 and prettyPrinting. The default values are as follows:
 <ul>
 <li>ignoreComments = true</li>
 <li>ignoreProcessingInstructions = true</li>
 <li>ignoreWhitespace = true</li>
 <li>prettyIndent = 2</li>
 <li>prettyPrinting = true</li>
 </ul>

 Be aware that this method does not apply the settings to an existing instance
 of an XML object. Instead, this method returns an Object containing the
 default settings.
 * @return {Object} an Object with properties set to the default settings.
 * @static
 */
XML.defaultSettings = function() {};

/**
 * Returns all descendents of the XML object.
 * @return {XMLList} a list of all descendents of the XML object.
 */
XML.prototype.descendants = function() {};

/**
 * Returns all descendents of the XML object that
 have the specified name parameter. To return all descendents,
 use * as the <i>name</i> parameter.
 * @param {String} name - the name of the element to match. To return all descendents,  use * as the <i>name</i> parameter.
 * @return {XMLList} a list of all descendents constrained by the name parameter.
 */
XML.prototype.descendants = function(name) {};

/**
 * Returns a list of all of the elements of the XML object.
 * @return {XMLList}
 */
XML.prototype.elements = function() {};

/**
 * Returns a list of the elements of the XML object using the
 specified name to constrain the list. <i>name</i> can be a
 QName, String, or any other data type that will be converted
 to a string prior to performing the search for elements of that
 name.

 To list all objects use * for the value of <i>name</i>.
 * @param {Object} name - the name of the elements to return or an  * to return all elements.
 * @return {XMLList} a list of the elements of the XML object using the  specified name to constrain the list.
 */
XML.prototype.elements = function(name) {};

/**
 * Returns a Boolean value indicating whether
 this XML object contains complex content. An XML object is considered
 to contain complex content if it represents an XML element that has
 child elements. XML objects representing attributes, comments, processing
 instructions and text nodes do not have complex content. The existence of
 attributes, comments, processing instructions and text nodes within an XML
 object is not significant in determining if it has complex content.
 * @return {Boolean} a Boolean value indicating whether this XML object contains complex content.
 */
XML.prototype.hasComplexContent = function() {};

/**
 * Returns a Boolean value indicating whether this object has the
 property specified by <i>prop</i>.
 * @param {String} prop - the property to locate.
 * @return {Boolean} true if the property exists, false otherwise.
 */
XML.prototype.hasOwnProperty = function(prop) {};

/**
 * Returns a Boolean value indicating whether this XML object contains
 simple content. An XML object is considered to contain simple
 content if it represents a text node, represents an attribute node
 or if it represents an XML element that has no child elements. XML
 objects representing comments and processing instructions do not
 have simple content. The existence of attributes, comments,
 processing instructions and text nodes within an XML object is not
 significant in determining if it has simple content.
 * @return {Boolean} a Boolean value indicating whether this XML object contains  simple content.
 */
XML.prototype.hasSimpleContent = function() {};

/**
 * Returns an Array of Namespace objects representing the namespaces
 in scope for this XML object in the context of its parent. If the
 parent of this XML object is modified, the associated namespace
 declarations may change. The set of namespaces returned by this
 method may be a super set of the namespaces used by this value
 * @return {Array} an Array of Namespace objects representing the namespaces  in scope for this XML object in the context of its parent.
 */
XML.prototype.inScopeNamespaces = function() {};

/**
 * Inserts the specified <i>child2</i> after the specified <i>child1</i>
 in this XML object and returns this XML object. If <i>child1</i> is null,
 inserts <i>child2</i> before all children of
 this XML object. If <i>child1</i> does not exist
 in this XML object, it returns without modifying this XML object.
 * @param {Object} child1 - the child after which <i>child2</i> is inserted.
 * @param {Object} child2 - the child to insert into this XML object.
 * @return {XML} the updated XML object.
 */
XML.prototype.insertChildAfter = function(child1, child2) {};

/**
 * Inserts the specified <i>child2</i> before the specified <i>child1</i>
 in this XML object and returns this XML object. If <i>child1</i> is null,
 inserts <i>child2</i> after all children of
 this XML object. If <i>child1</i> does not exist
 in this XML object, it returns without modifying this XML object.
 * @param {Object} child1 - the child before which <i>child2</i> is inserted.
 * @param {Object} child2 - the child to insert into this XML object.
 * @return {XML} the updated XML object.
 */
XML.prototype.insertChildBefore = function(child1, child2) {};

/**
 * Returns a value of 1 for XML objects.
 * @return {Number} the value of 1.
 */
XML.prototype.length = function() {};

/**
 * Returns the local name portion of the qualified name of the XML object.
 * @return {Object} the local name as either a String or null.
 */
XML.prototype.localName = function() {};

/**
 * Returns the qualified name for the XML object.
 * @return {Object} the qualified name as either a QName or null.
 */
XML.prototype.name = function() {};

/**
 * Returns the namespace associated with the qualified name
 of this XML object.
 * @return {Object} the namespace associated with the qualified name  of this XML object.
 */
XML.prototype.namespace = function() {};

/**
 * Returns the namespace that matches the specified prefix and
 that is in scope for the XML object. if there is no such
 namespace, the method returns undefined.
 * @param {String} prefix - the prefix to use when attempting to  locate a namespace.
 * @return {Object} the namespace that matches the specified prefix and  that is in scope for the XML object. If specified  namespace does not exist, the method returns undefined.
 */
XML.prototype.namespace = function(prefix) {};

/**
 * Returns an Array of namespace declarations associated
 with the XML Obnject in the context of its parent.
 * @return {Array} an Array of namespace declarations associated  with the XML Obnject in the context of its parent.
 */
XML.prototype.namespaceDeclarations = function() {};

/**
 * Returns the type of the XML object, such
 as <i>text</i>, <i>comment</i>, <i>processing-instruction</i>,
 or <i>attribute</i>.
 * @return {String} the type of the XML object.
 */
XML.prototype.nodeKind = function() {};

/**
 * Merges adjacent text nodes and eliminates and eliminates
 empty text nodes for this XML object and all its
 descendents.
 * @return {XML} the normalized XML object.
 */
XML.prototype.normalize = function() {};

/**
 * Returns the parent of the XML object
 or null if the XML object does not have
 a parent.
 * @return {Object} the parent of the XML object  of null if the XML object does not have  a parent.
 */
XML.prototype.parent = function() {};

/**
 * Inserts the specified child into this XML object
 prior to its existing XML properties and then returns
 this XML object.
 * @param {Object} value - the child to prepend to this  XML object.
 * @return {XML} the XML object updated with the prepended child.
 */
XML.prototype.prependChild = function(value) {};

/**
 * Returns an XMLList containing all the children of this XML object
 that are processing-instructions.
 * @return {XMLList} an XMLList containing all the children of this XML object  that are processing-instructions.
 */
XML.prototype.processingInstructions = function() {};

/**
 * Returns an XMLList containing all the children of this XML object
 that are processing-instructions with the specified <i>name</i>. If you
 use * for the name, all processing-instructions are returned.
 * @param {String} name - the name representing the processing-instructions  you want to retreive.
 * @return {XMLList} an XMLList containing all the children of this XML object  that are processing-instructions with the specified <i>name</i>.
 */
XML.prototype.processingInstructions = function(name) {};

/**
 * Returns a Boolean indicating whether the specified
 <i>property</i> will be included in the set of properties iterated
 over when this XML object is used in a <i>for..in</i> statement.
 * @param {String} property - the property to test.
 * @return {Boolean} true when the property can be iterated in a <i>for..in</i>  statement, false otherwise.
 */
XML.prototype.propertyIsEnumerable = function(property) {};

/**
 * Removes the specified namespace from the in scope namespaces
 of this object and all its descendents, then returns a copy of
 this XML object. This method will not remove a namespace from
 an object when it is referenced by that object's QName or
 the ONames of that object's attributes.
 * @param {Namespace} ns - the namespace to remove.
 * @return {XML} a copy of this XML object with the namespace removed.
 */
XML.prototype.removeNamespace = function(ns) {};

/**
 * Replaces the XML properties of this XML object specified by
 <i>propertyName</i> with <i>value</i> and returns this
 updated XML object. If this XML object contains no properties
 that match <i>propertyName</i>, the replace method returns without
 modifying this XML object.

 The <i>propertyName</i> parameter may be a numeric property name,
 an unqualified name for a set of XML elements, a qualified
 name for a set of XML elements or the properties wildcard *.

 When the <i>propertyName</i> parameter is an unqualified name,
 it identifies XML elements in the default namespace. The <i>value</i>
 parameter may be an XML object, XMLList object or any value
 that may be converted to a String.
 * @param {String} propertyName - a numeric property name,  an unqualified name for a set of XML elements, a qualified  name for a set of XML elements or the properties wildcard *.
 * @param {Object} value - an XML object, XMLList object or any value  that may be converted to a String.
 * @return {XML} the updated XML object.
 */
XML.prototype.replace = function(propertyName, value) {};

/**
 * Replaces the XML properties of this XML object
 with a new set of XML properties from <i>value</i>.
 * @param {Object} value - a single XML object or an XMLList.
 * @return {XML} the updated XML object.
 */
XML.prototype.setChildren = function(value) {};

/**
 * Replaces the local name of this XML object with
 a string constructed from the specified <i>name</i>.
 * @param {String} name - the new local name.
 */
XML.prototype.setLocalName = function(name) {};

/**
 * Replaces the name of this XML object with a
 QName or AttributeName constructed from the specified
 <i>name</i>.
 * @param {String} name - the new name of this XML object.
 */
XML.prototype.setName = function(name) {};

/**
 * Replaces the namespace associated with the name of
 this XML object with the specified <i>namespace</i>.
 * @param {Namespace} ns - the namespace to associated with the  name of thix XML object.
 */
XML.prototype.setNamespace = function(ns) {};

/**
 * Restores the default settings for the following XML
 properties:
 <ul>
 <li>XML.ignoreComments = true</li>
 <li>XML.ignoreProcessingInstructions = true</li>
 <li>XML.ignoreWhitespace = true</li>
 <li>XML.prettyIndent = 2</li>
 <li>XML.prettyPrinting = true</li>
 </ul>
 * @static
 */
XML.setSettings = function() {};

/**
 * Updates the collection of global XML properties:
 ignoreComments, ignoreProcessingInstructions, ignoreWhitespace,
 prettyPrinting, prettyIndent, and prettyPrinting.
 * @param {Object} settings - an object with each of the following properties:  ignoreComments, ignoreProcessingInstructions, ignoreWhitespace,  prettyIndent, and prettyPrinting.
 * @static
 */
XML.setSettings = function(settings) {};

/**
 * Returns the collection of global XML properties:
 ignoreComments, ignoreProcessingInstructions, ignoreWhitespace,
 prettyPrinting, prettyIndent, and prettyPrinting.
 * @return {Object} an object with each of the following properties:  ignoreComments, ignoreProcessingInstructions, ignoreWhitespace,  prettyIndent, and prettyPrinting.
 * @static
 */
XML.settings = function() {};

/**
 * Returns returns an XMLList containing all XML properties of
 this XML object that represent XML text nodes.
 * @return {XMLList} an XMLList containing all XML properties of  this XML object that represent XML text nodes.
 */
XML.prototype.text = function() {};

/**
 * Returns the String representation of the XML object. If the object contains
  simple content, this method returns a String with tag, attributes, and
  namespace declarations removed. However, if the object contains complex
  content, this method returns an XML encoded String representing the entire
  XML object. If you want to return the entire XML object regardless of
  content complexity, use the <i>toXMLString()</i> method.
 * @return {String} the String representation of the XML object.
 */
XML.prototype.toString = function() {};

/**
 * Returns a XML-encoded String representation of the XML object, including tag and
 attributed delimiters.
 * @return {String} the string representation of the XML object.
 */
XML.prototype.toXMLString = function() {};

/**
 * Returns this XML object.
 * @return {XML} this XML object.
 */
XML.prototype.valueOf = function() {};

/**
 * Creates a new XMLList object using the
 specified <i>value</i>.
 * @class
 * @extends Object
 * @param {Object} value - the value to use.
 */
function XMLList(value) {};
XMLList.prototype = new Object();

/**
 * Returns the attribute associated with this XMLList object that
 is identified by the specified name.
 * @param {String} attributeName - the name of the attribute.
 * @return {XMLList} the value of the attribute as either an XMLList or an empty XMLList
 */
XMLList.prototype.attribute = function(attributeName) {};

/**
 * Returns an XMList of the attributes in this XMLList Object.
 * @return {XMLList} an XMList of the attributes in this XMLList Object.
 */
XMLList.prototype.attributes = function() {};

/**
 * Returns the children of the XMLList object based on the specified
 property name.
 * @param {Object} propertyName - the property name representing the  children of this XMLList object.
 * @return {XMLList} an XMLList of children that match the property name  parameter.
 */
XMLList.prototype.child = function(propertyName) {};

/**
 * Returns an XMLList containing the children of this XMLList object, maintaing
 the sequence in which they appear.
 * @return {XMLList} an XMLList containing the children of this XMLList object.
 */
XMLList.prototype.children = function() {};

/**
 * Returns the properties of the XMLList object that contain comments.
 * @return {XMLList} properties of the XMLList object that contain comments.
 */
XMLList.prototype.comments = function() {};

/**
 * Returns true if this XMLList object contains the specified
 XML object, false otherwise.
 * @param {XML} value - the object to locate in this XMLList object.
 * @return {Boolean} true if this XMLList object contains the specified  XML object, false otherwise.
 */
XMLList.prototype.contains = function(value) {};

/**
 * Returns a deep copy of the this XMLList object.
 * @return {XMLList} the deep copy of the object.
 */
XMLList.prototype.copy = function() {};

/**
 * Calls the <i>descendants()</i> method of each XML object in this XMLList
 object and returns an XMLList containing the
 results concatenated in order.
 * @return {XMLList} a list of all descendents of the XML objects in this XMLList object.
 */
XMLList.prototype.descendants = function() {};

/**
 * Calls the <i>descendants(name)</i> method of each XML object in this XMLList
 object and returns an XMLList containing the
 results concatenated in order.
 * @param {String} name - the name of the element to match. To return all descendents,  use * as the <i>name</i> parameter.
 * @return {XMLList} a list of all descendents of the XML objects in this XMLList  constrained by the <i>name</i> parameter.
 */
XMLList.prototype.descendants = function(name) {};

/**
 * Calls the <i>elements()</i> method in each XML object in this XMLList
 object and returns an XMLList containing the results concatenated in order.
 * @return {XMLList}
 */
XMLList.prototype.elements = function() {};

/**
 * Calls the <i>elements(name)</i> method in each of the XML objects in
 this XMLList object and returns an XMLList containing the results
 concatenated in order. <i>name</i> can be a
 QName, String, or any other data type that will be converted
 to a string prior to performing the search for elements of that
 name.

 To list all objects use * for the value of <i>name</i>.
 * @param {Object} name - the name of the elements to return.
 * @return {XMLList} a list of all elements of the XML objects in this XMLList  constrained by the <i>name</i> parameter.
 */
XMLList.prototype.elements = function(name) {};

/**
 * Returns a Boolean value indicating whether
 this XMLList object contains complex content. An XMLList object is considered
 to contain complex content if it is not empty, contains a single XML item
 with complex content or contains elements.
 * @return {Boolean} a Boolean value indicating whether this XMLList object contains complex content.
 */
XMLList.prototype.hasComplexContent = function() {};

/**
 * Returns a Boolean value indicating whether this object has the
 property specified by <i>prop</i>.
 * @param {String} prop - the property to locate.
 * @return {Boolean} true if the property exists, false otherwise.
 */
XMLList.prototype.hasOwnProperty = function(prop) {};

/**
 * Returns a Boolean value indicating whether this XML object contains
 simple content. An XMLList object is considered to contain simple
 content if it is empty, contains a single XML item with simple
 content or contains no elements.
 * @return {Boolean} a Boolean value indicating whether this XML object contains  simple content.
 */
XMLList.prototype.hasSimpleContent = function() {};

/**
 * Returns the number of children in this XMLList
 object.
 * @return {Number} the number of children in this XMLList  object.
 */
XMLList.prototype.length = function() {};

/**
 * Puts all text nodes in this XMLList, all the XML objects it
 contains and the descendents of all the XML objects it
 contains into a normal form by merging adjacent text nodes
 and eliminating empty text nodes.
 * @return {XMLList} the XMLList object containing normailzed objects.
 */
XMLList.prototype.normalize = function() {};

/**
 * Returns the parent of the XMLList object
 or null if the XMLList object does not have
 a parent.
 * @return {Object} the parent of the XMLList object  or null if the XMLList object does not have  a parent.
 */
XMLList.prototype.parent = function() {};

/**
 * Calls the <i>processingInstructions()</i> method of each XML object
 in this XMLList object and returns an XMList containing the results
 in order.
 * @return {XMLList} an XMLList contaiing the result of calling the  <i>processingInstructions()</i> method of each XML object  in this XMLList object.
 */
XMLList.prototype.processingInstructions = function() {};

/**
 * Calls the <i>processingInstructions(name)</i> method of each XML object
 in this XMLList object and returns an XMList containing the results
 in order.
 * @param {String} name - the name representing the processing-instructions  you want to retreive.
 * @return {XMLList} an XMLList containing the result of calling the  <i>processingInstructions(name)</i> method of each XML object  in this XMLList object.
 */
XMLList.prototype.processingInstructions = function(name) {};

/**
 * Returns a Boolean indicating whether the specified
 <i>property</i> will be included in the set of properties iterated
 over when this XML object is used in a <i>for..in</i> statement.
 * @param {String} property - the property to test.
 * @return {Boolean} true when the property can be iterated in a <i>for..in</i>  statement, false otherwise.
 */
XMLList.prototype.propertyIsEnumerable = function(property) {};

/**
 * Calls the <i>text()</i> method of each XML object contained
 in this XMLList object and returns an XMLList containing
 the results concatenated in order.
 * @return {XMLList} the concatenated results of calling the <i>text()</i>  method of every XML object contained in this XMLList.
 */
XMLList.prototype.text = function() {};

/**
 * Returns the String representation of this XMLList object.
 * @return {String} the String representation of this XMLList object.
 */
XMLList.prototype.toString = function() {};

/**
 * Returns an XML-encoded String representation of the XMLList object
 by calling the <i>toXMLString</i> method on each property contained
 within this XMLList object.
 * @return {String} an XML-encoded String representation of the XMLList object  by calling the <i>toXMLString</i> method on each property contained  within this XMLList object.
 */
XMLList.prototype.toXMLString = function() {};

/**
 * Returns this XMLList object.
 * @return {XMLList} this XMLList object.
 */
XMLList.prototype.valueOf = function() {};

/**
 *
 * @class
 * @extends Error
 */
function XMLStreamError() {};
XMLStreamError.prototype = new Error();

/**
 * If the exception is associated with a root cause, the property
 contains the full name of the associated Java exception.
 * @type String
 * @memberOf XMLStreamError
 */
XMLStreamError.causeFullName = '';

/**
 * If the exception is associated with a root cause, the property
 contains the message of the associated Java exception.
 * @type String
 * @memberOf XMLStreamError
 */
XMLStreamError.causeMessage = '';

/**
 * If the exception is associated with a root cause, the property
 contains the simplified name of the associated Java exception.
 * @type String
 * @memberOf XMLStreamError
 */
XMLStreamError.causeName = '';

/**
 * The full name of the underlying Java exception.
 * @type String
 * @memberOf XMLStreamError
 */
XMLStreamError.javaFullName = '';

/**
 * The message of the underlying Java exception.
 * @type String
 * @memberOf XMLStreamError
 */
XMLStreamError.javaMessage = '';

/**
 * The simplified name of the underlying Java exception.
 * @type String
 * @memberOf XMLStreamError
 */
XMLStreamError.javaName = '';

/**
 * The column number where the error occured.
 * @type Number
 * @memberOf XMLStreamError
 */
XMLStreamError.xmlColumnNumber = 0;

/**
 * The line where the error occured.
 * @type Number
 * @memberOf XMLStreamError
 */
XMLStreamError.xmlLineNumber = 0;

exports.dw = dw;
